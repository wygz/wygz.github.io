<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>6月月赛 - F</title>
      <link href="/2020/06/12/6%E6%9C%88%E6%9C%88%E8%B5%9B%20F/"/>
      <url>/2020/06/12/6%E6%9C%88%E6%9C%88%E8%B5%9B%20F/</url>
      
        <content type="html"><![CDATA[<h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>对于一个值域为 $[1,K]$ 的正整数序列，定义它是有魅力的，当且仅当其中存在一个子区间恰好是 $[1,K]$ 的排列。</p><p>现给定一个长度为 $m$ 的正整数序列 $\{a_m\}$，在所有长度为 $n$ 且有魅力的序列中，统计 $\{a_m\}$ 作为子区间出现的总次数，顺序也要求一致。答案对 $10^9+7$ 取模。</p><p>范围：$1\le m\le n\le 25000，1\le K\le 400，1\le a_i\le K$</p><a id="more"></a><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>首先，如果不考虑一个序列是否有魅力，那么 $\{a_m\}$ 的总出现次数为 $(n-m+1)\cdot K^{n-m}$，这是因为子区间共有 $n-m+1$ 个位置可放，剩余 $n-m$ 个数各有 $K$ 种取值。</p><p>所以我们只要计算<strong>没有魅力的序列里，$\{a_m\}$ 的总出现次数</strong>，最后减一下即可。有魅力的序列要求存在一个子区间是 $[1,K]$ 的排列，而没有魅力的序列要求任何连续 $K$ 个数都有相同的，即连续互不相同的数 $&lt;K$ 个。这样容斥会更划算一些。</p><p>① 如果 $\{a_m\}$ 中存在两数相同，那么往左右两边延伸的时候，起始的 <strong>最长连续互不相同长度</strong> 已经确定了，记这个值为 $x$（也就是说，如果向左延伸，$\exists 1\le i\le x，a_{x+1}=a_i$，而且 $a_1$ 到 $a_x$ 互不相同）</p><p>假设 $dp[i][j]$ 表示延伸长度 $i$，最长连续互不相同长度为 $j$（含 $i$，所以 $j$ 与 $i$ 的大小关系没有限制，但 $j&lt;K$）的方案数。只需考虑延伸出来的部分，而在 $\{a_m\}$ 内的 $x$ 个数互不相同，具体值已经不重要了。</p><p>考虑下一个数填什么，转移：$dp[i][j]\cdot (K-j) \rightarrow dp[i+1][j+1]，dp[i][j]\rightarrow dp[i+1][j’]（j’\le j）$</p><p>后者可以用后缀和优化，时间复杂度 $\mathcal O(nK)$</p><p>向左向右延伸，要做 $2$ 遍 DP，再枚举 $\{a_m\}$ 出现的位置，统计一下就好了。</p><p>② 如果 $\{a_m\}$ 本身是有魅力的，那么没有魅力的序列里 $\{a_m\}$ 的总出现次数为 $0$，即直接输出 $(n-m+1)\cdot K^{n-m}$</p><p>做完以上两种，你已经可以获得可观的 <del>隐藏</del> 部分分了。剩余部分我觉得挺巧妙的。</p><p>③ 如果 $\{a_m\}$ 中所有数两两不同，那具体是什么数已经不重要了，我们只关心 $n,m,K$ 的值。所有的 $\{a_m\}$ 地位相同，一共有 $K(K-1)…(K-m+1)$ 种 $\{a_m\}$，只要计算 <strong>所有没有魅力的序列里，长度为 $m$、内部数都互不相同的子区间总个数</strong>，再除以 $K(K-1)…(K-m+1)$ 即可。</p><p>做法和之前的 DP 差不多，额外记录 $f[i][j]$ 表示 $i,j$ 条件相同时，符合上述条件的子区间总个数。这里只考虑前 $i$ 位，后面的 $n-i$ 位产生的方案数不考虑在内（这里和有些数位 DP 写法不同，因为后 $n-i$ 位方案数难以计算）</p><p>$f$ 与 $dp$ 有相同的转移方程，所以还要算后缀和。另外，当 $j\le m$ 时，$dp[i][j]\rightarrow f[i][j]$</p><p>最后的 $\sum f[n][j]$ 即为所求，其实后缀和已经帮我们算好了。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>三种情况 + DP 都分开写了，感觉比较清楚，供大家参考：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">25010</span>;</span><br><span class="line"><span class="keyword">int</span> n,K,m,a[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][maxn][<span class="number">410</span>],s[<span class="number">2</span>][maxn][<span class="number">410</span>],ans,sum,tmp,s2;</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">410</span>],fs[maxn][<span class="number">410</span>];</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">410</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> op,<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp[op],<span class="number">0</span>,<span class="keyword">sizeof</span>(dp[op])); <span class="built_in">memset</span>(s[op],<span class="number">0</span>,<span class="keyword">sizeof</span>(s[op]));</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f)); <span class="built_in">memset</span>(fs,<span class="number">0</span>,<span class="keyword">sizeof</span>(fs));</span><br><span class="line">    dp[op][<span class="number">0</span>][len]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=len;i&gt;=<span class="number">0</span>;i--) s[op][<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;K;j++) &#123;</span><br><span class="line">            dp[op][i][j]=(ll)dp[op][i<span class="number">-1</span>][j<span class="number">-1</span>]*(K-j+<span class="number">1</span>)%mod;</span><br><span class="line">            update(dp[op][i][j],s[op][i<span class="number">-1</span>][j]);</span><br><span class="line">            </span><br><span class="line">            f[i][j]=(ll)f[i<span class="number">-1</span>][j<span class="number">-1</span>]*(K-j+<span class="number">1</span>)%mod;</span><br><span class="line">            update(f[i][j],fs[i<span class="number">-1</span>][j]);</span><br><span class="line">            <span class="keyword">if</span> (j&gt;=m) update(f[i][j],dp[op][i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=K;j&gt;=<span class="number">1</span>;j--) &#123;</span><br><span class="line">            s[op][i][j]=(s[op][i][j+<span class="number">1</span>]+dp[op][i][j])%mod;</span><br><span class="line">            fs[i][j]=(fs[i][j+<span class="number">1</span>]+f[i][j])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"f.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"f.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">bool</span> flag,ok=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(K); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i+K<span class="number">-1</span>&lt;=m;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=K;j++) vis[j]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;=i+K<span class="number">-1</span>;j++) vis[a[j]]=<span class="number">1</span>;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=K;j++) <span class="keyword">if</span> (!vis[j]) &#123; flag=<span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123; ok=<span class="number">1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sum=ksm(K,n-m)*(n-m+<span class="number">1</span>)%mod;</span><br><span class="line">    <span class="keyword">if</span> (ok) &#123; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">    ok=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[a[i]]) &#123; ok=<span class="number">1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">        vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[a[i]]) &#123; x=i<span class="number">-1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">            vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=m;i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[a[i]]) &#123; y=m-i; <span class="keyword">break</span>; &#125;</span><br><span class="line">            vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        solve(<span class="number">0</span>,x),solve(<span class="number">1</span>,y);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i+m&lt;=n;i++) &#123;</span><br><span class="line">            tmp=(ll)s[<span class="number">0</span>][i][<span class="number">1</span>]*s[<span class="number">1</span>][n-i-m][<span class="number">1</span>]%mod;</span><br><span class="line">            update(ans,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        solve(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        tmp=fs[n][<span class="number">1</span>];</span><br><span class="line">        s2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=K;i&gt;=K-m+<span class="number">1</span>;i--)</span><br><span class="line">            s2=(ll)s2*i%mod;</span><br><span class="line">        s2=ksm(s2,mod<span class="number">-2</span>);</span><br><span class="line">        ans=(ll)tmp*s2%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    update(sum,mod-ans);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小明OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 组合计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISIJ Trial Tour - 4. Sweets</title>
      <link href="/2020/06/12/ISIJ%E6%B5%8B%E8%AF%95%E8%B5%9B4.Sweets/"/>
      <url>/2020/06/12/ISIJ%E6%B5%8B%E8%AF%95%E8%B5%9B4.Sweets/</url>
      
        <content type="html"><![CDATA[<h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>给定 $N,a,b,c$，要求 $ia+jb+kc\le N$，求 $ijk$ 最大值</p><p>范围：$1\le N,a,b,c\le 10^9$</p><a id="more"></a><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>真是充分体现多次提交的欢乐之处啊……</p><p>猜测 $ia,jb,kc$ 比较接近，令 $i$ 在 $\frac {n}{3a}$ 左右，再令 $j$ 在 $\frac {n-ia}{2b}$ 左右，那 $k$ 就直接解出来了。不妨写个暴力吧，就有 80 分左右了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,a,b,c;</span><br><span class="line">ll A,B,C;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(a); <span class="built_in">read</span>(b); <span class="built_in">read</span>(c);</span><br><span class="line">    <span class="keyword">for</span> (ll i=<span class="built_in">max</span>(<span class="number">0L</span>L,(n/<span class="number">3</span>/a)<span class="number">-1000</span>);i&lt;=n/<span class="number">3</span>/a+<span class="number">1000</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n-i*a&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll j=<span class="built_in">max</span>(<span class="number">0L</span>L,(n-i*a)/<span class="number">2</span>/b<span class="number">-1000</span>);j&lt;=(n-i*a)/<span class="number">2</span>/b+<span class="number">1000</span>;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n-i*a-j*b&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            ll k=n-i*a-j*b; k/=c;</span><br><span class="line">            <span class="keyword">if</span> (ans&lt;i*j*k)</span><br><span class="line">                ans=i*j*k,A=i*a,B=j*b,C=k*c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld %lld\n"</span>,A,B,C);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但有个问题：$a,b,c$ 大小顺序未定。交换 $a,b$ 再跑一遍，把枚举范围从 1000 改到 3000，效果最佳可达 96 分。</p><p>极端情况下，答案会超过 long long，改 long double 精度原因还会导致分数降低。不想写高精度就改 __int128 吧，Yandex 也支持。最后再把 $a,b,c$ 的几种排列都试一下，就有可能在历经千辛万苦之后获得 100 分了。如果 $6$ 种都试，存在 TLE 的风险。</p><p>2019 年测试赛最高（我）玩到 88 分，几天之后大家一起订正才通过的，而当时没有写题解。不知道官方做法是什么，感觉有点好玩，所以想特意分享这段经历。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,a,b,c;</span><br><span class="line">ll A,B,C;</span><br><span class="line">__int128 ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i=<span class="built_in">max</span>(<span class="number">0L</span>L,(n/<span class="number">3</span>/a)<span class="number">-2005</span>);i&lt;=n/<span class="number">3</span>/a+<span class="number">2005</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n-i*a&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll j=<span class="built_in">max</span>(<span class="number">0L</span>L,(n-i*a)/<span class="number">2</span>/b<span class="number">-2005</span>);j&lt;=(n-i*a)/<span class="number">2</span>/b+<span class="number">2005</span>;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n-i*a-j*b&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            ll k=n-i*a-j*b; k/=c;</span><br><span class="line">        __int128 newans=i*j;</span><br><span class="line">        newans*=k;</span><br><span class="line">            <span class="keyword">if</span> (newans&gt;ans) &#123;</span><br><span class="line">                ans=newans,A=i*a,B=j*b,C=k*c;</span><br><span class="line">                <span class="keyword">if</span> (flag==<span class="number">1</span>) swap(A,B);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">2</span>) swap(B,C);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">3</span>) swap(A,C);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">4</span>) swap(A,B),swap(A,C);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(a); <span class="built_in">read</span>(b); <span class="built_in">read</span>(c);</span><br><span class="line">    solve(<span class="number">0</span>);</span><br><span class="line">    swap(a,b);</span><br><span class="line">    solve(<span class="number">1</span>);</span><br><span class="line">    swap(a,b);</span><br><span class="line">    </span><br><span class="line">    swap(b,c);</span><br><span class="line">    solve(<span class="number">2</span>);</span><br><span class="line">    swap(b,c);</span><br><span class="line">    </span><br><span class="line">    swap(a,c);</span><br><span class="line">    solve(<span class="number">3</span>);</span><br><span class="line">    swap(a,c);</span><br><span class="line">    </span><br><span class="line">    swap(a,b);</span><br><span class="line">    swap(a,c);</span><br><span class="line">    solve(<span class="number">4</span>);</span><br><span class="line">    swap(a,b);</span><br><span class="line">    swap(a,c);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld %lld\n"</span>,A,B,C);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ISIJ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>省选模拟 - 拟赛</title>
      <link href="/2020/06/11/%E5%A4%9A%E6%A0%A1%E7%9C%81%E9%80%89%E6%A8%A1%E6%8B%9F%20-%20%E6%8B%9F%E8%B5%9B/"/>
      <url>/2020/06/11/%E5%A4%9A%E6%A0%A1%E7%9C%81%E9%80%89%E6%A8%A1%E6%8B%9F%20-%20%E6%8B%9F%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a9c46bc06dc1dabc6632dd4da8225489decf4635bccae18e9114482a31529b02"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 省选模拟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 基数排序 </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5月月赛进阶组 A 蜗牛爬井</title>
      <link href="/2020/05/30/5%E6%9C%88%E6%9C%88%E8%B5%9B%E8%BF%9B%E9%98%B6%E7%BB%84%20A%20%E8%9C%97%E7%89%9B%E7%88%AC%E4%BA%95/"/>
      <url>/2020/05/30/5%E6%9C%88%E6%9C%88%E8%B5%9B%E8%BF%9B%E9%98%B6%E7%BB%84%20A%20%E8%9C%97%E7%89%9B%E7%88%AC%E4%BA%95/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="4f9e5f3e8310a26b3747ff56d519dffb9347b7fbb6b15731e256600ce1818e83"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 小明OJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISIJ 2019 D1T4 Antimatter</title>
      <link href="/2020/05/13/ISIJ%202019%20D1T4%20Antimatter/"/>
      <url>/2020/05/13/ISIJ%202019%20D1T4%20Antimatter/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="573d4983d810f38333c85dd4804ee32f78ceb83a51731dceab2f37cc3240e1be"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 单调栈 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WQS二分 - 论文学习</title>
      <link href="/2020/05/02/wqs%E4%BA%8C%E5%88%86-%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/05/02/wqs%E4%BA%8C%E5%88%86-%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d57b1a5584747666532a94d7abe6bc1340475d3a408b98cc4cea9ea34c4f4b73"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 斜率优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 高联 四川预赛 第11题</title>
      <link href="/2020/05/01/2019%20%E9%AB%98%E8%81%94%20%E5%9B%9B%E5%B7%9D%E9%A2%84%E8%B5%9B%20%E7%AC%AC11%E9%A2%98/"/>
      <url>/2020/05/01/2019%20%E9%AB%98%E8%81%94%20%E5%9B%9B%E5%B7%9D%E9%A2%84%E8%B5%9B%20%E7%AC%AC11%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>已知函数 $f(x)=x\ln x-ax^2(a\in \mathcal R)$</p><p>(1) 证明：当 <script type="math/tex">1<x<3</script> 时， <script type="math/tex">\frac{f(x)+ax^2-x+2}{(3-x)e^x}>\frac{1}{e^2}</script></p><p>(2) 若函数 $F(x)=|f(x)|(x\in(1,e))$ 有极小值，求 $a$ 的取值范围</p><a id="more"></a><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>(1) 即证：</p><script type="math/tex; mode=display">\frac{x\ln x-x+2}{(3-x)e^{x-2}}>1</script><p>先看分子，求导 $\ln x=0$，即在 $x=1$ 时取最小值 $1$，所以分子最小值 $&gt;1$</p><p>再看分母，求导 $(2-x)e^{x-2}=0$，即在 $x=2$ 时取到 $1$，而由于分母一定 $&gt;0$ 且连续变化，所以 $0&lt;$ 分母 $&lt;1$。</p><p>虽然取等条件不同，但已经得证了。</p><p>(2) 如果 $f(x)$ 可以取到 $0$，那直接满足条件，也就是需要 $x\ln x=ax^2$ 在 $x\in (1,e)$ 有解</p><p>用介值+单调性考虑，显然必须 $a&gt;0$。把 $x=1$ 和 $x=e$ 代入：<script type="math/tex">0<a，1>a\times e</script>，因此 <script type="math/tex">0<a< \frac{1}{e}</script></p><p>如果 $f(x)$ 取不到 $0$，即恒正或恒负，需要存在最大值或最小值。也就是求导 $\ln x+1=2ax$ 在 $x\in (0,e)$ 有解。</p><p>还是介值，要么 $1<2a，2>2a\cdot e$（但 $a&lt;\frac 1e$ 已经讨论过了），要么 $1&gt;2a，2<2a\cdot e$（$e>2$，可行）。所以 $\frac 1e&lt;a&lt;\frac 12$，注意边界都不能取到。</p><p>综上，$0&lt;a&lt;\frac {1}{e}$ 或 $\frac {1}{e} &lt;a &lt;\frac {1}{2}$。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>省选模拟 - 裂变链接</title>
      <link href="/2020/04/24/%E8%A3%82%E5%8F%98%E9%93%BE%E6%8E%A5ShatteredConnexion/"/>
      <url>/2020/04/24/%E8%A3%82%E5%8F%98%E9%93%BE%E6%8E%A5ShatteredConnexion/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9f31384d556d2143f0a7115edce353514e67af7d707bc3ffe580c225b893cc8f"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 省选模拟 </tag>
            
            <tag> 斯特林数 </tag>
            
            <tag> NTT </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UOJ#19 B 通用测评号</title>
      <link href="/2020/04/21/UOJ19%20B%20%E9%80%9A%E7%94%A8%E6%B5%8B%E8%AF%84%E5%8F%B7/"/>
      <url>/2020/04/21/UOJ19%20B%20%E9%80%9A%E7%94%A8%E6%B5%8B%E8%AF%84%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>链接：</p><ul><li><a href="http://uoj.ac/contest/51/problem/514" target="_blank" rel="noopener">http://uoj.ac/contest/51/problem/514</a></li><li><a href="http://peehs-moorhsum.blog.uoj.ac/blog/5486" target="_blank" rel="noopener">http://peehs-moorhsum.blog.uoj.ac/blog/5486</a></li></ul><h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>往 $n$ 个框里放球，一个框达到 $b$ 个球则称为半满，达到 $a$ 个球则称为满。每次在所有不满的框里随机一个，放入 $1$ 个球，如果所有框都半满则结束。求最后满的框个数期望，对 998244353 取模。</p><a id="more"></a><p>范围：$1\le n,a,b\le 250，b\le a$</p><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><blockquote><p>题解算法二不是很懂；算法三写得比较简略，这里补充一些细节。</p></blockquote><p>一个框满了接着放，还是满的，可以认为是每次随机选择一个框放球，而忽略掉只选择没放满的框子的限制。</p><p>计算$1$号框在全部半满之前满的概率，最终答案只要乘以$n$即可。</p><p>考虑在$1$号框满之前没有半满的集合$S\neq \emptyset$</p><p>定义方案：放的球个数，以及每一步的球放在哪个框。</p><p>如果放的球数 $j$ 已经确定，再确定每个框内的球数 $a_1,a_2,…,a_n$，要求$\sum_{i=1}^n a_i=j$</p><p>那么方案数为：</p><script type="math/tex; mode=display">\frac {j!}{a_1!a_2!...a_n!}</script><p>设 $f[i][j]$ 表示考虑当前 $|S|=i$ 且共放 $j$ 个球的方案数，初值 $f[0][a-1]=\frac {1}{(a-1)!}$</p><p>转移：$f[i+1][j+k]\leftarrow f[i][j]\cdot \frac {1}{k!}$，真实值需要乘上 $j!$</p><p>由于 $i \in[0,n-1]，j\in [0,i\cdot (b-1)+a]，k\in[0,b-1]$，暴力是 $\mathcal O(n^4)$ 的，所以每次 $i\rightarrow i+1$ 都要 NTT 卷积优化，这样复杂度 $\mathcal O(n^3 \log n)$。</p><p>所以当 $|S|=i$ 时概率为 $\sum \frac {f[i][j]}{(i+1)^{j+1}}$，意思是这 $j+1$ 个球都完美无误地放在了我们所要的框里。</p><p>因为 $S$ 存在包含关系，所以最后还要容斥一下，乘上 $\binom {n-1}i$ 计入答案。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>先贴个暴力 $20$ 分的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">3e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,a,b,tot;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; M;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d,t[maxn];</span><br><span class="line"><span class="keyword">int</span> id[maxn],sum[maxn];</span><br><span class="line">ll iv[maxn],dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum[x]&gt;sum[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;n) &#123;</span><br><span class="line">        M[d]=++tot;</span><br><span class="line">        t[tot]=d;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) sum[tot]+=d[i];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;<span class="number">1</span>) L=d[x<span class="number">-2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=L;i&lt;=a;i++)</span><br><span class="line">        d[x<span class="number">-1</span>]=i,dfs(x+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    iv[<span class="number">0</span>]=iv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)</span><br><span class="line">        iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">read</span>(a); <span class="built_in">read</span>(b);</span><br><span class="line">    d.resize(n);</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> x,y,cnt,mn;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) id[i]=i;</span><br><span class="line">    sort(id+<span class="number">1</span>,id+tot+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> I=<span class="number">1</span>;I&lt;=tot;I++) &#123;</span><br><span class="line">        x=id[I];</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        mn=a+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[x][i]&lt;a) cnt++;</span><br><span class="line">            mn=<span class="built_in">min</span>(mn,t[x][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mn&gt;=b) &#123;</span><br><span class="line">            dp[x]=n-cnt;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[x][i]==a) <span class="keyword">continue</span>;</span><br><span class="line">            d=t[x];</span><br><span class="line">            d[i]++;</span><br><span class="line">            sort(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>());</span><br><span class="line">            y=M[d];</span><br><span class="line">            dp[x]+=dp[y]*iv[cnt]%mod;</span><br><span class="line">            dp[x]%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是正解，没过 hack 数据，听说有 $\mathcal O(n^3)$ 做法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">260</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">1.5e5</span>;</span><br><span class="line"><span class="keyword">int</span> n,a,b,NN,rev[maxm];</span><br><span class="line">ll iv[maxm],ivjc[maxm],jc[maxm],f[<span class="number">2</span>][maxm];</span><br><span class="line">ll B[maxm],IV,ans,sum[maxn],tmp;</span><br><span class="line"><span class="keyword">int</span> mi[maxn][maxm];</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">ll ycl[maxm],ycr[maxm];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    NN=<span class="number">1</span>; <span class="keyword">int</span> lg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (NN&lt;=n) NN*=<span class="number">2</span>,lg++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=NN;i++) &#123;</span><br><span class="line">        rev[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>,ii=i;j&lt;=lg;j++,ii/=<span class="number">2</span>)</span><br><span class="line">            rev[i]=rev[i]*<span class="number">2</span>+(ii%<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    IV=ksm(NN,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">1</span>;<span class="built_in">step</span>&lt;NN;<span class="built_in">step</span>*=<span class="number">2</span>) &#123;</span><br><span class="line">        ycl[<span class="built_in">step</span>]=ksm(<span class="number">3</span>,(mod<span class="number">-1</span>)/(<span class="built_in">step</span>*<span class="number">2</span>));</span><br><span class="line">        ycr[<span class="built_in">step</span>]=ksm(ycl[<span class="built_in">step</span>],mod<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(ll *a,<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[maxm];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NN;i++) &#123;</span><br><span class="line">        tmp[rev[i]]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">1</span>;<span class="built_in">step</span>&lt;NN;<span class="built_in">step</span>*=<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">//ll wn=ksm(3,(mod-1)/(step*2));</span></span><br><span class="line">        ll wn=ycl[<span class="built_in">step</span>];</span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="number">-1</span>) wn=ycr[<span class="built_in">step</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NN;i+=<span class="built_in">step</span>*<span class="number">2</span>) &#123;</span><br><span class="line">            ll w=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=i;k&lt;i+<span class="built_in">step</span>;k++) &#123;</span><br><span class="line">                ll u=tmp[k],v=tmp[k+<span class="built_in">step</span>]*w%mod;</span><br><span class="line">                tmp[k]=(u+v)%mod; tmp[k+<span class="built_in">step</span>]=(u-v+mod)%mod;</span><br><span class="line">                w=w*wn%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NN;i++) a[i]=tmp[i];</span><br><span class="line">    <span class="keyword">if</span> (flag==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NN;i++)</span><br><span class="line">            a[i]=a[i]*IV%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;y||y&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> jc[x]*ivjc[y]%mod*ivjc[x-y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll &amp;x,ll y)</span> </span>&#123; x=(x+y)%mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    iv[<span class="number">0</span>]=iv[<span class="number">1</span>]=jc[<span class="number">0</span>]=jc[<span class="number">1</span>]=ivjc[<span class="number">0</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxm;i++) &#123;</span><br><span class="line">        jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++) &#123;</span><br><span class="line">        mi[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;maxm;j++)</span><br><span class="line">            mi[i][j]=(ll)mi[i][j<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(a); <span class="built_in">read</span>(b);</span><br><span class="line">    f[<span class="number">0</span>][a<span class="number">-1</span>]=ivjc[a<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        init(i*b+a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b;j++) B[j]=ivjc[j];</span><br><span class="line">        fft(f[i&amp;<span class="number">1</span>^<span class="number">1</span>],<span class="number">1</span>); fft(B,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;NN;j++) f[i&amp;<span class="number">1</span>][j]=f[i&amp;<span class="number">1</span>^<span class="number">1</span>][j]*B[j]%mod,B[j]=<span class="number">0</span>;</span><br><span class="line">        fft(f[i&amp;<span class="number">1</span>],<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=a<span class="number">-1</span>;j&lt;=i*(b<span class="number">-1</span>)+a;j++) &#123;</span><br><span class="line">            update(sum[i],f[i&amp;<span class="number">1</span>][j]*jc[j]%mod*mi[i+<span class="number">1</span>][j+<span class="number">1</span>]%mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        tmp=sum[i]*C(n<span class="number">-1</span>,i)%mod;</span><br><span class="line">        <span class="keyword">if</span> (i&amp;<span class="number">1</span>^<span class="number">1</span>) tmp=mod-tmp;</span><br><span class="line">        update(ans,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans*n%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合计数 </tag>
            
            <tag> 概率期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1332E Height All the Same</title>
      <link href="/2020/04/12/CF1332E%20Height%20All%20the%20Same/"/>
      <url>/2020/04/12/CF1332E%20Height%20All%20the%20Same/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/contest/1332/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/1332/problem/E</a></p><h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>一个 $n\times m$ 的矩阵 $a_{i,j}$，每次可以选择一个格子$+2$，或两个相邻格子同时$+1$。现在要求通过有限次操作能使所有 $a_{i,j}$ 都相等，在 $L\le a_{i,j}\le R$ 的限制下，求这样的矩阵个数，对 998244353 取模。</p><a id="more"></a><p>范围：$1\le n,m,L,R\le 10^9，L\le R，n\times m \ge 2$</p><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>第一个观察是和奇偶性有关，因为我们只要让所有$a_{i,j}$都是奇数或偶数就好了。而将$2$个相邻格子同时$+1$，意味着可以同时修改任$2$个格子的奇偶性，只要沿着路径翻转即可。因此，记 $x$ 为 $[L,R]$ 的偶数个数，$y$ 为 $[L,R]$ 的奇数个数。</p><p>第二个观察是和 $n,m$ 无关，和 $N=n\times m$ 有关。<strong>当 $N$ 为奇数时</strong>，矩阵中偶数的个数为偶，或奇数的个数为偶。相应地，把所有偶数配对改成奇数，或把所有奇数配对改成偶数。这样所有数奇偶性全相同了，任何初始矩阵皆可。注意：此时不能用总和做，因为总和的奇偶性取决于最终全局的奇偶性，可以调整。</p><p><strong>当 $N​$ 为偶数时</strong>，奇数可能有偶数个，也可能有奇数个。若有<strong>偶数个奇数</strong>，同上可以；若有奇数个奇数，总和始终为奇，显然不行。强制奇数的个数为偶，再套二项式定理即可。</p><script type="math/tex; mode=display">\begin{gather*}ANS=\sum_{i=0,2\mid (N-i)}^N \binom Nix^iy^{N-i} \\(x+y)^N=\sum_{i=0}^N\binom Ni x^i y^{N-i} \\(x-y)^N=\sum_{i=0,2\mid (N-i)}^N\binom Ni x^i y^{N-i}-\sum_{i=0,2\nmid(N-i)}^N\binom Nix^iy^{N-i} \\\Rightarrow ANS=\frac 12((x+y)^N+(x-y)^N)\end{gather*}</script><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>直接输出答案的 E 题——有点不爽</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;<span class="number">0</span>) x+=mod;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m,N,L,R,ans,x,y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m); <span class="built_in">read</span>(L); <span class="built_in">read</span>(R); N=n*m;</span><br><span class="line">    x=R/<span class="number">2</span>-(L<span class="number">-1</span>)/<span class="number">2</span>; y=R-L+<span class="number">1</span>-x;</span><br><span class="line">    <span class="keyword">if</span> (N%<span class="number">2</span>==<span class="number">1</span>) ans=ksm(x+y,N);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ans=ksm(x+y,N)+ksm(x-y,N);</span><br><span class="line">        ans%=mod;</span><br><span class="line">        <span class="keyword">if</span> (N%<span class="number">2</span>==<span class="number">0</span>) ans=ans*ksm(<span class="number">2</span>,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合计数 </tag>
            
            <tag> 奇偶性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1334F Strange Function</title>
      <link href="/2020/04/12/CF1334F%20Strange%20Function/"/>
      <url>/2020/04/12/CF1334F%20Strange%20Function/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/contest/1334/problem/F" target="_blank" rel="noopener">https://codeforces.com/contest/1334/problem/F</a></p><h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>$a$ 是个长度为 $n$ 的序列，定义返回值也为序列的函数 $f(a)$：将 $i$ 从 $1$ 循环到 $n$，如果  $a_i&gt;\max_{1\le j&lt;i} a_j$，则把 $a_i$ 插入到 $f(a)$ 末尾。例如：当 $a=[1,3,1,2,6,8,7,7,4,11,10]$ 时，$f(a)=[1,3,6,8,11]$。</p><a id="more"></a><p>现在，给定两个序列 $\{a_n\}$ 和 $\{b_m\}$，以及对于 $\forall 1\le i \le n$ 删除 $a_i$ 所需代价 $c_i$，求使得 $f(a)=b$ 的最小代价和。若无解输出 NO，注意代价可以为负。</p><p>范围：$1\le m \le n\le 5\cdot 10^5，1\le a_i,b_i\le n，|c_i|\le 10^9，b_i&lt;b_{i+1}$</p><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>First Observation：无解很好判；$f(a)$ 说白了和单调栈长得差不多；可以 $\mathcal O(n^2)$ 的二维 DP。</p><p>Second Observation：只有在 $b$ 中出现过的 $a_i$ 才有用，可设 $dp[i]$ 表示仅考虑 $a_1…a_i$， $f(a)$ 以 $a_i$ 结尾的最小代价。DP 顺序是根据 $a_i$ 从小到大，即从 $b_1$ 到 $b_m$，具体实现额外定义 $b_0$ 和 $b_{m+1}$ 分别位于 $a_0$ 和 $a_{n+1}$。</p><p>转移：$dp[j]+s[i-1]-s[j]\Rightarrow dp[i]$，这里 $s[i]$ 表示前 $i$ 个数中钦定要删除的代价 + $c_i$ 为负“留下更优”的前缀和。钦定要删除的：$a_k&gt;a_i$ 的 $c_k$，注意严格大小关系，所以 $s_i$ 可以随便维护。</p><p>记 $pos(x)$ 表示 $b_{pos(x)}=x$，那么还要求 $pos(a_j)+1=pos(a_i)$，从而 $pos(a_j)$ 为定值，可以暴力找出来（而不用数据结构）。扫描线+维护$dp[j]-s[j]$最小值。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>你问我为什么用线段树？别问，问就是忘了可以树状数组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=(<span class="number">1e16</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">5e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn],m,b[maxn],c[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; h[maxn];</span><br><span class="line">ll dp[maxn],d[maxn],tmp;</span><br><span class="line"><span class="keyword">int</span> st[maxn],tot;</span><br><span class="line"><span class="keyword">bool</span> mk[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTree</span> &#123;</span></span><br><span class="line">    ll tr[maxn*<span class="number">4</span>],lazy[maxn*<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!lazy[root]) <span class="keyword">return</span>;</span><br><span class="line">        tr[root*<span class="number">2</span>]+=lazy[root];</span><br><span class="line">        tr[root*<span class="number">2</span>+<span class="number">1</span>]+=lazy[root];</span><br><span class="line">        lazy[root*<span class="number">2</span>]+=lazy[root];</span><br><span class="line">        lazy[root*<span class="number">2</span>+<span class="number">1</span>]+=lazy[root];</span><br><span class="line">        lazy[root]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,ll delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class="line">            tr[root]+=delta;</span><br><span class="line">            lazy[root]+=delta;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        pushdown(root);</span><br><span class="line">        <span class="keyword">if</span> (L&lt;=mid) add(L,R,l,mid,root*<span class="number">2</span>,delta);</span><br><span class="line">        <span class="keyword">if</span> (mid&lt;R) add(L,R,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">        tr[root]=<span class="built_in">max</span>(tr[root*<span class="number">2</span>],tr[root*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x&gt;n) x=n;</span><br><span class="line">        <span class="keyword">if</span> (l==r) <span class="keyword">return</span> tr[root];</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        pushdown(root);</span><br><span class="line">        <span class="keyword">if</span> (x&lt;=mid) <span class="keyword">return</span> query(x,l,mid,root*<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> query(x,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T1;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]),h[a[i]].push_back(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(c[i]);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(b[i]);</span><br><span class="line">    <span class="keyword">int</span> x,pos;</span><br><span class="line">    ll mn;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        x=lower_bound(b+<span class="number">1</span>,b+m+<span class="number">1</span>,a[i])-b;</span><br><span class="line">        <span class="keyword">if</span> (b[x]==a[i]) g[x].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        T1.add(i,n,<span class="number">1</span>,n,<span class="number">1</span>,c[i]);</span><br><span class="line">    g[<span class="number">0</span>].push_back(<span class="number">0</span>);</span><br><span class="line">    g[m+<span class="number">1</span>].push_back(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++) dp[i]=INF;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m+<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=p+<span class="number">1</span>;k&lt;=b[i<span class="number">-1</span>];k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;h[k].<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">            x=h[k][j];</span><br><span class="line">            <span class="keyword">if</span> (!x) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (c[x]&gt;<span class="number">0</span>) T1.add(x,n,<span class="number">1</span>,n,<span class="number">1</span>,-c[x]);</span><br><span class="line">            <span class="keyword">else</span> mk[x]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p=b[i<span class="number">-1</span>];</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;g[i<span class="number">-1</span>].<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">            x=g[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (dp[x]==INF) <span class="keyword">continue</span>;</span><br><span class="line">            st[++tot]=x;</span><br><span class="line">            d[tot]=dp[x]-T1.query(x,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pos=<span class="number">0</span>;</span><br><span class="line">        mn=INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;g[i].<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">            x=g[i][j];</span><br><span class="line">            <span class="keyword">while</span> (pos&lt;tot&amp;&amp;st[pos+<span class="number">1</span>]&lt;=x) &#123;</span><br><span class="line">                mn=<span class="built_in">min</span>(mn,d[pos+<span class="number">1</span>]),pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mn!=INF) &#123;</span><br><span class="line">                tmp=mn-c[x];</span><br><span class="line">                dp[x]=<span class="built_in">min</span>(dp[x],tmp+T1.query(x,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mn=dp[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (mn==INF) <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"YES\n%lld\n"</span>,mn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1334G Substring Search</title>
      <link href="/2020/04/12/CF1334G%20Substring%20Search/"/>
      <url>/2020/04/12/CF1334G%20Substring%20Search/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="https://codeforces.com/contest/1334/problem/G" target="_blank" rel="noopener">https://codeforces.com/contest/1334/problem/G</a></p><h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>给定下标为全体小写字母的排列 $p$，字符串 $s$ 和 $t$。定义 $t$ 的子串 $t’$ 和 $s$ 相同，当且仅当 $|s|=|t’|$，且对 $\forall 1\le i\le |s|$ 满足至少一条：</p><ul><li>$s_i=t’_i$</li><li>$p_{s_i}=t_i’$</li></ul><a id="more"></a><p>求每个 $t’$ 是否和 $s$ 相同，输出这个 $01$ 序列。范围：$2\le |s|\le |t| \le 2\cdot 10^5$。</p><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>出题人大概没想让跑 $52$ 次 FFT 的你通过本题——但正解是基于这个想法的。</p><p>排列会构成环，我们把每个环拆来开考虑，用 $f(c)$ 表示替换字符 $c$ 的复数。记 $c$ 所在环长为 $k$，它在上面排在第 $i$ 个。若这是字符串 $s$，定义 $f(c)=\exp(\frac {2\pi i}{k})$；若这是字符串 $t$，定义 $f(c)=\exp(\frac {\pi-2\pi i}{k})$。那么，当 $s_i$ 与 $t_j$ 匹配时，$f(s_i)\cdot f(t_j)$ 的辐角主值为 $\frac {\pi}{k}$ 或 $-\frac {\pi}k$，实部都是 $\cos(\frac {\pi} k)$。</p><p>这样，把 $s$ 翻转+套FFT，再将实部与 $\sum \cos{\frac {\pi}k}$ 进行比较，就能判断 $t$ 的这一子串是否匹配上了。若有至少一位不对，那差距将会很大，也不需要担心精度误差了。</p><p>唯一的问题是，处于不同环的字符所对应 $i$ 和 $k$ 可能撞车，而好不容易搞定的复数构造又很难再改。于是，我们将 $s$ 和 $t$ 分别替换成字符所在环（给环编个号），用 <del>KMP或者</del> 哈希跑个正常的匹配。把这 $2$ 种方法的答案 AND 起来即可，这也是充要的。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p><img src="\graph\6.png" alt="img" style="zoom:40%;" /></p><p>先是一开始卡常失败的版本，留个纪念：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PIE=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e6</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=(<span class="number">2e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,N,cnt[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">30</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> re,im;</span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">    node (<span class="keyword">double</span> a,<span class="keyword">double</span> b) : re(a),im(b) &#123;&#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) &#123; re=t; im=<span class="number">0</span>; &#125;</span><br><span class="line">    node <span class="keyword">operator</span> + (<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re+t.re,im+t.im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re+t,im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> - (<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re-t.re,im-t.im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re-t,im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> * (<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re*t.re-im*t.im,re*t.im+im*t.re); &#125;</span><br><span class="line">&#125; A[maxn],B[maxn],w[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> nn)</span> </span>&#123;</span><br><span class="line">    N=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (N&lt;=nn) N&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(N&gt;&gt;<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(node *a,<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">if</span> (rev[i]&lt;i) swap(a[i],a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">1</span>,l=N/<span class="number">2</span>;<span class="built_in">step</span>&lt;N;<span class="built_in">step</span>&lt;&lt;=<span class="number">1</span>,l&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i+=<span class="built_in">step</span>&lt;&lt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=i,d=<span class="number">0</span>;k&lt;i+<span class="built_in">step</span>;k++,d+=l) &#123;</span><br><span class="line">                node u=a[k],v=a[k+<span class="built_in">step</span>]*w[flag][d];</span><br><span class="line">                a[k]=u+v; a[k+<span class="built_in">step</span>]=u-v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">            a[i].re/=(<span class="keyword">double</span>)N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d[maxn],e[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c1,c2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) A[i]=<span class="number">0</span>,B[i]=<span class="number">0</span>;</span><br><span class="line">        c1=c2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span> (s[i]-<span class="string">'a'</span>==k) A[n-i+<span class="number">1</span>]=<span class="number">1</span>,c1++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">            <span class="keyword">if</span> (t[i]-<span class="string">'a'</span>==k) B[i]=<span class="number">1</span>,c2++;</span><br><span class="line">        <span class="keyword">if</span> (!c1||!c2) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (c1&lt;INF/c2) &#123;</span><br><span class="line">            c1=c2=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                <span class="keyword">if</span> (s[i]-<span class="string">'a'</span>==k) d[++c1]=n-i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">                <span class="keyword">if</span> (t[j]-<span class="string">'a'</span>==k) e[++c2]=j;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c1;i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c2;j++)</span><br><span class="line">                cnt[d[i]+e[j]-n]++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fft(A,<span class="number">0</span>); fft(B,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) A[i]=A[i]*B[i];</span><br><span class="line">        fft(A,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=m+n;i++)</span><br><span class="line">            cnt[i-n]+=(<span class="keyword">int</span>)(A[i].re+<span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) <span class="built_in">read</span>(p[i]),p[i]--;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    m=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">    init(n+m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> theta=PIE*<span class="number">2</span>*i/N;</span><br><span class="line">        w[<span class="number">0</span>][i]=node(<span class="built_in">cos</span>(theta),<span class="built_in">sin</span>(theta));</span><br><span class="line">        w[<span class="number">1</span>][i]=node(<span class="built_in">cos</span>(-theta),<span class="built_in">sin</span>(-theta));</span><br><span class="line">    &#125;</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        x=s[i]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (p[x]==x) s[i]=<span class="string">'z'</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> s[i]=p[x]+<span class="string">'a'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m-n+<span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">if</span> (cnt[i]==n) <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是跑的飞快的标算，篇幅原因把哈希放到最后了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PIE=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e6</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,N,ans1[maxn],ans2[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">30</span>],d[<span class="number">30</span>],idx[<span class="number">30</span>],cnt,a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">double</span> tmp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> re,im;</span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">    node (<span class="keyword">double</span> a,<span class="keyword">double</span> b) : re(a),im(b) &#123;&#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) &#123; re=t; im=<span class="number">0</span>; &#125;</span><br><span class="line">    node <span class="keyword">operator</span> + (<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re+t.re,im+t.im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re+t,im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> - (<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re-t.re,im-t.im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re-t,im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> * (<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re*t.re-im*t.im,re*t.im+im*t.re); &#125;</span><br><span class="line">&#125; A[maxn],B[maxn],C[maxn],D[maxn],w[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> nn)</span> </span>&#123;</span><br><span class="line">    N=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (N&lt;=nn) N&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(N&gt;&gt;<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(node *a,<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">if</span> (rev[i]&lt;i) swap(a[i],a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">1</span>,l=N/<span class="number">2</span>;<span class="built_in">step</span>&lt;N;<span class="built_in">step</span>&lt;&lt;=<span class="number">1</span>,l&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i+=<span class="built_in">step</span>&lt;&lt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=i,d=<span class="number">0</span>;k&lt;i+<span class="built_in">step</span>;k++,d+=l) &#123;</span><br><span class="line">                node u=a[k],v=a[k+<span class="built_in">step</span>]*w[flag][d];</span><br><span class="line">                a[k]=u+v; a[k+<span class="built_in">step</span>]=u-v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">            a[i].re/=(<span class="keyword">double</span>)N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">exP</span><span class="params">(<span class="keyword">double</span> theta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node(<span class="built_in">cos</span>(theta),<span class="built_in">sin</span>(theta));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">bool</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) A[i]=<span class="number">0</span>,B[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> I=<span class="number">0</span>;I&lt;<span class="number">26</span>;I++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[I]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">memset</span>(idx,<span class="number">0</span>,<span class="keyword">sizeof</span>(idx));</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        x=I;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            vis[x]=<span class="number">1</span>;</span><br><span class="line">            d[++cnt]=x;</span><br><span class="line">            idx[x]=cnt;</span><br><span class="line">            x=p[x];</span><br><span class="line">            <span class="keyword">if</span> (x==I) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            x=idx[s[i]-<span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">if</span> (!x) <span class="keyword">continue</span>;</span><br><span class="line">            A[n-i+<span class="number">1</span>]=exP(PIE*<span class="number">2</span>*x/cnt);</span><br><span class="line">            tmp+=<span class="built_in">cos</span>(PIE/cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            x=idx[t[i]-<span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">if</span> (!x) <span class="keyword">continue</span>;</span><br><span class="line">            B[i]=exP((PIE-PIE*<span class="number">2</span>*x)/cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fft(A,<span class="number">0</span>); fft(B,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) D[i]=A[i]*B[i];</span><br><span class="line">    fft(D,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) <span class="built_in">read</span>(p[i]),p[i]--;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    m=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">    init(n+m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) &#123;</span><br><span class="line">        <span class="keyword">double</span> theta=PIE*<span class="number">2</span>*i/N;</span><br><span class="line">        w[<span class="number">0</span>][i]=exP(theta);</span><br><span class="line">        w[<span class="number">1</span>][i]=exP(-theta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        cnt++;</span><br><span class="line">        x=i;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            vis[x]=<span class="number">1</span>;</span><br><span class="line">            idx[x]=cnt;</span><br><span class="line">            x=p[x];</span><br><span class="line">            <span class="keyword">if</span> (x==i) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=idx[s[i]-<span class="string">'a'</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) b[i]=idx[t[i]-<span class="string">'a'</span>];</span><br><span class="line">    solve();</span><br><span class="line">    solve(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=m+n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(tmp-D[i].re)&lt;eps) ans2[i-n]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> ans2[i-n]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m-n+<span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">if</span> (ans1[i]&amp;&amp;ans2[i]) <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll M=<span class="number">998244353</span>;</span><br><span class="line">ll s1[maxn],s2[maxn],mi[maxn],t1,t2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mi[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) mi[i]=mi[i<span class="number">-1</span>]*M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        s1[i]=s1[i<span class="number">-1</span>]+a[i]*mi[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        s2[i]=s2[i<span class="number">-1</span>]+b[i]*mi[i];</span><br><span class="line">    t1=s1[n]*mi[m-n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m-n+<span class="number">1</span>;i++) &#123;</span><br><span class="line">        t2=(s2[i+n<span class="number">-1</span>]-s2[i<span class="number">-1</span>])*mi[m-(i+n<span class="number">-1</span>)];</span><br><span class="line">        <span class="keyword">if</span> (t1==t2) ans1[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> ans1[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文树及其应用 - 论文学习</title>
      <link href="/2020/04/09/%E5%9B%9E%E6%96%87%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/04/09/%E5%9B%9E%E6%96%87%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="7dd86f4b85a5d6ef45d7442a11285521141da278889990e68d3df5349bc5e1fc"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回文树 </tag>
            
            <tag> 最长反链 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO 2020 Open Platinum T2 Exercise</title>
      <link href="/2020/04/06/USACO%202020%20Open%20Platinum%20T2/"/>
      <url>/2020/04/06/USACO%202020%20Open%20Platinum%20T2/</url>
      
        <content type="html"><![CDATA[<p>先来看题目名称和背景相同的 Gold T3（这次 Gold 似乎没有防 AK 题？）</p><p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=1043" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=1043</a></p><h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>众所周知，permutation 会构成若干个环。在 $1$ 到 $n$ 上各站 $1$ 个人，同时开始沿着各自的环走，每次走一步。记 $K$ 为所有人都回到各自起点的最小步数，求所有可能的 $K$ 之和，对 $M$ 取模。</p><a id="more"></a><p>范围：$1 \le n \le 10^4，10^8 \le M \le 10^9+7$</p><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>显然 $K$ 是所有环长的 LCM，那什么样的 $K$ 是可能的？先分解质因数：$K=\prod_{i=1}^m p_i^{\alpha_i}$，我们希望找到合适的构造。只要环长之和最小可能值 $\le n$，不足的用 $1$ 补上，即要求 $\sum_{i=1}^m p_i^{\alpha_i}\le n$。</p><p>预处理出 $1…n$ 的所有质数，大约 1000 个左右，而 $\alpha_i$ 的最大可能值随着 $p_i$ 的增长迅速下降，这说明直接 DP 复杂度没问题。设 $dp[j][s]$ 表示考虑前 $j$ 个质数，$\sum_{i=1}^j p_i^{\alpha_i}=s$ 的方案数。转移时枚举 $\alpha_j$ 即可，注意 $\alpha_j=0$ 时不计入 $s$（因为根本没出现）也可以通过调试样例发现这一点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> n,tmp,dp[<span class="number">1510</span>][maxn],ans;</span><br><span class="line">ll mod;</span><br><span class="line"><span class="keyword">int</span> prime[maxn],tot,b[maxn],mi[maxn][<span class="number">50</span>],t;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"exercise.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"exercise.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(mod);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            prime[++tot]=i;</span><br><span class="line">            tmp=i; b[tot]=<span class="number">1</span>;</span><br><span class="line">            mi[tot][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            mi[tot][<span class="number">1</span>]=i;</span><br><span class="line">            <span class="keyword">while</span> (tmp&lt;=n/i) tmp*=i,b[tot]++,mi[tot][b[tot]]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) &#123;</span><br><span class="line">            tmp=prime[j]*i;</span><br><span class="line">            <span class="keyword">if</span> (tmp&gt;n) <span class="keyword">break</span>;</span><br><span class="line">            vis[tmp]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;=n;s++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dp[i][s]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=b[i+<span class="number">1</span>];j++) &#123;</span><br><span class="line">            t=s+mi[i+<span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (!j) t--;</span><br><span class="line">            <span class="keyword">if</span> (t&gt;n) <span class="keyword">break</span>;</span><br><span class="line">            update(dp[i+<span class="number">1</span>][t],(ll)dp[i][s]*mi[i+<span class="number">1</span>][j]%mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;=n;s++) update(ans,dp[tot][s]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  0. Enough array size? Enough array size? Enough array size? Interger overflow?</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. Think TWICE, Code ONCE!</span></span><br><span class="line"><span class="comment">  Are there any counterexamples to your algo?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  2. Be careful about the BOUNDARIES!</span></span><br><span class="line"><span class="comment">  N=1? P=1? Something about 0?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  3. Do not make STUPID MISTAKES!</span></span><br><span class="line"><span class="comment">  Time complexity? Memory usage? Precision error?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=1045" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=1045</a></p><h6 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h6><p>进阶版：求 $n!$ 个 permutation 对应 $K$ 的乘积，对 $M$ 取模，$1\le n \le 7500$。</p><h6 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h6><p>不是所有可能的 $K$ 之积，而是所有 permutation 的 $K$ 之积。我们需要从固定环长、计算 permutation 个数的角度考虑。</p><p>第一步转化：枚举 $p_i$，计算 $\sum \alpha_i \pmod {M-1}$，也可以模 $\varphi(M)$。这是样例解释给我们的提示。</p><p>如果再枚举 $\alpha_i$，会发现并不好控制 $\nu_{p_i}(K)=\alpha_i$，可能会超过。这启示我们用容斥，强制 $t$ 个环长是 $p_i^{\alpha_i}$ 的倍数，再乘上 $(-1)^{t+1}$ 计入贡献。</p><p>设 $dp[i]$ 表示当前强制环长之和为 $i\cdot p^{\alpha}$ 的贡献，则 $dp[0]=-1$。</p><p>转移时枚举最后一个环长 $j\cdot p^{\alpha}$，为了避免重复，假设当前编号为 $1$ 到 $i\cdot p^{\alpha}$，强制 $1$ 在 $j\cdot p^{\alpha}$ 这个环上。系数就是选出这些编号 $\times$ 环排列个数。</p><script type="math/tex; mode=display">dp[i]= \sum_{j=1}^i -dp[i-j] \binom{i\cdot p^{\alpha}-1}{j\cdot p^{\alpha}-1}(j\cdot p^{\alpha}-1)!</script><p>别忘了除了强制以外，是可以随便排的。</p><script type="math/tex; mode=display">res= \sum_{i=1}^n dp[i] \binom n{i\cdot p^{\alpha}}(n-i\cdot p^{\alpha})!</script><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">7510</span>;</span><br><span class="line"><span class="keyword">int</span> n,C[maxn][maxn],dp[maxn],tmp;</span><br><span class="line">ll mod,ans,jc[maxn];</span><br><span class="line"><span class="keyword">int</span> prime[maxn],tot,b[maxn],mi[maxn][<span class="number">50</span>],t;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=(ll)res*x%(mod+<span class="number">1</span>);</span><br><span class="line">        x=(ll)x*x%(mod+<span class="number">1</span>); y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>]=mod<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/s;i++) &#123;</span><br><span class="line">        dp[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) &#123;</span><br><span class="line">            update(dp[i],mod-(ll)dp[i-j]*C[i*s<span class="number">-1</span>][j*s<span class="number">-1</span>]%mod*jc[j*s<span class="number">-1</span>]%mod);</span><br><span class="line">        &#125;</span><br><span class="line">        update(res,(ll)dp[i]*C[n][i*s]%mod*jc[n-i*s]%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"exercise.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"exercise.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(mod);</span><br><span class="line">    mod--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">            C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    jc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            prime[++tot]=i;</span><br><span class="line">            tmp=i; b[tot]=<span class="number">1</span>;</span><br><span class="line">            mi[tot][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            mi[tot][<span class="number">1</span>]=i;</span><br><span class="line">            <span class="keyword">while</span> (tmp&lt;=n/i) tmp*=i,b[tot]++,mi[tot][b[tot]]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) &#123;</span><br><span class="line">            tmp=prime[j]*i;</span><br><span class="line">            <span class="keyword">if</span> (tmp&gt;n) <span class="keyword">break</span>;</span><br><span class="line">            vis[tmp]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b[i];j++) &#123;</span><br><span class="line">        ans*=ksm(prime[i],solve(mi[i][j]));</span><br><span class="line">        ans%=mod+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  0. Enough array size? Enough array size? Enough array size? Interger overflow?</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. Think TWICE, Code ONCE!</span></span><br><span class="line"><span class="comment">  Are there any counterexamples to your algo?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  2. Be careful about the BOUNDARIES!</span></span><br><span class="line"><span class="comment">  N=1? P=1? Something about 0?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  3. Do not make STUPID MISTAKES!</span></span><br><span class="line"><span class="comment">  Time complexity? Memory usage? Precision error?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> USACO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 组合计数 </tag>
            
            <tag> 容斥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO 2020 Open Platinum T1 Sprinklers 2 - Return of the Alfalfa</title>
      <link href="/2020/04/06/USACO%202020%20Open%20Platinum%20T1/"/>
      <url>/2020/04/06/USACO%202020%20Open%20Platinum%20T1/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=1044" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=1044</a></p><h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>FJ 有一块 $N \times N$ 的田地，可以种 sweet corn 和 alfalfa。在一个格子装 sweet corn sprinkler 可以使左下的格子都长出 sweet corn，装 alfalfa sprinkler 可以使右上的格子都长出 alfalfa。如果一个格子同时被两种覆盖到，则长不出任何东西；否则可以顺利长出相应的作物，允许多次覆盖。已知某些格子无法装 sprinkler，不过仍然可以长作物。FJ 希望每个格子都能长出作物来，求初始装 sprinkler 的方案数，对 $10^9+7$ 取模。</p><p>范围：$1 \le N \le 2000$，给出能否装 sprinkler 的 01 矩阵。</p><a id="more"></a><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>最终种出的作物一定分居轮廓线两侧，左下 sweet corn，右上 alfalfa，且转角处必须安装相应的 sprinkler。我们只关心每一行最后一个 sweet corn 在哪里，因此可设 $dp[i][j]$ 表示考虑前 $i$ 行且第 $i$ 行前 $j$ 格长 sweet corn 的方案数，即轮廓线转角。记得特判 $i=1,n$ 和 $j=0,n$，如果第 $1$ 或 $n$ 行都不让装 sprinkler 答案为 $0$。</p><p>转移时枚举上一行，需要乘上相应的 $2$ 的幂次，因为除了强制装 sprinkler 的格子以外，其余要么不让装，要么可装可不装。写完 $\mathcal O(n^3)$ 版本先交上去检查正确性，然后用前缀和优化就是 $\mathcal O(n^2)$ 了。</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,mi[<span class="number">2010</span>],cnt[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">char</span> d[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2010</span>][<span class="number">2010</span>],sum[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> iv,ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"sprinklers2.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"sprinklers2.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,d[i]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span> (d[i][j]==<span class="string">'.'</span>) cnt[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    iv=mod-mod/<span class="number">2</span>;</span><br><span class="line">    mi[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) mi[i]=mi[i<span class="number">-1</span>]*<span class="number">2</span>%mod;</span><br><span class="line">    <span class="keyword">if</span> (cnt[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span> (d[<span class="number">1</span>][j]==<span class="string">'.'</span>) dp[<span class="number">1</span>][j]=mi[cnt[<span class="number">1</span>]<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>]=mi[cnt[<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j) sum[<span class="number">1</span>][j]=sum[<span class="number">1</span>][j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span> (j&lt;n&amp;&amp;d[<span class="number">1</span>][j+<span class="number">1</span>]==<span class="string">'.'</span>)</span><br><span class="line">            update(sum[<span class="number">1</span>][j],dp[<span class="number">1</span>][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++) &#123;</span><br><span class="line">            dp[i][j]=(ll)dp[i<span class="number">-1</span>][j]*mi[cnt[i]]%mod;</span><br><span class="line">            <span class="keyword">if</span> (j&amp;&amp;d[i][j]==<span class="string">'.'</span>) &#123;</span><br><span class="line">                update(dp[i][j],(ll)sum[i<span class="number">-1</span>][j<span class="number">-1</span>]*iv%mod*mi[cnt[i]<span class="number">-1</span>]%mod);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j) sum[i][j]=sum[i][j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span> (j&lt;n&amp;&amp;d[i][j+<span class="number">1</span>]==<span class="string">'.'</span>)</span><br><span class="line">                update(sum[i][j],dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        <span class="keyword">if</span> (d[n][j+<span class="number">1</span>]==<span class="string">'.'</span>)</span><br><span class="line">            update(ans,(ll)dp[n][j]*iv%mod);</span><br><span class="line">    update(ans,dp[n][n]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  0. Enough array size? Enough array size? Enough array size? Interger overflow?</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. Think TWICE, Code ONCE!</span></span><br><span class="line"><span class="comment">  Are there any counterexamples to your algo?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  2. Be careful about the BOUNDARIES!</span></span><br><span class="line"><span class="comment">  N=1? P=1? Something about 0?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  3. Do not make STUPID MISTAKES!</span></span><br><span class="line"><span class="comment">  Time complexity? Memory usage? Precision error?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> USACO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO 2020 Open Platinum T3 Circus</title>
      <link href="/2020/04/06/USACO%202020%20Open%20Platinum%20T3/"/>
      <url>/2020/04/06/USACO%202020%20Open%20Platinum%20T3/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=1046" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=1046</a></p><h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>一棵 $n$ 个节点的树上有 $K$ 头奶牛，它们可以任意移动，但不能碰到其他奶牛。如果从一个状态经过有限次移动能到达另一个状态，则称它们属于同一个等价类（可达）。奶牛是编号的，对 $K=1,2, \ldots n$ 输出等价类个数，对 $10^9+7$ 取模。</p><a id="more"></a><p>范围：$1 \le n \le 10^5$。</p><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>首先证明，如果不考虑奶牛编号的问题，所有状态均互相可达。将 dfs 序定义为递归完子树退出时的序号，考虑 dfs 序前 $K$ 小的节点 $u_1,u_2, \ldots ,u_K$。设奶牛所在的点按到 $u_1$ 的距离从小到大依次为 $v_1,v_2, \ldots ,v_K$，我们想办法把 $v_1$ 挪到 $u_1$，这样就能归纳了（$u_1$ 一定是叶子，去掉后还是树）。显然 $v_1$ 到 $u_1$ 的路径上不会有其他奶牛，因而得证。</p><p>这样一来，我们只要钦定 $K$ 个点，计算 $K!$ 种编号的等价类个数就好了。而两个状态互相可达的过程，可以分解成每次交换两个点。如果某两个点可以顺利交换位置，就在一张想象的新图中合并起来。设新图中连通块大小为 $s_1,s_2, \ldots s_m$，那么等价类个数就是 $\frac {K!}{\prod_{i=1}^m s_i!}$，相比较原问题已经有很大的进步。</p><p>另一个观察是，可用于交换两点的中转站度数 $\ge 3$，所以我们取一个这样的节点作为根。若不存在，说明是条链，压根没法交换，直接输出 $K!$ 就好了。此外，$K=n-1$ 或 $n$ 时答案总是 $K!$，因为也没法换（样例 / 写暴力主要就说明了这一点…）</p><p>下面考虑 $K\le n-2$ 的情况，最开始钦定的 $K$ 个点为深度前 $K$ 大的。这样的好处是它们聚集在了若干个底下的子树里，如果 $K$ 从小到大看，它们会慢慢往上长，从而方便我们维护答案。</p><p>新图中，需要合并哪些点？事实上，父亲-儿子，儿子-儿子，子树根-子树根，这$3$种便足够了。跨层的交换，可以用这些中间步骤代替。我们剩下要解决的，是这些合并操作在哪些 $K$ 时成立。</p><p>儿子-儿子：同一个父亲的$2$个儿子，在它们都被钦定后即可合并。原因在于根节点、父亲度数$\ge 3$，$K \le n-2$。</p><p>父亲-儿子：记 $dis(u)$ 表示 $u$ 子树外所有度数 $\ge 3$ 的点到 $u$ 的最短距离（经过边），用 $2$ 遍 dfs + 前后缀 mn 可解决（具体见代码）那么如果 $K+dis(父亲)\le n-2$ 且父亲被钦定，即可合并。原因在于至少要空出这 $dis(父亲)$ 个节点，之前也证明了只要其余节点不计编号、没那么多，一定可以顺利让出来。</p><p>子树根-子树根：当 $K&lt;n-2$ 时，任何两个子树根都可跑到根节点处交换；当 $K=n-2$ 时，只空出了根节点+它的一个儿子，分$2$种情况：（方框为钦定的节点）</p><p><img src="\graph\3.png" alt="image" style="zoom:50%;" /></p><p>我们会发现，此时只有深度相同的子树根之间能互相交换，这样只要对 $K=n-2$ 最后重新做一遍特判即可。可以对子树根单独开一两个节点用来搞定连通性，当然不开也能做。</p><p>一般的合并操作，只在 $K$ 处于一个区间时有效，用线段树+可撤销并查集就能维护答案了，时间复杂度 $\mathcal O(n\log ^2n)​$。这个“黑科技”真是既好用又好写！</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p><del>官方题解一个log但我没看懂</del></p><p>看起来很长是因为套了很多东西；只跑了不到 600ms 呢</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=(<span class="number">1e9</span>);</span><br><span class="line"><span class="keyword">int</span> n,rt,head[maxn],nxt[maxn*<span class="number">2</span>],to[maxn*<span class="number">2</span>],tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; tot++; nxt[tot]=head[x]; head[x]=tot; to[tot]=y; &#125;</span><br><span class="line"><span class="keyword">int</span> iv[maxn],jc[maxn],ivjc[maxn],ans[maxn],deg[maxn],rk[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn],sz[maxn],d[maxn],dep[maxn],bg[maxn],ed[maxn];</span><br><span class="line"><span class="keyword">int</span> mn[maxn],dis[maxn],sum,f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x]==dep[y]) <span class="keyword">return</span> x&lt;y;</span><br><span class="line">    <span class="keyword">return</span> dep[x]&gt;dep[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span> <span class="keyword">int</span> x,y; &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; g[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node2</span> &#123;</span> <span class="keyword">int</span> x,y,l,r; &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node2&gt; edge;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,Node A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L&gt;R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class="line">        g[root].push_back(A);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (L&lt;=mid) add(L,R,l,mid,root*<span class="number">2</span>,A);</span><br><span class="line">    <span class="keyword">if</span> (mid&lt;R) add(L,R,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> x,y,szy,fax,s; &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x); y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x==y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (sz[x]&gt;sz[y]) swap(x,y);</span><br><span class="line">    st.push_back((node)&#123;x,y,sz[y],fa[x],sum&#125;);</span><br><span class="line">    sum=(ll)sum*jc[sz[y]]%mod*jc[sz[x]]%mod;</span><br><span class="line">    sz[y]+=sz[x]; fa[x]=y;</span><br><span class="line">    sum=(ll)sum*ivjc[sz[y]]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">roll</span><span class="params">(node A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=A.x,y=A.y;</span><br><span class="line">    fa[x]=A.fax,sz[y]=A.szy;</span><br><span class="line">    sum=A.s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=st.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[root].<span class="built_in">size</span>();i++) merge(g[root][i].x,g[root][i].y);</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">        ans[l]=(ll)sum*jc[l]%mod;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        solve(l,mid,root*<span class="number">2</span>);</span><br><span class="line">        solve(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (st.<span class="built_in">size</span>()&gt;tmp) &#123;</span><br><span class="line">        roll(st.back()),st.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    bg[u]=++tot; dep[u]=dep[p]+<span class="number">1</span>;</span><br><span class="line">    f[u]=p;</span><br><span class="line">    mn[u]=dis[u]=INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">        v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (v==p) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        mn[u]=<span class="built_in">min</span>(mn[u],mn[v]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ed[u]=tot;</span><br><span class="line">    <span class="keyword">if</span> (deg[u]&gt;<span class="number">2</span>) mn[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; N[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=dis[u]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (deg[u]&gt;<span class="number">2</span>) tmp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">        v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (v==f[u]) <span class="keyword">continue</span>;</span><br><span class="line">        dis[v]=<span class="built_in">min</span>(dis[v],tmp);</span><br><span class="line">        tmp=<span class="built_in">min</span>(tmp,mn[v]+<span class="number">2</span>);</span><br><span class="line">        N[u].push_back(v);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp=dis[u]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (deg[u]&gt;<span class="number">2</span>) tmp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=N[u].<span class="built_in">size</span>()<span class="number">-1</span>,v;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">        v=N[u][i];</span><br><span class="line">        dis[v]=<span class="built_in">min</span>(dis[v],tmp);</span><br><span class="line">        tmp=<span class="built_in">min</span>(tmp,mn[v]+<span class="number">2</span>);</span><br><span class="line">        dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">bool</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,lst;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        x=d[i];</span><br><span class="line">        <span class="keyword">if</span> (rk[x]&gt;n<span class="number">-2</span>) <span class="keyword">continue</span>;</span><br><span class="line">        lst=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=head[x];j;j=nxt[j]) &#123;</span><br><span class="line">            y=to[j];</span><br><span class="line">            <span class="keyword">if</span> (y==f[x]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (lst) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag) add(<span class="built_in">max</span>(rk[lst],rk[y]),n<span class="number">-2</span>,<span class="number">1</span>,n<span class="number">-2</span>,<span class="number">1</span>,(Node)&#123;y,lst&#125;);</span><br><span class="line">                <span class="keyword">else</span> edge.push_back((node2)&#123;y,lst,<span class="built_in">max</span>(rk[lst],rk[y]),n<span class="number">-2</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            lst=y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lst) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!flag) add(rk[x],n<span class="number">-2</span>-dis[x],<span class="number">1</span>,n<span class="number">-2</span>,<span class="number">1</span>,(Node)&#123;lst,x&#125;);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rk[x]&lt;=n<span class="number">-2</span>-dis[x]) edge.push_back((node2)&#123;lst,x,rk[x],n<span class="number">-2</span>-dis[x]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            add(rk[x],<span class="built_in">min</span>(n<span class="number">-2</span>,rk[f[x]]<span class="number">-1</span>),<span class="number">1</span>,n<span class="number">-2</span>,<span class="number">1</span>,(Node)&#123;n+<span class="number">1</span>,x&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rk[f[x]]&gt;n<span class="number">-2</span>) &#123;</span><br><span class="line">            edge.push_back((node2)&#123;n+dep[x]<span class="number">-1</span>,x,rk[x],n<span class="number">-2</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"circus.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"circus.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="keyword">int</span> x,y;</span><br><span class="line">    jc[<span class="number">0</span>]=jc[<span class="number">1</span>]=iv[<span class="number">0</span>]=iv[<span class="number">1</span>]=ivjc[<span class="number">0</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) jc[i]=(ll)jc[i<span class="number">-1</span>]*i%mod,iv[i]=(ll)(mod-mod/i)*iv[mod%i]%mod,ivjc[i]=(ll)ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y);</span><br><span class="line">        add(x,y); add(y,x);</span><br><span class="line">        deg[x]++; deg[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span> (deg[i]&gt;<span class="number">2</span>) &#123; rt=i; <span class="keyword">break</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (!rt) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,jc[i]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(rt,<span class="number">0</span>);</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    dfs(rt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i]=i;</span><br><span class="line">    sort(d+<span class="number">1</span>,d+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) rk[d[i]]=i;</span><br><span class="line">    build(<span class="number">0</span>);</span><br><span class="line">    sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i,sz[i]=<span class="number">1</span>;</span><br><span class="line">    fa[n+<span class="number">1</span>]=n+<span class="number">1</span>;</span><br><span class="line">    solve(<span class="number">1</span>,n<span class="number">-2</span>,<span class="number">1</span>);</span><br><span class="line">    sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i,sz[i]=<span class="number">1</span>;</span><br><span class="line">    fa[n+<span class="number">1</span>]=n+<span class="number">1</span>; fa[n+<span class="number">2</span>]=n+<span class="number">2</span>;</span><br><span class="line">    build(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edge.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        x=edge[i].x,y=edge[i].y;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].l&lt;=n<span class="number">-2</span>&amp;&amp;n<span class="number">-2</span>&lt;=edge[i].r) &#123;</span><br><span class="line">            merge(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[n<span class="number">-2</span>]=(ll)sum*jc[n<span class="number">-2</span>]%mod;</span><br><span class="line">    ans[n<span class="number">-1</span>]=jc[n<span class="number">-1</span>];</span><br><span class="line">    ans[n]=jc[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  0. Enough array size? Enough array size? Enough array size? Interger overflow?</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. Think TWICE, Code ONCE!</span></span><br><span class="line"><span class="comment">  Are there any counterexamples to your algo?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  2. Be careful about the BOUNDARIES!</span></span><br><span class="line"><span class="comment">  N=1? P=1? Something about 0?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  3. Do not make STUPID MISTAKES!</span></span><br><span class="line"><span class="comment">  Time complexity? Memory usage? Precision error?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> USACO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 AIME I 解题思路（11~15）</title>
      <link href="/2020/04/05/2020%20AIME%20I%20%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF%EF%BC%8811~15%EF%BC%89/"/>
      <url>/2020/04/05/2020%20AIME%20I%20%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF%EF%BC%8811~15%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/G_jsncAalP-vwNob1jbjJA" target="_blank" rel="noopener">微信公众号链接 - 2020 AIME I 解题思路（11~15）</a></p><p><a href="/downloads/2020 AIME I 解题思路 - 无忧公主的数学时间.pdf">pdf 下载链接 - 2020 AIME I 解题思路（1~15)</a></p><a id="more"></a><iframe   height=850  width=90%  src="/downloads/2020 AIME I 解题思路 - 无忧公主的数学时间.pdf"   frameborder=0   allowfullscreen> </iframe>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1332G No Monotone Triples</title>
      <link href="/2020/04/04/CF1332G%20No%20Monotone%20Triples/"/>
      <url>/2020/04/04/CF1332G%20No%20Monotone%20Triples/</url>
      
        <content type="html"><![CDATA[<p>给定 $\{a_n\}$，$q$ 次询问区间 $[l,r]$，求其中最长的子序列（可不连续）满足最长递增、递减（相等也算）子序列均 $\le 2$，若该子序列最长 $\le 2$ 则输出 $0$，否则输出长度+例子，$n,q\le 2\cdot 10^5$。</p><a id="more"></a><p>由 Erdos-Szekeres 定理，任何长度为 $mn+1$ 的序列中存在长度为 $m+1$ 的递增子序列，或长度为 $n+1$ 的递减子序列。也就是说，题目中的 $[l,r]$ 内子序列最长为 $4$。</p><p>而长度为 $3$ 的非常好找，只要对每个 $a_i$ 找到左/右第一个比自己严格大/小的位置，用大小严格比较的单调栈做。这样会构成可能的答案区间，对所有 $l$ 取后面对应最小的 $r$ 即可，不用区间排序+线段树之类的了。</p><p>下面考虑长度为 $4$ 的情况，假设其中最左、最右的数位于 $L,R$。</p><p>观察定理本身的取等条件，这 $4$ 个数会长成什么样子？必须是中间两数一个 max，一个 min，左右两数夹在中间，且不碰到 max、min，但左右可以相等。如果具体讨论大小关系，套单调栈+主席树+线段树+上面二分，大约是 $\mathcal O(n\log ^2n)$ 和一堆常数，比较困难。</p><p>在刚才构思的实现中，我们会发现，对 $L$ 来说 $R$ 是“好”的当且仅当 $R$ 不是 $[L,R]$ 中的 max 或 min。而且选出其中最小的 $R$ 以后，可以用 ST 表找到 $[L,R]$ 中的 max 和 min 作为中间两数，构成答案。而满足 $R$ 是 $[L,R]$ 中 max 或 min 的 $R$，一定是在（从右往左扫）当前两个单调栈内的（大小非严格，允许相同）。</p><p>在沿用单调栈的基础上，用 set 维护不出现在任何单调栈内的所有数。为了避免栈顶连续一段都相等，我们二分找到第一个不等的位置，找到这 $2$ 个位置后面 set 中最小的 $R$ 就可以了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">2e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=(<span class="number">1e9</span>);</span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn],tot,cnt[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans3[maxn],ans4[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> l,mid,r,z; &#125; d[maxn],e[maxn];</span><br><span class="line"><span class="keyword">int</span> s1[maxn],t1,s2[maxn],t2;</span><br><span class="line"><span class="keyword">int</span> L1[maxn],R1[maxn],L2[maxn],R2[maxn];</span><br><span class="line"><span class="keyword">int</span> mn[maxn][<span class="number">20</span>],mx[maxn][<span class="number">20</span>],lg[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,node A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d[x].r&gt;A.r) d[x]=A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i].r=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (t1&amp;&amp;a[s1[t1]]&gt;=a[i]) t1--;</span><br><span class="line">        <span class="keyword">while</span> (t2&amp;&amp;a[s2[t2]]&lt;=a[i]) t2--;</span><br><span class="line">        L1[i]=s1[t1],L2[i]=s2[t2];</span><br><span class="line">        s1[++t1]=i; s2[++t2]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    t1=t2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (t1&amp;&amp;a[s1[t1]]&gt;=a[i]) t1--;</span><br><span class="line">        <span class="keyword">while</span> (t2&amp;&amp;a[s2[t2]]&lt;=a[i]) t2--;</span><br><span class="line">        R1[i]=s1[t1],R2[i]=s2[t2];</span><br><span class="line">        s1[++t1]=i; s2[++t2]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L1[i]&amp;&amp;R1[i]) &#123;</span><br><span class="line">            update(L1[i],(node)&#123;L1[i],i,R1[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (L2[i]&amp;&amp;R2[i]) &#123;</span><br><span class="line">            update(L2[i],(node)&#123;L2[i],i,R2[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        update(i,d[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update2</span><span class="params">(<span class="keyword">int</span> x,node A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e[x].z&gt;A.z) e[x]=A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,l,r,p1,p2,mid,L,R;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) mn[i][<span class="number">0</span>]=mx[i][<span class="number">0</span>]=i,e[i].z=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">19</span>;j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++) &#123;</span><br><span class="line">            x=mn[i][j<span class="number">-1</span>],y=mn[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span> (a[x]&lt;a[y]) mn[i][j]=x;</span><br><span class="line">            <span class="keyword">else</span> mn[i][j]=y;</span><br><span class="line">            x=mx[i][j<span class="number">-1</span>],y=mx[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span> (a[x]&gt;a[y]) mx[i][j]=x;</span><br><span class="line">            <span class="keyword">else</span> mx[i][j]=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    t1=t2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n,j;i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (t1&amp;&amp;a[s1[t1]]&gt;a[i]) &#123;</span><br><span class="line">            cnt[s1[t1]]--;</span><br><span class="line">            <span class="keyword">if</span> (!cnt[s1[t1]]) s.insert(s1[t1]);</span><br><span class="line">            t1--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (t2&amp;&amp;a[s2[t2]]&lt;a[i]) &#123;</span><br><span class="line">            cnt[s2[t2]]--;</span><br><span class="line">            <span class="keyword">if</span> (!cnt[s2[t2]]) s.insert(s2[t2]);</span><br><span class="line">            t2--;</span><br><span class="line">        &#125;</span><br><span class="line">        l=<span class="number">1</span>,r=t1,p1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">            mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[s1[mid]]&lt;a[i]) p1=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        l=<span class="number">1</span>,r=t2,p2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">            mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[s2[mid]]&gt;a[i]) p2=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p1&amp;&amp;p2) &#123;</span><br><span class="line">            L=<span class="built_in">max</span>(s1[p1],s2[p2]);</span><br><span class="line">            it=s.upper_bound(L);</span><br><span class="line">            <span class="keyword">if</span> (it!=s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                R=*it;</span><br><span class="line">                L=i;</span><br><span class="line">                j=lg[R-L+<span class="number">1</span>];</span><br><span class="line">                x=mn[L][j],y=mn[R-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (a[x]&lt;a[y]) p1=x; <span class="keyword">else</span> p1=y;</span><br><span class="line">                x=mx[L][j],y=mx[R-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (a[x]&gt;a[y]) p2=x; <span class="keyword">else</span> p2=y;</span><br><span class="line">                update2(i,(node)&#123;i,<span class="built_in">min</span>(p1,p2),<span class="built_in">max</span>(p1,p2),R&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s1[++t1]=i; s2[++t2]=i;</span><br><span class="line">        cnt[i]+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        update2(i,e[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) lg[i]=lg[i/<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line">    solve1();</span><br><span class="line">    solve2();</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(l); <span class="built_in">read</span>(r);</span><br><span class="line">        <span class="keyword">if</span> (e[l].z&lt;=r) <span class="built_in">printf</span>(<span class="string">"4\n%d %d %d %d\n"</span>,e[l].l,e[l].mid,e[l].r,e[l].z);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (d[l].r&lt;=r) <span class="built_in">printf</span>(<span class="string">"3\n%d %d %d\n"</span>,d[l].l,d[l].mid,d[l].r);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  0. Enough array size? Enough array size? Enough array size? Interger overflow?</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. Think TWICE, Code ONCE!</span></span><br><span class="line"><span class="comment">  Are there any counterexamples to your algo?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  2. Be careful about the BOUNDARIES!</span></span><br><span class="line"><span class="comment">  N=1? P=1? Something about 0?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  3. Do not make STUPID MISTAKES!</span></span><br><span class="line"><span class="comment">  Time complexity? Memory usage? Precision error?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《A+B Problem》命题报告 - 论文学习</title>
      <link href="/2020/04/04/%E3%80%8AA+B%20Problem%E3%80%8B%E5%91%BD%E9%A2%98%E6%8A%A5%E5%91%8A-%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/04/04/%E3%80%8AA+B%20Problem%E3%80%8B%E5%91%BD%E9%A2%98%E6%8A%A5%E5%91%8A-%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9a15f3818cce05490353b8d37a7626dd82c5a8b9dab0344b38243856ac04c8ce">511757baf2d20330a6ea94e2e653af8c5c5341e16fb5baf2e72ef013e2b62d42b86c920f4a08dd18d3bc00fae622035d71976442802e9677db963b845cf4158e109f5066ef53b2ab9faed523958cb90b0d8679a72e4308e514e130b545c9869c7e7a06b105b8b1ee14dcdd747eb2420d37f3f2c670cf7fe30e5f77543412041f2aadc3178b2e7d1dede8d960c90ae3c1e85cbc4faa35dfdb53a63bb74925c24434aef4bfcd3ced08dd36795704e7e0328b5bd6e812fa5fcf7253949dd0c5c5524cb47831aac503d0a4829a761d699aa169487f8212ae3f768ed30bc11eead10c96ff5e2e96f7dcb8eff226d27eb53326f29dc27126806a11aa75c3c81ed150df1ae98d460afcbaa24a04ca020383bc355e6135f8e730aaf379ba364a93b361b5a485bb0f94ceddc9ed665e08c7c1c3f60cd7d7a0c4b1a18dce0b4f36ee905ee2dd2b03f4270cce3c2605144fd890b3797916f483aac318f3e6f2ca9e69a4c4e83daa2e87cd558cdfeb7da7bb4ad2c2713c41fb63534f75257a185427989e8e8a227e85ddbdfde1644296763e41cdd5abff46dcab48d2d7b536547ca637592322b67501493aecc13148df64c187ef8f0e8677a2dc85dbe7b86ca2e22034fa91102cb785f5fe0be74d1c0f636b9d02303bd2ba231363ca14161daaca66ba1bd9d8db272b3f0cf7bd028efebb34f6272e303af4cb740d4cfa398a55092ed0f4a0c6d01082c6dd7d6a3100d69da037c4601f6e69cd7955dafa96c8a0cd0d5d1b09b6212ad6f67c3f4c4c0022a7bd6fbf8b360d877ba2cb0f7fc9d0b34b44e6acf32878e840b8d433ee442c29351d764e6eccb3404b06ecdf28df41a0781525d5417035fbda530b01884d38aee592df0c59161e0accf32f36b6968d88192947f19e4badf9d5b42523751fa536ce2bd29957f74055c422534899502fd4276ad79f7b443fb672bd04eabb010afa55bd3e70372e6f9e44e04da63ce031f250c12c6340250f7ed8a1ed59e963c9cca7f5be0fd0215f69cfa1c2876821ffcb95f9e4657b446cfe91f2ac969f37f335b7b3f8d4c0716aad1b0ed2d77b82cbfee9b4e13f1874efe2b31b8f9b8026fbd11a9c6cc75e50f07295d951e673661544d34705740749fd20ad45bbd094f9bcdedbbacfbc8d2d60d677346ba812888765e03f626874a81374ee9cf45b1a04b6de4c1fccec03faff43d6d3b1203d20af4c94a05643a3d739538927b52e2bd14ebfad048e6619f95597a8981c24b5744f7910b97589c6b62e81ec660f9780fd4f02eff0825379177762a59e6d0e1c2161f8724365675673f2f6c3d180747565fca756ffce9cf4f83c701ce6167a2855de35b1f8993cbb7252f9bac90d1ec02b56108047220e3ece2ec0743ef515e254b0565848609d55f7d7afb1d1f86e51e3c63b484af558fc45163594eef34f73658c44e8b2d9b8afebdcc766962fc2ba426303a40546707d194bc2b747d7f33e461d8aae3ab0f4605dde47d6261864105c826b386ad8057f93e886fa09a4e22648b5746492696690e57f351e143a1d732550abebbb285665c51090e9c081f6514d469e0d5976df374c06a6381fee3f117dc69b75c1ec35ab84d98e0b602dc9942a0b373007a084d4f55378176ff4bc95e5e9f3ff4db3e41867c3eab928aae8418666d11376dc9e79eb50887038ccb495c3c32e9517ee292edc883f2120ad4210f53eb4ca1d026ae9c2d9e02dbd17c6cd66b0b749799e8ccd7980b14c4fb625a53c424c90e8e8247b77bdce753a13c80b0ce495957a77f26270014f411cb87b282b34a760b675a7d9c235608b7c82e769ec1cc30dafba4b512d728d01016c22082090e772294078e8fb1bb8336eda6f67a4ddd9f936376253e63a163fbff7affe9110ba0042635230cbc63d94f5765263ab7588bd53ad7516368f0b125e341b5f8501330b5fea340c2cc3146735a495a6f2fe13e290b4fcaa3ad34900f287446b631f2dc46113e4c3806b40305a25932b8a0426dc63a68a67f936eee6db8b431d2280204a27f0e4da1b96f6afbe89e154e5e451b85e2f7e6e0873bec2b1ee5ef4d1f02a135d4ba59dff955b53b9fafb195da487f56fd413775abb7fa87f92f4a5f8729db8252b23bb387d187c09983df1096023ecc8af7231f81d20bd07c4f4abf817eb7f870d8775e9b215f61098b50f02f755fe183cf25ec65b16c0439b548711b1549aba7d293aad3206c34df2b16f4e01fbb62d2f1dc3082615850fdfae00ad30960ce58fa83670bb284f0acf3f622bdc95e7a0987a1db400f58fb6b12e4cbf96dc96755bcd60b95eec2bb641d5ff9ab8c4c0455ad314780bbbd4562686bb70a0055ff53d9dc4473002dc42beecde5569e8bdeaf4b0fe60c305e2fee6b8c32af71b062135dcbb02592f8c3e910804e4013b292ec785f360591a1074010c9dfd5e8e0f70f2682f9489e2e5a60b0c406a16734e2634cfd47ceca7b5b96a44fd1031a069fbfad79ae5876c8313ab4337dfb03d530b0b0d51b432653f42ace4382a894b35eb894fd10498b527c96f30038211390072c82d721a80d39898a9618ee109314ccb03e40769323e75987ad855780fc4545d92e4e2a8744d27f391cd56135499569956f14a44d60bfc97e7dc308a4db69dd2cb301f0edc597b20e59a160dc5da8dd50f1b7745dd9c964e40626acda28ee86585b36b7567ae478e8c0cc9d501a3e35ef5fbcc0bb0770e9ab1cffae448d8a1e4e3c1e25ca09785fab06cf4c761bbb7c5e9a2dbfe2bcc2ad7d321de93d35ec130957d16525ceb05edb0bd3d00ed127c1c8b2ee3c0c1229a5ec1d983f74fb92b9531dfbc388a7705ff9d107e7f229b3bc84f00675dcfd54d4bdd34a19ef1c8b821320010a969a6e8d893915a083804386053770b4d04114599fed083aee32e9590fc87fc6e1565ca9b136aaff8d5f03fd4f8a77a24c802d899413bd52641bc653b3b00d503d7d41639464565b30abcb1cff0917220f8f6e707b8e46ca83ef423f1e72e99fd55473fd4d6b50cfa25b877a5161faec692639665e6fb88246ab39181a82985df6717e4fed38c8a370d1a00b2223bb4be30d5a2a57f625dd1326cddaa9f83128a0e9c0851cba7cb27e495b2b1f1b4647e5f77e53c1f837b460bab4df3af01fe8399620dcd87c181dbc76461029de26f7f4879e171ee9e3072a472b2eabc3e508fecdb260f603ce5d0b3ad00bbcc98fcb9a5710b87d147392b22dac471bef7593ee0a20ba87ed188fa0298883b7e33ecdc9672e03b4a574a26368b838f25c3c14b38f4d4e536edc5e02e1581211cd74844f30c6372e6b2dddad61e5777f217be29e863f47d35f4014b214491fa23f97492c92710c943c969bd52c9154517027c86ee260e8703ad16f99acedc7bc36c05e05705cd4b232e983da493bc5263d02efd9b041fe147bdbbddf96d38a5946a3e0a350f225752adce0947e247293be3820dc28af3eb85d2c978335352e83cfeffb954f54bc7ac0685e504f40d97e332e9598444fa8a93d9b17ed48cdc9e01176400156804b3e4df25607d2570b595fafd224b6055f8a294a9bb9c049a342fc61a0d5ed57cc2d629318d91b083c58eb4dbce21538dea92398ff50e4e8f5f4abc4e07f545dd6a3af226bf1749b7f0c5103025ba7d5a73fb711a5c748d4122e1d1cad840fc4ac89b84b7375bdc8fc96cdc59938e528693df6f5b5a73937699f267ca59828841636e6d1b4f2f53a4e3412a9a6a9849af353bf94ce2c79ee8924e5790db62796d29dd218ec470baa44a497086d405e044792696d1a639d1d84d624f38284dc9bc4e6ed6065ee1d8a4e8244e6d4c8e364a986a2770d6fa8f84d55617ba6367c68392f03bba0fd0eadd3c9a79f69e16a4b71fb0cfe825cb31741700c4068c8279f4084d347e4cc2b3b6c5f929c7536ada173ca579929e43f270d9eb30a70444d66f43fe0f9c5f95de515ca49ea3c21f5d9e1b12600083b1081d324987712a6663176f6bed3ab4c0388d44f40697dcc7f6713e0085269d4ce5cfb4e7deaee7b795efec8c8fd89bdbb6a6f22434f8cae9d0666a6b607e848af1edcbf1c3015ff223195ca7c7ad1b974334ed483e5595fd14b49e531d2713f2b54e785acad60c532da81ace056fbbfd016fb4a57fb2b92867aeef005e2c88ee340127b6529a5d9db0872f0f1b193ca7e0bebbd3a3849eff6435c90b71714d31ef05c3b26891e274d9a6ed302190777814ddd0ac7b45a8cf87eb21e94ca8e9a0f6fc8295c1ce1e69c22b3eec88a5ff7085f5bdfc175467d889cba49db759aa9a0e126ec46bc5a68cbdfbb63a73c1ac1387cfc421f185d46dfe102b6dfbd6c96db78ad4667805a6a663e0ee1fdab510d1b096f0ca5bc7b4e084ecbe9274b82d28b1e8538ace0ae6af52d677fbb95ee5e4f25dc10c0d2e595b3b9ea5db6338795d163ac5ace332c28a4715c26f89dd79b73d6fb4af71ffebb1e3ed3bc70ae73ae2f778222b213932db5b8b7f3ccef618b42e5c551475bf73fc0d531c07fbb553bd4985ca803a0ffebcc4cf47c792a83dbf467325b3572bd12e6c05fb48a455f9f235896c37715c4f647245f9c9262211fd80d6140ce59948b5dca943c733b21b35ce824234f6f0ba5ae6edca72503bbfbec3c8cbc2b24d66ac36edd5157d81966b284d21b5318ca4857780a10154d533794c073b2044c0299c90839be227590f461dcdf7ce9e77834a37c6aaacc1873fa128028c56f3fd4af105300fb600ca5b19f6515f8406127d6e6dc08db95f3527103b0d0695681dcc2bdd3088c6930d4a7beddce68f010173b9f4282b0997859c2914c49f5d2bd85f61591faa1462da444f42cbcb0c8738c2edd79a9944d89f4fac330005a6278d34009a8b8ad7b283efbe209962298f640014522ead0f6b0ff39beacd2874068173f516c4c684d1ea2251077212b79a1f4333290af11df72ec110290a8d91db037e7562223e225fca3961f776336bb198bcf5b64f0136b14d2cd2c96268d3db8aec33438017ce52eaeab8970d926e4ab0e09a1eecb0a46a54cbb5d6155b9785880563abadfe2767f8f87713020afb6853e72a4c36e59b5a0ada4d420d9c5c53f68381d6f7b31ea8901fd28c8c1bcc4b3498d3f047f34e9c7d29fb922989e1f3ad0ff6faf90e4b2ee1b0ae2e1568dea442aa82dc2013b00768325412c8c125591de43c5c826096cb71f809a256873cfe0f204b6bc79abd46c08f9cc6f9f2118ed6c4d7a5b2e6937e73ff797101c4de29ddc5ff3f6f48bdd6d733d4b9de4d790f35e208c1c02592f2b1204c9ae337695fc40ce30472a545d8d5168836d51aef54111fceaf71269a06c96634d95fbd12fc2bf21a4fcf53ce8b4395e597671adb7b61f8b2b08e69c441ae4abb4e4b84309e1a940783dbe80a46eac21a693d77de553b515943a1f10cede53238a72796c6e8c0d25bb17f36be7935ddc8e8a165eb14869a407385f8dc432c4e8e40617cdbb78260744786606c6599aa8192b916fb4394681cecf75a0a93da74d999219e6d08c1fb627b9a389305647975b7e98cb91ac394aa43da744d60c76f7ac71c514d4a39c8602be006fd77008c42ecfc81aef85537a13ed33d22a78018dcb97326f47b046a2b80d07e77db0f3d3b4d63dc87066e191c1d5becdf332667b94af53146917fb0b57a3bd2e732425d7d4cec9d7bf1aeccc795d21e7906ccfad35ece3db36095647253b9b14d5c75f3a0444e3fb756fda0023b75a1c8c0dac18594e762276346f297394547ce0d2f791bd5d4c3e78ed9fefca9ea8a3349136ba35d3143d417ace3cf75f5750c6b53c0db33494bc92e9c1e452c445a2fe94c902e440d03dd10a251f1ae96cb0e3c6ebc93682f754141822be83b60337ee4b9a61ef99e8f67f650bc9924d4b04d44f02c6ff3c0c00ab02d2cf8836f5b95b3745748cf081b376e44689ec820f8c8879a609d418eab4a08628dc98f0f45df46d3cbd8e1a5ac9fd5245dade4553f892ba7c76548feb0bf27cafe77c20aea22fe76330bb61748800994cdbf5ab0a367c48d55f49aa170ddcebb049723e968393b2e41047c01af4cfb2e6b812e7e7e881dde59d1a3281611a46f713195b2c1a77f7c8cf30d7bf272839cd9d6eba92787317536ba39d2277cb15d5e4d4e436e60d30750790c6cfb6865252813c2008eb0efb4a0447b951e2ee6904ce5e645be2df751fafbb42c5a4648f1dab6c4af444935c06dd9d8bddece6aafea2b19bd5b4113139ddf911e5c77a642a7ba1bb2f1efde1046fa174fa290b16a0a52dee0a0682dd0a185908678287a090f5a32350dc7c8fbc3869a259f4455af0ead21ae97ce07ed8391e9e05421b5f9342ae08790e691234c7f59ac16a52cdfacb259ada2f9eb42e14e99beaf8e11bd32bb34d7a25cb06564d129fc19aaeb51a3c97c8a8cf12cdd67786de8995de78be543b5dddb1b7ea7070ae013547ee1c55356a3d09c9c7737b0839be88e84ca35599b51f4e84b154b1f74737d217ee540afd065a56b0f27a17c173f406e76578e80ac132afcdc771d402d7148f850ac9752d71751a02a86a82266e086d8a5a505f4f795f1c9cc34ed00534d48ba1e955fd4363c646f0fd0e0594cf3236bb8e9eaef351737122887f69dfb42de5e8506f3af2b58fe650e0182dd95cd8dae8fd232ae7e53aa89489e31796689b94beec8b2e1af6fe8026a0fabb2de31687098a4b7c47b6b66b1faa31b583bda83852985f23bd428724874fb403df7d9448db2e573c94d4abe3cfe145b540f0096ee4dfd614451ab43b8c5c5143a19ca4986c6d0ee4d999c1f3d457f21c953786cbef7bb0ab421962c2bd374021d841c057394a1905f88b2ac05b3bacbd37c40d9689c79ec7703e9e85382859e58359b60bb000835ddbbc905b5ec3fb48299ef964938dd6ca2c953731d1c9a68d2ad405dba29470005b9e2b5ba94a76c12c6a3721a1b81d172c38f51f0a506171ebde517933e4505d0e37e7b960213d9cf3fedffb09afb834acaafde1fa040b12b24f98cad3dd7d34dcb316d50e72a872625d5f633ba198e9aa52a2e83dc13651faf13438b8a35125405aebaa22c93d1a67bb67a9ed5a152254b40748ef06285ec603ad8cfb976c865ad2b34b80a11c191aacfc486d2d811e7bea9abe8685f8706fbf3a1a17b9d962645b891d4b2112167d188d4a47e448190a090426290c92958f7e774e797722bb82a8f50d6636b253772dd9520e6686a5436eec85e6b9865a14656c17339942f27d434b75fa3d4afaf37617823c072d6b11ea4c3c7ab29916521493ad639a7bb89e7410edb2fd6c6a44de019c6019ecd05865154d32f5440f61e5f786acc495d675faa5c942a6e8839df814310c4591b4643554605e4352ce5ba9514142a27cc2b9bb91f59a3df0d89dcaf7abdc3b9217be87deda5c40ded8e4f53e73b8240c025ecbd75001e87c5c919e11a9dc52a13e259e11279ed1850d15a9e6be4e55feb21eed76dfe29093311ea563e1aa8e112e41d6c21fb473b323a76132a2ebaf6f1b7029e13f81494966d55c2125ad7a432e019664c5b7e8c68a1fdb12c42cd7900b55dd67d036e129acf01e4ff7cd7db4522a54d42a80bc467be9970796f17c1afc0076c2d1622a937b08247aa7b96183d380e4464a7fef6842443142d6dd1db3eebff09354c8d13cd80810f9ce0a5833445ff4db3ce9f0b3702b2df233cd06d5af9290db4f3d6d4d18dd4534bc5c8d92a42d1c1440fc287b9c428d6ef8e406d5ab4fdd9c3a2f516785df11ae0b01a2afd5b385667348612a87780f5371f0c67e6b3e57763c25ab422146c2f3af22b39accb13b6027cd2add09af902a09d218892ef0d02e4db1ecc8f4de4be6ac82a3c65706bf3734a2cef969ddd1ffdc257db86b6c70afb54a95143562aceff53359fb6ff8478eac3ec058a112d42ee37a79beba64364e517913010e9900612c9fa5b06d98e05865bdd494765e5e8a95038154d5c087999659afb3f26b16a58039d058c788dc3de8d14726b8cdbf2a32d7cd21267c2a2fac8f1d6356bd72b7e94bcac989de25e89cd82fc988b6b2f3c640aa50533ac45625b7c7b6cfa2674a0c2c05d456796666b4ebad2da51541fc6c5cdec7d4243dd2d74dcb48b1e991d60c53944d8f419106f3f85bdd04cff068059d05adeb94a9125294c1b1b9a3143571c80c3991798823810ffaa7bce2698c8e17f8a920b578a9dbdddbd045fc6cd04792b6d12457b82af7b398f4346120ddd3131cd11b3a59e6df841ac31ad12497a832f380c800eda5642744260e2625ba1614b2a2e071db37479e642319016fe248a65ec64ab83ff7e9bbacd631186aef53e6ecec27f135cf57b19b2987f65ad28768183508b10e8bc67742afaea82868dfe055534e5595395299f940d1cb5d319329ea23a22652464ab32330d6b3cb6e89d3f2d40a5d84951cb5550465f94eedd796a44cbfcd93ce2f643ad0ef70584141b3955527a8c0a3217078307210b6c5da55f9419876eaaa31ed4e49e9acc5b985ddb69596ec44f4874abe1b41da89b6d98d54da0c7b90c388edaa7aff9076438de7c85f89c6cce2b4830703f1a07bd1dc510a23aaf593ffa7d68a8939c7c159b7cfbfcdd633dffb56c6c8d81b942f3f65768cb8d7ccb525c5b3fae0369f52b7183ad90d165d91195fff25d746dcbfb9e722fb215cd4c344a399f18ffc67dbb2971c9bedcf9684654c7c872884a6f717db4f01c8ac92d74dd45366f1f15d2537f70d4d0765a39e73a19837d08f24cf9e2c2fdef53b49edd7fc3523d708609faf84d21f8e4711531ca7447a1aedf014931033a5d85e7edd99aed5d778905e372af063f50f2b8eecae013bd728918178fa90d1bcac2ea3f522caff16b128dd1cbb4ec9f2a1911fae9ca27e20598c527dc9b825f1c645e403b2ff3e71b4e66fd12783553fee9e55da17d2a696e4de3f8ddbc45e4de2f8a2ea2801819ec24d4d4250d78cb0cd33ff7a311e0e9da8ec9cdd294a105e5b3400e9c07ef06d3157815e3ac04cd05d095ffed776410b41bafa3bbae01a0703ab5ffcbcb549320202b84bd7ecfe481e9ba44aeb79c0e2f1745e25a7970a2946ad21adbc446c0cad43177f106b77aa9c746c968024dd1a51e31bccc66328ecb9354adf8aff38faaa588a5a5aeaeaf7b006eed9f45c0b2346d978e6405ac3fc37ea1659e23bdf72d35fd248691539963c69957408f8a369fc197c5afbbc128bac5b9c0ed0e54c17242915e14e10da5b89028d993e5779463162de481b6701dc3cb5ac7fa6029b3db348d06047641829e901b7a2799ba2c89c572c2ac47d8a6fd7ca89b486b8a1d67d87fa72ec022e4ee789c439fee3d54484789cdd1fd1fdc7ac0adb59f487af9a476293de96e495f8052e66f9692a63820dd8ef95976b563d42ca4f66169d3045d45a310838e7e80041e864f219d0805b0488471e5de7c5fcb562d16db75b08f1410bdaa77a8963fdefc15d143292d0f55feec54d0eeaea26ae1e0fd2279433d9bc0b2e5e8b2468b93a230268900495dcdeb8900881cab3811adae0c74f1b21ed72600781873f17ea80a16a388cdb707869b11ea133e87fbb345d53714a3b86ca6482e08aec667fa09a7cd67a43867e5ef10d5a1305a9c6a3dc7b437d783b129b8e36b5b117016bf7c8b022b1ba838422945bcd3afe5be311adc9f955aa2dae6384deb0e4902e9b855ada3e9c8b7f22f81ba3edf30c440e67eeb43f9787ed6814a217b2cf88304379b35f44524476e900ce9dae0563b0b66f888406ccdd46be2420ce9e3ed871c9480a4326dcef46775191deaa2a01be85a6820f4ffdcf54ef7a58749d6c04cf30895bf5c8722a3f9f9a072cd98916d7233fb1936ea26688ea3a46d3943e3b7dac643f454c75c8f216674787c94a7c80a399c4058e68476e2979d740cd507eee8e64aac0635f1257021c525d8f4ef5cb942b9124f77b7adcda2fc0ff93a1496fe654400fcc04de3929a846382f770bf9ad7b4779105b6d491eb4d7bcd3028208fbaae6844ce3faca821674b8efe6fe418d88b41bc06efb405fe3ae6990ad00b441c2ce370860a151006f0ec71df8235b800cb732766843a239bb92dad3ef6652e24ee85faa91493b68e2547eb430ff69c7bd4f37b13dce91f9e1474f43366d65df7e0e35e4c3cb66678ef6415aa99027e01524402f716a825f1dd39517aa7de1a0e914aaded701e6b11d228f947183a5e70f210f924f744fe2df27e6385e13ccddef603f63f9f6d104d4bae20ec9e9a6287560c0b3b39a5887c5c4f439d891b20323fa76392ef8efa2b204119338d90fab23af3d0b76bc7e665cb5bba619c6773dbaa9e17110ccd684bda34267fb7ba3fdbf9c823c291fabfe101bf5625200df1d445f59f1d88ef48543c2ecdf57ff64cb920c1dcc7c901444b469bf496eb2a92dd8d0147a4faaf7c24bc64f6adc956f3ecd12e50781ab1626ced6eb9a7da243e1eb92ab7e7d13015fd2257bf609c1e3fec905dddf16483f41f943c72ce0c04b19bab45862c96dbac6d1335f5b94af9989a1668bf5fe1b83abba6f886485848ea886787fdbd7a8b74c1c226fe62f022a2b6c277774e406632cd7f766f2448329e3844c025638ab8d5dba7a93b9893894f4ad7ebeceafcc62d51d9c0607a1b2cdae47e0941fafbb294c6d7dcb28ade84fc0858cd5f451146f8578fcf7028191927afedd27f3fca839a612f413aba0a498a22397c9e4bb27cedf001f0dae07b438edba608748a79e000cfcc46224db4f19297f92502f3b20ef2172acca0782f91c554d749492566bb0bb05ef77e152dd68474fcbd97d46e2d7a770fc27f8acfb11b6f7919661f40010779076432ef0220149b3c2f5f2611a31b7468f597d1f3b5db76ebee5d4e252e0508dce1c2cc6dce4ac62d37084fcc278062d9c282a3b0d9ea1e1863f0aa6444e3e61de9fed3943669b4775c8dbffd650ef60662d2e8187f0c638de6682f2a41c708ab2dc16d77cbee09b146069cbeca078c17928d3fb5d56c934882c5ae1a8516cb0a262e71097d5fe1bc1784aeff7d3882323e6dd6d820f0f3861de773b40cb959edb2c10ba156c668cd5f81ec3cf541ad8e85baefb5495af2df0a0e94c60f413c6e2edbe63a096f793b0183723a6d8b7cb0949fdeffbbc321624de867fedfa33bce5be211c60b3e2267459d2b67de9d6dc911664fc5c0857f1ae7c8c4d345d0977cb5db7740f72089961b7e3ae32e78820f3e0ceffd248ffb62a2bd61eed535556ca99022e0753eed89359bb4cc2ce995e19a27c292cec466ba4d5ca4e0c29bf7470bf705940f9713425157da05be850347c210a8acf4bb21f5eb75ac9281a19dead0aa645e32cf56a23c83491afbd7539746c3db8cb5f8c37a85b570148ea3abb9630a528f3c608b6c5ea5773026c44218399db4c1828eb769748e781a92c79e7c456cfdb596c9cb2da02c1fe8771efe554b53a86a102ea2a530c0a55de45bf7ff67ccdd9105574b7ed264061a772276fd3e1ad7917727489d6ac87141f2363af4fdaaea7e5168529e86d310f5fe783cf9e82cd9be858bab04383d683b81e3941956bcf7376b4084b9622660d96d0279e483c490b361f7a1b7c75c76d99c5ebdd03ca6392967079b8dd33d4b5ba72e05cf5783be58a9f9c08f9617e96169b718442046b08515897b3844437691f6e7d5fbcfc2b25b814a670b4108a957a5200f8f8f9d1a0cd96f298bed55ba6a93275dffe28142f2e4e64832f6864b057ee7fe77d4d908bcf8c4b1fd1028998dacc7f988d011e3720d720847a4f5890dbf60180abcfa167b0e024adc333124d371ca49d30cc5726862b7b9d83d0011da95d0730b014115b2eb7590187aaec6c15dc9f3296496e7ab5cefe17118cbb394a6cfc23213b30293ebd34c495cb1aca9a216ac65b385a4e72bfed02359550de9d9b5605a1ea24e2c819fe998169c32456d67161f5328323de61247925f1dc095b792be0cc608760cdb8e46008d341759a5b9a074b9f4aedf1be1220ca80feecd44ef58253473a6a9f7b745321f7c2fb6a8abc2d9ec8e7642c70b74d7dc5755986c951a4773ac684e2f70f9591122d533fae5cadf0caa9ca4d44c4ffde9580f19a7ec11631877b1e0934aa8669bfd785211f22c06eb57db2c6401454e489231dcc4ee0fc49f40b397ab29d3b1d3d740e89658348d78ab01ff9e03dfc6601b0d412ac1c6d80c1b93d2f91b46f0ebb386eb09c7dcda63c571b1c918a5282d2d2eed1c3839b1b5d8eb3b1b5c4755f21f1ddd4f504de3f85e24401a8cf59821bbfde774c5a53f9ca9b1914ca6cf08bb6a8897a2c4100cf1590c7eaa50917b38dcc26dd7f413db45dbc04a92a8a76ece416158d229884eb1b96be16cc22d5c7b2314c99123502af7377310dfd493ee1d18a1f12026896cbd0b498c4ab07bc9f5e24bb7689fbd16e5af3383567a95ddb481c224d1a201abfb742340a2ce079080d20a870b8a6b098f4a57e3e5dcd6b9622e9c698003f95e7511097efc253f17e05e4a2ec78f3f81f81bab34613840bde47a4436d1e80e2464a66f1b5d5e606044362745fd63a6672686bb029eb794116172623aa47d31d4a2b00f055fbcc2764d79dc213d43b615371b58af8a4b9d59c8c178f48d10eb4f16f85a892fa876f1157f7be91fb9542410516a9af30223b04333cfd1c22277398b5cf5987165c17b8ef139199cf8b7130b83ddc2386479803d8ff185f97a5adb4495ac4387e77501084f222f1559af62c4fb494e4d065858a873e5dcdda448906b135b5e4d66ae3fc64c2dd58f6e8013d25b276e8c44125010c87e9c3ccf08ce4b3530ac327e44f72fe2fccf122f91b40074cbdc3e8f2e941dd65895a12931284a9f05301605bec0bc0f4614996a7925925edcfc760caa3a0a2995866ee4756d479ff15d10afa72ab3df7aa2a96dd17c61e2e611babb3285384fe02a3893fbbdc7f275eb773fb0fed82e68fc5689a8fa5eed41ff69cae2d0357439e90d47019a1e5e74a3b642b86121b4b01a46c67c0bd52615872edf1437aae669f41229d227686f9961c6fc50ac5fd64f1dac49b7e8b98f585819ec9fb653e84db140138bf2ffb879d45569771a9a76282bd014d880b17f5194be84826f8c56f947527f23682386046aa4da2b5aa5110c6ba4e76e8b29cf83fbf18103a433673f4a7aaf8afe860b25c84043b97f39dd195f6f533673139a77e455a68f0aa26fe0567391436ff8d6fcd8f8322c081e74b5a1bc0e52fdac330a4f4dd61562d6863ac923477b5d01a4f01376eaa8852f106d53df34a7e9641cfca419a07bc5042608f9e6ef3db812e360b4ead47f608f615a5ecfb0998f6d5dca27e7b15fcb720dd5d40fd6821cabeb1be41a0196c31551dc36ce8edb3f98c732b68ce5ceb41f4a1e5e5640b6b6cc546ef65585d20814dd383ebc686e7ae95762159f38b3bab0799b84b03a389d8d87397558f5fc71a8e06ff1c5a5231d2b56760ae9d1d490aefedd1c39edf17acb9a0ffcebf2dcb0aadb50268632074d03d918152f3751c3fc3b478996535bd101f1a89de5b0795c077fd637e862d278d841aabf76334812ac3a6617dcab7411d1de721694eb4f565ae120ad3c9627b38f384c24a9f70c6b8d3652d70c8f85d837ded6a0bc4a6be118ea2e56de83a6e054814a7f18dcbe1b980e4b87a5eb0d0896f26648d690fa2aaa48bf70361ffddb1e9428f37d3a3fc2c90a83e4fc57f349ae095caa0c1ca1449bab3212ff686fa72a49cf9eebb510e2ba6633ffd66b3d764663a295fe59b3be0c2be9c1c09774653bdd633b9643039989e7fefd3f1f8cbc1aefa9ea23416a22dc46cfae4abba038bfbd3a5286d70b2df41ea7daaa14ac2f2feea7b33b242f57125cd1499796be0fee59c4a543db4aa80ebcc8e5ae2e212f058fe1ac06fbf3b8ece8f3150fcd6e683ff2bbd8fcd56eba758445b6191661d4905983332750e0ec7cab45229b162ab0154ae9329298c344e917e4e43676fda81965c6907d5fc45b40b8455879fc59375607cf15a716b04164dcc680be940b1404816ddc220a20859b5c3dd82479b719555f44f887590af822be5ca86f8079114c1b1c81d7c30d25e87079bc3958e0d37e261e033aab96fffd13e6b191198a5f636bafac2daccfdeaa4c93bf1e0ef228e4a246b66076827684e952f130e5bc30df4166a33766bab1f225fc733afdfb11abc6a73364b204b9f12cad71462e5a5bcfe5dc915b410243034685270c01239fd8ce8a5088712880588c3d199b068ea46472cc0bc42e7fc6680c499fa4fe6864e77cb107b5b3dc4d4400ba1592eeaca213d00d8d40f29e25dfa064f83c8405011b64a0afde4f57f7651c54cd271b4b80e0d766adf216933cbed3d7ba784815387bc6744c3cde88191a04b7d335eb09c64c5185f55277c0d3b382176067c84328c680920f0f248bfc6f42a355307e28744d82dd65496f9b23014aee1af4bb33d452e281195e83139232f379e635aca183a60e68ce697dfe9bb54918776b5dc2ecdabad21217ba26009545a2bb7c30af10c478680d6264fa80b717d981fc96abb8ae01e9d51a353d4b200f93ef9ceb6b2c61d92b5625a47a07744890eceee48541a2664a07d02a9ef436eae9376f1819ef422434062f9acd70a2513f2fade15c564b8d082a30d1d59f6fb7000f7fb6692e48d6785def688290860c7b26bfaa484a27799f8fefaea325cf71bc5031de9f21894e5c2b90972e7a3b79d2eee36d5838e2b81f2c23f96ae36387f964881f9608ae9d468cd426ab5b83637343f9ea5e714b2f62c01f31cb87acec7dc7d8111e45f78cef0eab6cd409d3b370b407e344f659212c094d9eb9bf806ed43d832cfc443d4f7e432d938ff2f0d7d08f0194ddaf4591cea6ce516a28f9446eb33607a49872d9c5d42413a9b45502501535989cb466f7ada687c7fa4ac217232bc1a171afb9a7b68df6f3893ae31ac6516950515d46df390fb58a167f03d9d28d1043285ce575105b8fdeed8c2b3ec2cf6f67d3a6a06ccecd000741a637dfb6d278577f8477ff92840a0f807ac22b783dfa1b18af322f8c6c7ac4c31eb6722e92b607f0672df4a8d84106838e2ed2379cc8445b5e5efbdbd9e73dc002843f9b796e9b9a4a3db2889707b87143aaca6f3c72540b218f4796594e149df0854a6189cb0b51873a5a214899426abf9dc76c9b206e803509cabbaa5b4deb288f474dd71e1ae5b101d1d94f53fb1779eb200aa532869dbd77ef63bf3f14a67141fb219dd46b8f4deebfdfe4bf6da4a0cd1be4715f911d3aedbd12656c68302f362dc0f96f5999922100929350cdfe3af8caaaf0884d8b8569f7d71b0de87b12c1d56329412419106dbd26a76780008edd78fef4068d75dd4f072c7f9055011d7794ac9445a9bcd91f84b95190512161e3aec053896a8a16189dd74d912d9c0433608c5f6c4dd1317ff0ebbb1b486c3460be76741f80c7fbd3a5a51ca91b66a37ed01c693ba3079f258fe8b06797923af45ba96df681e361960c543baef694c6256583cf6cc5bab476433e1b561cf6a21bb2e78de21b65cbb43c0eea02eb2519ab6992a6347bce5c625b26dea9bfc8d7f058253bc64ca470ab4addceecc0cd21e2167e3f4dab9080724a588141ded3c380d25748f0896c47fe3edd5eb7be326b4514063be83b5a10b072a73562e872114eb5cbc7102c2f30b119b92f64b8d22826c3a5fdfe6a79e840d0f93518471258c21fcd0d01c2dd0c6ed0c488885e333f0264b30abb09dfa316c8c828d0a0456b4499c6d5f87335175f28b8982135511773ade625ca373ab8c04661a0d8be4c72fe83f7f42cec2b58a313afc7a996a31f22406399d0be014a14948c2c488416c378a41ebfc8818a6d282632332854daf6a5614a5ab2a0691f2021db50a0d8d20aa10c05f90362a27e2ac76cbeadf8934797399b98e019bd6211fe5236044d6dad36180913dc3140f0790c20048508ad53e4fcf1a9dda67efcbd9f2d97235d05647ad4bd71b4fe46d0b6d3b1f94c4ae31187b02ac7087b6a9d4f0017bd85c87d07b6049dab2922c0b990c6209ce0c8c78745dab7d230027fc1f8f59d8f2986c7e4f6ea2102b74adbac3b3359bfd1992f917ca12f73a2f1ca68fee535a1a37cb946da2d2e6d1e45542fd680152b35fa0fcb4d1d2dc7f2eca2130cdfe51eb6bcd6d82f9bcbed032b8c34f4ca84b83c63a7c80f1e708d6fa437e136e9cc8419762cdc087ba9cbc24a4efded034a818708593625e7c2fd6130fec54be452a7fb4568eaec04d4091ead2a25624a7c6a7a014999f95ba5c4cc179a8f0a40b009704767303246f97c49457ea2c8d10dafa05d85f685bd591da9a624f6151bcfc678e44a93a4fdd86314a143082e9235b61b50a66db29f5a74159fc3ec077945fca2e032b54145e90440fbc11b79995a944f006897b829fd6ee7d639381c016cf2ec58c1cf98898ebb79d9538dd545ec70180041c2783006869c893b28c6b30df4731525dc2b9c9f918653ae0115b5c058f26ef304fb3db5aeb84c3bbb8ae9a578965953bc13e81a55d4f25b5339933860cc156587734a95058fac04aecae955d65cbfe9e921435e22ea17c1737b9be17334335bccaec46a6fea072baad4cdacf082a44bc344c1867760258dd06089cd2dd3ccb4b49bddcbcb1f8d17ce262a4b26f1e73d7089034e796b1ebc20003b7dd8ce7dcf5f8f60d27b3fc7385de4e4c50c73848e05c2bc7f6bd5e59be5d07a226141a8e6bc428784d30db574b40555d265fff9d359e4dc92ed34894981d3a5a4605f5947f41b990e0314ce7a3b71ed1aa5c1f1d721461aadc60e03f2e164c9139061abd589ae3b772a20a2a8863fa8b64c282cee6ce18e9be593028f3171bc67128c7dac461093e7dcc540c268a8b39ddc8198a0a1366c96355f56199309c4c0b357964de0150a19b436e5b31aab2dc3c356fc1185cd2d951e086eeb1842ddeacdacf5de503e015af4e1f1414ac189fef6b12a646cbb20a1b4ddc69459b69613d0aeb57d0cb932c7af4105782d8fe14a9a2106c790e0a7e931ba7c9a4b42741b8d7933df4284cf0a3f09907ce5c2129278c518f80bf4922218953c827622c62d45d2e9e9025bd80bbcf69d980ad25de282c69195fd0c854fbca7c9210223e587bdde8dd951a42a0f9a91d7ea2fc0f30966677661c062c57920915f1c6067fcf4abc143d549811950556bb4dd2a9cf95f46c9b77c8b50e62202b63789e850a5d6b92e5e138b02135e65c91c9696d253d54a336449de8ee4f7a43e830b30113ca21372225676c9f1ed399f69ad315f39ddbb13fa487c9b75e22a97b6b2e1ed9e7f55e0dc0a70fe0d16f7744663cf064d574ceb75bccaf29ee1b0dfe5e2ef2a2a9424c69c4b616eb59cc8669d50d031bd17334d2dd404d4f7c00483c3f6d5b327fcabaeb04bb704bd76854fb1f876162297ae8a7255ea7b6f8103702eadf815bb8828aebaf22876570c36edbc1b6b56ca400aa4be9f1188ea2074b211b57402c7fc376688a2dcadeb27c881980432101020ab8d0a131b8136494e8d3683426f9676218550c75c7e4926fbb3b7c2580bd5db934d8b1799ec0a72811499fde6cdc35c0888195d40dbcb0af8960e5cf8e31a0881da24c940a812828e536bec689016d19c522e5be04af3152b421b140b4896dd8e2047b3dfaea2b2fba77efde4d5900f9ad70154c30d2bb5c25d97062f850702f44293b6d7f3ad075a4e74ede51e1a58fb5011e9893dac9d45f38a584840ee79c433c5a9e835b1435cf9d49019cb42680ddfc9c6422ac1d0ae2a559e3d85a7d9adc954436b766b0983ef89ab38e566b45644beeb9a09be61124934bf8cbd77de556bf0d25ea91e285699e93056b7f95dfb45bf4f101f52e9edcde3467b70315e2b2feb2bd3ecec5fd94e487c0225a410211e0a1cb7e05dccb78c0e56a85a6309b68f5fbe9b6f964c0318815e1095a2998f813b68d91dae15406d037ff83379b2c8f460799d1aef2ad9bb9d07407b953726df659736566b1e670c25af39df91768e74878fb637a2d10882115f1bce774747ceb6da8054bb128be72ac4deb3988db4c5c4347585e0200c37ac8944e4f89ca1a28017e31aa7fd46db428c339e2ee199f6004d65c98d2f87cd679e35811d3651a5c5b23639fe24516142cbe9a3b328d7f858c2eb28e47b243a1d66bf44d274058d7e28b36aa10dfa6bb8caafbc26d5a224f6c40eb1e8b23f34f68894f8446f20cd8ce2842d25a77dfeca50de039b25df99179c9e1c0df232b8c65c53cbb16b0de1289a6d56cbf12f4630b3f6a1ce8f25d73724850c8496f2a144b4a1d0749ac4351f3ea6c5a6d672e0d0470b0fbc89103335b3b18795105fd59d5fdd6a78cd5424bde4ad92d2eeb115f0700dfa0c2002f6194b62ce8ba376787caed5715402ccc3edb333e80dc6aab1fc9726c710cf42208a15d175a457d7adef3daa2c2920394517ba6f0e5239812791ff8cd0dcd09e521b60f114d067fd35be5fee59f831059afb83869d0e2aa3f8fd32aaae4fb8cef92ad0d1b5f19e89f93324113cf40a5ed0f1ecd1920add74ddd326392c2b71754c77f9c31b44e7a5edbc84e8f720cfc70b0b98db91c9045e1c579b60039258e5fd4ee7612e5125aee02cdba1859a37f6c014b0f4a4050edbf347490329a72b41ccb840f71c72e753f4311634d6e50fb68fe6590c066243fd76543a135735fb140646b7637b0030b390863289fecfa6e4872fc471c8bebe56266164cc0d529035f78ae129bb648f3dcc2229428ac7e29b8926ceba7d8a47ca1f0302622df643ef303ecd86f6b98e7b918f9ad4b40e3443d86f8688cab610f83b710c92daed5fb8ec7556264ff4692d1d3cec2fd4dbe34545d6e6677b64433c68dc5766ee41ab090c12b64b9c6809ae6e1b1cc38cc44371e5974375c0033ae7fb65180f572293de52b49644bb1313702ae28b585a1734032dbab1485ab3107b5f8d4df0cad8e717a293fdd2aef16c46d7fe58f537e740d01571213b96e93db34cf0977b9e87500fa9c3daab016838bd792d9358f20e8b87995232dd2f155ad9eeb4ccb0d968674dbf965e6899deac6f1b7b1ade6c731e8e7c431d9f62ec99f0c99e30ed6813ba13cf8bbc1b529be1f140885d38baf6a8037a96a3c31d1bc66bdea690323bb62b73e78ad3ae764ce3a98d769b9b0c724858d3e0450b352c079bc17029cc07139c387cf8de14915a516b91961efb409e909cf5e875a22cf657a4ce13796c4a50e9e3ac32cc64ca90ca4190f0de135420e8c46f8363fdfccd484062ef0d5aae61cee3d1d7b5ce0126fb744421354863df71326793730665c83cdd15dfa324063a09516c7fb769976d634ff8ebc0ce6548e5c762c1d905957faf6025969a8ed66bbe5507dc4df501ed57c86fe93e48b55dc710c4bdabc71c62139b58ab3a1e74cd363f71d2895c1e168c212bc88cfa1661450ac60cd3e677c4bad03fdf879f8538e2fb4a08065929731ad059d8e14c33af8c949227e6a3ddcda9081019dad716f8e0d860a635337a80dde0682f6ca7a3026cc39d32b67584d7f62203af34654a550401a8e725b594f672a3224fb014270ed4fdc670d809ca2bf0d9ea0dbc2987e8c8910687d5e46eaedeb01f2b1a48fa961df5a6b4b6defff51fbad0c3827e9453d8d88013d92a3fc9211ab1ed5816376b069031d0d5ee123ead72f0bbb934ac1a713c4ce6153afc82ea1e6a4df0da67261df4b950557f6773b7df309a6714000fc8bccd8abfa1fb8439777df5fbba6e461d09b1bcb61509e33ec7629d6d4e90a789832cabeac1eaf7e328a9017a8f432b30e8c01a7b416852507f3efe28218cde191e896efcfef6d4895631903ef197d7a471fd7f45fcb8080b70623189cafa69416a3d5e8907bb3b6101c4997007fa0b220f5de640bd82349201ea3064455ff4413d030a047e91cbc3d3b06c098689f9452775a5e432084c4d65527f9f976ba07fae7afb251ea415b985094ecb4f4b4ca30316b57550cf63f4dd610e0108564620083ce22fc1611adcc05d3c0e03ae3bc246d4393fb51f68e12e6ec4848b04629b089707b1a6597f33026d74d417daba18e6d679651a7763df18cc9084b2f0148f1f72fb6e08ed071df63b622b2284824bcc3c65674339516c61dc4c329903b36015934b770f864ef3e83038294983d568bf5d5b0b3b573701d4470634639da98a846d25a3e4d88b3bec9133390228fa5040965930eac8a621e37f53b60553abded5ae798f4b776ca3df75fc29d7c237eabcb04e3d78762d37204f63719d8cf1883729049b0e35dedeebe0a815345d9c6d40df042859c83981f3ec97364e172ee82cc21752f1c9ab0e74fcb3d0acd5390e14142f36ab858aa81f1017aa6f4b081abb5da38115c95c9698f09087e39b96cebd6e323b596c8eee3feed03d924f1d02b4ad5b62d0de60f3148b78ddcbbc77bc7b7af6dbd57f222f8108be7d79a664c1a83c6cc1f9b095e914f441ede674f52eed1bc87de1f0765c694e7e28c227fbc7ed9cadca566c14d11aa62a224e98a3e2a1ac12a70b03d8666522de8bdb0eb889197bf44121e716af3222d8757e173f0b16bfbf10b2eb6397de12a68b824d0c01d33833c038559c5ddc437148c6c8a08fa84fd43fe830517e93281c15ddc8c48021f1561207c3ea4b206041b219b06cd68711ee53c3b7f194a363759d56f713507f30f4416569edee5a142e8cf4d03c230a1b7f5de9250bbea142a9deb6bc28afa1d65f54eba446a9e950867086f5cc1cc81a54636ca6770ea855f4712d02f26e35738d6abfe1a4214aa776a7e2ee7ba3e208b10afcc732793cd7429933041f768d12b5c3a92add8642691f0de194d9c0ee31274b508f562dfb96b7e5d574b3ae362ee6c0c9b7bfa83d9149bfe12c6aa0a9c8df265bb80cfc8eb466efd9dad302efc5dfe46a0852a0f8315a311eaef3eec8e1a42ae7d380b5e3772f9a777dc6cf1cf27768898db5e0811033dacbcfb76e65a80b57c4942ee961868f393a50d8d368a12a5cfd8c82efb429e9a8a7c5b895d6545aed01b4a0b1f1611cfb8835d359f6b150ed0c1da1d32e26ed39498d46b57fbcd28e1c90dae01b96fbe6c8076996313b4a329eb4d12ed389be523776a39e4446fc3d2f3b24ad2891a93b4230947b558307608be755b5705ac82d064c1a0ac5b5f16dca91093b06a633a280558643d3d4fa8378258aeff038eaec4a968d5dd48afbe4528d029a22db66f56e2d79f1f474c5f7fc80041dc47164437b84ef8dbe94275dbd349ea61daaabea8e0192cef3de8255ac23cd870c9f5af1074f9cabae59319636d890e3913ca7a677d1bc77c898ecd2b29cf68b17268d7a498d11e7c7d0e483114bc6074e2777e865f317683b7f0cb66f1e75c24c1fe2d8028673e436982d8713c6295c02bd64a9d0b356d76446c598925353d86617abb71109519e1aa3a75967c0baf43ac2881c126ba8f4dceb1c768b4fa4355d54f0f1b582be7bf73de382e8a5162b08fda0f3d1c4706e29a883eedca04ca97599013de2c1c33e16ecdbfdfd82f400121f9bc9ee0ec4e5591d83f4739fe5ebee6932058469e8ef741588aca38efa944f6db8195e7a5183d5f03dd9e430c53b5e74fd02234f699977ad91ac52ca535b12c5449300bc57d6d67254f3089398ab16045929680f4f0c7bd7bbc3607478980f7c953faa4104a76d2cd46d43e0e2ed2b6f255c130efe66a07b8da572664bff6161d8a36531b4812405a443ad28a979376e696d750f483965ce0655761513732aad5639cd58419b2cb4ac769b29f2b1660dcbab3323feea9ba54b7e13f9e261e72aae6cbce4cfdd6b44deae7452638f5f7fd8b7e32d8949e221f52621d6647eed60abca671800491685fa66523ebb5276e33ffaa54642e9e74325c0e56ffdd97bba5b849cbf5133cac4c50376bf5e04e810cfcee26f6dcd60f85a9e1665cb8cbcaae99caf229d48a2bc323b03467a7ddea106278110147ee377c46808d060480bfdfeb1bc670f4ad6ceb33a4af342db74b56a621ca9532b02778b877ad74900e3afed56d741e780581990fcb2e7cbc1e16ed718ed15cb9731a29d53639cba3a5ad2b94bc78303ee705e1211860c63eeb9124ccd80d916abf74ad238d2c3bdb287c7abf629ca08e64c45eaca3919f78e2aabd6be3fa870fca371c29edf03c647804a1cb46554c56b2e3aeffff37fcea6da330b0fa6def540a97ad2fd3b41d110f503d159d216cd916c2e8d3e88672bf3d43b1458d0aece25ec619e65fc68a4b4dd30dfc63cc8314989bdae0fd459048be7353623b40ef2bc18e4ba72802c81a8f6e47a1bfbd6d57ed3a187e729d3da8bac6bd951de48ae18bed98ffcc883ba8723c805848e1d6cec9b581ce86ade6fbd74c491657c4d5b16e35e48be5b7feee3e483dfc7d5971d08e7fce20da212a6c017fa9ba65237472f2d9e615b56d961bd25e614ddc2167157f302ab1b4b173ee0cbfd9abcb408cb565324e1f0502ac4d9507ea8ba3533b57b8b3dadb667d1e3dca650e4f96a67e77e84ba71489b3110dc70f9ed9f1ceebc418d8cf744484dfafbe9689e83982e572a2b850ebc764a7eb130595fb7a6b3a8f96e822a4bed4be84a6a070c77d5802acab5e770c82387ecce841d5046527c22812dc01118d1f68b0b6dfaf87a1c870e301bbc0848967ec3869b9d9157c581e8e3be36b2e7757ecaec04ef39fc83d4b0f93b53a17c6a9459bb7a3f27d4108c1195733bfe2f7f6860760efa65545cfe056b217ee3f03fb0abb5c706909de82b1c60d1579a3f58e8c5fe659cbc9e5709821d142b2aaf24d2e25c3ecb631d9926984cf6fbe66815f469a680b62ade59e661e4aee07cba533486f5f8ebd1c3e0525233802b50236d0449f002e51dcb81c3002a4b246c13590afde5606039ac20fb868430029aba921f9783cd7cfbef88addc06cebee1d97a23bd917cfb757a8e68c7d004c8f2eb73f70e351f1e8deab6b481b4310e48d7f7e6829b2109519fb4724b470a79857418587decf73601eb821278bc25e955365f419eba946bd24a69c9e24845d72d40e7bf1020fb7900035962b29cb28d31d6f3256af3bbfa41e74d390a06b02a485e6065e876ad92499766310898631e08aba818a4c1e98836d3717355769e04d6cead917a512d7b309e9464dd58e3b00cd20da7670d62a1b869937457a7a8480585a5a748c987d6e45fd7f04e1c9077de350c6ca68b35369f70366cadfb2ce3c08ec33323bc4d88871e92794fddfcb2fd78831e8423069022d4eddb2fd6e0872a610ec023687cc9e4bfbb9115312d545898c1c885d3548507a1cc9374e29296b9b2837c05093bd49a6d18b8040f15c2887976eb0462c21b50ca153dcca7e54db12b25aeeb7cc187bc4f652b85f14ca98ac2720c79d8269f83496474abb9031132300e33d4294cf6ed89344c6c4c806b9f106e52a21a702fc36b45e9e1d32868a8224e5d9c6c2e2c09f1f2b9a92867bc6e2e934d78f0b6f3ef8e34aa81ffd91de04317ea19d58623879041d63f99a71bee9a010270e5e838843bc10195ca1bc4861e9b4b62807bf6cb16b0ca9c737050520f858f6135b0289123f659d2c8e1017d60eb58e45e552688589a79489ed650c1037a6ad42b88e3af40e4efe45036db2f98fe1780b57649017f727c0a0e3588a0148878984e5b294d7a66edde6e1979c54a00c5ad27123190b6a7ce5d40d7b1f868e2c89ee6134819aa830b8dd1692170f400e060d5a948b992c099ce75c41235427b01564f90be19865d7e38fe0c799be4b11f8abd293150140a2e056c1fa481f3bad10eac580f8deff48f13e46c73e83ef1ebeda3cd2853b39c21a2514edecab619dc5103b020da26620eafd7248609440f3bec1e1589a676be69a845bffa55fb2a73a669f818bd804af3e3edf6e2930128dd815a06be505af2b5611a6cafa19288442da9679c32d6a1140f907213206b74be251f1a8df29d25a2125c94214e41a49d451df85db6f0d191422d1745a3a21e73da251dbeede60c4b6eda8a7c02a964b55ac4b8b2966ec31ed9f574f24015ddaed588fa2ee213b7479c6cb2b949d85a3578ea6e129ca3deea4d7099baf890779d0a8f3e3b536b42b0783fdbc2d34139842c9234be216f3534553fb8600fcd4257673654feec05c0265c40c9632f9d6cb363ed5cc41d9bcb52dcf51aaf73fd8564df24f18acd6bd4f97eef0386970c355d3cc7030c4cd292cd2706397bcfafc012dd463773e3f6cb7bd8bf06122228a0c1cd213832936a55c54270dc88efe0e536980b7dc060cdff39c5745273249672dcebf8b50c010f1f43cd9d00d3804313f91e62e2d452a76599d4370fb2cd38a9fac284f72aa9eef2a8a50e031ee42cbe5c43cddb7967e80465471804944e0d78445f898312cbfb24dbef83fd179ceb3e35ec4c8f6efa5032777dcc3903e086aabe1dcc84a1d71185770ea23c4ee3ccdc1b7fd528e018bb84e187c414a70c7b44752259b96f384238a99fa2985633f74b6e809283efb254946c94630f378bb120c62ee3d0782d540a94f1b67d6c13e1bd1d13ec020c6c64db7dd152dad8d6004145ab21b59ca542e52005cb589b8ccd0d3cdd67e3ad1517bb7af61edc88f526334a25914d176c5da84dcea31fd7319cce6aff895aac9916ad3b1137af950de1787ebe1620f4143123e501dfc1501a68f01c57597741c0ce751c30fc66883f8e2526e201e88f467b13ceac021c457948ee3ed39a6707e219c8235fa82f89e2c9ba1ad964f8f7a7c6ef1ff95cba4cc5077d56248bc7988431951b06e5cf13b848014936c0609cd95de4083c3b77b4497e710a12c7fd9c31a4ce4038614249423e323fa0206e8b13d6ebdd10d73be1642a5eda839129587219d218948070bf5f33746f0b10cab638c11639307bed496c4c74ffd119db373485f853e653b04623310d2697f03dc255e3c4cae0d9188a4ce8c6460203585b23d99815cab51bd0ad9973a42eac8596cb1cb0e7a80055c9f52426a3935f97c27f21fc3afeb3ef9b98fb8cea384e7f4ebb0bd85d1f3dc7b55193a300363db25a49756438fe0c9cff018f1cc91c27a605cd0f29824661ef91ed006bdc5166b9c2313bb47cb2470768aee147ff8246d584661bf7ff3ef7c09e60f7026a4b30cce249d718045ba68eb693a01392fac9d1ce1ae5abdccb8fa50da3fc45b0758082410c5890fa6debc14ed29961ec0b53cb4b724c8cc18471c10bb36de6658dbdafbb9c8d300d6f90fe3d1546f925746cfe0014fc43043d339cb6d0534d4a202d6df4ef7e76a493c0f07fd4b4305cc8b177464cb4586e6843b37415775b5f193264d12aa5ed91e9acf9136fa834dae6b2c79b58f13a9e3ab78038f35b966131ab635a73946da023c9d520bb258e1ec35972db558470c81e87a392679e7cb2295ad4ef73bfd91999c2376f352fe1d3c0e2e852272b0c1d59aa86cb3a2cc27ba197fccce9e15b69005090df00ee1769a03210b05b58dcfffa6a5ab8f720b525c860b52fcdf659636b61fb1becad3652747857a054ec5a58bdecf32a44766b359f3b60e9e67ebeddd63a2218d91b00a52d41ad2a455b6d066474e566f9954b64d2a13a123606b1e989858fd497e4580ff6d65c766182812889e39a8e65aa6c02a30d5993b4b37d0039e940adc2872e090d50c554c3027122f07e53dbd8c665a7c37e92be580b05057464bf9796405c81fb7e191773f0add728fa4409da15d9743e63d3a4dd8d545e2bef4b24a45cd7645438f9877fb8922f9b2b371013b669471ad46ba590a752b6d0653cfde0f8259d4079dc17d54f2a7d486b127801e713d7232d06ca94f50957a087d8cdba9de7600ab0de6f23d03f1204296c55cc94da5383794088093afb6693347728de391d4522feda12928546ac64ca66dae2888222651dedc25e906e642defb6478ee08b191e8457860e448b98e09dcc70a75f0500a51eaaec780deb365d9e4169805afd0c1afa7be40b22a590ecd44b39dee83be604e24fba685c511a9bddf161c34de37b751e6c701dec0fb8437fe2821826245b3322c3b7a484d11438a25691ea55817a08c84703a94ea47ccda6be9df0145e0b7c0b4f99123da1d707cd2506d443061d4dba503ee8851a16cadf86ce9f405c13203261acac1c835bfc060e7cc30fec782d825922673a5bb959f84e4dba2519aba81b73892c2a2d75f18d29b4ed8ff6c06b51f6756fbc572526578e69daaa071aee44a2b1686c86b68b1b77d7f0a61c94dfff9201cc080e47cdf1d84e7e545284aa49faecef558c79dc7a42e3a12e250ff31f06c61083e5bc86456df01837fa6cc24ba7916da1cdd8df3a265e495c2c6c34ea3bca39c517d256e18e99c141383bb1337583a57224c47faeacfe782318ccaf1b2291415c9f7226eb8deee835a2b9946a33146908dda4af4fe46973c1343e08499b6232cbb60f1d5766aaa4583ed9c000c8a4c9ae0638ed4bd2027c04bff268aa46e38b5b92f3b090695ace711bb29c3e14f915be1b64349d50437813cd29adad70d238726542840d038c8159a97c35198363fbd199b32afde85ef8ce30a61094ff19d94f9362e22ee5ceda5f21b191ba46201e058132a0258b32d61893c1f836b79b900437bcedb01a5e29f534b7cdefc02f8a3244b0efe4203b74393f5d14401228b933ca31b89e3c1ed5dc1c29a17ef918d07203d131b5901685e4dbe40bac6aa3e9f84595ed48e60cb442f56302f883abb0dd250ea03ccfc235882ba4d4496c3880f867c3d4ee4ac6105b52b76870020ba11abbebbfe24c3fafc77882fa05ed18dc476b69ae2450d985b99cc80bd9a5ded522225733eae11760a3c639f6ef2d16225a1d5fccd6d4176ddcef2f31827413c92abfd9f8d9b563f83f4801b7f93d1f5c2bd1a41e4af12d70ba0f1364017d3c52550d5f96217d8e4c911e9991197706de9e0c142d16a15b3562a3eb22feeeb517db372aedc9687db72fa2d0bcaa735e4704e3a8bf2f8e4f3e5b293349e79cfc391c821096455a863540499b56065fe2a4bcf85f7954ded44da345342ea354d5f7e0423cd0e21ee1ee99e32cc932704d3207c91cf7248b841ccff6dfed253b7d5050cfe8365537483357662ffa3a126fa9deda591456e9f728d9139f168abbfeeaf75c9ad11c0a1f121b4c1eae6196a06c6456949c6a2c89cded40a465045930e00043ff21e8e558de999b98e37f227738b1dd1c6aa62781dd34cbf4092e8a614a6912c13057dcca236ff286fea9b52ee8b55284a932d2a80ad33d58851e0406e740159e7cf0ad7040dd5ac0ba89fb2a045522f406768ab8768dbc146b9b976f44ba591b1febe95930470552604eca7568b740b38aa033a80bd876e7b9e2780a20119b2ddc08fb9e814499e98e9706458cc6f118e29ff23e45be26b44419c42606a6ce61e9df682f71ab2e8acd6adf1f2b964d9cc0ac2b15341ebba55d61cf085aafcfcc400139563255613cde177133ad10f6b10da7c1c3a0590ba922e4d2f13f7a512de8e50eecf96b3ba39aa39a72128d401b67c4deb8b176e35430571a7a4b0b84dd9a4879c8291c305d946edc52f89298064b310017a36923b3d3847ea8f4aab04e09c9eb5762c10d10dfa07e5672f71cf4d0d2c616f190fe394ba21270d860ab229574e85309707fa09acfa66de68107aa79c6df95b022e05914e2842669cf10ccc0f315c0bb77b068069994c17bbc380cb7d4079bdc89626b7c7cf223b72839307c847bda8903efc70a89452a57fe1497c3495cbb51afbb1d4fe2342a48998c88594fdfa26b64c499072490f0638e51e4a3224d46087279ed9cc91e3981d3da420653b1ddea1efadfdc40778cac4a3ab1a294c1ac436915aba8258e2a6bcbbabefbb0e446320741def1fc03afd700d2ce90959e9142c81715688ced03666a1f82fb6b01905971db9d1cb97b9f6903d46a3637496701437fed04dcbb86c131180a1350d2032ec312c643771535961ff87c963df97406cb7c8b0c7cbfb530c3485ba7f8ada5cb870123814f4512552f957fd6b314bb035f48dc790c3e4b9f8a4aaec6e9344dcf232f0ab7b5bd9e99a5525bfe686da7ab7d57bb0ad54dee6f11b5d5387fa7430bb6132ca73b36d209f22c864f2631b36246654ed2f5b09c7972ae18ca1bac7f857da640790dea6694a71d887f4860f982df0b6e5eafc37a0f6de91391e2fb145e929ec2f8b3c660a0e693d8f8f66249b41e03bcaa952bc3b0c9b7163397d6979c49ef9b1ce7bda3e7e8d6b3c75c110b65ae276170859ef312791ed98dfe376a06c05e6b2a2e8917c2f69d5776e6c61b8d5ecce7e3b0add7d7f5e1fef229b7d333450f68ef07c141e77134cbc424057180ce597dc25a32825d89c72b05fc39aa12cd603c03f4d87c8440243c05fba8cbbd2d9a32533333e6dab3f8a6782c1fe79b436e6a91e74c3a608be07477153f56d80756ef15228573d157724219d96729d5b831ed6a6de8cf8e48c003ccae6a28f90ba5d6f2a92cba30476deb42963072e7b7c0f45cdc13ba1a6cfc844ba758c8893990c37ed40069a2155ee535f5181c9b7a561698e649ffb52f3d06f263a92c4560ca3c2c22136fea2cc6dc9e59c6c68a77477ce5fdd09b4672db8bf2b3ad47ace03568fe953930130218315100184e0672eda6f0b27eac8dfad318e32278340a5c5275149d81fa871bec3a762f27ddaba2225444e84795c737f4caee3b0d98293c5781e0871800128eda9962881733cf97edd6d04d4a37b53a667cd62f2d613a3474579df4631fb06bf90db357a8becaaad25614781e9c0021e5dc58dc0564c2646973f5c4addae82ae7f5d8698f5eaac7a8f3b9d62592129189ec97a7e3a177c7391ac99253610a6f7a6e810e698828ac1649462cd25b0711aa39eaabeb09501b06d3deee1bf6f12eed7cc266e053335e3e6c714830b43e2d9c2a03fad580e4993149758084697c49779d484c79af0578c6506a6e5b66cea08dd5ba3b1cc94ae46e2c1d00155e6baa9f69089030ceb87d8dbc6fa39f5410196f8d324a4dd9315b89f0d8ba4bb9eba559c1ecc434bcbc605311b16e47e8b0db00606562d1213b36948eb968ba33d556baaa4a489421e01f6ed486eef5d2e27657b4a45b1a05cd3f79dd6b3379191197c22cf5f085a30df3908ac41de38ad948fa6e116d4182f7bb7b3f4253fb86cdfdf5e779258e40ba77b153c1655003eb64d0b4dd1d857ef5e3b4b386b532fb1e59e814336582056af6fa78fb8dd167740557be78391003e4842f0041ade2c8132b856faad9f275d646b814e9cab61c641e69d9cafd464a026bd16ec4a00addaa2e697c3e2505e1554200eed33e3e9ae2ef8dfaf9cce884d76d7ee2b241eb14d0c6bbaee7c3c32e09eb0599d2dc8983ddc982a3791a9eb3c3323b0c689bdcb6a52e0d650d02fe3e741a15259e4ec024af3c83cc443908dde16f0279a79ab9b643ee3e31f6992bc80a383d9c4fb9358acf93d22a01172bba3140ab34c7449041f38c1c32eede9984b6b946bb58f6b0fb7dc4a6806e9cbe8e13e31ce5a78a0861b9e52de79f2784b572ddf236a79b8fe9b67e5d6cdcb9fccc6fb1d2b59dd46a470972a82086ebf8e32c1a821da2ffc51b211671e122705a3f2b27695434f61ab73190779c4c67458fbda798aec08889659f9288c99bb40e596ed126cf49d4ea16a81b33d8e28b986e44c59478276aaafdc398919ffe91d087d5b0d705acc863017afd1bea2caab8d66b65392557994a99807ec8add73b419697f3c7e13c844c76689a12b7a6827769bed4b36c54032b8d072b6ff2a8b81b6d62d16095a151b69a9e0f37f6791199bb6a126ccefcef1886f1d542152164ad560a36aaca376c8ac6502595708277879daef1b04ae3c6a06ed7c428a1a3f866eda6bcdfd8753bcbc5e7c0d27d4d6d14edd49df67c8424ce39f50dd9b312e8142d05c8ec9a9c054ba958b27e4a8d5c304900178ad8c264dc75ea3d8a3110e856262280d1ce55368679a61c8e4a26ac3300a0ec058862cf1046399f538be64586c4d6de07f854722297b193ddc13af5debf4118b25f1db7420bf6f02bde8f02a218b333085431b3641ffda624496f3f2d92f14f8ec28b050521852463057cd94aff9e796ecaf00f45eb8e9e00af2cb1ff62f82b7c31c4f5f140de5ec0741aa16404f3266b59d319d5084f8db4bb1149714c85729cab5e8793a9704e2a4450eaa1f17f3f57f224701c791611f061f40556b0aa25569a768b04db65c8cc6d78cefbea25aa297705de6b122eb43cafe237e63aad82936275f920ae37f122c560cc8f08b06b171c485a562ea2393ebcfb6c3d0f1c4cd66d4ea301f1b5613261df7794b020aea5a95cf5bbf0a0f3b46193263437ec4e4fc471d331d9001db07963eb8df2074f997cf05837386a88329a533cfdc66614e745267150569e2d329469161e84d6d29fbfe42fdd57ba10b827f78c4a43e907c95156e7b52efeecaf1050696ebc21ef578de020af7a983be1c5260d79880205d9f5a8279894553d97f42cfa7f4efa9ce063d11d3fd93fcc4085788348ee14db9c748be42649d776f7ba85531362b5b2043458d8889baa862f7df3118446ebb4b67bb618015165ee20cdee53c347249180a90d9ca63fa701bfb29cda525be55b7445ffe73c9631030cc54271c4e18c558847ae375651a277fe1f6c412dc63952d8be7c931aa267373b407f20c52a38d7d3a5dfd904d89ae584649c53a4ae565d89e5042a2801763f603142d17efb4e03b41a70399902641620374f8d8c3241021c0aaeb8603227dd8276d201114b8abb84b5c7463e1cd2af57502a84dcae18c61bb9c93fa8499a2847f591281380da603a0e1789e59f6fdfb23818ddbd4e7aec2313b61f33c94f22e2de7e61cacbe4f091aa1ba7549d27147d970d190940288c69b16b53eaf990a2347d927f53185af6c7b844280be9c6a9f868f03a0acab0b340a741f545cfad3bd9a9f7d169ce4f947c78418686a3c76011fca000c5460a882e54f1ba8ab23d046b1e5ea3537b52e8d702872b69cc765c76e3c400170fdba8a5a6f2f1cf66a0a05443646718e00285e0d1e3698ad8f6256a48de86107bd3084c45ed676b2b59970483061169b415f1ad34fc2a25a83cff0776f59f2fb7b3224daa97a14909989bba9ccd2266a166f1189e42e03082ab24deee2ec10945be80cd8bd68a328644cc51939f1dcbaf42f13d689d62650dc0a555a64f944317501fd95db6d278084a16ee3c10255f3d697090c17f0c9c3a719ea0c6059de347991e6764ee14ddb35ff54b48297fe2f8d9dac26f20e3ca8b9ac987a686e8701896d2ee0c9614b76c0af77049aa51005f12775bf54110744f0a0ca2c17faee5a04f15c7080de5e4cec164c12edd538722b3f808be31f711376701b455554ac754e8b975daddeec6bd565924e4522c318e0a833ff54b907526cc0a7884519d540d2a7db16875c8fa6372814304480320ebd779daa1e182b6098e3bb687d1b5de401b0fa49912797c2c3600e1ffbdc92880ae0193bf1803b555669d12ac8cd8c27b68604eb44c7526b806f0068bdfc241906552b6b99710b43bef4e59d2ba99c5dcbc397f4c893fd96005aeb1c40abd5442dbb08d08cb01ec413566772815135c19a97e9fb08326911eea7be33627c44c77474f3cdb3fb3d7751dc0e4308ea835be8062472a14cd734919fde08933d2d96aa795800645a6834a3452bac1175c7ed78be50953c3153799afb2da7f968997c34735efa062276bffc4e3b39c60f2ba62515c255ffdb0d7468144f353525d45ec6691ffe87fa655eeeef5e5f7e8d96eebf87d5985002873ad42e6018e1b0ca7d54d63d91fb4006ba175f612f2f8c595fc2b1a63f8a5741485e7435663f25e692fd82e241be99c6e0835097d6dcfa013997d001fb8da88ae33de1fcee2aa635c5bbfb49cc7098c401d2c449419cedef9b3218555d82957bb265f073ff291a3700d8a783623ec01f4a884ce127a41528ef6213b6f7231b95785f1d39173acc66f99fd48047b1d2135c0795f798c62cb4d7956297ddf78fc6ffda894676399e635d1baee6004c9ecb9f0d84d28d817aca2e303f0b8161efabdb79c97b0a78eda237f2c3c96784bf4dabd7e2b3a91969ebb9b1603562d6874ebe233d0dccc27cee81a8298ddec21234c167bf55743f12475d367cca004729ce6dad5f6bdad5fafa54abba7a14b2e411444eae5ba4e6a827055641f8c5ae236f458cd4c50058710de0b3a94eb1f3a97aecfe9eea387418eaa9cafdabfaf9c7f458db896d3a18398f5bee8ed86ecc9f109c90f92f71077bac8f98ec9285ebf021db9d6b43c58991efac5ca18fee5ca837867824d3417aabbdf1b90e4ad82924b5286886296f85a33b6384185cacf485fb0b566ca1505a2b022ce6b104c04bd97357ede8cfe9f5ba21e8aee7fed7b5fb2c857688f09e2e3e8ea7c0819fa74b2270a3eb6d02fa69c11e45d756ccb3a7c8583bbcfde71bd21e81c034d367a9f24d764e8dfd388a1d1f1b6339b13de8b206e421b06fac2fd7d61ff0df027a7b5f1d66f52eb0e18ecd2f3fdc2cf0661103d4def8f4f456e4c5f8532a3adfa5eefa3175c0cf7e5279a260570c02ecf8caebeb99a64815a4798ff51a6088182a5ac26c501d496532a5814842d403067709fcbf256ee8cb8ae388df551dc4078be992a6924e8d7cc158bc1811c87fd7e318ac6d89c29ab1bdda121983bfe641d5a8f54179a9bbf7c58f69c2b9f979ffc7441230beb6f94ae13b0ad3af097b703ab02a5d5c8adeecc773ad7762ed944c5920dab3cc30f3a0cd26df3dc43d4c3c637740c294ca238952335e72a112202ab8e7857165ef717d857af0c904d8ce7054357a4bc1bbc104b3b6c52685b7360757f943a394f603b54d616bad6dd88f99c4f38d533722d9761a9cabd679ce09a5bb6595771275eb764f574d4c6ce2274a6a77bde6b64956bcb2e53e6dd62ed6724788629c5d5912df4bd8dcd32258365d804b23f3b8f36d30c2f99383f7246b36287b8ca64de50f31a5f96e0d213d2303c3e40f32b298069c4b24333f453553925437cf9419e4068f8b5947d32da97de6c148175cabfcb3706deca1fd1811d0f2ff7219485ef7954398cc38b07d387dee081c091beefcdbfbc5994d7b5bdb5908f8fcb1aa3b886d08d9a060db858461c9e5fc81faaa1ce126f5571f8c93510fe4261f97ea5ddebfba3affb91d218f8633ca9e7946d9b6d93e82927e40195782f63ff4896814762028b7af502960ab674059322226cbff1a7213b1005b388c39f5f1f7d353ab80c94905f659803cf09634d996a0ca9c9d8254ed2ca89c437f4e223e6767b888abe595c347eca14a446666433d0f3b8662e75360b243b9f932cb78f4dfdbbe2d444634d8bbb4d37ab4120f4cbef1d11dfe5d0fabb628e2b7b052179039dd6798bf3fe4acbd410e4b7bf13452fb24375aa72c4b9cb8e283b6f18452190519f7d90d0b8248ca4298c1daab637ce1d3f2fcafadffe8792600f00013c8ec489e305a979421d203d44aca6694ce4d6689a21892081ad8107ad951b0f9655b6a2b090290fba241695fce5d790508061f5a81a447cdc96dbe1f470d44ae990a99bb72a39dbfdf658f0127c62de866fadcb9156fb19d0722f2aa8cb6551f28ffce4d3eb9eaa8a115c43391f3cf92f79977ebb571289f8cb5f5dfaa9d8cd8e388ca5f1d294ef277dee2dc55505bd27d14fc48ba168bc1fb8ae0047a363b31d96a2d9504da1975830725543c4695774e58bcc86dec5275947702001d15a33db7c95a3c90babd02d1ec176d7ef32afc466e85c8a719ce8b4580a877567d80543b0b8274c7d4d6df236fb06018c515b97f5e7c813c2518325f9a66ea6f336ed0103122f504340d5943078415f193aeb6f6760919e34a52989ac61fc2838ae7120367055839ad5c46dd30085610112e95def31026fefe24c6b06668f5e039d9e493974035dc1c20d9b9ef6b5093c855c70551be08c8033cca2e521a714cbe80fde538e8cb32b66e68a2fd62cef5f305ec0f26b58328dd18380ebf5011a8b73c095eeff962014781f318d586524b1bce14946d17bb0bed405a4bdba1de518c8a0ad412ecd4529ef1bf5ed13aedfffff3fa61d74cce5003d3788307b3bd214c805b957a580b0122ea6943a1ae18344c81a121e84172090e70c55fdf3cf8c84ae4a4da13a816345ddd3d5eff41c54afd9f246c8b49fd93998527d794d0ff6a6e8e1e20e7ed430927200c183d6beebf7a99c05481c642a80f4fac28e5b44814502671401255f6933241dcf6c0ba0efc67677e2b0127bbcbc8d535b952214accd5559b6b66cf0bc6b73da7d272955570696dc2c174afeb4f745d7b8dba94ca10c16112417fb572fd57994101ac9d7972daff81243ef4f5c568a3b0c887202ca1cae3c7d6c57c127166c9262b64afef026c551b4f32082435d3d4c09cb7bf664bbf8e108355cbeccd65e66a3db2c29e60a0dd8740f2fd05e9af91efeee49c4c2c8f95d049d0adad7b19b35e822397d025f5339064c64b778324dfee4ee0345cb557b12fa32d25ed5e32c4aa9637422e300a01bcbc8da28606e37dbd3db77531b8c1b34590a603ec1e49bee123b4842b0628162d83ed8432d55eb3fac6c13a9437d79ef28079d45e01e19746b22a095b5f67390e0f3f3436ce6b6706be40df3e2b5bd59a1f1f7e0212dfa782be768c75d6043fa60a6867bab857c661e42072de2f6248d967f4bd3ea0b987a8b85af3a734425daf170da7ee25b0a7ac665aaa03135be20ed27da4e79a0edd0615f241f1941a96daaed47ba99adbb3236f4998324a72bd6659fcb6207001b8363be2b40e7b4687fbaf6bc89b91372e3e694679aaf79cbeccb25f02fbd953df41cf15a02d1893c644641940da1de4a1cb2ca6f4bd4d56fd41dbde077d0a43a894bf68549862fe65d0ba3ac65d50c128fbdf4276736a41f1246345f38451c9dc2d59c3ce4920bcf197198c29c44b9633c6a5991f137ccb4ef2483f6d51497d38787c769236f85378c1330bae72d057ce7be82607dee3646264994eb208ac4cbfd5012288eb93a6bfa6b0ab08cad7daf956b5ddbc151370049a7dea93add94af5b51a9c315027e4ade461da515561707faae74a4cb3db4f18f9a442151f715240ed74d82b6751fb316138c5e313b302b023a975b2324cd79e9b95c30af5463ee2ecccf00c4a72a1143d4fce0f266f267a3d421da6858c36f08126ecfdd6ffa0c93b15022f6c7b9cea53fce62acf8b8d6c6c7eebc67a6769396f2bba7235d04a499ede04d4093a9f0e7b9341df909a7f84b7dfb20ae49c25fda305977e17e3d0008d775158924e1804e888446ed71dd52110a1cefe1d45dda6776d7b192abf4d8eceedd76b4a061f0d96ae0f874dcee83ff23aabc339cf4082a6a5f010b702f4641e074676964420ec4190acde80f23f2133bf65323f8d8440645369979df2bc270427d0c3b639b3d33c4ee110a3d09ac19d06c82bfe3816b339e1ff5a9963b91faa463de16b9f9a61ff9e9c103125acf054e0795f5950604ba5fc838ae292db1a7ae76b8f5285818ec778c0b65f1754a9a6404aca0c4393960c76189cc4fffe79062c5391cb07c6661d6ed0fe2faaf2acd4d29c9474ac4fa5de3025ed91cf3b33b3c6ea9040f2452b08d10721d2a760020631182a703cb560bfc4d00d1e4db1949aebbb598e1645089369129a7d7f5e68845491adedf88ac497c765fa6d31289541b8c2c59525f0b325d54697831b17bf06c420496b0d6be96922511825893212be64479409ed26e3c355b5b57b4776997724fe53fb982a784f2cf82255a469c5de09d47990a525cfa8e32f0dd25f05e91b1e0b459f6cf97c822bdde0d5c006ed76e88fc77916d9468bc7352786321f6f18b598586cb3182898200c25f0c27a6bfc8a481a75f1182fbe5b0da841e91875673eac464ac0de4a400a88d30327180fc2e3877d7c366c76fe4215707a15df3d182d249730f4f41aab68b495cc1db0560ea2b8911a7f714bdee21bea048dcdcc74907a7c43eb29985226651cf6764498dec1dbc838bef3c54d60af8809697674fe8fabc53d971339053f79beb4b64e1377c491115c229f4a05babdcc3e3902d7aef4fa7dba378d5deca61c157ea2963f11afb4d2cf18c460071b995857576a7dfca2b3f408a242a50c38e0e6df0102815a4129416bc6596e964ac0c3ebb0282a1d2308951452302d436c1fe08d65324dc6135e863d8a4906781a1b786ce73f796656597ff169a23d34cc1947325adaf4200c6b38e396b507cebe3f732e082fbc8dcffc4eec603bdd11eb7c49f92bba030e017a5d7e134d51db615997f522db53796688993721d09fade1e50a60b2e103157d743795842e4276196556a493d1ad183d3f324c03d73e141dab8a3a9fb6682de65f3ad8f9b1ec4e99e4cd75c9b4efbdd16332a0d3bdaa33214b9a79c5f9271f6faef7b410b77792c2b5a5247b40930e41b38a248a46ea971d44690d1b54f6c802c9ac750d0e466473a563331fee6a87abb2bc05e4272309e032557467541bf5ec1b95928bce1c821c9cdf9cf8a7bf06407c92743b89dd63709bd5785435789f17db1926feeb076456b23a127cc0f403fecd9c7665ef69738429b66efb642e32b631b117c4046c4008fbbdfc9123f27d4e9e0d5b4b28d597b04c310b2347cfe75a1420630d8657da03045c53975703e8df2b3fb4934f0ff2648e2c81449b712b6a4583584a30b14157ae92fa3f2d3350ca66c1c84a331c54988df857d42356e85b09806c9af6d8a086137d0ca12d511d47211c86113e53770530482c71709a3ddaadf5697f7f3a6449d105dcb1c865ee1948770a96dfe79d236717e09d5aefd21df7e8476413dcc99e33da9a9637e3560aefc025a1ffd32c26b471ec93a5f60f7323b2b6be2f5abce94f5f404a3359f24fbcbfac01e94e929a2515aacfa259ec6cf2b1434af6a6eeb601f89f3c75ef3f90fc6bb0706886c0aa2114c9d2bc9b06ddea628ef13a7413dadc2e2e11e9ec80aedb2a441b10431bd2826f26ce30e84161f71b801c8f4ff5da185a6b3561773a4a807ccd2b751591f88cb3046667268027d5c2aec1604a32f8b9eef3c18b61c6ecbf1e58c170c556d5e0eba95f0948e53202fa798f97afc18fcd38f0a2d48bb5421110fe26a9f2ace11b5cc0f4f38b216e3cacbbea92c17fae8092c0a3ed4b59c77940afb0e4a5d76287e93c674a2a34ca4aacd4c41735053d9887d31999f26c3382d1fd8a3e57551f1fe3e3bc5358fc3d8c9d99621e6e5a91b2a1ff9f541c77f6814dac58ff274624f32b7321c041f3d8ade7c2bb537251c8e71e69452c4a4a74b004113ee03e8734255e74dec674a7588808d0deb49883f24dec928ba9f555bb7e691c911b647b85789b2f7f0787dbaa44381f32764fabe09f7ed2ad80512429330499bbfa8344d885340b7a5fce0384dfa93a14ad2502cc7fa072c71cd5a15d2511f04fa7a012bb2ca26d799d30c6566fac377536628f9f4925b8781f3f49009f6fd70c674d332cc5f9d464ec11ffe8a1c9478512e947fb47ec2bcbb492c9f8b4becfa312142b43e6ef0f85f1b271f510072dfe8268782aa51aba9ff177d0006d0cb28f73630f23417fdd18de1c95b11bc8054167727dbe525645db11212e0437f403c5e752b31ffe3893f6bb32344bccc6c1d83bf61f215e3a533a73e25adcb4e16afc1591c05245e47b978900a98918f4b79ed2799133759077d2c68af976aea7b313cb907d9b1147a421e6e1e722242c0b8dc899b4e912a7ec0ad5fab54479e2278d452abe1bc14ae671866dfa158537945e68dd41d0ca7878b3986e1a98648169aea3efc6800014416d86bc8fffb7dcf30ab652306d34c09e6d111f32c120321161a3ca9b393a87103c4a912d3a26fe1b0e0b84fd7f5371457795113e094fa1d75833ff4a92d055b292a004c7b9ba9ff24d79ac5ba7657420834a5bbc7f4a3c398fc181d2c6d3594fe7a6c04dbb13a7c3cbc618d346af63c86b921f0e8153f8bdeb32c06ffb9c891598900ef9377e4018b6dfc9d036002deb876abe6304f2c44eef729866b325b0a7f6316547c351c71f9d3f6277f7df5391e443c2403b6e0f4e57ac65b744aa065234273d87598f3765f521a5f4da81b1339f8a1c9ce70a3797d94eb70a55a5a3e190848a0062b80ef5533608c513c205ab26e2e053f7c60e5a33386f098259a6fcef61e322d42d528338cb39bbd10dbe9774695c4c3a3526bc760d14dca083db1d722bb8d53e6772eccc75e2770cbed1784705a1c9349a132e3eb41364ca5c9bf74c13a5d663644e4fe0981c685d72312456045d1b6d25cd1bc86486a10cbe350fc80fc17ad666b1151f017e114e7c233e0be52404d67aee59d625ada2d644c5dd1e454683904f7fe8584083cfb9663e79f592100183bbcee1af1656bc8a76abd06d4112957efc1aa4430aecfd8e8c3fe1b4857a6b3fbabacec9da6925fdc7776a4d2acfaafd0752cd78f4e2c4a5ca575236f3b4a8b2f81e937f23ac0f1feb3bbef329ca79131e0e1061c9120ff375825d9d33122722c185a1abb68390088fc83dce509ab87b0ebcbc64f4816fba01c8b6bf22da906059edee7c5246cd07bd02c56ef2fd423c9e42d2580f4053b08b56641f2a1c0fd663c5523b808833a10e53c3dad72be2b39410f1a53a86e70ce60b2c251a8a46ea8eeec70d459ac319157806949031969f9068950f7557e890572258ed88bb06ec132ebb9d937dafedbbf5ccd734052ecc2ef0e51a2a88d2ce212fa08ac7f8417613c7ac38abbfe89c72df3c1a6bfdfa1ca5776a132f996b642e580cd10092a4b8b5b84d291fda6621b2b18f1fd1d65db179c7f514f6c73acd3b4461904c55656cd2d1e876f893e0709c3408aebc2fb05863bc64a2b93dfdac47810b311b41e0d51facdf41a7010d8aad955922f7a8723db5d6c6460178e55a268ae30035e7c2c7da93142b6a96027f15397259bb77594443ae78e0875f33bcf75b5172d2a76a86ccf024ca504a59e405e05761a93e7a31b30e5d35e167dfcc1ad2edb42a734cf6dd9a30406ea3643833a667811ac210523b2b005b0ea6f5c19ccb58404a5121e51ad953a9980bafea905b44c9764ed17f000b755a7674bec5e398b9703c542daeb03a7436bb5d56d233da553ed96d0c4f03654eded4de39fbcb07f736dd60b93aadb91bd1a88864aa9cdcd05e3e57a9a5d07c81f4d57725cae18942a0dd9730f86b56b82be31e81f8fa0b911dd6eaefdb0260484867f31599a2ebf5991e043efb01ee8fa7d9359249a163dfd960137fc5a9355ebf59c71f74759ef1d9508585b6c76b34ce75704248a1532f456a68dff6518053d933f18cabb58e9a8af59e82e8a06942caf96c0f191c36fd0fa46438d611df821112bb11afb5d54e0c04e8b996c9577e73e3d442b711b4e8e3399c3cc983a3b696ba5a337d6cdc4a990a7e563f02bf43edd619ecc0c111cf3e97f796a7b0945eaa9c3310b9dff9336d3e14b69eaaa6ed493f4f12659e8bb0f563d055eaf22e513d9bfdcf97dae9da14723dad4bf6720379a3d91cd96631d4b661c37969a1f5aaf7b2e4e3ea709dea3f1253a77546e0144388f996935806edd5f1912720f5fead96414a6d9334e0ee5bc508a3b4eadd07d4977ff067f1a1a1d3cd198de45f9b264223bfc9a93f5c84b6b9f0487c8c09fd260018021f566967f35ded6b4ebfd1ed9e6eb67258d7393cb91532669121f01bfb7f0bd17232b57557c0aa22b6902310498f3ed4ac1e95d921dd22c13864f90f0120f6dfa29f33f94f39e7dab88650fe0a42884bc394b5938e78648bae36d6928ab60b66fa19ef3d505e6cd907c2560a1965fb3dd69c3d9e96b6f877043a7600910037f2564b8679063cb2fb09287dae451f0057dc68fb5873e53e706db48875d5cfa45a843a03124ea83eab9e3fcc19147e80d96f5edd26fac0d7ff024feba527f50adf2f0b46766d18dee36a18bee127094840ba787ea12cbaff5a6607fda42a9bebc97e9059d09dab0a4c437f8c397d2881694e5676bb28cd563c21e52441e2d37fa43a630097842af13e349bcbe9824b18f8c7b450cca7a399a20d990014fe219419ae2a754845799a8cf2b3072dac8a47f85d8c527d04248f526fb23ef15b737b50373e4e7adba469121fe638c2bff4683a8ed4d4e9922080735e7722198f750add655f072db287c8be10714179871f98d4f06f621bd13e7e1a7df740982b352759fa5f8cefedb85ee0c447db1eda5f096e65084365cb1fc4994801a451e71073d8fcc76b4a04235dc60cb68a7056d1df6cf8f846a3c3dcac1227696723fac2b2ebd29a5bc39f149fec0e5010f9db8b56f123f104f51b3596ec4a1738785f68ddabbc46755c430738a9240cb5ad0bcd89ad6e0696bfddffa98be1e4c035b3db2d61a4d341d1612826aa8c44adf8328d3cc14b635bf40541da5b6aa608e36f17e25e7049db600c0c59704f287b49c1e7710f2ea33a7017d5ee8f70c1816e8c79b2136cfe93f20fef105b057e26d20f24baffe96c362d3e373ef8b16b72d3e6ac565d542913e2fda50082531f11eb02cb74eda7432859777aad13023942233bad53893c927e0dd3dc0ad1799aa19cc1333bc66efe7ccb1540a08a29bb209b4bc250b654ce720b12adc4dc0f882aa3ec5c2752ae0bbda3d1302dbbf964aab86cbd922d3f0beccc24d55c2b31515ccf0effe0f1bf1aa8a652c6b309b6cb0c08397b00e4fde7af19bbcb7313492b115c4ececa441454df5294b0c8590c5bd19466b6fc9cec5993be6d910d6506a953b982cd5df243aa5f9c0d5105eb8b8b852b8b13d187a70b0e6012b85433ac0bb22a72e28ddb73028b1b94e73b80a31fc76d594e2ac30fcc8a16facc7863e438ca3f9c199106659810cf91809278536e50a8fa24046664aea2b88ace88e048c7275e27f3ec5f0a8ff535e835ab49c84988f0559cbb4d79160c9e93e5b0c7cdb893307caa9aecb07cf0a86e82d0367f73cfec6d46362d71407404d517d1d9026f5f9cc67c0c9fa3ad939211adb7be5db2975bd4337e73302c8b8f06dcade97a0a6f58d96040cb1b9ca87e90ea40b2720767864c6e2f71a5a3244d545202a22a6fae8c03143c24b44b188d1f014362943ce4733849246ecfa5a097674063240c0d50af5f529b441a30a1997d86332ac0a58a5fdfedc4f004c2546f623e2e0dc3caf4b444246a488f9ef3bee36a361f2c96cf5644d7411ff9ee38108b6afc85e9bd7b934f0f7af47158ad3503412d8989a269701f7d8e51241901fc6a872faba6629b974ef6c19e0c1827fd455aa32d69cfdbc176f449ab0327eee08d91167c6747f08855e66f06898de80b62558faa39c1eb8c783bf258ed8086fc54861d0b743417fc600384e3774881407ec6e336d8a4d3e08a35a29d86396be2b4c6890768783b9360b9a6a6261cf5af578db13febd62a6e52b654158b9b1d24472938d0c1310b65a3a2dc00e47ebe9de7c27c9a5cbd1eb5065495c70fe51256726f24a6a6be489c15a75fc64d5c2e62e6328d3e12d9febd736e5c31bd15ea79d6eaf28394836bdad66dec7bc499c20185b8d35536983ae99222bff0ebad23b5a47b8a307b083f073b66cbe8dd9d17311c792e76283827ee293c7c896a50166636626249fd822504c5a0f739f37a15130572c83b289f6c21782c6048324ef3275da3eeb180db09341964253984f7e91e6393c7d022b64c2e52cd6f9e9a5d44bf31cc99605e85a10ad22e4af39af152f1695a8ef6e47a6f386553b0b75cdba63291a701f360688fb08fcb0382eaa5115b850f7992bee2697619af40bfd7c6c298b185f00037fd2752622d56e5e1a939818393d619fec807ef199895d00fa708e4c8730c31cc62e6a1e917fa9af21a08ef18dcb197fccdf45326fd435369d5d61524bc9236a833d763e5f015c3b834afafce5fbeb70833335001991cb2dc60512d8e00a561e2453bdece237524993f3f66790a40f7ae5fe7c9b909e5b32cfacec548d2edb9a11187729852e5091045b0f8ca0728483a19c42c9f9f7bd7d8a1b059bbf7857f178c416c5019f5d0f464c4d986b5faade205dcf9f4c2e5d29301da477739b9c9cde1ccbe416ec9146407bd5a2155d46a92e0fae641d441d18f9908cb06466167fa40f8d89d34737663be42a77d3783c1a29fb13edf6adf2e790c5223822ef70c2f7146ef3700ae6421e432f2d5d1e89198ada38963df1c218c29dd009b70da7034cc3bb25f33fba4f6b17ab98eafcc96d45362ffb7443396b19a4feac528606916e05df2e1971f691589b380e8b681f160aa05cc489cabf86e1aff903e2b876ffe3aca354a5e3b56c3c7dbdd5eb448ae4de64fc321f80c9d2b11c10ee0cf614d3e31c0fcaf3ada3947a8fb91d8e63adfd09d9d54b38c8d176f91b13063ef057cd25c6cb8df3fbc36d67be88601e0cad79ae8c18bab7cb550087d6129b5325630988cb9a816a0e16ca6a9f4b5d27c6d56641baadc3cfc1a84468cd80e6275f3465666bb4c4e74e291c7664d58bb41178b656728fc47207ac981366b091117045b58dc9761da14e0cb90f474a51f1827267ad4214449df1374b6b112a4b53b98870830377f7faeef85f876ec521852293f6f451c62740df0274476916e3ad9c0846dc24a5eb41c8dfe4cd0c6af8c12b0d515257ecbfc5165c5b503675e5211305c7c0dac441a3d8dfaddefdeba7320f3a28828c49fefe2c062e834d689058100d958406d66b87abf6b8fd81a8aaa51843c3141cce196f02bdd097329f959a83c5a42aec5ec8b325a40ef47d071062bab4a1e502ca91bed9f29427a2bf37c057b512a1bfbbcfbfbec7dbf3e904b89693f71c9485ccea8fcd09deb0a6f76beabdf1d33c5376481449ab110c2bdb056ec5883aefeaab35c330aa8dcfb7cfbc1bd01fd4c878327e89ec99d1a0606a88fc6ce507a565db06e09154c6fa38d0e6b6e1197def935b35c1f1bdc3a242596704debe6581ca177ec9364929bcc24bfc5026706cdb53df365614ea034f10f479259cefa7cdd6b67fb35e384e2a56e856c9424b22b0ebd5c5714ff6958d50a8729bf603fa30bf2128d609b848237b88a6c30958f1b133980a9f9fc89ceea6a2646a3e91af0fd176a9ca4c897c0c655728e060c5e235c4e2c7b50a30730643509bede3a2fd74c740b8c4cfaf04cd3c3d651676f2ecd108a27c75ae46e2ab09afb1d83eab6a4126d67c8009aabbd18436dd6874670f9920a2c88d211c30209ac463e38d3daec4e7775084fc3667c9fec29f0a1b804a6182fc1f5c5e64eb0d7969dfa8bb8b19c752d5cf5c139f416c64eb11eae40bd2cb0cfbdfadd538cc3c473f814124dbb6a19cb1da7a4db1450b4a6f6fe1be3ff7fc9908454c0a5e9ca38de44d2c1e6b14976e96ebe26d8e9b16080b6ad1555c14be01b04446520b9c66221acd592012c0aa14973e556a3ae8a8e19234cd29847e3fad1983f6c2c2c03e6567a0dc3aa5d714c98757b3d3906caad3dc361e749bd7d67d9fe5237533e0fab528ee0065078a0f9eda8e42befb79809c9bffa31bb7a773e55f703c7b27a643c9bc1865dae35df6c0e8d4efc9e0c6c1e38c5773d406febeb9aebeb43183caf009afddb275442a972fd1a01fb937721dcce45195580eb5dbebf91c70d6918da354e5e1582ba242b29d3782c72a6579ed7e1c305bf14747b4a89f0a624bc5d7be1626a6fa2da45d6dc42084a0379572b9c9931f393c07b3f7e63c250ce2c64b7c8e80d2ecdaa29b7bedd22e9d0babd8168d446b228f6f984a77699751ae96dec560975d0b8242226ab7671a45ffdd9fb04ce7561b38fe08ae09afb1fc79597c6c9b3b5f5d72e07123ab7e2711c62c2d6585a2a52c02230c5b623941b44d734b364bec30d47d31466497bf3ab1ef968e7c51e4fdfb32e082bf3365aa3f41938ff4a0b9102d2c362493346b4a6910f8ef8720e697053fd4222f3048ccbccd07781e185d4f2cb2bd4f06cfba92bdf4eb393406035623732eded7406b506f5c7881901621452d477a9706aef19305bc053c9a5298aa3e21c943285da0ab6e1bd1d0dda2dec5ea6197297b075a3be2a399f3e01d809a766999b9d2b45771fa1db339f23f5cffa734e035006e4fdcf4f12abad654aad3776337ec1cbc249d1c3ec91c043ae6ab1ef4bcf69d79992343e992fc2315a46cee9cc45fb00d9a19a4aad7a21344b8eb74b3c03be55f8a27a9e8e7e3f231ef3dbed8d004c6a06c87033ef0aee4a0910fe7c5c69b3261e20b896746544af8de156170df29bfed734adff5f86e10ca9cff66b8da67c8eb2cad3bbb32e9138a7a76082cbc48af644f4ec0dbe9a8413ad1b9a45073dd1d6c370aaaf6b9b6bf010924ce6f44bf7108fdf25c5501b50b433db2a532659ee347f09b1436a48770b5080e082d42b39d22aa890671fa74052080f1813679958f2d8c18839b4f66ebda53f03a9f0ee697c368b54f3f2f5dfb1b445b8b478d7f0e52d0b72f09e0e1d3c9f1dd20e07304f6a1f44ac18d0551aea9e54c7bb622942cf065289cafbde5b33febfeb024d639487afe049c7c35a084a7d556ec9527600faffa3b2e177bfd1eb5ba1111e6cb4fa3a1ccb30b660e7611594530ded5e331a932c87b7259eec718d343c7930eba1a621e8c0133f98736dc3dadc60c70477c971d8d76b4fa48b4bfd7d579be36e5d7ed3f34b1ad37d55d28071c624a2147fab59c833a099721036e10e2e4f040165cf8f3417b36dc8e4f397edc52c4be3e7fbd05dc28774db3e2c8cf0dec2f3e68896bff70d3f5924e24b50f359d7a36a4cde2dcc4589efe6783211ddb3ddd4c6d5e3819aa2f8c3b99e2cd651fbf0a36ad7f22dd72d49dbdf5d50bbd3f19c4850b7e743307d48dc48fdff3f9b175b2b76b39353f44cb4522cd27e4865acc4cf1977b2cad003c48a02af0496dcb5c2bd998a965df61cace61508aaa05ea2c9adf2552daa3aa77d10fb8ac96a1eafa341eb202b9c0b1ccb98b02a6f370fddd0bbe23df3954ba7ed733b45e8ae4fe2f4c693ad947a213a7ef0604ddee6c32e67005e51ceff68794f52b508720a5f18f0e6727f50d14bea909ca79a4c3a76dd116a11f6a0f344fa00b5e576ad9cf2d73b22683fa21a8132f157c987a5651ce2241c58c1d1579e6460933a1abdf99dc3cb85cb07917addd8f7053913bf520c42251a44468db48cf88e83df9304cbc4070de0bdf63f2dc496ad50cf3653429344b3a676e650a8e394620bb4956a16a9620a6dfec722bc069c8cfa219ce38d57dc1b4199c8b5c226b74ffbcdcbe9f7387b053423db62ab0dd6450916da5fe1f985e687bc7b4d2d0c794b75315257c1bfdde39b539bd989942bd3a8bb47d5de5391fe37305fc5d22595943074357e880293bf67aacb4ff16f614c4610e7771ceefcf74f23d2f55f2bb9ed7ed63bc8b77eded8e00fb7ed9d732b834a927d5ff3d2cce07545188302fb1c71048afbb69a758975c71045c577bec13ea9c6ea26f2ff5d80063f8d25da3aa3db9f26181502e137bcb8395618866fbed5ddc3ca7a636e3427dd63a80f53613ecc274c635a6dc8c3e7d42c8be9627a43cdfac4e82ae06d900bfb742e72c5211173c82bea7cd7b52d7ca3267abcbd0dcad7cc18c50f791223e2521e3772461d66b09af29619ef4bfef1a6e9c5fcf5d1ae253cc23922700635a75fb139569668dcb74f7d0f0399b1ef9b5642b8a40bdffaae613ab7e300503dc97181b6cfb049afb8d6e84115825a8af3f2499ebc792ed217fb67781dc3c8031d31d4d520f9c64adbc96b354207c324a08259776f9b26f9a1eceab3136746518db106cbe84f5f905863e1c8dabd7b99edb2377c68a8478865c6e5d3f8450de1ef771791c3a990fbdfff9c64443309b3792ec8d38a3748aa34a3009154310b0cb6d2c9be0fcb76b7d3a7d942ad79e551f1dda8e942d2d3c0f67273b825383ae23e39dcca7fde198752780b5ed4cb969d33dc7a0eef66514501951c917917be168015c31e91843875724d5bd294c832dc0541afaaa7ce8e7d36cc62372eef098acf5af7d0b07ba0205e974eb64a38328eba7aadbf7570789f8ec72c2a389eb785da59c9e2464350780faddcd68fe623238b0226164bce0bb6094e8a937da7b4ed62d79a03a8f1f47e301b1ed5f3a5ce718c4a60b6bf9c161f61f825dc57ac9c27b0c63d852b00f86fbf6d77fe631d43f57d4cb7fbc8a0a934f3727bb2b5a10799b3543887aa25b2f3bba0fbd0e1895c367b723f10f18ae46b300d38881501ea67804b5bfd9d68e91dfb8b0e19149a2b5b4be2ae11254e516b118c338c10f589904611e2a2823c90eb6e2c631db715240f667c5167294c1cac123628f73e3d1046994ca69674005091844b8860edde8d03e101be69c3b942b3f6d89cfbcc37adb8e2a72baae794bd6fd68324a0321894eb422a1271e1fbed58514a0ba914f7749704cf85fc8261eab9e83993cdcd9b2b588b37c9305d690170985291968913a3de8b699d5dd7ac3a0391c19ac3dc2aa2c2ca80be04074aa52732325637deb72eb5dc467e895804d4f2ec1e0352809846b9e231416240b3f7199ec9c2987aa3107e159cc0d908cd36cf7f764b0c499bdf0aff4ebccede55d690363d7ed6bb89adc53af7c42d95f49ea291af02af898b21c02725ce3b99afd8face585cf14b0db444cf83997624e5ce14c20963372b6e94c45c3f614d872fa3204cef5cea1ced234f767f25352a0c3f0bc60165919096674234852971b460f2895adda9b0e97234949e0ec00c886775ff54ba0f9ce873b31fcc2999fbc4f5eeba8a7c90d8236da21777626ddc4ca2fd7757b3fa240f74fd1346e137801de589e0a610e452154f6fa48fbf8d7d15faac2aa8c7e5a94918a1949955ca24205469ad83aa7b1ee6d17c2c82bc0008621b3039c8dc54fd20c93790a89d8b9f83469dae307e0ed1ceccbc6728f14001522edf7285ddb714d076c9eb4007a9df1c768e24d4ca345bdf65a0113a1771043c3630ba18dcc1e66b027eda0cda82cdf5920d9e38d22f388896d59e2be40ac51ad3fa5c7922e3fe31f746121f740944acee3eb419548b6d162803b851649888ea54b5a96802551606d1c49efe01ed78c21bbf367552d3e16bf2cd320c7c6956080e17560f68064a38c3865481e04c3fdaac58ac66c43dcc6a5de9b5218b3649f6b8178b9f866f7a040419f3a0fa9be449f5c7cb7567b302e227413ab787071127103af9aa2f8896757c84672e013e940bca4640c9aa3b87581759ee804bf20b0e3ab61bc650414398728d39379a782c845728a54c8c2222b8c859266ee5978f769ffd7d96be8c875a16a611edca21f8019684a41d4014b6d958b87204c5b4616d168adc3a3e26b99a11769750a927d0173a619722243300a5c0eba9f53e020284ba424fc9e8376ebd7a7d9688f38400b1b6a18f4c8e52e1bb43c081538beaa7dc77c7873cbd6407cd281ff3258c6a79981007de82a7e551fc597ec9e81b335e81ee0ff839afc28684c3e99275fb1c03817880d3725af073243ff09fbf8aba8d2dc5288ae76dade04ba59f35e684a61f5b6343f872efa8622e15f64ee20179cb779f4c94e583b6069fc631f287de6b5d590203eb205ef22e633a464872626012c2b2c07067801286f14a0847f34f47b4e8a1d8970c308476b0c2c9453fc0074680a3c240c79d49823cfcb44ebfb7bf786c4b096f692f9dfd0b1c3eee2a6ed70da21383ab10fcf5e16ee4f50cb5c7969c36e0efa5a9dd5465095fabbdb4d2a071aea87a54d31633f8dfc2c972ac8dea4a5bbf845de93f9b9c865565ceedbe740c849b6b5ec10504af5ecef3e909c18752d631abf93628b8cded38b9a18ab5cda8fd71223f4c6d486d7e3758d90d2b146e9f48e3f702e4ec1d845c591428e3e62a45a8be2186d42256e581483547656e6cd31c2b62afb7aaa9c2706366c10bff06243968f6415788588f2cf9309104352f3bd868da3dea820e5a67e8bb932e6e042d4478a0f71ed9ef7e6fcd1b3c39ec204c80e31adf22db133d2b9e5d5db33319ffd332bfa388eee56287b02e36669d0db326ee38f9d000d97c9c184d198f53a0208d6e210575edc0bd7cf75e0919892464847290cfc2805b30a4780263763e9da177d5e687626f32b73769fe0223cb8577394835c3761539bdc895a088ecf3e135797aa8d3f03691ee8231a46229a9d192a58fe16069df4669696a964428c8095157d6adfb16c725812d6fa10e53ab644cbc53bd130cc06dc950f97087d6f765bea553edf94a12c3fa3dddc29d43edeeddaff0b0a05f9bb6f98abd8d7830609fabe87a54ba0b09296cae684f6e1e16873ee51dfcba9cdef72267ef2034eaa8fa34686547f5a17ca925088011393f874ed2940158e196bd34dc52e3f2345d75c62104960b6c52d6db3d98f140732e58b90e5fd56bad58edbfe7506ce0b98a53725dda9e5d4bd786febab9aee65b4646a158f2b449006becb92e6d158a7a1c3dcc071718eefeacdf9fffeeefb1ef9eb4655689ea6f8487f18071a1af6300771dba35ce5cd0957fef2c929c997d8bd93e85d5a65e9fe4a54bbc071b777ab337e8b99d37ae0d503b642da6a0b190170f4aed805ef5544fc5c872db33163b32fd4c8260b265d8000054b166d38e8f3efe8c6ae2f88ce3186382d04996449213d24dcac58684c2b2a947fb94149dd541cac03f638120a704d870370878850f857332b31f96a2d0feffdb2f7f6d305bf44a9f655eed20b161df6c5c57354842a0c8dab06780a4be3bb7d92fc72df30bb2b407f90c89117837df4d9e0ff820d18feb2146139179dff5e87a9716e5c1a8b0641d9a8e780f0591eef833c6fcb726552ff3a60ea2e47a4e788a83d4ba9ab8562c2d7cbebdb821b4c8050c6181e4481a27ace944a686ecbb96ffb82ec8f222cecfa4e81188a8cee212fc0ab53debf47cb00243e00c485cbb5c901d9421b9cfddcc0d3a2a700db0f9ed50a1a18de82944bf135dce6cc13a3f2f00955f459c699ad85f72f58e8eeb8c8a31ddb853912b106104fae99ef6c2099d0a891c5274836da1cb9e0ee259ddadd44de99daa0e2e8ae07d4951b08ce85c70c35473c46d698261ac9024073e2d7b1c605defa4e01ddb2734dc8c45fcded6b8205a9beda47bf8ce0a6d5f562521f482a1e499f599f93013b96c76994168618237553cc4b30bde6f82dbc9ea0a78c2d23166ae6f4be4911561a08b45fda2016f7af1793394021cde9f4a5d659f6919aca110afa033495a13d8eef0d55eacf7d550f7d0591617db50a27145cd256d221ec66f71b521fc0d11665c0eaea3f281caab9610479949f9708c2a99d30cace29691f54ea1bee411c85087539ec35a000a632b3143f6461d8ff0e0853a467d2fd68668015579f276e68f2320c442366082304c44c7dff0699660cf36199dc7ca75c4927908dc209ee8be46570da81af9d94495134b068cf267cae106c2bf01a1c215e428014269ef1c8f673ee15af5145eeecfb9741e592e702f93e7517011a300f951c54b4d7265628360e54910d351908176a9b731394c0baa271661175afcd1d535aaf538de1bc9f95cd69407569446132ebb5b26bc32aeac13c1e092b7c3d7cf53d2129f8b7f389806cb353a907f5ef6d8c00e67c61b74d3480298fe377263814da4d53b07ae2cb1f3230673e2abd4169545684f5fcba161b2fa512aecfc531278cf9ae424ce4725e61a61e8376adc84db7b235715f0fa1a6be39d171114549a2ad08efd4cfa0c0b152823d7997058d91ddb5274664a1db3e0e17158f6ce3327a4429b9fcdf14784d825e63c4746c514f1a02ddc5903dffcaa9a9a209308945f7859c8eb8947ab6ffb04a69e8702486d3b0b32ff7a230aad5fdabfce3673beb06b64ae924afcdea1629a1f02eb8fdccb94ea0d85a6c7da229267a556b0e6fb8d1ab577e1b4bce3da13a67b4be81c515a82a1be8e0500c6c48db332cbf8a8a69dee8f64c28d5fdc22a6248a169e60d1d9b4ff1c7f14a362d76030bc73c0396ab1732e3fc62973920035bf5ea9c2a1a927a2f5056a8d1a5417a8d6f733f3eead5684dac655ee50441fc39db5c9868df15361b8ba7e0a4b40843722ceab9f4e08bc4d2b674e48343e4d453812bdeec6adfdc3917d397af6d61f4b0d0e3e37d56ac895513c8394df9977e84dc25076b85bc3345c987342e83504c19a1dcd8413044474a272276f7a58957693eb245c6852bfbf9070c11b3be7279903d4ff72e6cf6eb3247998255226f22efce72583bc542d589653cfcb64b96e0f2fcf0b84e1613bffb06f2fab9b38c6e7ef28cf2fdbb77b81379b6d5030a8ea6f0967cfd93d09c96136e5ffbd579ec64498bf283c0cc01adc00fb5bea824419da0441ffba08ce1584b235a912be5320cc28e6788d24eab5da8610d55f7298d0e7fbb3fdd742fa3f10cf507259ad67f38e697b25056c1030e7170b15796c114c696dda5bcfa2952840ce501b4626d84fe544949570d5ac2436e80df1c6bcd4ca2ec2f6ac3905829dd51b01abfe350f391c5349be7389ad0fc613c623c5d85dc1ca8ec918fa28785f5d8d4613a41dbb956191301eea50b275b971a32bcf925dcf3e5ab52a8279e209e041a7c38e0b70fd25214df90c872cfb4313e65b947f9101b926d741c0c25b9b69c51fd0d21314e2185e657481d3a90451e4a3f970714d20032a0559cb1ed6e320501f73f8eabcf74786ea897c56b11173d48d7bad844e61ad326796c795d91c2d16289682fe217039f03073baf8a1bec3f778bbe6e8134a87e0023c19f78da544f33ff3bd8c2f4a5cedcb2d75253077e40a8be5c24e57e387202ae107f8ee6b2c540bc7fd5e51a33265e71a609a1c1576469cac2cc93fe2567462bde9490965abf203ea5e0607815d7e380b5771f9d15a46b6b467bda66055639afb9e8155faa5bb1aa742fa78c8379b2cf9c6940ea42082c80e13073d6c39b0d39657c5b348fa5cf642cb0ea2e9bd5bbd8156ca9c1a2e26460bb6867f4cb9b88d395df768fed2164232650353f398d5e3e1d0be274e614a14c7ef8e67cafa7da9d951f3ad58df6a60092f38f4d1eac7789ae90dc21515b7b5b088b89e4f1571d60b570dd331e865ccee30af1ec4ea6aeb3de12c0c067b485d36699b0b357a7ea0f090da1a948d1d1581f0493ecbb242dfe68434765efc0ed590bdfb9db865fb64dc04356363cac2a2d4e65713efd9625609c6588b170845a53daf3c47db787a4236cb43ff320dd51de51744e79878f4bdefc959969068c0a94eb47bfc65f64cda55bc70d664c160f8aeea472b4b5ea59a8a08a60f47f49de2a9caa7ca035c801fd2a2f810a70ea03f96eb5dfb5a4ba8530c2e2e3870f00ae30285b6b7a45329b1818e1b553c078aa69bec2c448d4ef487c9478221c2d6d7fcb287772b000d3b318640c7393de2d55c4ca9a4974a3e09cb8cd00e9ad72cf66e9396a941dac165c321e3f5844a04499cf5035c14a83e7f1f0e02f4de53a56ee9ac550eb931f39a0f7cd3e132060b83d1c74382af72609f7a12c06cb03ffc22f718d7f589e1134d48c22f70880988e0958268903612f95e8c91556d4a615ea657acf3ebc2ed95047849d67d1f03629b106848ca70c72f76a23b74862c44da88688d388c318a7909f301322adf44ee9d4e47ca6275c6220bca54a4acc92f6b87ca56cba90235ee65624537d12cc0a696411dda84c0df67f63c402e69ab98f7de8d0dbadcdff6d4b1c4c1b3a13d83d8ef3f7bb10ee4098a34d7edf81444540bf654b9271e76f3d8b0b5bf0e533bc333898cc3b43aa536e2b5fbcfa122289944c3f38576b0a1a0353495d53dbf440152011ef1abff1eab7efb364149ef9698d5aeaddf872d898243c176aad417e17647a47e0ea3ef86e622a5125f3858e40a0d249cc685cb968ae29ccbbab84410fb7872bcf25c346df301e350f83ca4ef7c12ddb10798d85f1875aa71e8fc927666e21f97485326bc54328444e116a6852619e13f8c33a01106c7ace1c12516783e40f14f41f7880dd07136bd4fba0f37e65f7acfa463342c05e8b1309b49ddecc214c1fc21a7934dd1296103c206e55517b134c1da227eb6ccd180d08f1d70e95078de6b1ba4560174f644535b5ea8e178c5c11bf8126de45ad7c5486fb2a660d7bc25ed81ba425fdd5fdab1c9fd4075bfdb75b0d7886530502b70ea237d090515c0cb45f415736fa90a95eaa2002becb30d7b9677b78e11ca98a6f29e2a98144ac8ebebbcb8263d2feb9e0f2d0bf48e9eae120aab5f62c4165ca92fb44cd7688e2906620afdaa10da9842f66890f5dde2299fdebca3baef5b65626c66b44e15fb54d18a4d7789e84d8170a472599ba474a4a4ff182ad22b3a5c70c9f0a63ff01d6361b89aaf3c5b7302034a32133c844f42f7f2bc2cb827e3c7d210d70e27acca3e8ddb720a813c33cd249c0e145af042df4fce6aa46161df8af7820c6847de6751dd93e87c5c4a14a46f9a19e95618597b76e5edec894bb81bbdc43a19b0f7c9b2421e1a11fdb730ad8154a1bcc8cc04820565982aa002d22c5024b7aa06ef757bf938caa8cc4981e2e2fcd4a1bd05462c9e0acb2b3001111a347e8831e63b3bbf506c2d6650b5bc0f37657f52622f7a53f428bab23600f3457717d7c69292f462473ac0b006bd5102bfc446a17afdec02665924a11c2d86a97e5138c667d22fc55cca498a082bee5e6f082078b286985ab7fd04ad336e8aaf04263627392df77fdabbe691a584a663ad39ebfe750a4880b611b7a0725191cb01c40c09885f8abf9d74e793f84a1fe6728bd2da4ae4233a4848dd0098b14303e6c47e60da896cb53b5295daa4c2e2000a4ac0c1993b0ba0dacdbe0a4ede389ce6d43bd17e2b3a0c92b2cd4fce067bb2c3341942b4d1c0c1be441e967e17dc38cbad3b74dbc99bedeed41735e991818634eb0e37cb0a34e980720b30a8fc236f05399f2eb17739125ae7429860c16640eb2647c812a1ec74518970f89a56c84f39222eadd3b5f3afb4bd26ecd15cf567f74ec4f8229fbf65e17e07fe0dc91432bd5b52d8411818d6914d727953bb1eb4aefeacf8b0f8bffbfe9e508770deb63874c7b9764df597b179569df403fb045aefdd2524cd407e4400cd51f5fcad5948e09720d4675bd029006b231265d43fa81a76c3754d7329f7848496a1f5660daca4929ddc08afd626b9199ac4c4adcd3b5500f87a5c030c0ef86a2449f203dd5afad665be997b2b272309d5ea36433059b7e28704add000d998f4d711fb92138a2e50a907b933920a9bb1a30e121ce4c18f3b3bf0e2f4d02e77c0c50d3ac7b24fcac04cfd27cad6ec759ba582d66c859eac6aea6e13b1de38eb1a0e605a17e866e78573550c1b72760942eb6e4e2b7d7258a6c85a4b979f56d9fd01d9c800f9fbed333ed15c72f3e86985e21e1f55655eed7bac5b3454d426bcbf083c4c46e2abbc3a76576725ad9d136eeb5a7dd9c415018071112d593212ba7b5329bc26784cc5a6bf8dc6f4aa17e3d1ccc646cec7e4a06b69bd52397c0bba2d89e4ab9c9db18089aebbe11435c9e2a8b2e37a236ef2add47ff3a0bb862c422fdc930f34ba855fceba1f81267f357f455825755db4e8a485951c1974df97e27731d9918c22f6a579175876a2512edcc1d8fd5907b0bb19703a4b21e5626976f308ff38d687e01c39bddcd428c2285439225c1bea30c0235099b6691ffc7fdcb2d9a0bb02f81fa8e503a7bcc616a414520dc906bc07d4de9c83d6e8333c5a6f5e389da105f32fe25b2e01ac5219b3370516f61fce7eaaf670a49224e8214ff338ad271aabd38cfc6508dd9e34de908c77e0e92a9805fac74bb3d6bfdf4758881b8b44e571109eb97bea3dc699a996dc4fb94e86b8e30dabbcbddb1e17f995ae9d9e864916ab41a08fffc9ddaff3dd52a0d8acd6249b893b6a66631b156c008c1a083eaa351b8bd1c02d6b917a1f67e4fcddeb623dca75e5f59aea866806fec043e60c67125f01d7a91f4f820f0beda82ee85594078c5da69b324aefcfc37b9877ea012bd1f4d17776edbc364e8fce8c4b97c7eb26705c36ca1a2787bf2bf45e25c39b2721e61ec094e9d2bec45df17255eb814d527ef7965f4418d189e6edd11c7d6003740589540bc1e94f4ea4a36d6ca8839069b4a355be10fee529212d554ce5079990fa8ca95c35fd118d938aabcfc5dd0b7583dbdec8fba2f003180e3fbd20503b98014e0d85d3baab0c2a344ebe2bb4f100a2afc51833639d1f7ddde3becad7f4c70d75ef66414a10b01a59c52c4bb478ebb8e8c2244ac44600962886873599534f00d22062f94d47f9461972d87ce1b0e2bc427b6ce7b7ba73eccc3496e0529215985a462ceace50763e4316b8d0ce3f1c8c1d6829d46d860e9562b8803e5f9326252f7ce4dd87e65fc85ca6a5740a152ccc9a90046af8b411db3986585d98020f76547c76070cc47055a22bb0926787e67f0a53b46eb1c8a932636db26b474c3f83fefd59afadb39d91006ad337a36de9284493f54c1287a7b22a9d9fe7ca7b1521dc545aa7775635e3bc9e3529415604786c3e615461abd2cf441192db1a3ad4ba58b9cfb2d9c66a48d456367f42105f76f1fd9ccf74d8aae95474e8ba3de742eb30b388a34015b087b8b167c6f566ddf3064937a57644004b78355a533fe90e5fc7ce9d7981a2dc52797178c4f91c497abb6d52572109c60c473c029c053f1e252336301871feca7240cd35c35603311b4adf90d4bffec22edf03e5459efa4a87708827e789f26567e43d142f6f99b47831da54b4ed4213466b77ec2ad9a28dca1aa9639948045c8ba0a111f757c6e8beb173b1d94e5fa331f9804db11a7f95ad9a30fa7f2b2854949107a64a05e950f6cd8d168d5113f0491d27c0ea74a0a159f1d0f36a5eb60f4f581b1a9e3ec4c87c44e9eee2b13f1c53c34b74a8637e637506a909949b4904a56f375f6011554b3b72b59a51f1bf982b551e73423ffe21b2f0f1c8bf240a965d5f80428121cb21e05f088d5f1b223e8e5400cb5b8d8410de1413dff65805cfcc1cff4b37e6c5f1564a1d7c3a8a4f4b215259049166249d03d4ebb9a1658fff085805fc157279858e32df25302ab3a2574c0eaa0296624e4cdf88c9d6ca006d70b0e365afc2c6a428e3abd06d9ad995f35c3333833a5b7a73869ac37230af60be70bf4096974f9b1976c58ff0180cd461cf8642ce7a404ff10f9501515579f6df0ce1bf979adc0e66d0630bf3cdea48e94fbd55bfec63035abf480225b2c99d1a8581292a4bb4125e894a6784fb6d918085cf034e0592a3d32065d7a4397b24cfdc0cc135044952179a7f58e64571b250d7423f98248bf2c107538cc5c686031974c7f63cca5ea47a6c4327a498ae85d87c70ffb958e0c2e01347e8f1fac629b6072f0cc6371a193d6bb1536060ddb925a98947445fcd82c18c25d2d46dd332ef9fd00d18cfcbe5fa87e437ba5527362577ce95cc9045de002e9714eb26a56fba54e06db241326fd50772a2380ef6d0d0e1e1fc2b14d4790f4b428d490d5378964864caa6020a9cfb60cbb32f0898987e414ca7c725c29708a69cbc87ddc54d5b1622b7034c879558bd2ec109a5b90e521cb8bf6407a87d3306206942b6b49f3fda8293379caa34f6fa2f8afcb96147dec25b3ad0771cd39af3c56264017d83abcf8be1308cfe5b03db8a150cade4ea709c08f88513f0a7cce5402750873b6ebe71f2069950bb046d4c23927530ed9272538a0b669102f94286c9f6794d3a3d25e77e6bc3f239a2f21cdba51dc86bf28603559cb4c52a736c34c4904d050449ff29f6bad0d3706194d4438d58f7fe9fb46addd8a97e620a8bf45cf8fafbc4a8ead5d76daf818601820bb0a6166cbe4ca598c8f54126d86319d82f5336b24b8963fc0b6dc5deee0960294cdb38eb1b9b415d4e327eb9649a0c2f0dbf72dec8af935244daec4e11c0a1c23f4c05fcb375a4a037d774c7a11fb2a4f764b774603121160a5b6815e1ad5a1f6d73c99806c1dc00177658e993e49b5310f5bab66b50923ff0a5a365bcdc4af8a36a76311858f43a747c6eff8574816c6b729ecaa238b5727f42f7033e9ce6c9513375d55f5997ed0b04a7a28cb48ed54da377749283ca5e7eabbe31305d2e913656cfae3f80bed13f4d80ac466be805be2ab06f4848d349a5e7a58d0fbf0e4f5c086f03cb8c4013a8390b4ed6650216c6ade19b139c3c898b1c45577f17e662e58ac297f0ff3f9e98f2b41f7c62b82ecc65e628fb80cde32ffb6e87e643c2cc50c44b5c193a99db4516dccf85cb2c70c030dd3f6653e5497a62d315be676c5b8fdf6aa48afb18ebbcddfd81dc3030f3096be0c4c63e8ac12ac42190ce1ff9c19f3383d73dcc88755663afc0a8b714b76dfc4e475f072e30c2fb37c6495b962fda07bed4d5344c6fe4129af80c96ab71f40604af3f61dd44ab749cf73bd96a50fd879b55e163be79b7fe6297ab9f3e9a81d890cf414dfabf38212186b39047648bd13acecaa72e05e0e0434747d3f996d1d40d04054b00dd4c7ab424545f9324468a4147594267560499838e62903bf7b9629f8156182d6e5240e1c462c89312c4331da7ef89ef11be9897aee207654348fa895033aa9f22c53fae5b0eddfc94278e5d7dcd610a3431a476cd7b28a7b1d074847e1990ad10142c5e433b38a7a34d1dbcea90efa4ec3b85369fe65cceb4bfb6af7b3e89291423d9aedb0f1b2010ee3cca570e1507b768738e88f7b245bcc69e9e3c9096a537b9c2789e7850c7b20c2cb1f598a9f91ae660e100f8b63bad83ff3cbe8ec22fc5f36d01e03672d0ee17281f54d43d8bd57a3805ab3a0c04e033480bd4b8de0c5ba25a736ecba7ab16bfced0cd600f69575b7f057714d8c096de9d3face1203acc4c124fbe0d2c06efe7c06fd80eda551e5b85c24f4e507402b4f5b8c9a8c43c16d6c991f56d95c00c82fc67a288b4dd9bb20ada8ba90fe887b128a03eda7dbb29f66cc7cc9ed6d7616c6949915526e403340f76530a4b2c566afe7675aad369f34017e2a43259712193f16ebf25dc067b520f81c1539ded6fd284f726490653611e125e22742b5efa59fdf6896bdca58db8c0e60988e8e40d768c208e1e664664ae80edfafd24a16bbf7c677b60284bd9385bc6da4c86e7ebb324da871adba3fcdcedf0a6f889077d252a6b88efa6b80f9310aee5493301a2c5ba1456b53e58b7cc05720cb54f013bb6598267e926d9178ced214cbc4f8d714f0ceca314fd9fa6ebcdcff08caa05c28f533eb6af35135ec58e9e0d7a15c82554d54e942aa6cd62093a9a0357da2ad447ce6568c572639f05b94ca25a338f2a8021726c11c923c0c90713d825ffdc4379044e9e11607ad9a9c799a3d400b52cca7c6863cd78b9aeeec78b75e9c903ba7d021fa935827b5ba03128cffb3e1907a5d2f9a8284ad5ed2962bd8c41f91d9ffeb2dc5080ffac583dfd901450d7db95b7adcfaa268e2e34e09be598e06cd8eff0cac05470c7dbee59283decbdb7db5c96b77bb16fc3e1f12348e1e2d2f07d103474db2af9e77c24a8c069650132f20c12728a7c6747305ccbfd56e262eb1c7fc55804d07a6fbaac37443c3b03116700d04d78fea15b331e583614bb2786929695ac28a175a31944159c848be8c0b48cbbe832d17cd07de91f25e0f2e0741f6e5a4f280cfb48abb172c60b874f0398ad56ded4eeba14fbb9b7209e2e259316795e29345aa66b0bfb5a697543f153a8b44e4ab786618e27536ed68753d5ad4a4cfce47e5bba4276609a41ffe7b618cc7bb3ac07b59a6a2aa06a7698344a1777deead1ad60c0895e74728bc093097c8abff6d1feaeec43c2294a6fef280f2c7cd193da582f077c1a50b4b1b65acd9ea9d5f9cc6489b97cc641bee401c4a30737d5eb7fc530e4b3fa5196dd16b672be0f21cfb2e20958a7d661a9f8003c7791a460c82b67bb8e8a6ab0083e1a8efa255068265787bfc6d306cc7e36ace623cd31f3de72ed8e85b9802067d51e045770e3c95ee18eee698f29e7714824bcaf1d5d38034515286df76ae5cefd60f953be1f12f9f707cc2a1b52078761a1e4657d7226280524c9fff80dc8e0d0a004113908b3e7d92a8c56fff70068038c911afe883670fef5f241d0a4acc4eb69399b6aee2e0a4fc93ef8a6027a4b309d6d86c62c06393ca7dab1e60b00e5ecfd28f8675716a264c6dd229a84c3557ae92eceb397043ce0015e608152b5d146a7a721666133ab04c582986ad332f759ab269c037175312c1ddeaa8cc3aa60bd8a33492d867473852fc3e83e4119f5c45e706e681f243319d34a5567c7db5ed9facf4f7eeb289ace29a3a8e6bffc56129282e3aae575bfc086d7876716903bce2e324c579433542833c4e3123ee93928a4b531b390ac0ce2cd7476c06d78d069ef7cbd16ca51d7e6ffb9bf428b2518fcd95762011e1f0b942b96e10b57a3363f2b950eaaf3e53fb1c37eb6b41526c7e56a30e3c762bb13f573a5344965bf5047aa0103831d4a3aba83302220ab21322b8ecb7e3d2581d54256c968e949054cc1c4c066665803abfe9c6ce2fbad779465bdf802612f822d2f3d8f4958f7976dee5b088cff3975cd78c2e6cf0e7b15c590ae6df7b25d73de264146f519a95c06753f15202188178392573f65e59980cf23160ed42762f85714e73bd3868a67fcbbbd93f349e5ef77564680b2efdb6a1b2c31e175879e2ba7dff8b7f31ee178ecbb7ebb8d03971c39a526707653865db6bb675151dd998e6bab170efff71ecb534a0443cc5f9043cbeb1f53a44d2594598ba2722058553b194dc7b4dd9273b9a2c792551d77a77130537d435aa1c88830048eb979bee9728e5e2e16439c1d68e279fe56d61eeb6733b5adbe58d884b60e17f650dd161c94bdad454415468bcb410e9064e3de2c6663045437ea6a3681cacce2acbb9c549418a86a963991be7d0d99cc30dc331721eb1fa08666c5bc4b9b8cf080d617770d3b20b5a60ee72ae412ed70099949b2f9cd8f7f33a9113ec43565b1a306b71f13defdef80881ac767b860abe199970883f0cf7e6a30026493917689700d7f14c103d76b49964c3f8913bf7dec6843d12cfe31f6a2fc1a6e5cbac22f2927d2c398c32322580ceb9ae746590489244bdeae30aa29e8f76886354c2db889046695801254173523b875ef3080fda144328ce296fcf4d19e4f5a6d5eab7d2e3a40fc73d612355495c81834a01a83584ce77a9b7af0787e7e432dd71e535a426271814637c1e01f0529e1f6be56c1bec4d3fb0d2a10c28f2b77344ef152d307014f824ea3aca66d68d62c9fdc5c1d72e39587dcc4dd91790fd418572b45972e3f3a2b91b5da6ec7fa8fff8db8dcbce9cdbff64ad2292d471a1f754e38129d7d9c25519d1bb8593b022cbfd42f1bdf0f8d10cb5a07da7e6641d2cfe4fcf99ecfc5be6ab2e47fe159d1099ea07c08c7c5228fd0bc411713c2dcb8bb9698004447480ba51eacfd26290408549d02aee5f94720bae0967db11838bddafdc232f02593136b341d5041991a81a8569b7bb30553e813fcdd1419638db9b2c9732f1cc052b176976a6e6fb9e5e8f0d4a1fa04063a77e4d4ec8e5f16ee91613cbb1712434658e5e369e1a411c511c653dae6746d66a2ccfd00245ea9de50166bba3f9051c29d152214755f84a39121c6a5830c5fcf4dccae0121024e436ff234901944aa8a4ec56ea6af962d2cb7b8545f9064b230a4789a4ec10314c1854629eb0838b76a7657598e66e718d274115e0791a8d13e870cf6be81556207209b8a1df9cc9ede893bb37111743c179f4475d25bc9ad8516731514cb60e988b3befdddc0078239960980147463bd92e6e2649a081796cc6ee9faaeb4a7063382cb089af38381dede6ec3f8dbd0e801b8261f37e2212d6535259cd64fee1415c89bed17493de73d9370e8aea38d293f81a15202ff44b0bcabef9808004543569340d45e57c72e66157f48a410ad5d2772a9eacf831d35c0aee923de44347567bd4fcbfbbcb6675ee28ccc6934bb1257d74e884fd945662a13ef1ba261080495730d62287bf6fdc580e157a0b14b4d0ec36d7ccc5981a54e3a29b54aaf17396a5c2dc7c38159b4e006f51fc04b9f984c58da4836ec9a040f9f9fb7a6c6fd8f972c29d1f0dcd0a3b72a92afc485c592d15ab989d2bb627e551fee45901a9da04dc77d52e355047d2cdee1208b62aabfbdd879c25b9808066d245ed4c3736c027baa4c16f478c8e88139ad7ab4439a152d359591f41d0a1a8284a9ac189bb68b90cbe128fb8a9dcb1f363ad79cb52bf3f623f952aeb6f756bdd88437207ecb8960f51f331a2f80785312c047071eaa19b364ced58cf7af50fd9d02fff8b1a99b7b4185ca4b54c65546986b41552910cdb233d27e2d72901f29b62041bbeecbf98d75deebfc8ae7ad8e1e536c0b9fc0141e974a4eaabf534151b465d7c127af5e980d7da8c03e9dc661ff7b261c523af2ac348e267170d85fb343804a693ef7b280974351942a9fe8e8b75399ed56ae5d070d2bdd503ac475b2b75c505cc8ecc2b86b2eac11bd412ea93f0929c364de8413d013d62152a27febc23f1aa9f4307c08da574ff2ab2a5b1233642d624338ca67ea0b42cbd079a04d70c4995a4f9125692e1d7619460eeb10bfb2840dfe57031cf7400f7df025e17c38a8207a5e36a7f259b354a45eba9c014da1d6efe56105734023a7ddc2b3021e1c7f6b042292aeba3e5fce737053e5c76185cae2ff9f2da49e1088caf659e16a746d8106a2c8d2aff12691a82c6d62695730c2d41af0f36b92806f559931db6162a969eed99fe158e68a1e8f674df3ed5297a9477aecc8d9fb45c77a9bb065108ee5099c36f45649072ab4cf2dd768dc6f1895d638352671ca42d67aa80d548b30440ae8f26e39ab35f1cf34087f5a5c07ba85f5c8597a8cd235af27be568756db02ffcf495abc26a8a809d7edad231f28bbe6ba0c1722794ab9a942df43b45bda149dbc7ec5c318ab7cc0995fe485cf17dd0ce10c47d574c427dc58fc63fbca4fdae7e7bf44909d4150262bdf71438122745da5454738846b8829c814151bfda737c34fde1eb77b55400227a93c7dacf08c8375e93f461f25c2bb50d6e04f6e8bbaf3a1f2e4135613fd23a50eebbb23046a9b051541374c7b6c8a29ea59c1a52f4802fcda4fbc929bd50bbcfee914acc0c6c5369e0c5a1a0902dda320f731e733ed8eb7dee37f276cf9eb9d7f263826ade0bc71bc8a931d8a771c8e70aa75e1c256fd233af07c788006f11b7576ab0b510d66b03b24a49d7ce212f0d564b790b31ff160f3e8fe2e8beadfd214aeee276fa7d56d9a1e89024a6cea9619d6c5cd40542bd7da09433bc3aecbfcfb42faefb2f27d0f9b5b7b4997cc933d2ae549d48c239bf453e1c9e35924f5b493649f9bbf12e69b41e8ee8528798a9067b1a3245db86cf76289f29316afefb1689e6ca742a206a078dd3086338be83e52e7227f277179a6460f266edcbd8895372e1cf8024c6cc5e0091c781728ca106a8c4a3aa5fd877dc05e71cc40cdec6a28fd5cfea902e9d57748e700985d2e466861ace4af6e7e3076155641342fd9c15a60237cd0cd1e8331bb1032d5080fc2d368bdc83aa68e1b89697133b7e98b37db933577a0a167e2a45e6a22bb7acbc0990b5a2744eecd373e5c72729d7162b6457d9a6fc9381aeb8f0942ee03fd59184988a38825ba76fa9e34794f495373ec52b2fbfb2ca64171ff4fd62ed93fc3f4144c85f1e8e016c419e7b9263a2bdd7d274882d4dd6a3b828a4c61fe34ee8c8d6f47deee3fab7f2a1871547eeef02016a3e0a98c96d6047c51b45508e68b287f02f9992cd0630da7acc97e6b0afee78242a15aed47c87abcf96969388f98f85f3992ffdc882617337a59943a3b05c6daff1763a6c4cfc37ade4b204524cdcce70e2fb1e5e04a27e0d4704c168e1a9f7a5a9fe29ec97fd8fec3bc9e6ed766fb009fe1914682cd08d3422a1883264fcefdba32068df2411f0b7c4630e07e3979b23b54c4cb355b16731e1580ac271b28fd70693899d3ac0054780aa8ece4ec8dffea5c6c6ab8b8f2480efdf690a219e159a3f582939b6dcbf72fe004362e29b01b4ca942bff21cb2a72ca9126906bb751ba3c5d7c443e882b4bb9b20ead4f9e2e9f7420d0402243a5d90d503132333480d6b7211f35b54bb6251217b2756460236b663df9c98d5fd5f410511aac42347ed95f5799efd82d8c4ac766ab0a37b318e90c80c588166eb08d846300b6c033adc972c84df7daf9f3b609356e0c4c4750b6717f00ff3c335a01b0950d03864cde07b8c7835897bf6d675196a4534387db2461af639432c6647279f2c5112800dce04c32ad93ed38f005384fe2342f44fcafb93aa7b083d70f79b3a7fbe0f0f669b7b245f695e6a1fce64905ba4f64086523dac344b4f81a0b9df8bbb1aa297ed6eabb11d3b896559f0209bf56fdee0165172cd7a4786a3ffb51afe388605947740c84aef87541eb0b1b7cf071aaa1e81b2ae6fcbfb4ce028b539f7ef37481771131a031af85efbf39d32ea96d3d7fd46e048484fe588b75a12e483c794aa9312672f01d10c6e614a6eafb6e3d4eebc04528b6575f6d66eb499230b218b1f24877976b463cb41da3d6c06e497697000a15544193ea122835a0d6273d9053aa650804523bca34e03763b86821ff8b7a55dd48dbcc6f700be346041c0b01ebee2dd6d4a200b6b5a1e7a7bfe7be18031fb928cd7bdf9260d2c7b8e8f8bed34d344af39d016b342dd2d1d5dd16017069fd60a885e52c60ea9a416f8c98df2d34532b701021c6f6b24c193b578e6b4cf634cbb64960669a48195a1e71eb2dfd5bf2fe253bbba491988c9bf405ca1f29c5df4e354bd2aeb627f64c8e37577235f9fb049e0620910f04dc83e976400670ce14dca4af56a7fcee8fc44940c311d1da8be27a83b0222fcbeede89868fe27780df912ff6ab82ad9d2d9c228a81c6f1f8af01cc7d11cecf18ad496369124b7c02309542dae70b1cf3f3a88d6ed11375d990f3333d153f9e79a3fb7d67890dbdb5e2394ca8b3ee5b729066335a8600b004326200f42a5c43fdc3538d500c46f87b2c561ed99b0a03ce681acffa4edb4d3edd92ec2c05cabd4286af389c39449f543081fcd7fb69faafdb9ada3a4fa5e2302fd10136350a428d9f8ae1a2174c1f8fde242a4a981236f5d5040877fdcaef6d3cf132b78846989d1e7d9a22b3f897a92eb19f380521d82d532c05ee0cad20de90e73148d10a13a658705bfde4b3419b14715d2960012fd1664c793360bf8f95eb8f74e870ee2aba7b6ccfcb3275fde555b892bf84062afe89eb3d3478a5e44b160d8171d5c0855c2844bb271ef9b6b865a6e2789fb4d7ccafdb0d73e9b042c7f16ad6b7c6ca8f348d9c89597b3ab61e8c71998c049985da54a008a53077f16aae890ec30e3f9e2837f49f9f85beb2cf8a99665a4eb8ef8675a43542b9c2555f1539e078e95a881d20ffd8fd817a91f3a8e86802c0981c7eaad05250bdd018e79926637900f5b2f0427843f586b31246d77d7aa7ebcb496154d082d7bd40240e62fd39e2be0472fb18b1d46c61e21e7a76373a6fd2bb1b6a4aac56857f9d413259ed200d4ffea9ada901b69966f67478c81c207c88c82ad0d1b48afcd12ae1c0b0f557f8a2ef62dd2ee679778d962d28897c85f62230c653ac757f411795d52d66e941ff3da79a873c750f96c3c2d7b1c289a1370b6a3ffe802ade8ea0ccc14f01e9dea853bc51896d9150f0398de28b45cbfc8d479a78ab87fd3830093da83b06fd84df5fb6487020f9965c91fc3b1507cf1dca565f529a960eae60c5778ef0b0f1e40e49bf8cb1a57bd1f2fb83fc0f82c96ee12087e03b67a8a964dacbb3d1eeae4ea5f1b1454e7ce5f8d5a1ef82a5040985fdfc5d1c723a7cb5325efcec16d03a08b9180608bddab7b04c542c992ff989322d21eb5fd97cb63a92127d49afeec047c4a4fc4455fdb4626e81f593f4b48014bbe1d7ab81504ee2990a8a9c2f6e4654dcdb331a2554b44f9f76e12893abf1f65159b0c6dc99d21d2bc278f69562e44a06d4f2676ec8ce7cac63340fc69222bc82aff8a3da33ccc4a72ebed25d4f4dad156447d803de57a6d648111343bb920d62a9f81bb925737f20577c2e8746473a4970b3d378eee8feda05b77dd34cf5ae6ee54ecfa6554183a44c609c723f6fba2e59d2eb9a0fa4e439883ae2bf4b1cf3ac829337a303c63edfd7d2e19b4dde74e0e5cd6adc6484609c3f4c550ae0a44cbff0ac1f5f781f5236549a157b0c89ae4313d780ca900eb289f2e32f6e9ac9cf3873ba3494f04de37f92247a17a3ed0054d63cb73af4b4c8c14957fc540bb72569aed3d71fe613c50e029885426f738718acc7cb0e5e0e202bd52134f03d3a6f6bb56aafac4d3656350ad8d95ce7710061b54fdacdfb4ccc2098f8c889b72bba51008ffb701efc760725febf6126180cd9fbbba1578f19d1213119d00da35bb0c465b05118c53f48d3c048e105e3aad235141c5b9eec8264a5426b99cbea67e16911c92263e6bfb4d7e5b5956054502fb70fb679a19c231478a3a20e8aac5c3ae446114fdd329bddcdfdb0421008e9b865f46c4fbfbc9e69a0d2a6f4c20f1c03af26420432f357a99f6309389122b33543c959a3217fbcebf88738c659f1bd7d8a70cfbba287ad334e0e31b0c194cf71f5b78bc9f8cf7cc8da3abaf5063d16eb03ebecd1b5c59eacf916585af72efa4210faab1e812a180ecc246b7702fca1784a84fbef136c2cca0351032057f83fb2bee11cba815d2dbd8987315e7229acc77c427840f67dcaaa8be9eb4e604d139011fecea5403cfba647ef7036a9a6f02d7638638f0699f37d731a720c61982c3272f9e6503d5a6acc7977e0f4b85c7acf6069dcfa0218b7ee0346170c4a94915fbcffcb5ade616d6161223663918eb435fdc3899902f88bb0e4874feb55e92a5083e9e51bcaa733982b930f81f073d59975fb3a580227d85bbcabe885b0102e2b7190ff3a55eb3bad3f5084785e9b37d30f15974aacd00b824fde9405239dad9ffc3d26190a53da78b002e9d379e26c884fdcba817728f9b80445a2f4c520d2955bd22dd08794c19c21e2702859afd72825cba1250f6073293ba6df59c0601bce36c3432c7c255954324527d363a0c764bad3eb395ec20a2063f440c1bedc99b7927c0bae49f74ddba09ad8df4675523df472e3a1bb94c226196d5b9407a4d50b5868f20e6836bf0272bb2155086d108029d08875c25088b49ca81d25c5e5ca9bcab6d53fba43afd67c365b08573dea51df86926bc9e34b899f0c061d6ecfea05048c6592ec613d970ea3d424ff3a309b1970473ef753d98182ec7662c77f7c1fbb8118efd4eaf59944fd4a64537b0e4669f15033dd3bc52b06138401ff8dcca2c00f5dce4cb9cf30e1a2de3a39e237a24fe2406c38434a4368360495f9a59e152bd195b2207bb264a6cd6f0b753d2e318fee162e0fa177263a4513454ad88001e09b39b29f4ab66a05c0ee3b7b766b8a53fe4aadb4d0078e04894e0e4208e43514d784acedce75c9bfb744f07d6f6a9b834b04ca809ef87018c48ee6d506fed347a0af00fc58f48a3727cfe633d6d0a9c17f997ac40bbd4e6acb224c2d1237f74284ea8fb813d3490e9a60a555fd7b5a3c47148579d82c0cb3a50a1657395acac9672d05f8ba5344d4b240a12c2cd65ae05ade6bea042297f737a53c72dd54c8ad666955ed380bf5bf7d560718f8544623ff144805d355cdc4221281890512d25bfefbe67a9774dde233d4dd32d6c78ab46720010ad380ffc912bc89e59959a4777c1f952772446099861a42f1f7512bb417eca2e6e7d2f4a95521250b0c1ae6c56e22768273db8ab1b6810c7aa96d18dbbc2128e7dea22000caed5e799a5b69d4a2f98d817250e98204952f3f6f8db2d2b1c236e797676b635ca60febd6ea4194e6e848ee34d4a174c2f4258c4b285eb44fa348b14deb43351683abbacbd058addc1ea01592b701de87fdfc893900ca2a8b5b00a1551c9d17950b8df812d3acbd527896ec17946c6b5250182ce09f0ff2ad3766cc89d4a10a226322f12b2f5c8b30860570d945ed2a310cb2e5e06027aacf28ec6cbfdcfa179b6f7ec1aecb0d6d6db9c7ab3fc9332590f6276668e187cd3dd36f67bc3b60c8460449f39ed817a6db1d807cf33fc98eea35f394315ea4ec71d5acb32f9ddf451b028d7d46c16e6e364a5a289a1cf90e375d2e18cf3d3338f49d8e4e05bb91e9437219e769c0c0f14e9802713d2b4e8604072758f976b89fa37eb0531f5d925fe508ce6078b667e916f72e33616eabc74d15b4e35126be56b165cbfcaf61193a6ecf0bf73709f6632788817ca02b41614fe10f9363365d8101590b7ac40f2739cdf9052230735e9cce426098209d541aec624cb9888f13b5826d7101ac78c72fbe3abc0556c1930e3d3630ddd023c5a5f98a39d5ad52b6456b52da160e959b19bea8ab108208115aa7318cc4f1cfa06938efe627990d602923f3f25bcf5e22d05cb77c4bd87f09b6f07f94e0df19845173dd082e633c80118c5273d93bf3f3fa8e075b81b2bea2ea3a3b2e9670bec53fd850c881b0fffe011d720dc3746008f398af47b21510c8e64ad9bfacdc6b827fecc52ae51b2869227268d3ecd7de53a9ca8fe4516408468b6f1cff5c504e57abe7a6277377ebb4cf7c42505435967e2fd526de9a20b31d29b101f7438bdc715a413528e387b4a2a8ca6768fe907a8c9f88b905c8eb2b13b9f35292634f941f9414b0281441078e4ff60c2dd8239ae50a2c6a70e85e1d1d5577e56dfb230c3d3c77064c2c160e0ea39888e4118fcd244b9da9edc539566c31d7d7db386ced738b04f334984fa33d60d11e681ed11035ca7922fcbbebbc95a45f3eb0f516da822e5ce10c9fbc7b6e0c2f6db4a2c2c2dfb1d5b262a20b84bae6ea6f1323f8d035cb63c04ec2727ce918bd7054a158877e361cc95e58d5d5503b908cb071865aeb8045ef3fcc798538c5fa44c9b9df3ab182655a13561981fdf5e8d41ffd876ef9607c7ca767f65b07362d56bec33e491b457eee0371c7b23d331f069dbbf65af07586b6d36a904559a59332df291ba759c3aa8438e7622beeb0d0a71dc5fadee64b06d93eb24e3a5fa15ad7ac46e4d2372f2eb31c22a90c1bf6b8d03776a886a99bfa1dc08e198a5d0235a87bcc5ab61f69c8b280181b82225e71436bd1246fc7c1973b7b187ca458727ea7524a0b1b352085c8917c7d947c2e63e496d1686880df792e11defce0be91708be8af40d530b029fd41aa4298dd3eb6fd9f8aa2bef21bc83c7dbe52b039391f9c719d649bdd1c9f920b08a38a155ec08512a9e3c0298358c38c30ad694fefb69f3137367ce3daada272b7df23d42a187c655272b5adccd4f41a6d7d9c40fc00bc120265748890cf1c6e80ec1bfa238146213c8b08c309c80c5823b6a4b037fe103d12c4a5c3aea6d0c614e9aa2588231e635fe61dc78f55b38776d284d8e530bd75c38955e660a5438d271e350a38e686b443b795d152bdc0d0beacd55d49f159a00e2f29af233fa3af6b9aec58b58ed26c0c7aa74229629db79b7b616b5b9604f2a835362623dde0e8d53e90eca7b0a82d7d9bdc86342cc976c3c1e1fe7230395c6087d1477bcdc01e7407192b46b52404e8ecce078c3e37c5c6fcc5db3bbbda49e0cdc089031cffb750816ec6f0d102743620526bc12c0846942deec16d80060b1b6f9e533c011c19cb0f40c245254c85aea6de4d2d4e2d63e99dab4dadf43e47a1654297b9a71613e6ad6f11dedfd2ca875b0be4e20c8fbdfa3a6994ee35ca977fae03742b82e6b345f0d197fa51a25b6eb6117523ddcdfdeb362c3b79769a76d5a32bdd60d0092a6091ea4cb3cc83deb8d9cd64de045a091d2f56a7c5664d7f36026e0bb08bcff118d041775384ff420c793e4eb8721bcdc8e0ed4e95d26aded0fd0e767f3435dd37e986f07382e45743eb67705c33232fe8f8fb602965538d0bb9a66d5f272aec54877674c31b54b0ccf509cdb25ac6687c74df63362c8982ba108700e6e1bd93008bc063323ba646d22631a1996b5a7008488b8725237568972a717cd2f4c1f25760339b91fa6baedeeded16df3d6e794eee3d8b54bbe4b6bc4497e8ec1ea0b8974bc09d69dc031aef77656645b9e1d22bee53e0cb9cfef67dda6377e99ef744b755f53869374e6e1be603ecb9b96e56bd3aeb5747474a1add0be0728f3c481d76a44a75eb191381ba7424bc05a4cc10a9b9da58c32637f30ac628ee571f100aee4aa9a4306cca3e5d637e340507679162ed11a1d56b5a74517899630b05466133686b4d345106bc50fcc73b7bb39e982fc1c312dbfcf66917a06ed88c4b0a80483067b5f38f4335d283b1a84d5ea01b790df25a635eed533134a9dddde68012d5ed0f7bfb7fb9c68bf2c31528f3cefb9f680de201c7edcee994259c046b564642831db2e0bef5f793854b40190dafc3eaf0e4b9f326019aed725554bcf592adc98d685df83dc9eea2c53eaa1ac80dcb6745f5876c919732bdaf889d62c00c815ef48d31dfb4c03cf2ab59ea7a15702c8ce1d35485f8c4e5ad1e319426374a55ace5d47c0ecd311e6d865e87c7d3667e77bd5951c18756c332af0fbccd19c1ecc503b36e2391aaab1d597e185372832e97e2c579ad89ffc7f6bd8ac98ac0da31d7a460978b559881459abfe528753d88e5877d84786bab3d4491de59bfc53a4b8e860c3c352896cad30c5274a080261a725dc04d7516add30d612fba9ec21d8377fa64d780a7e9c2b6aaa68a22380495ea061dacecaa09cfa61485c01ab6711e2e2606a42482c2e5ecf0ac6f2eecfa0ff0e2cceed8a035bf4f7f7153a02371350402cafcacae1e4075eacf2e8d8aeb388ace9eea0a9c128df0ee469a32a7e94e9c11d22611ed6ce1c246afe3808b12367179fe3af7faa46b2684b7e72978d1e875f70960b357024e3a709434e8d1478190eadb6fe0753feff99c91767b667a55b71bb0730b3068c574f760fcfb05756bae664098a264e00f2efe5d34c89b7ff887044b1741cdff0b593d68e5fea398db13febdcd977b6f18481fccf70d012e9ab48329383ca1b38107af0e768a5217ffe3dd43f4bf54d4448ce36a7614040a7f540263c5d0ae66a7f2707546f8c4a943b57d71f82a41132c212a5bf21b9b9ef0be15cd2539e308000ef6887b6616a6696da4be5dc255cc7164e418db27e87ae6e3f1eb6640d0e4d48def58c701bc7b92c0040036fe072737f5c841c94b305d4be09e7bc14ac23e36b8d27dc7b40c4c786f0108f5466aa2150d99dd2fb0205565312c71843aae39b5a6dcf6be293932aad91c633693a4fd4463d5ab303faa902ce03183d9c97c0d60ca672ac67854a4c338d8b767c1a260e1fcf991a20aed39d70065abd041921ca80f8c28f233e2e08993c0ab95110afa3f67efac79633bbc9229db3718efcea49c19ef6cfff373727af59e162c1a191a97e6aa491e51ec50049210ddeabd4c0a034c8cbdc62129826e343888be42596460db0f8db7764e31bc00bed3371b80252941d3f367dfcdf2342270d180372bf3f4a174ea34875a5415048dc406c3206131592df8a3a594908456d71e3af66803c8adae13738c6cf9dfde71f33e028b617f6dd0a786cfad45adb3d868be7e4636eac4fc0440309de11e0d4819527461f86dc0da2c41c3f3359c045db2f8d1b08c379648e182a7a3a9d4a6f3ec42e7082b7be847e767ee6ed00a3006199cd975d4c723b7f41e78716707a2b286727c7576ca41c28c9ba63dc61d354e6a8def2ad999c2f2db4ee53d5cc691cbedbb816db3d4bbc8c688704db4b7853e2c15e51e6ef091323fd0ff7a4ea201e495d02efada3007dcbc68d75aca5aa46412b06445be76e2d4a0b36ccc9b3cd929e89ae77d606805c596448a3567f3a44c209bdb44ee9df7a8b574d81027d896092b233897127067579ff76a689506f160b5b387b2ee935ba2609897301ee4c0a31317c284041ae3a4a6aa5cee354038af436d8984ace24d06ed6a913027d4d3a43f1ffc2f131341e552c6b13015a4bb4c4f5502c6ac8c3e60eca58be6c375ac703554dedf32bd3bf20739cc6741161cc02e0af00c1e8a25f3b59fb5a0a2d58cd92eb9492ad60802838e318d29de0f75ca2820103f408e2325da84f52189b720bc16690ec9a58f0cc0e456b17852abbbec4108e355995b2ad17a17840aa594a630a3000a3a4f7bb4b2097c5c29702b50be1bbd455863dd834acda11af5222a06ab93e6f9821ca62ad0dab600ada74c4eea189ae68baf046b5c7a16b7fe2a0ba8d0f1b283290ba7f1e884ad1d91b14fb5e757226ff3ce90da21c6e3d542a834fc8ad41942ff0b490d571aa110b9e9ff0d234b7d931b49c975a524fa98eb075d2f529ecf960d9f494bb2aaa36ba96dd476f45d0736f209da93cace3a4896986970b9076c92bafe3b155b05d4d01c08cb1b13493c6bb6804830e304c848376489d3663a7b7e8551deb5c50723932be7651c422f3df4de4a367765104a82f94f92774a0759f7c0b9a2aa419db43a332ca0990e52c7e9c9af0d4121b63d2941ba1fbc9befb33986f28736436d57baeb05973204166665fe9ebc3b8a34896843905cb4347a363cee8c50a72cd52d07ec4b328ce8a1cee7af8995b6484afb5078798003609e2cdc4bce28bb973adffb9f78683535067ebb4b32860084bfef1f091bb591acc9551812fe2edcc3374b83505a4b688c87980f9425391c949ba27765967597df7e5564f6ea2bdb87293a7c757ba22ada7f655be55dc12cf0ce527aecfbc71316614b1639e0f4781ee0b4e0809ed93fe152114652ed4b6a2d1e174fa7608bedb179c01d0332f76d14651d48cc4e19c9909221cb5ae60a0cb57142103e35a3c17e6dc814adfffd20b128a7a95f0979428df6bd600e487298fc467e1f945a93da9e494fa2a64b1dad706f64b366d54ac94f1a3372c0f099bd01006a921a21285a8eb676a65deddb13b51887043680bafbeb69248ec2a0f527ed944196ef57425bf13892298a321ca2f194ce911cfed92a732eab7e5472b39dc326c886a11e690100a3b671a2ef15c354811387319cafb0fb1acaa3c72745436fb9b6939fd5fd71c839d3f36f83ca1c6a9d6330bac72dbbf3e276e5f17d0401ffcc9e1f8cd5fc3b167dc90d9db4a228f09792690b19c51d386b751b14af12b8431b636e870cae74a14c8097ff4f950ebbd105a7b78040d32cf7b3c3efb4f6f7b6d9c2dfd3485e6117276e0d0ae6beed5240c06b25d7125813975308d0e505c899b483e49d59bf40f7faa937299db1bf841c2ac43a1d6196db3b03af8eaeda801a09e12180f9d47f1368a0a3073f1e50e990380a4e3e514df2bcc0df074ed1d9545e0dd55107ab851f53183305ac5555a1172d25407b7bdc890512fba9fac114dae638c9b711bce58edd49885741c285df38b131cf69399700fefa3f165d0179f2b2e03d421bd5e6fc1cc6269dc25adcd1f077a974a2baa235e07b394c33f6c163aae5f7188667e378a2265ef685df1938cbdc2a7a21087c31a031cf31e715f1f401e974ffc9d6623ca884eedb4dcce9ee66454670ba7015eeebc5b4fe00b4d8f5bd5f4770e5bc830796fc4d18949635b2238c271bd0528e5e7f1ecdd71fc2e46520f021e5f6cdea236a4b5803c0d30174719281077a1cd70bb14995b48532a17a3604b5dcfced447ae8134f4b2273582d01185f888cdd9ee201bdc7f2d7e5dcb1c65ab59292fabfb1ad503ee3e122e49c9a22eacdcd5c00945bb6c4dc2a855aea2ec51b984e5a6941754cb6ae67dd112212889e50dc9a849fbbdaa0fd8fd40b1715f746f3cb0c75c7c823f6624f2ff026747cb745fa592b4daf9e94d93a7fc9b466ea2d014bef32e68006786132c18b17e924fed4f57eed1214a4b8784b8311964b1bcd57b64f0b8dce1bdcde4cc9c6f3a8e081e9bf1448282f64a4d01980f3b2ddbd405c6cb9e31aad15bdb237e930223f108c7ff0b7fc58bd73b7793c309e1564cd501810b0b54515cdcbc653fff1ae5416e58ad22ba9fe90628a0edbb73747fd65943f85cb15caa78b3ef7a8f1dbf8b96aa6d4248a00958f24e6e1a05d050f5f1438c59ffb45bdd71682db1eda257c3fc16f5f367c9e60ad9cb0ff587964f462b92295b18749238c9dd798a515bd8276a46ce7e0c1d5d94c4370b4fdcc2c65e379f025cae98163304e86b1edb95ddcd7448201c48d793d04066c6c95f891d3f153899bdb9801514a87f0520eb95ddd52d0881cee6cb836382fef5829d759edef85a40877cdae3c5de12d24f50fc82bd8d376e0f6ffecd7118cb6d13faca503eb93f74af61f0d09d3aa6506c837c6aae4f4af4547662a44410b2996766cc964448089ff8ce7253f854ce9371e981b20de8f01a18f072beb43509052b55aa226e272c6e7bdf5214c64b74cc78cef980462d197311890ffac262dda6d3a1f3d9cdb6c3c30f9c8c0f13ddf3738ff35445d3f9033e2fb63e18e9a975bdd5934536ee86df503ac570e6070d47953b4c1e69170556e4d57ebc91930343e15838a383637bcd997a3d50d7df584da3d2e7b92d9eab61a275e9b9341520abe35cb6d13c4f652e824fab807d8d5b1041fe3eb4cd49d311910dc621a287ef834d503fbaee508ec63a3641424e39cc10c0f2959713b58f3bb970f658a887c202d235878a01ded750123b67209229011353ca717cfd9b09dbb90feb371d272facdd2183ee89beded58a9f322c767d051ccbc4265d7c636363186601cb62df713743efa92960beffc510ed25e279362b102e60e27b4d2f3c5a9cb22cad8bdea23956d51974afb230999102bb651891fca614d044ef81b6128f41c67941dfb0b8d40b9b6cecf32cc33b136f1c15305488de530a20a2df17a6cb69d54b9198a1801302649f04b3c1c20e38b9a10a8d23f260088105e8e598d1826de660590e9f8a2cadcc25a19518a67f80e535e934022f06a5b76bba359bf90d6ce99bf5de3a6240d532de20f7162624d478c9f74b9e88c6441618f389863132f7cdfdc7b199243141f39784f4c247c08e00ea64b88332786a3f0a036524b3cc841c8fbb2466b016afee23ae51a888d9e0d82facea45c734f31448df8092d842e1e468cb0a035bf70855c070824a52f1db8e0817f98bb1bc3a57db8f44f2c0bbe770862f1604e91a66a9c14d77109d6d5a3e419a3d105027de79b82aad6e70d509dd3d53bdf064600f0dd0a564709136981bca02de4a2c6439c0643df542ddd9c9974a2699e543251aa347a79235079d706334f7377ae0b32a49c45f8e210443cd2dd5279afb2eb980d478e859a14a3d3b0447c4eb5b89e986dbef81e5a9cd17315330055a9e3194b83bb4ea031c8d725a4713d415bb672de939d797d31e741eb134dd3ec270fe488dfb2da12147cb7061f1901a48316d4bec94160688eda138858bbaaa6d7a4fcdace3cdc70c49cedf3a78ea39088e18bbe48e5d189dd7416cb507f79664d2a88c9f9223521855bf7a9105f59586225d01bed5ca7c39998da3a1d073018568b3fa425c4da13759b612fbd92cc6f34adef5467b67e1b4eb4183f234e2057d3e1bd3e24c91646b1d2b0f86ecb8a9abb5fa37be70087e91ad9bbd28eaa155e7e4006078116f4c89571c2b8990f375214bf292264a3e49cab2abde4325925626252fbb4ffe88a62ca4bd593706d173dda67cff88ab4ec9b5bc8887f9f1f8b24c30febce2421de77baa4a0477e0b4685eaf9e62d4928bdad38c855ed9f5a6ed0d994e7e05a8d71339388ae112269313f6ea4658da161a658f7563d7c77070a6175b558d3c4c36b6e533ad8e63750b1b20416fad7d3930d51cdf09f850ca74f820155905b65fb952d9715f4893a74039c708ce388e6bc649ab8323a04a48fc36b2f1c39bed154fb968782034df2a205b4c6be7af34077443ba8cf380d153d86fcf0559ba8f19587fc1d8f99a82b91f58c95cf95d820b98f8cbd1f760cb97f66772e4fe27ead5c2130572f08cc8f190bba083e80bf4774972bbd615f1bc043f40c74d6c749b15f74996a625dac062e4b39e22094841101418a335c2a120b8aa05a30e8c97ad15fa69de1968ede0c606547cb8992106c6d7490b254700de5e9dae422e0070bddba2fbcb1f9d47b41a011588ec321a4603632e968eb141892b873478054b99a44de04490527a1e93e1116d6f28ad4f7c8b89d1e123d9602b89453762ea283c738587734476a50ef2d9e510ce4d0abeb063eb2ba5cf08487be6b2c3c78b1fc65a66630cd0b974cebab20d18d80b4d87900ac31a135b0bfa7be38240ae82c7c5595c4fc7f139e96b079dd80d94afad31781879c1d7b5a767952f281e15e3b57fc727883f7adb08bf13e1ae1c7fc7b71774dc3736829a62a64447e6776d7c2ab9baf2fc936301b15c1278da1135a731854661863ec99ebdeb15a9a0f5265c2eb315cb33d286ad3065a27bf12aab7bce086488fc24d3890202bb4a8130e4d656a40b5d2baed9c69135c603b52a57127e11d692cde98f3a2ba5e21e13721c53e0446bf2d4f9a57a2fad00b002250e3809fa79881ce3f15dc28d78fda42ceb8b6ad8cd54a9632712f61d2528c9bdbae163c2882ebe35971b69556e1acec4395169116ecc7c6350389622b160d9715d369fa61c9418815a97640bf0da31ec951b95aa6c8b12eee9588a4a72664555558fbbdd3958a034912c950f38be0ac7cc0c92be7a99db6d608d836bc6201898ed09f40a9c7206e72a58626a5eb4136bbb6257006f7111eed662de45196a6eaeb2dd8649ede5409b03e30c582effd21699c7daa55b3b011381d45031b3b6a10dcc71140ab4bb4eeef23ab4bd57cbd4eee98bb9c538a6064be5900a1d00eabf227ba8e696f11710f93fa916847ede430de0e55ddb1e67414f98517d717b201fc63f14d3e301fc88a93c9e3ec8aea8bb07050b8bc4a31a731d116b87ead567266cbf56f57af2345672e8678b72f34d4943b193d6aadb2067a9ca7c0e6ceb42a5edff24a8f36c61a7879516337bc93df6bd9ec77fc502bcbe37cf3b5c5e2c8cfaed7bd46f1412afdf58bb5c4219bca88c8d2eb4c96c00c7f0fed599bbb28573a88b76aa8032bad445e12822e6e3344242354ef5d17eaa3c8acb32ec4e9df8672a01b6de0f670089841e2fb21f559a77caa06e02d1e1cc865f9cca646a7f38cd710945dc8598e1d6e1c9e032f5ca542369b7295f6743b55d083d8f65b466a37a8effe76ce0f88fb41a2e967f7c26f365e51b30916055329bc897b9fa627afd12ae7d167b78846cd327f080e6310c1a8438c3b0ee9230b77997d5231bee32fb19b53695f254159e1d29ba14cc1c29c9af35c39bba47d4c9e68e9caed83e194fa07363a576c333f27b3d04bf1674afbc65090691d0bb70670c60b18357e3d6a5214c1c2e25ac3ec207607b3f5793550f70b6e3b71051c01f8a051432dfbdae75d52d7fc2b0f181b4022f1d343a8beb42d7861691e82bae175c8b1a8d95ba44e81293cecdefb8b4042cbbe7993b95d8cd26d821c05dbb81306d949e692c46c29862b590d8d939ad2a78b9c94eab184c27d3e04829f2b909f557fc59ea6f12d3659d57496a622bb76bc781f88101fc8dd99f97387cd0600b799086b78f59130a7b8c8c6a3de531bfdafc3677669605038bfb5252e94435400b678d40e6ce4414825abd5a87cc4bf08b06f89ec243825621ea84978de659605e359714fd299104003302ed84ec3a7960f6825f30a2682dd63d5e0273ca550321ab2b699c0372baa430fc778f32cf5a5ba6cc36355848beeb15a8fbde5fe905eac60e0388e707ec3047e36a3fe6139444ba7ceaae6e11110c6d37277ee6ee6aad9c954ed426d1250495e8da0e675f608ddaed891b1ec0d018cb9ad320de730318f6b9c897d2bf1b7a77614949317ac3dac90675eba06509828350d08943b5314376c9730cba11f0b57aa56a15f5e29f433cb8c619c66b816213efaab81d16e443217f2d1673f258de7765336f173120085494ba36e50889c0f8e1d36be73887cea5bae2e459a08461fb00995a0e663de1a9e2e34c6819cc31258560924a8a12589438fe1262df7ff9d14cbd3f976e4ae401fd417deeb86875fddd536987292923685dfdfd464232bdba7d28f13b8342df0e96bdece9ffa2d49bed369ccdfdfbe10eda746ed4379096bf3b09c33372c5d1453055d188c2ac6f31a390c4e348fdaa5079d7507d154a99ace68ab8678abc0e00a36a6b1153549b66cd18da7b73613696143d6cc6f286a4232b4c4e04cef8b68a775aaa96d78a809fb218bd3768db49b9bc39f996058382b757e2919758637bc376a9ccf1a58578643085291b8ccb956edb5dd4aefe176d42e403ffb30ca4766e7f8c08021aa60d6e0b64457a268efa7b33425c16e1b7af4cd588d25d315687cdcdad47d5a74448fd14b9bfe339935a49cc3d5500ecee6469ef08c9eefc10706c2c975b6e659a99a688267ed4c607d2e6f052e866f53b15e5b5655f657fd037073df210178e206ee747144180bb4eb50c0f5bdf76bdbd52e74e2a2b803c74c7ab4c9f9b04d40946d00a81c1b69a00b65ba6439a837bdc7e00266bc5dd4a2ac9217cd6e6b179bbd4d4e3ef002d37681cad302042c5013a80e547aa955395264ead74326233a8da7b09495a22467996df5553c8f79b2307b911d4190eaad1acdfad0b266182cd0f1af6a9e805d766aea8e4dd3cf6431a3613a28e3d6a0fd62c456dbc703b4ec42da0a13acdff606677729e76a497f1ac0c77ee300ebabbaa27757149d16e57dcf98bc0f8aa72b629298903848deff745f637f4b21d6ef0969abf30abedf926b3f144c5ad5499946ca31ea7f4a191b3286911afa9b7dc0b95bc4e49a11dc3730f8a3e79e41a4c95fe36268720f15869c2657d94c20ec10081d72f332255b44726779186e4f3e51c0b11b7c801d978728ab83d7f83c6bc6d31137ffdabcf18afca632db8352d76ead61469bd4aea4318720fa59ede5a21b5556e015083462d8f5f48de220b00cacb6d473ce6c35967d77538599fd7896521f2f2e56d9db10a823fbb32f7b4eaccac31504a3b5b33da18a5dbbe7ee9b22581374be1ba850a9efbfc74d97b4d95d649370b57efe32162323cef137bdb7c05c6abc6153910ef2d48284511ce134e30c8bc3aeea44b0c663772c41d89715f96ce7a30151245480a1da859dc62035011e830e56d464c2c8dba170a2b81e22966652398fb5e9a7a839aca6f082019ef52c46e8320b61595c60ccea904c52030662b03803544c2d8ec907076e10b57380450abee2b2237f81728291abbb3713e022b56c1da5a75eba06f1e1b2aa1f991075a61d0d9fc0858a0f3db90452e8866d3dbd52c3fbd5e34dbeef1b57e6b3dccc44d7cf2d3aad72cc44b1d3d93f4f76a75d5e23f4325abffeca86088f1dcb16957de7a13d87e9d1dc1c2382e087017931496436222da673b2d91bd345a6bf908e963650fed0a4a34173eeea3a452c19349ec15d15aa8338181df8fcfdb38486f9d0109c32f07e9bb47b7fd3b68d6ac309642696bdb29b3f9090314a148c8a182509c6df2dd318f55ef8d1d3438012d5c997d63e82ca6fe56e8482c8e946ee597f77d560246491316662a70be4a90bad3a33c032e1ce59bf97e4cc5fa3193ebc806371dc2b57ee5532674165886c6f9ce5901b76fd3c162905c07fbc5ba42dcb0d2f4c5aa6386678461186e1806ac072a85b1bb930797adf18bf439a4ebfc0ab3eeef55831af894f8b043b1dc2988693067c5a7bf2b4c03ac93e6aebacd92206e35f8c362034b660ae509328242405c6bf9a443c1837bf90fed7ddd38a656a4625d393e5e6742883fecbe1f6860f6ce8327d919123e5c637020dbcd6c52fa7dc3817dcfba39edffd0fcefbde0b510a92250414446975b27348999de01ad8eb787304ccb7dfda94f3d33f86f75771fb2199868501f65d0e116ac029dcdc1321d88d8ebe4eeb8b8bcbbbfcac8761f41076530771c7bdd30d96e3da42f8bd78e4c3728e299ea2b0c45a5ce4c98790b9c1ce47640b4ca4e589345b2f3021da3d94a96cce1eabc235c37de34516a3a425477f9a5b4a97b97f679eabd14fd395298d011e562f2bfb958496f4f1838804a69dc59c17b488740fdfff7ae5d2d4e6977af874bf12196fed63da613661e9147431836ce2f69d427d51d00c0e2ccb70e023afa4a9ae5d0e63b33fa7293308d57956853231a82c2ee187313cf004f1a7c039efd23f044b4c2ec6681710c7a9e04a6330b66a7119e46d8460b3d58025e399fa4ae2a24ae3147c87aed209622b906bfb2b8c3b181ff2c9f7beef4be80dd105c03ed049016098b908ed5929d3b5d3eb963afc1d05242d10fea61c529d1bec5c06f89def7e80988e1381dee40569b86bafdc12bb0733876402f620bb7a85f15833734d2787e0edea4a5b869aa914fa42c7d4c7aa1b074d1f690f4248f4a041ddb9bf107e79d6930b7d80f0ac23ded02b2724b4f62294b92a28f30bd312e11e518ab6fb5ae4fbace1c87ca5a3c7dbfa13a65e48fbae131e89eaf3258fdbfdab3ed70f44620e661e3265cf00c8563b8bb94298fbd83a799155bbb07c475817a56250564698d81cce9ac93ad766b29f501b764eff45f35ae3c1351d4fe7838600d0bf467ad95e2c3b0b3835005fbb164b27b39183a7eefb314548354e5bd86a798c09acac04ba4ce4b6ed96d6130142a89016e1acd5601cb191ec1cb52f2880718b7d59e7324b1ea2c88c19c5f7a6b2515512a5cfad5f8c739abefec31d866132701d5369e9010cf370f62d745369d2bbf9666dce7c2334df95ca798f928b878bb3b7b680ad9ba62596fc126b33b91e333da9e00eaa96096cd0eac0d073b28ff05f2beefd35e87eee1a67a1f7143bdae70a465eec8b02020d530b82ef37a85b857c830bb67106fc184f4e2bb187b76d48b1249053231ff71a1ae68ae63e530366dc973ab344b7faeea390cd40fe71e15f2c470c6324daeea93ad7babd038a2477bf5c8edbeb0d7c6ad59637cfa86983a063f4e74a4732e6072e836194b5365efe5917cd1b78dee3c20d0990abde748637ec22728063442ed0823fa8dccbb3dbe2c85f1d0f5f1e4ecee0089d00cd82e8ea01015a173689d4939e2099ef339e1da97935a0130c1493991a5f20fba81fd575ff67e41dd463cae577787b18ca6e97d7488ce779cd7652e12dd235266ef164d5258f214fab73278f7f809f727835838b3faaaaa1511838876bff6bc41aafa50d6c60bd6139de066dad0d606adb43d0b38734a232526a3f3d9c78022f9d462fc13c83c467d0b810e427daa90f8488651db98ff32e96983cf068cecd521a70c52f7f92d0e631c1eae0778d64fbe1f6049d1235c3e13a9c8ce8b4b393f017b2e98a041d6875a086ba6494e6f3af3b9193b9f1b12c6cfb090d851d65c68aec7365c25accde8b53d46fe9aafe0b4c90281b60b980b07c905fcc4211e470fb960495b87a5866e64a9b8cfaea03fda2b75710754bff576f98c3167e07c893030d9c3f635255d0cbad78dd84cae13b9d900321fa4755f16ecaee91792ee8186d9c333458717905fc8fd4129fb1225abfec81638c81735df1537e79b995db50809139c354b7ff802c0b72a7ae27091053ea544517282cafae74104c4531dfff7f95cf972c69c4c7ac75c10787f727c4cfb276c5a3fc598de353f0f531b15bc0efaf90db1e5e96c5be2e8b0c0d5b40e9d7628d24af9d78671e9cb410dccbd675dcfe5a5a6908da0e2850cb54cdf968fe47ebca13d6dcdf8a3fab4aa57f15508b33a5bc0ee33d726be91e11dc39684d784192f41dc2ccb0afa803c39889e9300539445df0bcae422b612cca482445a870f0acd2bc8ec85efbed9ff9bd1c6b0b0cd1e9c6d19d4fc6c67991aa9952a002d4049fe09816a78deec4ccf58578e4578a7ec30d207e0de9cc8a0518b8148aa15ffa413d266dff07ff4abdafbeddb35516d2ed30fa792e9e432015881b371e91c1d33fc131bc9ee609474a7a831526936d8324f96034b7729d46add4940fae59b39831912b3ee5f7cd6e2b9e2c4fa2240578bfdfb1de2aca7772c177d01f2351c4af764eb793f482dd22df45f7e35cccf3d2bf38383c7f985eb36598ae055f789654c882728f0deb320d603203ae1286d2def5b7afea8884ec4aad114a94c6f0f3b38fd2ce9e61101ece20ee217146548e29c633a3f3f2d39042cdad5e27c313c83cd5ede91c9d1508ce7a2d51fe7ced6d12c29957cd4bb9495a5e668b08367af983e3ef4758e5f7ed1be98443d234c3d7b3b5a1c432fa3397830dff2affa0ad7668cd136010dfa1cc8d739a0823e2f1c4a36f74f5fec2c2041d02f4f749acae194d0387ff573d460e587b9264faf9b0a5b5a28374f55e01cdaa5ae4519c37492d01252e9e9167dd9a5c7602a8e260a423f017066e0706a16dad432ce967115318f6c39feb4369652d2c61f430079ee5199af796266902550d832d07a83818ea4329020d6bfbe4ab8b586051484fa9d264e6fbf2ded65d41d5f283baabd06f97a744bd174fe429923c1d26953da8e8e9747dbca00f4995bb3090c72dd00c28e9bb84666d9534fac09adbc507e71743b9131af8695dc31d59841554cdf339b3d2be0503d37cac36f63024429ed5e8e8e819672c9dcd457e07f050f6da902364ce3ff10c7c35289f4685d7c5e86e1d7227890030ce4c53d4afde35a5286160d2d9eb98136dd9d9df679b3d51852886bcb000929820270e609fcefd9587adbf29ae054438922c5ef33c18b3ea111a6e7a77c2bcc0500c830edc02a2bfc9397c5dd3997c1164c5332c9ae29a123dd4c41851a9832d92ac168220012043f1172fb29aa104a3adc46165256526c5a77bd39774979b510bf1b3b5b50c49ef0bc8e0a4925621b1ec31ec99fd75e192c64a34fce839908f748b19532557e3e30cba8e360d4df48dca4adfc612b7d32b1db05a4861e9e440e3fd4f652bc6087b96929d02106790e448068858d487e58a178cd3a9a90e714e041a0d15b46fb0e3f346e73a0c48d4e29917eda017fa5e771676459b09b4ef21010a4bf9142ecd5e7a5e88c294cb726d9d8f441c94ef3be03b15ab9f8cdc6be25467e7e8e3ce54feccb383ed777796e530826ca9a5bedab0e3a2b42cd99e7433c69d68b2464714fb39a24b5fbbd7e59f4314fcb32eacba2bc20a2f080e3efafdcc4fe2c835301c625cc7e11dc43cf008ff397bb6f06bf528cf2dd3c2330710a388bcca09f8817d2f26b96bbb2f5910fe675dcdc104e0d35ec2d73cbee97525f854f99e0554cc1ed0aec7e5ff9806246fae1a51bdc3392a7fb2a85e7112829017b45507463c7af96bbc3a84fc61b1d6223d6d81ccda05f28bdd8d4555bd9fb1f2f0209e464847d62aa668b31f3a32be0ec04725b17cbfc4e6427b746276a9fd8cea87a7f4b42aa1d3b0d1b82f71cf15590d6f2bc33539d233c712f1190acb0708bf5bf344d7d4cfced02b43dc6a255a0b5aa0cf22739b924cf26be2db43184ba626b8d938e26ec8d853a01f89b93dbcdf15ff7e2e521b43ee58287498b202bbd4397f217549709776a01601d39f2a14accbea65fc39e190ccc75373af56d028fe41cf4f560921e1911209c0bf8cb6dc345ae3990d764c03f5d594120ca883c75b0b714a76b437bf7a9f05848e219e4728d6ea1c8779c8a2365f170032d0cb05126d7900aecf86e6119cbf8951c6f8afc0b9f4c8f7a18ed62c77c2e1972dd3a03b7f090ce5061c0fd05b75db6e3be8051dc73028010e8e89acddcf1c382578dd5f246d88a27faaa269eb22a17689a5137761285087de152968b81dfff21f53a3c5f1b08e77bf354ef2cbfbf7f79d2e280d2e9e51caa4922d8e1a28dc87ee946bf3c71e97626dc246d21e85ecb18560c67e8cda4e6f18c6fc3b7191aabfc419c19156784d79eb0e47863fa27c4db43666945a1d2a619d621a5829192809f08f67bca46a4bbd2f252f3f0a02c8978ed35ed296fc14627ac0eb58a88fc004f2e31e57ad49a4ef7de8d6ae32c203c826b2687711f34ff188b98ef88ab84a690cb20e0f4b4f055c1ecdb79ee5ae83edd3a9d96ae4614268cc7b5ac69f8c81f613fb0b939da5291085c438b73a2c6a9ba4bd985cf1e9ebb91695fd44991e4c19f4b5238730d250bc90b5f0f0f01c2604ee6b3374e8ad879db434cd5a9ddc31d7bfa4e0ff44995d2473636332efcec3934aff69b74d7887511af0af6755c06d34764cd66250716be40e42d14577c3b742ab58caba0938143743ecdf70dfebebb9088703a93ba231c5aaff74d58b610efabc908e11206dc31330fddddaa614ded5d1de794993ef8e493ae9a56633ab9c3756088917802de4eddd21eb93bfcda403d8744afdcfc153ef6fe521804c7c1523316947bbd99727cff7b454719f20c4f948cb3d9dce0a06d009de9e27ab0af09d5fc26231498eddc9c2a6f789cebdd59c8f4d32959e5f59e54a08c35fd01ac65d4cd033af70169321425dc7284541bb5182434522aa68fc24fd231ab469ae98ef2ecc14e5f4c52848f674d9a7176f4306304606e92cb2efd5da05604435444e6c7edf14886c1c71b08bc9e631784298c63e8f2b95c2bc3bd7360452b106c33b4f1cb712228e883d9015473e5beff9702c950d8387042024a765b460cfa178dee1e90e622270b5cfd1a1506ab9aa96305f28601cd0f85b7b854720845d9c1fb6d156b790fd8a608156d85e2ea5b1ef5e0826beee7bac285c6563290248161797fcf71d7910330a0f3a8bb8b1103007a0469864d9f54113a44a4797598d6756332949e451ad1072898672370673267ed5670ff17a6b374cc030b5144518e9a5094dda018b4918fba14d64073867e0838a3c885e29e67de60bccd3ab149016fec5b9994b9faa35790bc27e65959ea7e60ef6abdbeeae01a0ecb5eedd68369541f536ab6d95e9f0bc5af56494f1b6111f5ed1f1626fb29d8b16eb139ad7c6ef119e8ef70c2632778e9c7feec93bd1864fa30db119e7b040a7165e3bce498886b42c8002a6b95f51bad3d383157e6c526fef860c8583c19785d6889ca509e0e6e14a89e99b70d3721508f73726f91dd7414bdb25d98e2071efd2ca4d34349394847e54a17c50e44e1dc8d4a4851b255d64a9c58e57b9a53d270eb3a68e5a9cc8588fb8a94f24aaec62b42c306e0f83e321fd30d75b16aaeafbdbfc6e97a705e3b1b93936ad43bebc2b3a2b6a31038a95cdd65d42db30bd36807dfd0ae5bc9e35331fa4302fded60f387c514dee1313fb0b73f5d8b573aa971d10e51a0b49e48bf0015367e6e98c774ec3d40557935744579f2647ee22b34319e2841473d73e3ab7dec7dc5dd33afd4b9dafcf88fa3bb31487ed67b64f38c4ef6757e3989c17090fc18a3a45347aaccc08799f53a18c9ce155daa5392b04ef3081410ac4f26952351343342de08afdef147b6de37e4650a5a3af846de5f01f9094c75e762124482c68d2c355338ebdb08b4966e5a9d60a6cb4136f8aabb7e08e11a3567ecd6375309f32b66aae5812b391b2d3124f4fdb065ad7a787dbfb094bfe2ce807fc2ca7efd038bece5f9b35a59af3268d9364ef71fe48d3532b6ccf792452ceb1eebb6d30897b885c1f0d0501a974960254fba0f8bc12bea4a18e0115a1c96e609024915197cccd4937da6ab1f6aac99ca737964fbf261a8eae2ddd0618ed78fd323ad458f66204f9f0797850959cedc723427dcd5b602cd666d3433b67390465a1f456a4bf9c044174385bf44e4c07732371c97a4f638bcd82a21dfdcf6a641078f7bf0e79a3079155e51272cb55c70875d90fc3af86159cea78aa40ef310022636895d6d717572d914f821178edb050832475d81bc4fef2bebffbb1c1a169f5136ab2bcde9c46369ea6153e2b980ed7d048a6ba5e2266e2c5eb172b8fc199d7a7a61c0ce2d5d5501def25202c08f39ec05e8b990eb61d4790396b03be2780f9f5fd932249c97f20197e9927fc7e3dec4a689314dd1f5c5591abf0f04be6e28e640a4bf676a036c0db686223d37b9bd495d27c3240f4075cd8b49d74e4780acdbc74a760360c7ece5087e9ddb17e2fd135266d4628414a7cf14e57263fce00ecc6af69b701d06ffbc5b5d7a0f5f8f793caf3ed74b525cedf2f4833fc3c79b7033eeff7347f146d85261b53127c9138f79c33d23319ca55ea75c3bf1172d4ba1d0ae076fd8eabea3c17f042e10a07e21d72918827e0db84629d6b4b4cc60a5bfd4012d3c85552ed793259cc8a32633141fccfb3c8767047728287068823fb3d72e9b802adc042b806b5f8d93d4a232cf48dcc96b8130bc9ee9c0df6a05c24ec7ce8a4885933562e1bc63e130fcd08d2c7a9cd427e72a0a9ca37bf446edc44f18698d21cefe2f11f95f25509944bd0b631836b23233cf2723bcffb17f282bb5a3d6404a7124155dc2231c20a708109e998066f50779c7b39a169a437441955ce7f76139d4e19d945709445da1b3440aa452be4cf7a57cc46c4de55fc53df4426311da18c21dc73a229386e978632aa055f97338b8a64dfb796134c924dcfb91b15bfa6d932af2a8c56da7ab333ebaaf5633b6d1d2e17a96a67c1c5a0b95511f41bb14b26fbc10c28fb22a825e79bcabeba9969831d727fa73617f7d230c2986e12ab90483a33c416601d81576978c529a8608cd9dba7f7d4f17b1b2ab2b43e1832e3186cf7077101779f625a3a67a7087520c3ad7749d3e67dee8098350dc09176cf19d0189be8e6f82d5be7c2bf5b18a3a60614a8570bbaebd90b478190b40248af9a9c2082045669e875aa347c8a0b619ecb9aab7f5d20f5376d985045783ed7127fb6f3b00b699b4e7f755880a6d32bed99ad6f4a2b5c650d5ece1c831cfb71ba412ad233283a7e02a69520e3aba5e9d3c2e4c09cf0ba013f0941c5564fecfcd627980471e5c4a86b298568e993a93fdaec85b34d7ab533ada04616e505a4240f6e32ae76d00a3ee93a4874e9d127124f21fcbb64779e51fb959c239a0edcc8b767ef2e841539b4418bcb8fa17f276ebcb3419d732023bfb14c571659ad0773aff4f3eae054828407780e4a7cee8a4a2bea186fc8c324365c56dbfa6caad3df6e97472f569422882aca1bc2e5e035150f58da4003522466a56ad0d007f18f7f60dc5bc918b0916fb3d44438cec184cfd9dc86ee418ed50e34808ad9fd6faf6634769b1506e3645d1447f6aeb0179a8743dda51c8a5998ab6b213680e6df78940b01c67dc5199a735e9fe6c0665152ef1fd7ab6a1c83586e15c08bfd7fdb35dd6ab680a4ed141898bef0eeb9d69c15be0457321bed3c78973c808ade68d67eacce378be8f95fae15e25fad04d2f60216bd2be4e37d747e60cfb66de173d8affd53fb18aa6f4fff75bc0fa33860246edba7fe24b248de4f8dd83ee3dc4a5bd2c2e7259d2ec43c78bd4ad8fc3c0ac8805b9cbfd2fedde3275562e6e2c9589b530f0bd60e50d5fd937fdac16ad04459c7650a4e15d661366b788946a954cd47a758ab4f540f95ce046e8c86c172b1159eb6cc496c80db2cfa40df173a9bad8a56bf4fe68df1aafc7511b603d265b19d67d3fdc48420ed042aa7ac7a3f6f6a23276b3e2e299c54fa3cb473592cbbc576d0f2cb983a14966d779ded32b329ef1d924ec5f52bb49ef693aabcebb72a8902b052da17ec11d430e381341513c72d623c31556870c617cb51c2daaacacc5ab9ef7d5d1489df777a493c3319122a9b400fcf5edce5335a32b8342891d3486d8ca930c0c56d263919b135f33ca619bbc2f98dcbe4275b9a4c0fd0f9e3f69dcc99d26e2049f34c5449107a6d2a616b3ad9178c449481b1ef9e4c343f72b61808230532ab0c7e275943ef50d4d70359550002f35e98853c07729184d7beaabd361d137a7fe95c1c8bb9e9bab7c996a1f6b7bc8d36e1074670134fa66f200ba345122c21997b5a24b87cf3e77e7f4a556d78a6970fdc05508612c8160824fff6f9f9eb9ace1cca2b1b4c42fdb965703b31defeab215f2ddfbfa5d260f2cbce2d25c912a496e044d9ddf590f0f3e0e2285443b91b9fcf054396526ec4c12b5ebe87a2984b0d38aa39413837ae7678708d9a398270dbc0f0524a0627adc7602a74dce559dfe0410402b8a28bbb96a79c8516ffc7523538edbf36f0fdf9b9fd0755ba92f33638e3347576f6c34d97eabb16f18a0134858edaadeeddf5ca13ef4d73f81d9cfc0a5a5f4ece84113f26f954334b4e6ee711d80de59531fa9ef0f8f8cd5c048aecdb32bbf1b8249313715002ef15d00928db6604550d46c99940dd0421c3e56678d9d5e62465b6525ffa099defebf14dbce00319adc46e2a44a209d4822dd162213ee4f17cca07cf46ddc9de9148d237f2f08453de74c23f9c534486490fb5ce198a3f53fe38e0f74d343c39b362905a0207d11d957ce059a450a7a0233b8ac1a962e56f727da2e0020df823c9eb2805fbae824514c689a698d1aa0611f54178706ceb3e9ebac7508942447338481a3adab4e148a31405f30364939e73c74ff1c0a4aa294811e752f090f8443a1d75d9e04469420ddb0db0af46b97d1d752a1a4e285259236f7581b0e1188852ac3771a815d742ae58d1b565e51862164b9c7d4bb01ddcc529e6363d82a32d563fc7faecc1fc2a80c3b4728348b1382d4f132c91f07fedddeb750097cd4bd212301a8a77a1d17f121f615fc87abab8cc96323f276fa861923645b421098247e07f19951c72a79dfc878bf75c5f76cbe0c466b17d4d1476eacb6e82b90e74de1355bf68c05c4aa9e0cdeb0dbb4b4acf06d2191a913e97fe6ed2097ed84a1d1c1f1c9ec267b9a0956ee5f5f3a7413a073b252465a6340bac59c8b55637eaee4e5e0d4f5dd871bccc71d42257824baee71d7d5e7630e61e02f41ef2c04df2cd1ad2139a8fd5fda2772deb8035d38c9db5155b1cb7dbee882eef2f543cb9a38bf5a319c11465cb2e28bca873c01e143517e9178a81aaf93999557c9e2a1165da86b1dd177ee166e6c91f4cf357cdc10252b58838ca22cba1b26cb0f327105fdbd6a63bd121c9f00d985b6ec23180b2113edbbb324b91f46bfa4599d9083dd60f5c733edf818816a543b8d4c1b54ca9ae1e1f56ea427eb06155e65e1da6f77f39c636766f0d9dbe74e5270ebb09ed8ef3de31ab08eba6f4d40b5e73cb4185dacdb286c0265d732f2828d3146a52c867fab467d8675a02f5c5ca9a6bf8ce7696cf42612e9850b95f7a70bb2774e98e921411260eaf67af375da0135b8643a804c1d3816259ecab7a1811b076eb6d2a15690d79f030ce499907cf53d5911820a2cd17fb90a968e0afda60a155a3d7cd5def4b6ed1348712268041ec5da26c28b9b6473bb917ab3dd819fed5e46541601af8e6773e22bd3040848d1c16363798a091cb4eeb146bdf64144cf175e73e11617fe13f10186f0e1c181d7c9b4dfa3629c123f35d668bfd84ef428eae68ee8573341ebff1cac1f7c01415c0a58578ef94ad335e4b88ba10b8b777944ea84556b2743fb16d1206e3557bed55f47396a650b20619ce9d3805efd652b7625b9900926233bfcbef382e4f9ce3e8c9cd0fb741909eafd0b144871c64c5d74ecab2c795c4535ec15f2e305fc1d99f49d3a67b2230c569efdcd915a7cba01a4cbe5838f48d145f25a7470d1def07a71425eb66410a6adae91f9ffccb3a745ff399d18ddc8e9d4da41bf8808cb0eedeb63ae1154bb5dc47786135fcac8b669399840aa23f622addea3aa4f2b8a2e870fcd3a531854dd812509ec52137681ef33a140a5e5c4b5bb32ed0852c27be9ba9a32acf5a44d0eaee4dbb024f99cf55b493812dc1e25f13696e117dac4e0899254dda4e124d2d521e15da9fa63da01c3891ca691b02eb0509ff5ba2513b9933f99dde2db4dc3062403c9bf86b28b092de95fff2b320fbbc2cbebcf75dc9da1605339f31a8fbb0499ba7eca95c8d6ec2d85f374b71e7cab709d97c3f1a77210f1d8f604cebabca91bf463e7613a8518ddb5016d99773a95585e080ab180b2b7a0f689e17d1c4bb610da3606529c6a5b294419c49a6aeb7b8cba6a8848eea67ae57dd1c0a8d160846bc98ebdb3e65610b08b261eb627ed24269e07145b79ee12008e0bb5637eafa05ecf3a4307fe7496cf38ffbacd5b902e99be76896b4f289a4327774fb6dbf6126cb8097ae1c64666a4daafba2eaf69c59133695b9a68c5637cbc8f1b5d0fabf64fc9ebd63d6eed7a7a1c2a68b45b19d4869cb98e7b1f4c018d1bfdd35df07cd5c1634e36b34d9edbc944066e5026486fd60401e70305b68f5ed5612b518aea8d2b2a069f84371e6a0479238400755b6edfe937c5348cd73b411389ce2159397c8cfe10931b0716089679daf03eeda1b9fe588e22b8969b08bd581277e3f16729193454e227bbc58938c9b798084037d57e48ee17e029ed613b46e15f3535008c681456b744b83403fb7f876cedb2211e0c9824030913ea8c5e8f2a5c4138460ccebd63abcb356a65f5b83c10ce6f827e624c1aa83fccdba42a2c2cbbc067b1ca3c821c6b7a8ba3640707cdfce56ad7f2589153662b078061cfc8a35fbd85638e8a93eca40a3b512775d4a95b0526e30900871239ac2652a54e2b9426cccab29ae2fb038821380a7ec96467c1b0f0d295816534cd5a0dceb712716fd101a70dfa2bd63cb50223ab2dad5449c9fd9812a9c75ec4c0828e58f81ed4b08162a70fbcd6df94d8a25de9fc972b19bda198a1f71f826a14550a8c747847f2eef7a61b3c589eed54536978af5c39f7333a67ab76d0dc3dfb4f3cea716778d9c1467c97a1566d163ed14a3a2605fdeffd1000c02826a5f566ce67f281eb1961f5f71ccd650183b4404b8cceb3afc4c18f3b4041c8cc2a8f1e74e77034224cb1a0c1da0f6376b1df038d9810c72016aea6ca69c81af63d7874d70ab7a41e71cb007294f53aed96332dfc29a08a82ae5a0ea92462af31d227ebc832d971f5d37db93b21c91c19be51849f6989220a9d2941209e78bbca409bae6f8d0a0d8038312f64527376ba1075e795ceb018e10e1b66cfa6bff93c37b07e1bb19a3263779cf160010d21b3b850d0e08a66fcf3f3e27805477e6dfc450a214aa15e4e0dc57a075f855d4f79f2c5274823af715a988c95a83a3706e6c5bb7bcd7e04363f0d5808e409d265d105b7ed93696f99fb30ef43259c45f4ae19e2918acd41b6e5d5110205176419bbcdac74917d7e3a3858272abe91fa6e82aa0d8a9e6e844de9af37ecb6835cefa2dd0fa51ec477abc9239976db7c9032f7bcb25adc84bf021f58985b167c4f82c828c71874cfe622468652750ae5fd05e235f15989387f9a12495e01598c0f158aef5e3ba036494d26b1bc0556f9c74f721cdc804694184b82985c858f61ae644256ce68834d2956dbf68aaef703f1b62882b8d87d37e9df97fb42717d09f4e2b2c2ded3b9ef9ac3ed90dfb6c57e6b9fea61b7164b518954bcaacf3d66e79d43f416e9b05f0b2686c840a74e7b90e303abb33ca66fcd4362d38877c7855e3f01ea773b16ac73e57ff3dd203f189962449d4a70090865687b27d8af5199057606fcc9b79fd4afdec9543bbaf6ef64bfd72657d1caa758941319880a903ce307b02615cac1b067979c26fe5e049fe7055f1d3b3b4622512fde293657f940db1f27d2d0d59ec43995d7313914666a41415aec2d80e58237c037fbbca039ff232bf7c8f5dee826dead7d445512df43d2a9aee7e924ecd96a87dc67016cd2013f3444a5bb2f84ff33ed5b91d0c6a49fb576a9976bac9519a3e425e2d4931ad77fbbe2c9ca47c03faa23739c24258a91e7eb84bcedcc548d743fc2612dfbf3798bdc29cd53b95f02581ac940169e985854e0064defcab4138414540a16a862d8653ce4dedc73b5229aeb3fc88f49688928994453badf17234c2841682d65cf8a5c58cf4089113743d30bbd42208d713747267add0de01aa28cb89fa59b48a0494de42e55a034ac29cc314c0e4cccb13694c2fdc8f0f7d5f511a6b7b411c0d6d3cf8c6ad117c446896510c17e51a2d33aadea8de87a244817ff004ba2e1ec3a509ac5a51d5fbce7b1ab7df7de1b402a65ec21db45a56b2731f6be289ba671fbb9b471fa25ece51289c5e39952b20ca2b912edac6a72a073eeda615954d4ed018ae888fa7e438288bd80ec0e86a9ee2e6cdc1340419d7fbfac92d9538ca76cae66ef078711202e6b88529fd8dc775db5573b9fdbf8ecb716098e582c3133394ae53dba9ac7df627f96fac4a8e9f62ddf63fb0844788c089587b9a20146c7621e0775fac8679ce733b2445e082a69211d7636a6c1295924aaf4cb1eff8a0b340927d878559e36b96a2f11c6cfaf4ddbbdc3bfabf7e834ac90f56b47bb3a128a8bb6e013dcd36f0e558560bd9ef7af7ccc7ccc5e85a050e847fa6e89534d8a3a35d0bee682731974bb53a31354a7005a3a91f0164e3be9590bb735da7b820961acc91c47e483d0c0739592a14833e9cad06812734a98adeb5740a8f45ac118983fb686d7bd605f80e96ee68627d25e9f87226c2c1b255fcdb492269ed27c4e1aed3e38a6c5a29d1e38c7ac07dbc406e7adeebb430fc13c635d6c8929938f9332a6f572203b466ac7a3de8345d5065a84484f19e50f46a7d5d9f2ad43c17a8fa6fef3e136244e3d7e0b522599061b83211c0911defa934629d0bf68486075e9c2c1b6c1e58499e341d04e3e3f2f437ab8616a089fc1f38f9e2a5d26b4e6a5fb18798a34f8610158c0ce2026536de3c9ca0149054f08dfbcb85d35b6abe9502921ed82d5b9aedf4b05218c9698134fdfd4952edb7a519d9bcc90b1ecc327fa5236a14b661939879c7051ce11fa1a9089fd2eae8e52b4a12060ce1d97d0fb991370517195b4e8fd4160d51cf2ddfa7d8148ead97bd33f25b6d98199d5a83d9bda1724ffc7f5154e1df571605a170849f6604aca44941d35795a4fea353e4e0f6ef247e5d976624667a6c98489b22bf1ff1e1076b23fef0b000bbe0bb0fe801ca5a88214b0107dd399f8ab45c001aa6ecbef6c4647ddc1704b8a3ccc9d17a1171114a4e93770abd55cc619e6deca1d2a789b293dd4839a58394ad9f87145736891da2664e20f530d36b409153528de694830875937d212fc6311c4b76a053d5c05b4de35289aba1780758cfc635a14cdc9e6bc7e14ec3f92826b06a626b6c8c23f31cc141692ad79eb85089b2a3508a4f33fb0512b648a23575828e02483277f8bd291755a7b7743d3ace71d7e69c71bdbf68b03cb571c1fa3e837777b3179855c4a793c5ad64e5016a33849f294c2d429e227f01c00275c00844ff26ecdd64a8a4b86a7b6d9b14c0816f8812bd51b29f8941f860525ff6c52f3725560afaf7dfec0a36f5b365a01fd99989061430d6735080fa213b49c29e3d595b1fb5aaa9ee873acc2b67f4c1b6f04395e68c7c89ecbe820d961b99a8eefb5deac3f17566944edb15f9183ad13e86da6f4e254ef839e0ec38e564fdc9036b38cf58e0f6c84c186597a2f646fa1581cd26aea059a3caf27afeb3eec6ef1eeadd923b4291e13e0f35f94a3e2a5ac2072da2264ad0d5f373df82af233e3723383ceea2d08e24f1832a6990383cbb4a3702d83bbab007896445fd61d44b5284b9434dfa4d80b3368ba773354502ccaf71832a44d745977c6ad16e4f5126d043f007f51311f3df3211c0b221db8dcd2e3bce6e33ee11f8cd6810ed6940fdb74a219cb84bc66f8cc6587a1666620c1b9f99c19eab9f6d31d57b1fe1e7c79f22541c50dca0ac2655e53c61f9d762a4bfd79b6e6bcf2079652ac927f12028d1e0037f21941d72d4578336befb3b6c8083a54b29047e82ec790a4b7012e8a78e493a17f174675c78d9705cfb56365aa769362bcf5eaf603c24cefcb9fd7807b7708540168de42514818c2fcc2e98ef5d3ef2e30ff2de3117b9aee0f89dcdaefbd3e21d314a971236d15dfd4ae976a2ba72ee0eccea6671c7b2c4abb4c7f9fdd3d57ec19c7448374979c972854537bb003ff9a4e27b9b0d6fba9bdd4d172ed02f8523bf8536ffd51b0498e1bea82eabe20ae0386d752339906531f3a8c310c5b3ec0371125e68a155282be25f5c48382f228859ab8ebaa26bef801905bf599052571a134bd4a885067b2fb2d904fb3d5fc84b6f3c21e827aa34788333842b35e0fb52a327c2e5dec31fe8ee9322d9dc04149d3184c48494e2ac6d5b6600ac3774b66f4114ae75ef4ebe0be00a6c80364ea922edf08a5ba9edb830c8668bd4164c3f24a286a93b13d0594768073d188ad811f12bd5d785415e183dcfc99bf9b02c7bf9456f70fd7ce8dd7a39a4ea865d9e9d9d7e52f32116a5821fe73bba6af1f9c876f17f81168cec0925bf151de49df3f1056e61a5b30ac43e4056e703c6b556cd27cd8b9ac35dd4d134f45f0acce8c82ac93e7ae2926fe30e5589b257cd0f43c30024623b0887b49f6c9eba589f6cb3c5a05f08665cd2067377f12ac48952269571b177fc3ce3973d55b5ae9f4aac2d8ac9027e5ff447c1b79eb7a3949c05b999d3a2b3869c32b40e5da721360a24945cf6e15cd77f0c2ba3b12e6e47243df0b6bf5fc33bb437d5ffb515f58355dd0c92126877c7ee8ae72b2abacff0a1ebba4a0d6d01d21a2a8a7f0da5a1de0a270947354d935b7c35d16fa9f48c894abe483b02a6478851caf91e79b7d208df78908b7cdbf0a956069e8e38cfc1f8500c555281972d117d4bdf131645b59bff0ea96fd8f62685c5aaa188144f9a1ffe4f766c34f72f13aed0e338437e40925f7ae639594cf0cf0c345a381d090ac7548eaa4ac2fc168417b3d0f4b02d505df75ceb1c873a07ee26221d99f4f86f5d728ebf83dcd6a52c3dc7f09e0b3d7fe1238fa014c15d07b1eb996e5fe6df9cb5c31573ca46988da4d99d6cd6af67e5e28c3c3a6f9d1249c808c6669c13ba7d1586b79f45cd69e39e8469c73212e41f42fbf688c19a2cd0d7d20edb7eebc12586c89acf532d3d99e2329e898c5016c4c22fe577d3ab76ccf8a6b7d8d2c89ad9466b7ab7ef8d78bb19d534363d1e24ffd612ff8806fd20c30b46594fdf2a2df63b8836f14592d347b73720811702397312a7f169daa67a9e3b4953b87ada09b89b63de16f03bbc0ec2080d3b68115db15ccf1362ab3a2486b2bdd6853f785ad31035823aefa57708e7de67a8acb9c865b73e4ad37aa46175799aa66331f5540fac1d69bf111997e51ae3197452ff9a02d97563011c5e0d861929a2699a1646e7273c48e87ea9cdb42fd39b0cd2bf795ad52f9b41bfb99926eb4b96107a8194054dff22afce491baacb1b0f010da1c7ba49a63d5ce9d24e2ea3065e8d5aaf6a6694084d9c6989969015b24e2466b62c3bedc412de9637d26d1cc2bbd065e53cc272e16ba89146775be6f5d6cdca85930f6cae507b8f80da1dd58c168cf6ad7e59cc64d9c97a60eb985c3408d0f2e746ef429f01a1398cb890e4c8ee00b2971d8f0e48be38ca1165f3345fd0e3304ee20c20c3cbcc5e63f75b0a051ed8a6305417f2ff8b0a08ed5484eda8a53e43f96548ec6955c699fa9a7055e120868867c875a4692f633479d0216350e4cbb21d1764ab164a1132243e9add628f492d925bd2e89c6e4e7f3beb8562dbb99dd11d1f753370331227968e384f9d918c7bdaf5facb70267cb87104bec14dfb9dd54faaef56a093e9225f45049cdd3c09499ee959eddba3f11bed5cc8a12548e41fb6b29c951de85c91c732fc4a70190edf86964ce74b826783d1be51cf041a63d2162ddfbd216fbafa4ece7b15258fe1e6e96e02a5c4c0ede7b720885a8ae1b42baa255e665806340df25175947487c11232128056d18696880bc37f03ff0aeb2f0e20d3008530586e8191e31c4684a8db464561b62f7f8bb816ac18f09d443aed65d0219c747c0d11bb4eeb85bad8e4f82d6be1f66d461c00233ad92a85c4f8646597027943818eff1e234ddaa8516327c21da12714ea3bf54809e35be3cc51ec3bd0f55e23412cbc818c1a59fdacc6fd56fd7c18e25cc61bb0af85d38d3c37b22ec75da7a70f7f0ed223f841134cca655e0e44d5f0e8bb992e51bb8a7502530c5cd1fa35ee6d70cbd8b331c6676db038a2c7b0bdfacd7ff352755bd234baa34e91503ee601e81fed2c9c3541f86eb9e5dcd434753ce20f5591453ecf6f43e6561bcc662d9fac5207c10951fb445e2dded476b34a092f6d08e96af5adc76ae8bed9b1b1ca2ebea26ad0ba33e1897e96c6b2053a8f5728b55f05e8653b3dceb37b3eeaf24b643f4a828ce675523d30247a7c8209ca42fddf4653ea814f60ce84146c18af11ba5a030c9b7bf012447767c9bb0743a81f8b117374dbed6c2e718c04ed5eac09f222b75514bb9163e26da23af89924da8baf69027958e01288e9d15d12479a78b87fdd9cce3c0597101a29ca298ca0fc8bb132c273369ea1b0513816f36ab4546d5d08546bae88773edcd4e0de9bd1c6f89f0057812e86c7a26a7ffd251fa71b710c33d110a295249c05a6ec28addfe993fb5b75c4664e01fadd60827668a6cd8bdfd8352cd40eb5207e1bd8c6d63f000a702b5d11a69f3fc7af6a5de939ee061ec4049e0b67fb9019bf088b4f8b1d58277b12f3a452182fd7cce6be0b1b549a8a3207d4e41b298d26631eff2848b8aaa678d324c3b1ee093a7b25ad5780f05507834d0220cb5e1d9ebe65ca2349cb9bb1cf480f645a0585b37c435f48d248d85bd8e00bb2fda7ce0f2733595d8f3b88b67d8c8c97fbb1d52abd89273753208a1cb24ea37d0c7c3c51de9d2f07360abe32e5307cca38c94772e54bad122cd76ddc3e31bd94a486be4ce9b2160cf365da311d8dba47e122e5d4fe96920e2c6b23ca61c9cf63f35c7b4bc017594c226f057f9166a8cdf23754174f7eca75b54a5ea724a3920579b9a9cf01658fdd5a3458a747ce8b7a6e726f3a80a63b36d6cd257cb30769b16b75473b411faec7e96f0646a6f1b611afb7452b855acff6e05b489ac02f7bf55cc2c6fda2bd668f599a3882331568c535080c22d93e9b31d45fecbcbfa63ee62815dc52f17ed607f7030beeeb3cf4a47bb69a2debfe63013c30765343f81d5a931be72edf5c50318091af99aedb612a4a749494ba6453eb4a7f4372728e74c76fb0073c9130a588a23570bded36146e705ad7c7918afc4cb3ce711cff1ab6eada74dbdb38e657d7170949ddd413a00e0ed6c02224e1f3595461f153d789e03d8e5d0b7a1345c1be57f2046b68143965f580317743654dbb225c4282ccab97fea03ae4efe9b2f6b2c05db2fa0a6238cb2e78f884f7fd9377a7dc3461db42bf7ab3e5cc24f9a0811b51091cef163f9240194092a0c2e0c404ebc562362135305a48e96da2af7c11f259bc2ce2eb4868a02e3fcca2b0e53796f3d47a56cb46e4703794ad6ea2cfffff96031472e55e88d9813e0aafbf1f0f425749747a87e2abdad56d2fcf615a66cfdf5bd86e55e2f408645be345b33e8bda243f31b84d95ab8ba867e973e01340ca0606472e6cb98742845f95225a921bfe0d46223d64f50195b795488c59ef0f2a41350fe0965f2de26ba0b9e5af62b47f578a500881f73fbc623baf97af206a3080f4dca5f730a8907e80800b3ba0de1c2bc7aac0a652dc9a23d738245a9f539605990b886218a87ad0e4b02574d90fc46508e8f666697d976caccbbb1a5f03ff6f784559aae6ee81a46f68e1006da9f4ad05e34f5eaf328acdef94f509b29f0508c893bd291cdc3c8d7856e009948a7bf2189dee63b07b508d426768a340b9b6c3a434f8606020858bbf3291cc388e3df52447058f09a1c879af7ab23acd8d31f25cf0cc88e9ccc1f7d1677faf597fe62fa2c5230ffd6943a66e77e48629636c5abffea7affe986217305e05df76ca6f42c4b07388a34d8355ee91eddde0d933683375f00ece9d1ed9675d8b42b94c02cf1f3d9e3728c450d09d72ca17f21e348ea2b1619a2aa575f8baf58bcf55a378d56668991a1e1528c4c49e5438a454436d572bac610cda2ce02ef8bfb1a1257e606e3f87adeb5ece2f1337721484daf782051b54c46e87df0cadf6013d38a15a255e61da19f98d83257a2343b364f68299854ac4d9b1e1c99e7b91323c3a18bc0194bb103ee53d03b3767f73d813dbc2710011551051f7b2a2474e0cbb5b9edd9d7d57fd0a7b060085f9d3eec89bf7c1f8497b295203a2046c34ec894113e4ddde8481b41dcad2d99341368c9bdf8c15767f95fed970ad25fdd029d78f7b87441226410265cc88ebe715e02c3f04546333f9c937bce984f1810b572d8bfb8ea75a87e90e6a0ce3ae2ef5639232f97155dafaca743bcbebf5984638012dce8a50b43bde1a00df2351adf8cf45135e7b35f4117f5f02c9cba5279b6989875dbc3e4132319e9b5c2742d7ea396bc9f1545af4c5900a00b0864c3de80d8c41fce8b215ef68cf63fe6aac58990c106d4be71cb18d555f682e1d7de46abe01382c57ceacfe57b7dec8913f7dc737f3bd2f7cdec3d3f2c813425d9c8ccaf5ae24f81d40de96e6d6f7b63764b8d82758a8fdb80fbd83de3bcb4d90741f65cd6fb35fc328831c92e5a3f39b8fae13609e2d6abf93677067d82dd652ccec4c936db544b4b326acca24cae06d70b1ac1847c5357ce3f4c2564d7ce42baf7b81f5c84200a87b890ea0885e7e7b254a2a5d1f76f8ad37d379291ed9ba54f31dd93872ffab512298c2de28587d318386d3226e119c9227578bc7fc58247e58436350f9870e31d886073b194c356635495b54ffa1de012e87362abea09452d467ac44fe804cf480f8924501a6d1f77c42dc1862657fb02d4ee569efd1cef8b5c42d4f0f9c0af8f18f68d1666d009bce35befe4cbf370fdf0fec275e070d751469956a8ad56316bf3650f6178523b0742e8e0ae10ceee7d31d6c2fcc46cae8293b9ce255b9d3f39708c4dea9694d77e10b1097bd3f76678638dae76c4e795e998ab68bc64832eb6192419ba14490d14a994114c5ecceecedc43596aa5f64e6224c0fcb40bd4db36cb750ea027af88b1931d0705e2c40da4f3bd21646c416da41c690c07c67f106fc1c276f975e3cece5cc52eeb893b0cc50066d3dd349da1df2c8ec580fc6de94335a1a964c8044129d15a06899632fd7e998378c2978f9f1701f9c61beecc22c8147aa9ec78da038ef62593f930497eba10642141f144cf5e025235029eba426ab3cb12c61716e2774c2678cfb9240e4cd0f781e7923bdb522533bd72f1a6abfc61d9254963f2ada1e40f93a9bb10c21d6840306c9d7a54d0de4222146959edf5df7276d72dc503434d41ca92e33efb9d85140dd94932da4342ed150cb578e4587fdf929fbfdf670957b3109237ab0c72faa1815c9ffad281f3966b495463ee87d499f79ff8489a6d7532ccaad6a4efa3da90f0c4d7f577cadd5019f44d3251a684fc3ea5e80e5e73a3efe0b66cb2ac9b01bb1579db46ce0d57833ccbc2f51bffbd565c1e5d4398d7cf717bdfd3f3cdce40961556416cb6f95bb49f869b42cf2cb554dba0572b5fef46eb09781bba28b1f56125cc7fa206e1451e241fc2d065d502b9059ce3da855e40ee781595832bd0bc2968beec53c76632aac7aeb7849df74156ff2a0d9ca34b4d865c063ef41b7834a9f82d2ed75b023f029014e384d365f3f395cbb2c1807203adf8bbcb7c400359c68938c50959e23dd3fe9265df475efb9cea53028ec6dffa8c01494c9b8e324820332718f3e84615236f892ad2e97a08de0005a1bf8b8397a404f5bf3169fe9cb220249341aef97acd736ee04d462907d37cc06325b0b1bfed453bae446ece17faf7e8c789b622b6636c7ed3a6f5a54ba1ab109a63b37c854ef85acb73cf910cde6dbcb70bce7fb434511b73d2de62945fe74744e6f2c842905eb1d5350fb74265ca779d1eb7e2e945a4c4cd0d7190dd979a0871904820b058d491d4e2ed7341dd48afc7a83eb9f5317e0e606a9b82c392bea6b8d76841731c15db4b58f61c8f05a45fd466808ea17bef3342966ce461e05db37a5e9e740487487632b4c3eb3a1048f7c4bf49342c8e909499a91d391354493440656720ac003c731495ff38d42bb333c03dff163cce08d45abf7132d8fbd7a860364e91496f53f1957bd91ee434f8b3ca7fcdd45660db22ea8ab56fe4a640af1363a0119e0f060e51e4ba2c2eb1093d598396a9dc78c7cc1d2c28d0efe2bd763a8ee6227392df29845782737214d1acdd54353e80653654c8b62cc743f5a17d0b968fb54d9e2288fd521e4804dc26d11c18976ee6d0a2540c3cd91c5abfabed46c39cc9d5efe8d65a8dd27d861ae5660ef96f3a3d68558e9a9d89a7fcb6e8ed8ff1cda9fdc754c60aa96ddb52dda3cd8cae42c8b41c4dd0ac88c38be3706464e3de20df36e2c1f7566ce30308cbe9ba1d057d185a6c0d06e4f4383de221222e842a5e971489a3d684b3637097054c7d85007f96507b72474440f6425df4f3524117b99d741f1732d69b3b7d40c713918ef3ef1ff31069d64ecaf70e043c27b68a50040de64cf9f9be451ae47abebd6d75083bfda15034b93ec89027de220fc59e62e8c6370036ebda45d81d2cadcfca65356b556cfaa9923aac122951415b062510f1ba5ed2bb74a1f248a8e1129b119eb47fb71f524b80d1f8b89ed17e500bc901a1e1903efd79ebda12f9a54343e8ecddea2ebe290b7b5e7d61f2f932a87ded313a7ecd94ee8018a83d3b1dde8e6f655c6c559d128b384d9ec2564a505aff58833e52712964063a97145b7fb466dfad8cce5555b7d91d8f6ddad2c955984a5ac9a6453daaf81d13e35a05140ebf53ec392bfce8e0d6886aaf3ecdff88fb8885d8b1322fea9a8befa866cb15643bbedfe7eb80360bf11128524b55c8c9f1f9010271283298ab27f59c49ac4b6db5fe6a830e9a22283bf640f997257fbfe2005ebfc7cfe9fd3aeb0f32c334ddc0a907f6e4adf426ca1b338304948ca1846a046cda4cfd0e37721efb33d8293d5ffdde403bfdd844f4da740a3cada66efcb35e553b9c22cc7a82dee8bc3c79777408063d39207028b38f7bf7bb7e408a6f264151ea44f9d7d5e9269ed5b38a1a94d4dab42cb2e7ec5d97fab9d511b8b6abac90fd55d37da842acf4dd28f1b85b8ab1536f9c3ce1fdeac03e6b1f5dd1d4258a383b6bef3aebaa8feddf033f17837b2e5d5db89b096afc047ffa9e9c9d029c7ed20eba2380713e7b55622ebabd853425d243de1358c0f830d3392d5453e480c7bebe895c58568ec6b650adc61d4712a38532b6131b931865a28fa18590de0590e88f16fbed3284f4f5c91ab644ad1d01388040d421cf7d256643977c887a01d5ed94f669756d8c37ead8b010d5e720d03cb02eb3e3473cb2a20f962b06f3631226c831314a9b4397e679749926a9addae62971b6225348a7e2ef0ba934b955a28b68ff0254dd41178999fb781695b50681019d2282dc27945b4e7916f1fdf1cff90df8d6d2cb45fa905828aae789e958d609b5c74d788202983bee36f33f83c4e5318d28eda07e89bce926416dff88b6fbcdaec83d130e4178d8b35717489a0cf055171f9e84c8a1ab60bb07c0a22d2c11eea181b2f0af72e8b61c33f5b315fe73c461c82cca6b238a1b0223e750aae8d9ec4072cd028e9a792f5f41e5cd118cecbbad8a63bf642a4b9f8366daab821775ac3eb81f05d730d099fca0653f47b1cf067398a0b95518b69578df7c23564733f3ee4ca1153b7d9e7c9c3aea298b37088050793ffd6ca90ba583526071b3e860150a2e678204f19062c60eea2c75df5db6fe5af6c415c24793a3a243693809dc3087210a16fe4fa1863bff5a22d903c872b0705e3555a0f3ec4352ea9f21c4f4bd26145b15863b18c5393f8fb9d88a66b005b86b6cff7c0fe9fbfac4e9bf4f557c171a8ac62f665f432775c53610f5ce2df3c5898c49104f56d6de773b3ad9359e6d3399a0b9658e81ae7b60196b633538242bcb48d773923092c85f9bc48b9abb357b292b9d8058d55b6cb80f53c959856e1d756d16ed09491bcb9ca010642476465c7ecc22bebc99f0face2bcdd2593ace93fc9c2ee85341553e1df2418aa7bdc039fcfc960342c5ee90931f727295578ca74d6c10bbf1d3980279bcd64a1af187d550fafed4e6d4ea292ab6aef405800e27e12bbf9a1bd44ac42d237dbab1ee9735402a98da6f83dcaf2bd303fb6ea220a1a084324bfb0d31e4290472e197afa65ce0ddce281212d8456782b74b949ee6d7eb32e37b425e73b804a280a227126c584a3a10d8e06ef716fa85a0d24c196b13cd2760143f2bf688592c0100fadc086ee14bbebc1a69498274ac4e80710279a1385d29ab388a598c5f2185fe073a3e12edc83c100b82bb336f9ec096ec41a5ae4e8416164b3f759139122718d8a5327255ff821a702bc74514a88b3e12d956536d2a70f734509be569c7b0021a79c9a504757d2ada20276048304d50f197b5ab4df8f5be84377a9cdd167a6450e582fd5eb874dbe38041c48e48c5e2372448c07a18634ecdf4e146d5c44fa7962748cc167d7ef8de829e98467ea35f8f8b969f3e8cd9a11dbeb61025787b1af2e97209cce4899bc955ef04ea150919d717ae42e3216d134e3a7acbc4866e34aad7f64bf0d35be88d23922f7e380b73bfea9fdf109e1d80d7f09921ac9342c65601073adba720028c1dad3e44109e568cf3216ca5c4c4269209a45854440506e46a262cbf6589dbd4bff8ddf712e8d0e0724c652629d0a6c6bbbe638a02aa0d5580974076c7bca29b7368651f3bccf6c581f33d72375a1252fb550fce634d1117a8e58a2a9eac9c4f41f37bfc312c52ce909a9b53d3bd0f8abb4be7864087d7b24ffaf6dbd88b7112cbaf3cca3bb5a9704cc5741ed5786e8276a87d83fcec5142fc08004231c9e85ebb5dc6b97b4c7dba4c5c66b2eeb09ac086ea929e501be85e9588a6842b651d20d0cccd7658e03dec9a678ea40eec452132f879561567d1862eda2a32a3a02bd559c08192db65ad9e0360555dfd5f8d044ae94bd231073a4c83dff41345fa45e86105531d5dc9b65f9bb77f276fa86e212cb671a3cfbaa791f790a481f58d8d1c0a294993b8c5c7540e1b4b6f2157ab035ece1a3a24143f2238de096e8d512730e928f4a2bca908a42d78efd12d88257c8ff81344110ac2d373ef9390daadf886b146576354504687bbff44b3dbca661371f16b156baeac95a933c2fae42bfa1453ed93ac671ae60fdd53fcd217485f5bc211cfebd5730b493cfed4040a2e92d21e9f696ae1e5ac9f265bde9d76650fb9f70b0928daec10ce4596a98dac16cc6e76c6c408cb7ec8a47b085ec61033cb3bc4abd54a32767d5f0260a6dcc687ce58fe1b2269cd565a6ae4fef6c6ba75e0bb1216fed4b74bef9612f3637016a70077eab8a22769b7793efd2d0253b5be81f34088897fd0cf2dcb9ce279f3bc824fb34597d5af4378523566f7defd0be6f59d257a7be995cadd7f0877a15790d9b733c4f0fcabcc8575a71b2f4bcd858b945ab85d23482c86d789800a2a929bc5f38a7e8962f5ddcdaaafd9b08d06e37d2e9e3536b5457fc93a6c8ba53cd43d49d0958bb7c46d7bc31798a21ae070b4e328574069b5ccfc6558a99db831ebc1df179c7b4a8a434c41428ea37d42ed11005c6b21724b7c999f04d436c06eb45f2ece54d50bcb48a23b5eed61b8084493912fc1349c245317a51373a025ba65e2a1ea9fb4acaeb000bd32b16ff1ea83e1147807162af241681a7bfd8744a7aabf0cffbd033245930c70953c3ac67d6c5524dc3df8f71dbb124742b5718e1731d28d07ed899b46ac552c822f2c77310b6072634020d0a92cfd108e4e9da518ec080a81e0e2b5513e34f4e088e8aa82ea5e6c6fe1ec9f4a4a002b9e5e8f3955a51f4e46f5276b059e1345dc5aaca0a1baf7f628b4152a0541cb983609f3a966d3618a6e630e18475fb91da44de1a11fa9fb9e329aa2525d648b79d643f121e85a95f3674f0f9f811fe5d21c78070b9fb6ac2d8f828175fbace263519cb98da4215e5ae86ff87d55b86ff39b9f1215d533c9b1e4869a4b636034e54411c7a189d2c3597c1146719f3e000b3520222c94088c82817a15a2b9144afc11a0b29654527fa870ae7af5accddb0ad5f9dd8f0d3a569ac462b6966b5fa9a3ea3e00e296886801d5ece70d77c80b884ac9017f3c412d66d1928defe4826e601f45f7e8dee17abd04b4f5f0cd7b6bf23683941cc663733ea28e47ec14c2a5d2ab44e0fa4bad9fdd0334106496e49cfa86e50afbae0f13be5d1444fb04a478d06ee92bd090dca75eee73b7ae6abfdae51b473c18cab82e145aedbb2e1897bebaa36d172d9955a5df1161b346521088ba88b5c70ef8f087a231d3e873cfc0c87bbd0bc0f8776b6867abcaaea18ef68b5527f73f6281529474dbd3c813fe20650898c48191b29041a63f002b525a307fa0153268525352eca5ec9e1d394077d3d2bc585c4d8ca99fd5cc9d943ab8ab900a6ec992c6d5082a510acbdc0516ef28c11876c213ab649e714b6dfc43cbf0904c0acea68d040921c82f4a94ae7e0f7a1cfb527b2302fada40eb873ac2bfb7dd6d1fc7c1dd7a12058b43648ccc1d0d71ab97dbed11603eba0313b151f9ecfcbd30f1ac9d55d330c02799bfccf690502379fda0c060acb712ce5c981e3b430d89c93d2d4c02c4cd884a3698ee3e748f13b8af278820503587044cdba9a2dedc0df4c35aafcdcfa9e9dccba15c15e3ad4d383d6a4585ff5633d62fd2b67b8d97df6f8b9c9dce209d6b40ac804cfe1ddf68f365a8e225e201e8b48a0443f8996ad06ad885eb4a0d728b87381c7ff7897af0469b0c2ba4e4da1a0057e3f1385f038325657fd15ecf5291154c6f3154626832e4d7200daec8417171583c62d68704c3d254abefb76d59400587e16e5e679a54afb9e239d0a91ec5cdfc2015153e192f3a381b92b1a04aefeb03899c705bbfa0f1dc63f86b355017f072326466865ff71753cd2ad7ce54077d43d4096f38ab597a91fc57518bf5b80531b2bfa9b8764e33c9a9dea95f4488fe91dc0c9070a4fb14108515e74e62b64830cc579227dffe0cf6740e2e903f1af0c86d109709d57ac963014e7a0b8518b19cee4d314b7f338199223835e0bab10fdc5c303551eb7f333c94d669722d0dd5f928ec9e13a6eb1881948980bb200cfbdfddf7728b823342d0119b542acf19c3e56d322160eca61bdc00d8da35c41f1b7d7c4ad5dfccce5bbcbdd96bb4f5c8b6cc66c1f71ebe4ceee8ed733e116dec784015ff4bb6fc202127463f7e3a93c678d920f5ed8b29e16661b0d2650b317c589ed0eb57c6f22b7979d72abe39913308fd9884e3eb7bf612d6610e426cfebada439ad964df86c961a467eb956a111008542c56b135864eee6b82d24c8d64d1c7a1e7169463707b6888d22846fe90c278778b9d15d704f1b4611a43747a40f7481ae4afd0e10c82c1e4201be3277a7b6455354fbfef294fd6f3b13fa206f40bc5a1fae2a844270ccfd683ea735cd14e9edbc3da80d2690ca62483b0f7e5916c79f26ecdfa5ddb1af4e94a16d15c9343b40498d780d0a0f426e5e4759b7c1c137c0e5a6e183495561f6754c95a0d365f4398ac5a52bbbe184df3bc313d824180c928bcef1609d0565e6533bf002dac287b602f288819a6da199082a725287ee3be0d73f9d17ea40f8a320cad92cc0f5ff9eaeead5b59a16e83d0991693b6ce88bfc8f83ef074fb124a69fba2abf5d070bfaf56b73ff5e379a643703785fbbfccb97948093acaba7e2859650e510004eba0c3c540808bbb8c7807a1598e5fa314d74196c8371ce9f779a28ba74c4d6b6fcb361ec63a8c51ad3d82fd7d3499499be4da481b72b77d108f435fa8ea6534abda5adf4d136a1fb51209cb1553a57ba11578782a5ba097bd2168b2ba6212756d8dc02d480ed4285de320670a69519d7230da26e973ed6016e8c39f54c0aa0034f3d70ae85ecd959da290e80c6dca702104dd8c3e362810abf8404c160f81db2a768385d1bc506066141d4bb3e866fbd54c71453c956dc4508012b65336782a74c1ee3fa6ac1a8c60244e4173e97ba700b7eab59e69ad9f59ac14ce2b0dd9d303a71a25548d21e5c3edbec9c6e7e428b52d88da39b5dc0dbe8ba6c7296c67442b6cc310a34c8f5198fef801477dbc545d51a7e1192e3d9d78ebc61d396b375c45ce4940ac71775328f6e814b9cde3bd12ed1a2d3045f2e398165a33213fac260cff95d240f9f4d5a8990a42506389d747ef237164f3cdfcdc4739fa4d80bdd479b8139542f97ce4fa6e2a6b84a57a5c005cb13c3a781bbe1ebfaff3b34f207d7d06d6976c78565b572d64dc2c0d409587ef1f675516a6ed996d24f5cd7e3ec4b53b3b6669ffac9eac024ad34d513c251a424769d6d0673a044b18bbc9fd8f468de8dfcd71a92eafbcb3725f054ca093087521e1b56e167ed8ab099805b01d1f5c5e70e5534688deb84289aede34f7e95c7d92c31a84dab3e45349711da5ace224a933159bea0229635d15786c655337845c3c9fb44ce316219852d78ab13880946d8609829d57982d636b8b27244ed2815bbe591b58f6eb93b44897f739c146fd98708408d75a638e74cb07f1f91467ee449074169b0cf4edcf0afa8333ca4bdca140ca6068e8adc9c5089dcf5c4f43c6686c62ae2105c5532c12152d3a52a78aa4b9995d82bb38c95ffd469c858ad62f3cf87f63248e5eb265c6565aee4fdcb64f7eac4461591b51e0b853b11fd4654bc8e059d738ce5e658762574f982241ab0d22d301629e76bf88a356fee72bcccdfca5d9a693294180100983a57cba88bfc1b438272c5caae2c9c81b182af622ff4fd96978bb754db8593dd397e13bfc9a304609545ef6d378c4a66d8ac1d7e8d263b3cb641d7546ec220424c47500df9451ec19f94c810da91d719d65760e9441d0ff821de673703a50acde2a7e71072aede16361628e92c7dbbb50120a0537cbbcf897d3491040cb976ba4fdfada99d5b1a6e2467ffb96f7a11cc756a14705e86b18337a86f8f7c7c0ddab45f8a04eaeabe5898dfc5cb14eebb07538073b2cdebafa65dd09545707f4494cc84d07fde903a839360a2966b9f938ebb060c92128bb1788d134d0c63e1c23955e391d4dca5fbc87d4803c4caa91d7ed70f2f5c032830673ec99fcb44da52ecedd4738650ad34b4a743a65a3627062d55662317b050910e79d1d5e2baafd789351d81d618c44ffebe6ca528bc97f230390e76613e661e5fab4798ba7bb5b4758a4ebe047788ad35f64f80341b6fcbc833e238cda1dbb277eb09109c984079058598120f66591efd9c2e27ad9605dec8ba24c05552a8c49c0740746b7083dc330d03f8a80118dddefde332df79733a60003133d88c68d9ad83619ed69902794e722f55a8768afc2ad2b567bd8e5643a0775eb1f537470d1db43ee3558744e8f81d9e61cc22c3710fafa5d995d26d8396419657a1af342e11f4001bba23208793cc73dddc7faaaf34087b7d27dcafb753f782f24acb03d5d79de6a116d6dfb495603919b6e3fcefd65abfce4e962516d29ad44d710c319ad237495b4a33e97d445f7843fc1cea6eaa6a084bcbd1f1a2c93a4a67adff7c7ad0429c7a7569dbc4d191a1e89292b75d69370b4cffaf1fe16710d899f3d28735060a62b3fbd30ff8d42dc5342c27ffec51abdb6d528083be2536dffd17e97da24ceda7983e2d5053fa7a1066ebea93e3d56168a8a56c12abd46ddc25cfa01372199818174b3c8f70d6f9e807b92b1c39d138d618dbfaee39ca5edc9268f02d87ddd9f0b6f24a99bb354faa711a91b2692d6a076d41968ba7ed150d349a0186292118abcf085842f144b5ca3ec226f4e2af7df37bc20921f5a559b59f6919c03558772e8d4c2eeb20b2a082a3c6d20188f6063ffa9be835028190ab6ac0075b1b406617453b5036f34fbd4789131bdf547195e845df359683dd9f020823bdfd96607587a3500198c760b91c2cf5133880d908069a40085d3b0bad29f47b840010df3f81eb2785c12506fff57d13067b233242c3efe412d68f3d96708deb9107e921660320b9560038476e07dfd37c7253b85f802c1346801c2777cab8ae5e82d455206cf530122585aacc197a0826f9c2ad70330325a647ee09876696965b59a0b869a26c2b50dafd9ea19bdf9be1c77456367417f9666143693309175dcbb801a13a6b76138e9a25828066f6bff2807aef96086a7d193d823380c99986940c4ea36c892b64034823258bca81e5aab08fe662e1c6f8673cb4c460df548f963e39bbfcc4e16cd0fb918d78fe0789c81a752572232970e197592e0b496b7425b0e6a0eb07060427957f805f89f2bf0bdd9488ca9c074b0e8458e7d5acc254fcf3ef80e89c99ced85774845d1d20c512adfd2938067ac0dd401eaf474098deedcc0aafb8c1a5dd21532b5b9e5ce1ca35d77b17bb3b3945e95ab833da187754bd70d49677f55ec072db90a2b41f30e99f9b7e6c51f667b87ce0f28ed03d50a6895ac3395c812b6598d4efd8563c2eab5bfb15e58841918348562a04e6824c79898283eb4dcf2c3d61782aff203e58e2230d387073cddc38a510e9379e8aa24c8b645ab198832020ffa0d5933335fb84ac4de0fae4c686320b7fde93af402ecd7af53e9f421ac7b8a1a904b6865691cfdd00af6f75fd0bef886ff012384c7b2bcd2939b9ee1509119ce0bbc358408c7a2ccbffbc988a543e3193906b6761d5503a24c3069f947902b29c695f362ff1b449a982088634b796614fb39dde92fe44657b0704851e66e796f37078d9d8c7dafd3b8d819ca32d4fe43f43aa640ea1ffe6ef6b76bb8fc9d9ccadcdf2c64ebfa5d7a0036e78f978ba18ba52d65b108c583a0ed7255f39d080f07577cdae42e7526fa438a3f89697fcd8f99943122f439e7ae2a9d216bea238c23bd80f023bc99ef628c1d4ba0b9baf419c761f4f87f2efcda1538a29e9abec67fe4acd5fd99306699def2f3fda3d635e0e83ce08c6a40c689f28ade9552d8fdf4496dbbaf8db38dfd27d93f6cc950b6c270d47c88d135babcf5504f2ec7f1c52a16deb32b1942551825f7c14de813562ccfcc1d88ced19cbd592dda3f86d715084d1355c5cd1254b4c7e07603134b730a3aa71168a53d2d4f767235202f2277d9ac2b2b41e59a46e6456c5c455c0e4dde22705d1920e20e54c292846e9c79c8894db0f526bcc1e4fe1033dc0f093286b25a092fc86fa4e922edd202eb951a0951c1d75ef8fb21d408b22fc9b6d21f0f24ab4f53ee59010d56d8b60c3357e48add12f2204e7ea175e6e7b3c2fe25763666456fc1b127c0c3afdca4f2776f4356a3c0285387c606190d6f18c236f57a0b0ce3775ff8cd30b881a9a3279160917ef9d123f7212b5f4b4dc2c3fc88fd69838587caef0d3c6164f57bc02121885d315241550821ee39ef4eff3f44cb454ce15077330f9b4dc3a7ed230765eb7913601599ac8aaad9304f7b8b4d51f30b3fbd6dd8dd95c2273f0afed0bf14a7c9a0c21aada00b2fd30cf597236c10dac8778588af6d30fa9d67f763e4f4bae8aa6dd61dcab09ef061b9648e451e88ef01afa41d80f759a5850697f9625795f59c74a3f4e35604baaed186a49de4f2d5592727d046f73dc55de9853bd863a53ac3fb213168c9c9d5ec2dcbb050ebf67868a2d9724342daa9963a2b4b7561649a28d79baed69e950cd54988ac44e66b8e7fdf40b13328ac907414d87da64140f1bcacac5b1c5a935294a3a8d848405fec45c14200133bc805640d83a9cd655914970c5050542eaee131b9f93d542fc7f6908d05dd70277a6d7f87440bfee14aab34e4a652a4158863669836668d3bd000da52b9abd0c759fd3a6c55f2093928922052d81d4911d221448fab8e7ee87501284f31161ede52b338e40047e8a60b95d1a01aa23b9a4dbca4abb1adfec9ebd0b272d03a60f0facad20f28eef0e715c47f616aac0d045fa91282d1753320f504a00a53200b7001b59419dadb670262a04ae70f9c3bc67041e9a33b5c80994e2836cc04024d9178eccaa1c27231999d98c2db043c7de8bc819804ea6d3e330550fdda28769df1f1fb92f50839bc8d07efdefaf7b84036d7dad935db695a10b4c3a8d78694f4556b3babbe50ce13f5068b54e08dd2ec9c9b5823dd8fdbc0a339d2f5cae42f2821f123863b8034a517c6b2767f42ec6184f6375618250c7d190eda961666e989a0d6b9a3c28cd6964e877fb2ac30e6266b17b87378a376de316fff794d982302ba218e4ec386af6b44fdff9d80c991cab3579bdcc8fb15b52a886cb6804da6f0f9e5a88ec8d0a8bf97ff339635afe4fe026c43d6a5b6fb758049d4e066b6ebf457ad635cccefb3201f1f834e5dcf752317a82a7331cf5cd2eca733e8cd2ff3d00ce51aa9d300cf5ac223b21a3fe035b0eb7c950d2da0f51b6a1bbfbe599dd8221e8d3d7f4510c1b998cb6e1a7c39a2cb5664525bad6a6bc9fc0e05e0a979cd9dfd8d43e61b53512df8c34c018911ae0b0bc825b5ce551715fab8460d8f0f4650a699340b259a00a4f885adc84bf352770abe4c058c79ca6de8822e1970cc173a5bdcf8b41c92f2156848529be0d56b1956b348ca981d3a8d4123493c95b9abbb60cc2307246fd7112ac6f8599e2fcdc911d57d1c886954a1df841efd81beda3a6b879cec8234b6ee3e700a32366f6ca13f9dcd3acd3e79880428994b79d1ff4b4c6cbbb9adac984882faf4b4cbd7ec11bb110bbf0ba8f754092beba8292e8c4af2f0ad8d6d3d9a3124b86571dbdd758796247c96be6247633286d3864ce43ec19c6410219e17027f0631b638d55290c83ea1ec59ffa771a58d1f17d1e795b5aaad5e0af3a5f3e4af2b09252f558b81939ed8a967052df9601562c36d1043912ad8b3a610fbafdf7c5b57147af319b97f4bc14fdf63612ff3bb6be54774ed618df4b04d8f7c7ae7380671f5d495aba83aca97f542e9e270c597fff7c9bdb9156630ac72cf2cbf7df460a692e5ad3bed2cf8e207c5f5e4a6d9cfe75015ccdcf729aaeed3900a07e8deb671639e67265059a9f84d49fcab1283e63bc546453a7a10280ee45758dbea5f6d5c19555ea3b19491ea5e859d08c49817794790f1c83e74f386cff9965b1a25f707a327502b5cbecc76319e07f0208a1a2b04cf1e9b10c810863751c41935bd2cd7b121664e1dec2741a21ff6f8036c6a17f95fa45dd8c75caa656b7efed46b726ebb317b3fee361c0ee303dc840fc34f89ad843c7112feb7920af7e94ce36fcdd12c4c9aeefb71904c158cbd28137d5cfe7017d8facfba6f47f210667c27de73cccd67b87415040eda4db9b7b8063b88759eaa4ef8c1749a1e093d1ddfa7543fbad713ba3ec08378d345e68c1dc36aceb8a2758fc332cf7720cfdd0412c2c04b7556a8b48363e24d197e82e8b04ee3d5bca8cd94768061036490bb25e46e1ebb829af2c1e31256cc93e2b376d414262ca655731b2ae498888d607676e5dacfc1fe9483c953ef8001c6bc33d8a90359809e784324a9114103f226c0edefb6f122ee9247c6ab8900ba9d3b0ee10b479bbff5abbf7347f38d0dabb79074a437e1b5a23aa612dc76a5285ce652449f7fb4b81ec0a7496ac4c3ae76a70b7b30ead75f8e98383f7e0d0412d4680fdd338edee198fe55bf73d2acc4250ccd5fcaed771d19f9cf086f5fefb3ac6681412b7230c5dbb0bdd9762d8968b41ede49df23e13a3af22e244cab58dd80652374f46cbe2dbf77b152b63fb28522171da8485a785f0b82e12d91b1422585584379642850b70ce99ac20f8bf17de906645f288b1e01e1e700cc31b5822606ff06f6e58297180df6ebb1ed3c9e3f3ce2e265a7dde5ecc12b029f95afcaafb0b190732db95dbbbe178e39bd10b68e30c3c5fc5dbffcae11a188ef8104c9c70175d265e921744be6ec5bb0e9a1f222925754d5eb8f5aa3121a8db436251645b24b0f4b444121367c4ac6ad0cb2ffc3d68b6bb826327b81b973d91f4bce735d7ce6129476e4f9d555f1a1ab4827db6d085ea6947ca31e4b7796bfa8773eb16fa13a391fa517be866a1797ed77b991debfa910766565f2b8d6993b074cf51c76119694cfff1e8e424ed5e9f1dae3fe86cec07d79c6e0246cb7aa97951fcb653e8f841c8105aff6e15c18c378173ac844b9a59c9c8c1cc8cf31334065c370a0c64c65e242c7893b3fe1cabdb21028905206abddf73a8d34614b26fdbaffba7862de2b9fe9fd8064fe3a1726a0b8d22ff335ceb4f6210bc5cd61ee7d34f702625bdde6b634e004495e63c7b9b2f7cdf919317dddee56354cefd1c99ce949f63eebcf4d1743ea4645a15813f0276f86ca9264d9eece3a50aa96c8c63418a3460902bf96ad84aba4c2dff2dcc7786eeda542dbccc0ea2503d7366d2d6b3342434c33f1493f6c7d53ef3e99e1bec4bf4518893b5b79b56cbaff2957bd8e54512a775ed3cce316d50abb482ed322fdf01b18d77061d574ba5d7ae8fddf33aeb9c384a89b0dd889ce2eb2c1dd538ea35cd9028f1588cb566c25b760111b2ee433a7bd4fc70acab6d758a21a24d57ce00c88d78168da18da9071147d8ce90720b70400ddd4d251bb7a1fd2775979e10c025674418d20506f03804520dc074f5abd8f60892a3aaff94f1f100ea3f10f1259ca4a1826e5d2d12cb257eda6d8e52bfd50bbcac61a8b58841b870a201a7125974bf6da139954d980b1df2911a9165cb8eec0222e7f1f9813715bc0a0939c22e1dfc9a0e0a393cd1d2e14e1430d7aedbebb560785511fbaf4947e668e0480a0ef25118905c7a4d8f765dca69c5eee27c6eb0018bd1155c6ebb1965af5b8ab76a068ec4cf1450015771e8acd61f160be8702a1c797930e6309dca7894db9c05f2b064b1728e8dac13b8572272ee3940a06f9b02c7839d38976e78e6ad39550d1e5ab0f898d4d0ce678a3ae147fedb86b1d95a55ff5644acb5bb01e2b05f989c9dcc916481279e7e877355df761ef9fbf4de37956f824299bbe567ac3ad7cd016e385cf1811ab37b0990584eb25732614f1733c054aa0384a2c5b837f284e2614b7f255efe5514a275262be40cadb60b33a86a26826b7b05490e159b1d0931f35a08eedd388c83db63cdd6a857809ed651934f3efdae0461b4fc470e99e6372b3e4fb35ee7319d608670f707e04694cc0e1a665bc3255656a2bfc01f4c06514b0e0c5dfb278e4ce7cb084e33fcda2635ea034ddc6a61e8cf431b004ffe5bf6f822718ad08c91ad647ca0459f6e78dad7c67d419ba68730dfc31a8cfada8a915b0988c402abcc03d6c38da94824578f3b6131a1a5b19a054c8357f923b0a72e4dd9a5c38fee06e474791b31791342a51eb77e597ca34205be91a90bcf21ef47936a263e2ff7913fca392a9ae66c23950c3004dccd4683005299e59b56499a5725a976831b59a95b3d6785a15e6a10f246cd536b5462711f2f44a539b9c57111e66df373059641c4f7b5b0aed412f8a6a785a9605847759c81f583c1ccd38850cf60ff234e81fac50eabcce02a855b9dee0e07a0fc98667a2cd7b54daae55dd055baea31cf330ecda71ff12668280f58ba06d5e539dadeaa6a918f4a53f315cf6a4ff19da7aa74eaa240256d85850b20cedd578749804b1b42c844beae51d40ad4d9d868d9dd9730cddc11f935bb48bbdae1502b8c0c96018d4ad602db26d13620438ec51c5055f214652db75fc72c08446ffc0b863447c0528cdfff50dca67b277715a74696b1f477ab6ce8fdf1465045db55f060e8aaf6972e8a6c27b13a07aa6c96402fce27134a797aa585aaf28a67ff8f9916b18c04947faaca11084d65f5c0cb75c562966e41acbb72afd6abce305f0d39915ac895664cae25c1b10507543ff5d527efc270b6369d56f0d164b633da1392e7796e5d708d42c514af85e9ccf4b3d9687a5f7629750936b9caa1b8c5a39e4dc0e5f396148859cde9576026884835a2f55e5f3926024e3caf18f197d27296dca042980f3e84dd197647390d10670d4f74aac817732f96fdddbb0e96a81b30b146bf48728ae7fbdc1e3389d0c19a3432feaad55aa7211d8cc849232c1ba4f8d35e4fd1cac5fb5e09d987e9a222fb271f7865049ab48d384537df761d134c6803132e77f852f6c00d84a9fcf40d0a736b6b62959eb58f23af64a8be2adfc454999d6d009978bc83a741cc924af54e073bf1ae4f46985b96cafddcfb0026b1701701476c407578c7413484a73f236e10ef458d0b65d10c53f9610faa33869dc4cfb54df14bc9b6846d1dd6297c946b3e91e32bdebce7b6460672bea467a1b7f61cd4c52335214050c871d6f7f1b4344801216e406eada35d5ad2dc86fd215f3b6bb7c56f7b8b8ce9b8d965d976b2d0ed6605f0aee23be7cb69d937694a934108b12838098678affbf7731c60b6dc9912e6a29609640b56080dccbeff1e9d07ba3c330333486601d2d8e9c6f0f5746b9332801fa4d73b9c6d96181b4efe59ca9b49c4a534f6b64c0acc99913c2c81e2b8285cc25a99502d5f060c93012362d8006a725c0a82c63685543267e206ee56e353cfda114cac1531e2bc798ccda953c0334677f723ff12ace6d2be2f3f53f3221f318888cf5f2d25e18bc050d3d1802bf9a2689b70d2e65c36056c7150ed32390e5da1e8a1a8f74d3b7b59319de870a3cef4092c7b7c11b34ab988e3429bd93fee2f4e00550c9211012ba9a53f3dd8132281c5c87e5b3dae481e00c2c2c434a781438d409a9b9ea6f1f2963a6b894bd6e78e9ad03a481b431d39963d3c90af5f50861167ad834b2a99d3587656864e56b8f84ee1cea783e1389ad5a7b1c2629521663a70c1c350928ded30532de254a3d75a573d3b759b6c22e7a08ef88bcc4b95c84aa677f7f171dc9d09015d239d23d02a92f2de871b0b48fab5dcfa3242479e7b3e9ad91cf40e83ccc37b8f82b840f9f3067e70544b9044ddb1b20d978f5258680a6e53918c46bd75185007a1f6ed77d6b2aee019802df698d30d4fc36abf26a958000621245b668dec7378fb78fe19ce88e8d46e712696a6473567275ba2506a10db0d05331690f58bbf434fd23080003c362ae9773cd81a3bb33f057f6ce8db9d64345224614d25e201a3de052b6d354e2e7c00f482902a221eef689f6ebce6df9002cce6f366fbd7400cd8ed04436feaeb830e7d4f3e0b51ffc855c6caf6490cd4fb02a3300e9ea2f529c393a80877256da6cb010f3654e4490590a0bc0838b68dfde72263807e573f386c60dfdc96e69c075506fc8ff0e58fe8ed78204ffb5d99da188627df9eb55235e707019b4c83da392dd4ad19325e8ea2f96889b9d9861fc2c1a1d50c0a0d35fc8e7f573a86f7ff7fed34616369621873c8a7b59b7c9af1790115312f10ba482f6a1e624f35bffc3407627e651a78553dbd15c088f769d284c40fefc1773e3d6b5552ac40b5a2d18b2c3150eeeb4351021fc5245e5997eae5eac69e7f96991bf46e334273883500ecf090fd7bedd722aad31602397540b7c14cf44a02246a2c8323dc802cca5c682c28e53f4564ec6ea1cd0171d3f7473ecb6b15d9a027ead17a09604b568aa56495978bd01ad2c6823aa70d5f2205fc8a68bc27d89e7fc7eba13fea99bfba217d9caf3000218a09fd850e6e3131f584851bec87b223401e13b902dc483e2c0ffd07ba8ec834e074d3f302c9ef738b3b5da9c175b2b91effdda7461186f8be442e0374ae52167bd4acc0fdaac5fc6ad8c531319d1136b2d56e72c5054fd27828055da52ced781787e763ff3549154c6ef0ab300c5fe47ee02c24484c07a96668caeb2e6e57ddb7ea8bfd94e105ada8fcf92b6f3426962577b70df2dd605ab798fb3bff1ec9c10032022d2c4fdb99ffdf65816d3e645ce2661cf3db3c19ab870fe2bbb9c4be748e99eca79ade02ed0b8e054e125abe807603832df1b5d05840c3e3bfb1c80b2c75e41b5425c728b4d354cc167fe6ed839f1173896b326824f9f55fedd3fccdb5577219ac8984f1f1636659b24cdb28189a46405c765c6d2e6d20334d8279a4da399f5bb960fd77968985bc62384d36470c972f9f4dff5f08ce6bf7b226b042cfc65b10e0a02154bdf6c87f42a29f6e67004de6008141b059e6d7291cd9ebff1a272b2809fb47691b37b924b81e174e9a3b8d5ed667aab137666934aa0de6c55befeb2b51ce0f6b802e8e93726a061244ff61cb31b73ab2662097febd751f9024d14b3732bcf4cd60cf78aaf64963f0a13f772c3af8dcd24452af00f0f09637d307297c3b7095c97126cbe0b86983ecf79625b9e639057c63b925370160a8d5116bc723dba680b69c4b5fc7045ea6dd892755766339b55b1a9fe5c8b90ca53e9ff72ee9b61b709daf441092a053d2d14a916122c41b50ce0114e2581793410c05a2844c07a28e9d3e48496feaeca4a6d46edc513cda3eef88451abe463ccb3e3df42277edb3b82320e8effca445a9d08e062ef5357c44a7247f33bb25fea205a5b9cb94bd9c0e1a4da01ddd57c5a56bc7a1cad40b4061819bc3ebee766998ecbd4e3246810df64b1405c04315209eb3fe1bd8618e00fe3ceba33ee510ce897873b6d441cdcb567dfd3ba3b05211a2b88b8457ce7c0a6acebfc9db5228256d42f06701dcb5c0747c5108cbad385873627e6a12be8597b88576bb5ace1c758e025cfa41f11f205cff6a4851d667f4573a569917f936cc3afbfe2f23b068f5fab7adba237b3d7788cddcc111898a86825abdbafc6197cbe15e5faad9a3bf09df8c8357349a3bb1a03719ce897912dcb5cf05b3e8a7e3f6334f54b50c774ac3794853da5462b811de7983b5f9487065b6d63037a6aa3cf4df4a92d58a4a0e87994a58c42289b6c9447ad48bead09358ca98a466c0e635c5a53fbaec2e214eadbdfd7d32ad8b593a50570b5b66537444a2584b64caad3aa1803fa37df270ae1cf8516ba8858626dd3ad169d6a62c45dcc2d9ba916636fc3e2dd1c311ecd989a5ca698c28f4c4bb4bb4332baa474f9d9479e5be1d54201ec493465acb8a763614d034352a81301efe6a3c86fb5f98454df5bb14e58d634121b1fd6c0ccc6615c90732a7f81da317b9cbf204deccc6f64b0e5db8c1c63ea714a32c06fc33db248b2f2950b77713f5907f1d5163c5f692adfb412e92ffa20e8be796693669a13484cc8a971b71e827d8cb698bc8dd0f80a66a4031ea440d219c0619681bc1a0e378162bd340613316e2c21db750a06e02c10293f22351891ec907469aa9cd515d41c4260153dc5138c5f8fe5df5bf66de6cdab29d5f75835572f8a1da8a2aaf32b43f697e1694882b54bfa3fe89d7d72de80f6b23fdecb9922372826028614870f2baa88b3425c27839f64be873bc36249cc2018f475dffe4f33804bbf4375da64bb7baf49f2e1dedff9ff20dae47050ca37b6e641e88da7fb2e430de750d5d9f683f842359c3293c44280fb635ac0a771691775a3736942696b0f15ebe1095fd83954a39f203cef5085814cb19939caca7689df2eb436ce95649c9a00926c4eedb68ffd71cbeded9c09a015a07523a30bb89064d44bad6f7421b94f09887d51a10bfbb1d8d1e399e582e90b2a09495e9fe469a9857c8979d2169880b9bad77bbd687a389032016d8cbcd59b52837e2692ecbeaa3defc9218a64f0ac5c38360ceccfe25167e819e89b8eb4b799e57393ceda41a91340b5561c821704eb27594f48a2153e5590f6a57adc6500f325eb91e24695117cec8c641eebfad10333f861128ca961c4c430c6d1d749f6775049a5585dc037b97f67cba9e09759da48e2ba441c19c73f088df3202216bb3862e94b26e82f23aae14c0c643f463af6eb66ce81c5e3d2034dde7f060749263705222e5f703ca9d31157326727145419d08821bffd98c98b29eff1141bcfb2c75f577ca57ae44ce311638ab6621a8716fb2367aa84750daaa0b25c5d23e8d738161f9074832b92ed8498def38c75c3dd9b843bbbeaaa1d9fd83ba86b539a23a55718fa046bffd781673ca372641ee65957e550f06bb081619723f6828f91c8c1b04c789e867a222da9b937c0977f0d1061c03d08c7221b0d3edb53acf755b948a4ac18c240665266421c2470022e0462911f418532798b21ba998656bc910ee775ce07670cdd680cf0a1d7a3095596b58b611e470b05fde5e1d8223e3cbc0dcf9abac9070655103266d2fbcb135d86e1d5fc98eb3e340ec7faf61a130467d16f352d24ef41e2121cfba63f850e2bf5d935967d973cebf071dfb82cfd596793478c23a422a136ff4b0f68e0bc3a0b6eb1553f4ed55f9c69d6499d4bd2bde568bd73ac26b7b1df422fd6143f7c2ec6c4ddd0f2935c8ac5708d5debfe5c3a8b67c08082073ab956128a917b8fb51654fd2041df8120f48c7158ca1e63e52a6dbe1442badf8364f173d438d6b34e70c239ad76426d33fe428545d8a9cbd5aef210af1dde100c54672f6c8176fd93972089cb18335392dd9845d679f39aa95af59aa499f8b60608399d29d1600c8fcda4ae9443ccb9b50471bd147c447b23ab33d3a41782dcf44c95eeb895168eed258426265baa0ab6e7a2f94501af283162a7ea251c0c3daa653723b9255fcde0646dbabda2ef571bc714d0cc9bbb7718deb6c64310f3ee35507e668d6f7310b87b3ace709e37895a2a8309bc60a640d20c749b76c4d3a0e538be4716c00104e6780461e44a606d8ff1cac2442f4317b42d5b4cb70736e9d272b263eb209c08e03fbbec24fa49bac3cf4669bbd63236df5abbfcded4a8f47b104293ead0c2f1348e666349db628ed1df18515954501e9b5252bb27a14c64159646d0d53f20b673db071df8809d25d447132f48522058e1d38c45f7833c33d4c37c883eeefc5e1d92b31e6655310408635cabfa4fe58721d48fecd429a5378bcd645947d0502f6df388e57bbb22c589f18b03f9967bf2065f5b46902c36f114cf99dffe08feab5ddab8b0e0e06e4fd3e6d6f6ef132b0c5a0dc1d41760ead7373fb5ac57ab1988a9cf0236619cf1ce34ebdaab1cae4b7cc4832570f09f9d416bcf3e5631a3d61284b8416b9de3b161613eed46c6be339f61b1fbfe66060297092e122fda969ac2eb49de97eb147d84df1d4f95decdf8f557614d96c12f105c2936ef24c292ba86ccd2f9eececa6f536916a6a7d4e14418e4ee33a351128cfc26932fa8e2877150c12534aff8075342f273a719c2b2cdc8e7078b0232c862c4aab6ec39d04cd91e8f59e339c8fbd1ef0db2e7bd39ad8025d1721767ae825f823178edd6a9047ca87a0d51e7d91e7265a86ea71a3307378baa38916daf417d8e33f22779f5ff0940f01ffab6eeb0e47362ad5c431e39b1c5c75d53596dda5ba237e2c173e1935a2173a7640b547cf07f70fc923bc9e0fefaa9009d5bca3e4cc9f1c8d3dd5b7ab25920ca0fc2ea4e52349be969319b95afc67b4c8e1869c502ec1f8763e4fe01c8d0bbb9280b71b2a00f000c53f043b4a9efdfba044add12c40ff6098d796cbd668fef47194e66f0808932f9e6e76dc14055206b2de86a9d546404b3c037a177f04c098b0941daa0e69547dd7221040abe2d279d9f888017b9c10dc9a8dfe18e4b0aee65e740a7f0bffdbeb7d7e609556254092fa30914f560bddb62758a1b9fc92ebfa644077aa90ca1a1556a2da0e82cd359e2e5eb6ec4e51fcf169385fa1c8b869b52d7e31eed32f50b2c39379b845632112750d9ea9cb9e8bdf61906bede99b7e084f7ba84f3ca8c80a9ba667e718d441ab3737c16eda59282dc73d5da19cbc2d658b385a9ba7bf1f31ef6d08a3ed7de1e4568377a6057578c0cc5387c39566d624abd0cb21194e899204aab9afa7b9a756c47f5b5bac1314a7bbb4ec4044d5b97985cf1ab2ceac40f6fea47429f552e2c49ed8f8a5ec99ffe48436bc3849d33cc59484662a8610cb30a00f2d814a2cf2df3f5721b7843dca30b7607e38382fb8f7f42b832a9cce43884cb831901cdb83ef1600ebbcec47a77f21506a4bea9e9270c7c1084bb658ac38293f6c9385debcc759c5a658225d0c0d72b5bb59b6cb724d6588f990d74ca668c8d137b551b1be327dacc7412c8b7deb58083370b9e73aa2db0b1bb0fff9d1f6888c2e844834bcd7ae22da66997ca62b245066e0b66ae22f12b399db4e794c5b331ecc27f15de1207ba8cbfe555df0ee91ebf4e9e447032fbf81b75eac8c34373cf2f10d1276f5db3e7683bdde79b0974f35da8d0834057ef7943213fc8d48aa203ccef20d3d0913c606442270d08d4034ab9b18715b14e8690f260edd6b170d2404d8bbccba1e4dbc053467837893dda57377848cae645e7e9d5cdef4c2c0f6c0005004f63c75fb951b0a03d11992f2ab14ce6c92c207802424d8b90d0b07b9e96fcff1c3ec373e288d8d7d62d74b927e9004255d2df55dd87f03e919946dbb491d52d7850230c2428317268868cffe417d7ee8afdfbd4687bb991632861168e003f70dd81555ada08cc6efb30cd1ced6d5994ce3f7fb5a65b664fbb311b42ddb84979892669043b836ba23d8900fb3b0c1e4b144e2b1ca23fabd843cbfb28c0063036cf335ed250a8aa2e9b46c860dc5066ea70d45df2d8741c8e87cd34b5ca79701e62eeaf333eca793790062b843b524099f095b3dd5127e0eeec651a04f374f85f89214f57d67ce2bb1fa4de656d2340b9d8909024fbf083d43db2e983682667ebc8c4390e3b6c4537f74bc827dcc6a1dfecb1ac89bd6c3273d6176907146aa463951cde0a8ba3963dcf86af1545a6f53c885fbc4b5f0ac2ef6a2ea52e3fb9ecb7facebd2524fcf4d8292b39c5c1c05c468177005d4b4bf8a8ba0e8803d9b5866849654ef95eb908b24ae7c1cdd4e5f77c90d90daf2ee4cb73d91be1bd87fa0746c70e9e528c89efcfe90d8366d0a9bd075727969c4f7f902c4275fbb3fde6cfc9b8eeb1e8c20555035ffd2fc1722a89975071448c34a00541a221be0dd0af6ab6e097c4df4cbe72edb152e10986f9c9d5d588f1cb80c18e7cd9937ebe22cf740dbdc0469bd67364c98059afd454086560a85901db2fcb17b8153c30634c1d050df5a2bad5e2045195ee16d14ad155df0aee2928f1d2bf0e6fc7dcaff5774ff7e27a04293a17d68e8f29f4ea32192686fac62aca1b2b0b2b6cc90c5230873c27a4f62ebef8379c1b72f733e77d57f0b4d503dd4f9ed214696829e9444f73f582fbdab6ea19d1b796c1d2404e1b706ebd6c70eade99fa532597190c57af7de91cc0979d49d59f40f95bfd4d28baf50a9b8afc91aed188443dbf07ab1251d1444547f0f697d7cb3e943b48a29932009f5d7d72fedc1c4588da2e932cdb0c56f918fea8018ebdd6537f056de6f568f3f2ecfebbe1ed29b5c291232ec44ee5a801d6b9df86f88d1e67393d4cea4fcbec29df23e8c040e07469342f8472a36e1094da07e9f1b66e447a99d13ec97e4374d2e5346d0d17cf20245bd21eb39cd8f04901f2be690c5917c359d975c4059924b618aec87793861f27013e6e377c1826fe883c48ffbea7f0d6d753b883da7443a20290b1993266187e215f262eae438b0238c81bf77efa89805bf2c9e3083fbdb81bbbeb112f5aef4305b3b6bc624342dd8b4815ab7d44b88cbd7d9e935b98fc49f7ffb0d935b6f944ebb379ebb8d19ac81e0ec14d2d32e9a90f62c67a57b531828ffa9b243980ae070485e54fc84ca4da5de1a59f41dee4a8646ccd8960dfbd1d56b7facddcbe0acbd83f62aa59cd73f8fbfb3466cbc1fd6498c8c3801e8d87f0e0c8bebb43f562a025ef6a7fa44fcddf1bf09e616ffeb91b4e808091073ce5e18464261012bf8a3cd5e9ad71cad4fb2365d518db5787b33a3db844380c771a34a7ad33c2b6967833a287283a8ac24924d822142ec5fe1ee6db786ff6f78823b91bd2b04fd100e7680141633c36310f039b10b8de6df68a5956ef0deb63e56cc3fc29953ad3f2b6f8ff22468a4d693fc57fc47b3e9a83a4d6fb0398d05ed2970d1fbf667086c38b4603da83ec35bf8d52ad942c477119884d044b1fe9694f2b8b59d2d6271c9696141c7b12ad679e879675bf4839f40c7ee81ea550973cee01a82ff4f55759d68746181cdcbd65f4b2341c6eeb90140cf83ddabc20aa05283a41021843f35c5d098b3f3addf7021d6d77fc4b6c2df658ab112abc3f3266a9436c486f9883cffc3379cf32f6c3247cb37f44440ce605023e677d8adad88e147ecc268e189fc7d2f3c52db14c69ccf1684a06c044c6921cf8b82a7dd8dcd263e717fc505850cf817045c50ab9ea934c08e32e596b156e92f8e648c0457327c1a44f7e3175ddba18d79aa3f7035ae27331a5bfbb44e3f6c682945f8a6743de1fb6b85835938de1f4ceb864e9595f1ab3b0098a0f91c1da24c90336248b13967fc3701ea738b0dd9b465e756b9b1856f3e3df1e2ca23aac9d54a9ff8a1594accfb95cb31d4449202de7a54d4b22bd20a50fd0c4adf53b05629709f287ea1d6a5b2df3fa0c259067b448723d5f1adacb7213efb65bc4a18d97cda1d8eeaf07e3e18ff9d743d69ce13ebb4c022ff8a6c453266a30ef727fafe115b2f346be8948af8f72bb81ad4f40796dd6ab15644ba1eb009d81217a411002b8e65ddd67a5b700acdb77982c1de4a61705abd3b9eff9345c0a37ba7efc6d2d49026a9a370a23c5f601c312a57abce2b7ce5c579d51ab669d6aa3dfa66618e8679d83a3dd4321a828b5b6f5389c1e7189f72e3d5198d4131dcbafdeef6f301bd5b5b91f589f587cbe627c164e205d9598202c58e095ef40e4055b978d33b5195071f2d22d286653973ecdfb4de9d6bd4cc62b54180b63b484692753b098bccc3f6685ad8df5678fd954d192941185457720f89c7bfeab6c5f97d91535bb8ac285ca52b758a7b7a2c19640ee5442daa43430f16bfa18cd05b3a4b9c5d6d9530185a7055f1da5932738fe6e66a820f2981421dd28136fc9bf2807d94b81dd09a5b60dc9168a5548dc574b7d8e77d191274d133370017011bcacc4f071a4c378852161ead2272277821b1d261c040c452e35c0b5f190544087ad10cf6ef97746e4976c64a88074d744524df34740cebcb14f5b2e9d2f8d780204c4859d6e0c01ddffd729a14ed369804f9516fc51ed0dc9b3b3150b5631ff1e6d806fd63e8ca447e1224e6a606b906d4b8cb806d10c34e1c69f54276a0df9cf1e37297b5da7c73b2aa03e9a041fa1f36c2787096144cf14e7af8f7cb3d7a58eff9be7a1bac1d162db3babe7df47dad30bf626515beed6abafb637dd7b1eb658533ac975a9b451095257d17fa18663b3115b5a93a52418fc833188b102f122cb216a4961d041f99797de32232a716353275255f99cc7ec9fe9bb029b4836602848f943b83a05d19516f2091fdb553300a82105fbfddaeb7c417efbff31873d4ed6ebe7c7430093b480e3f87e90bbff263d0b15854bd565bad2e423c1f422a52587f72d9eaa5bb340373b9cec0cfe77637bda0d15d183cc9295974c9594b1acfbdaaa367cb003c433b9cd7f79d499cb46f14e357edc4d779f55eedad4baa399c97a1d20a29288ec654543fe06191abc21c1bed39bfbc31ea3f3d0514934e27b88776e4ee631bf90a97f32135dbb1dffa0356272e5ee4e4d6b9ac28a1bacd05c0915ab801945307267c4ffcd7fda4522144061b7e165a01381701a1ac0d6f7d71075ccb90f117fba8979d86597d6f1b1d4efca4c01fc93dafb559c5bd1e168654969323f80a85734f366702e7a846be729a37e989b1d2d798e933ed6143fad51651f956b6bad581d946dc848f1daf91e7076830e1694133544be78d578ab72d85c9c2cda0afdd176595e5bf15b0ea92a62ea04aaeee79ef87a690bd492bd3d43ed64f65eebb7876565627bbaf58f0257770cbd79c2deeb1c0cc2d1dde0a0f1dba10103ebf8599f9c3e7990b697d40c337fd0c599e223ab97ce89da6c3d84de7ace4568d198407eb2e6a1665221661da633602e37b5c3d16484c3404156ae01becc513afba5ecae0af3640d686a1274728379e4c176b9fe7fedf7667025bbc6cf0a94c0694e29fa4db7cbedcf25c8959fbdd7ce2491720de5b7d3330a8a99ffa4510ac2d1e15516d20d7befeb91b69b758f0dc7d5dd45eb101e97da454f26c360a172229588ba366c6579bc55e421adf5df4d8e850712d89dc9c761225d32d9a4da990e5633d64b351af38910b08ea224e95390e4ba0192a24456e4039edddf430ecd37e879a3221b9b0fd168e2e07f4b8667b94c97ae88dffa57f77c8dd6c099fea94c906db7d28952a9b915a0631acfabd5a66051c32f2251c35474cb0111e2fed4300ca5df89fdf2c5e1287d49077ca8c268613c6e4d2799b320c669e42e8c89da1cacfd3d72dbb356d17c74dc3d2dbed22c2279a1f6d57b859a92de3cb53928c123d537fa4dcf167db93aee6030d58ed83e33609aeb4732c1b4563d5706f20f4b03f191c99d5579d46c44d1c0b755bbcde02014a5fcd655d845251b93f6253c20a6598207af9bcf65caf8d7d3972c30f95d47ef10b0ff0153905c5fe8ca01f9c8414bdc1b29d596b17061741ebfae4aa347f6a7ecf7e349eca1155075b93db37ecf07040f8a41d0ccf55f27d5bd7eb1f7abde69758eff6d4856e86c6e04b890a5f671942c43c3b369ea05cf0f46600516b17c27d75aef38a325f93b1f2a7059acb8d1c8389fab9e0ebc6ba03900deb5ef6b9b4da55db7e27138a602ec80ec8aa43eefdf90522f24127299ad195c53eca83f5d666bdc498e80afc70586a07c6aeae6eae7cfd6739c2f7dbe17df5e9bc2891070b972b8961f59fdf12ac2cbeffe0c9d1d09e2fb7b4fd2fc733878a9ea7bfebdbb162aedc5676402c862a619a6c1dfccdf6ce970ab6adab5f1b05a25ff2922c6aa769c63a721565728a799e9e1a0a7f37c8e77dc2cb10d28d26b9509f478b67925363f20c3de5e40c1a61f9f7b168c4cf00b4a446ebd13cca103982cc43b16dd6aebc10e1631baa659627a27d88114b679e1ba17691a999281e985157f90025b2492e340207bd49b041737f5341bb78fa9baab4bd15af6660bb0b5eefadb9d55eeb07fff9ea4cac2725b3b9d7d7ea87b8d2909dc1ac22bfef8a3e63d386c737d871b817051032529b91d6e8dec8e69e985d6cb6ef807eeb96851e11698730df74cc01b165e39fac67e237e2e5c5db14212e23383d49f26fd0af70bd817ed2d29b79db9d809ebd507c6f3b6efec4f8d09cef1985571ff5044cc0aa3848c87cb79086c0d0ca73143420c8e3952c3eb1b7163c15776a20ea1918249248e6b07cac12e2ed93f3ccb8508f50e418b37a47a6bea1c2b1166664b98a845146511c189f4efc77c0b05275741f0afa75ed56baffc2a27d23e1e32c59ef969ea47a6dc4892e5c9cec1935b03c6321aed1279f185fa07f1732dec2587ea3080fa5930514f69e703c2719b9ba409ce6c4269a757cb525bb45eb2cdd0d1f7a05342105a0b01278fc11bf64a2be82ea2f385dec1f3e8353581d0c9c8f94299ba4ac522d97f4b007b1b06ee21a6879deea1582b0f42a6077ab050b9cff1b9d233c45a56239adf3ae8415ed3e4f70eba4c08ca3b86801077bfc73c9a35ac609da050138daf3268c4a956b3b266a4d287f7d6784b1dd5a6fc572a9aead548073f4eaeddfd1021692b52923ff650ef50e3d8415434aef2e9c4fcfe50d4649b99b13e7f04116daa3045edbc3c5ae38c9d30c40c4e7a45193ef0b3042e49ab5d82fa4c5ea47753642d7e411ed5994a7e635c590f5262b1263568b3b9f9050e9393ef5cae0dc23e261f2fb295204c39bb2778681141a482397b340b89dc8414e092a9230b45866c7ce7d9c50f709c7829cebab9682e6dc74edbef009cbefd19f9f52ed114f49415e61f0fbd22f6d13b4891c094cf324e0d825e042e06600512a4bbe2f20b174842f7df9517af2caef57ba6b53213802fa4d2d88d6521cb08e5b60dc814e105253cab6bb21684a27dc0d0c6a51303028c6514c0651362006e35aabae668c015e42a9604e1dcff8aa33bd4accda2814b404187dc194f2ffa8b10ff0cb227e1e11b50d1747b7a3b1d759de2f1b60a7859bbc295cd2ba3cb5b6e26356cb768c973c74765ed97358bbdbbe0a99e146f7d5a9baae9651b5b0dee8e7776bae5c53771fd21c5290cac022ac399e9486de6104363a35a47175a576b3e3ffeb3828e6f4639d70392e12ab79be045fcf28a9ed8348b8d839a161a93d1a544a17286a2fcdb3d0d7470f76d6589bc6517bfabee9c74684f7338e853de9629408441451e778b4103b3898362788015e6cfd36bc4948ff4609a56485079e0ab94f71e3b889314d3003fa4da7295237e075abfb2949d91ae559d0979919afbd4a37fcad1ebf8e931856603257ce1f8db30aab15f37ab127548d537834b912d6b5a6240071b83cf01e3f84af402fee32de07c694e812f53ef848dd136ca261f890a2f8a57ff7d2d913a3e029cf20c88bb13913f69c9828c1224b0d5a8d774e45e973d070e76019fe6350dd9302da98549d3d28c22a31c73a58a091b5507626686003b0e4b7501ec4eee18e4aa2d9ba353d90ce2e6a03cbe29aeea6dcd659e1e73b45340972c3053793295b12b744e959c61a6ba2e8bb0c25abf6f67d1bcf71a924a965fb8b60d1d745bc417db67e4b32b7579e0de6607afe31d8ed024edb0ec7174a06e8c2eb179951459ea8fa923ffcd7d2c792232373673bd2cfb8be203505b5dce196570b4b34d81a6ead354ad2c90fd963a1338e71e0103ad9cf7a5d358e10942284c3522297f6db8146d293650453db067499a9a3b9851f988ed69ec7c891d0126049a9f97251b8eeee0cf987bf65521ababa852167f804ca273cafe8e56e4eebebe51eb0904f8056cec0c9a39cf1d43902b5614230152ba4dff717780bab5ba34dec17d1966ddf4da80ee8f295ed749026fbffdf966657eba72fedf53062da47c6245fc87384711fdbb0ae4377a3b908dfe94049d964c57c7ac929e997706301d9c6ebcdbdb2ff43bb96dd88bdc77b755824a23fbb999acc47d415baa4a22c879cd5442776ddb0056bbb3a41e6b8aa77dd8171ba6066af8d02758e3efd77ed9ebe01f3bd7df0433de29e043fadcf5cabab7388ed76e88110c343fa6a1f6aef8619ab6f03717b9e68f06b1f77dff1793835204895538729ae094f47979f88250726b7bcdebe6d2959ef71baced92095cda75b6d2b5d670fd67e61076248869d989c4b467786c8ed630271f34633f98bf576d46fe6c39596aca41d3efaa2859de831fc709fd537af72e01d57331c99e2748ec6280b967bd6334745ddad1612bcdb99e27bccca4dbfad8e5136fa61b61882a8e0df17786f9d82deeb9088ea63349691bae8dd023b499c87b4fa0b89a529ef89335a60783cea8973caa3772384a51611fe98cd766e6d962380ed7fe27ca1d7f651efe60b1156248a0cb2d98a0dfd20f036aba32034e134d81639420404b7261a878bb361af17d2f7eb2c74eada4903502d53c94cd297e9a7116ec4f047fb79808ca90de1a75a045a6e1ecdc91e6bfb03d449ef656e6e9412750c1351eb242d5564270b33af4435951d20cb7adf0d645a4c661bfcfa0dd4bd9b296da7cb3712eb84836b56ef4cbeb90213aab40766299452c7bead7b934dcac2b7c26e809d5dfbdc04d843def04344803e9d72640c94924d6f3cfa57bda1072b8d9680f8b8fdc9015b1fd41ec5cd16527c07b8dbe3f87f05a8066827ae412cf526724fe20bee38f854ea624eccf803308428a6a496540644dca1246b5b71f58f44e0dd84c53f248e4aba3d111212a3fe0bd7b5e1ed62aab3315c0bd4c0a6d79cf437155ed70d323e359a725c039faf72f85d4e3dfffbc2a5643b93619f13d3c05637cb90b3dae1ba85fa96dcdbaa8a43e72f1820408f8bca0267dd759621cf5110019b4923f4256490a5b5345dce831573a486970baa1dd6c66106a5b7a4009aa9aac234798b718792954dc60f75a8e1b09a7accc4cfef50643cd0d6ee605669675f286c701f4492558470c92bc7839880d03950019caeaa0bf4da2a8108ead7bbf90b912ece93b22cb3607290b80895f31ccbfa94ab3fd08220fcaef20fbc056b9e5261d8274fce4b6f9f2dac6baacf010e435f1be76444218cc45d8a1bad41db3f274745d8b46d6aaa00b653f4385607708a9b70865f6a57df57084ed533cc6b4f2f99d358a6bcab9256375cd3e66e7064a623f8b839080fd82bcc898156c45f53e981c6e4f98506409dc1cb69131f5f5471e858b6b0d3a452967f08e4ef5fe05c26d992514098da239b5ddf06254cf9adfd1b8f8a0cbc9a466fd21daabf1c888fd19771c133e3a22590946170c333772e2ca2c781b4ab5d8ab00d94b6919559562bde61ed019c70aeb94120151d03819a795a6e472fdf5c410c54c92bc8d699e84d30f37f36d7d89ac7d7efc877e594f13c764747e4513b94db5aba8726e27b673fee73c5231011efafd68e5684d681dc4f1c59874ef3ea098fa1c2147a51e07089388a0c59c8afa64fcc04588e466e565a06eed7bc870b1873778befc20b7e861fa132acd99469d17672ab156b9824fa8e7b7bcca72902e280ef735b619ba615d30bde996c30131702902437c21e803f89cbdfd5444941290e366aaa872d279dbcb4c41c1126cccbe8acdfdf0c9a0a414ffdf503019ebef5118ea50cd1e14ba18907257174a7e01d440dac130768bcd49df9b53946f83b7d9bc4e2623d89c649104fd0665a05b5fd33648cafb6bc42252b5e4af877582df49cc58600c1df79b38da5340824c4c3a040b9ca0ea9b90fc189c3c08af83c72296cb45d395eeb2a124e77c41127834d6340d6174e8b0d3d91a48ecafd5bf5ed182fb69ed7d368bb30e0fc839adba264f767f5d1b3e4590390cf7f2064fb8c218476b17d266febd40d810efe07565c4d5b385b81b2b32b27773980ed36e9a1629e273cabe20168710f67331d888981f6bc1856de22a96b5378d21150b2f059572eb752a942e479794b79de5381bd448b4f24234d071b4c2e4105e03f4ae9abd665edf93da39acc97beacc586e1caf6c6dafd57f8010deaebe5d1fbe3b5bba9b28a076b834fafc001538e66a181ace0bf920adca62c7116b2812ed0c25a13bdc67175272d7b4fd3f845bb7c80ab757cd41ff8e68801050c209b2475371774f132cf8673b2a86d8b7c36b0c271308e68faddcf66f4095de06327565b43005d2aa824205dcb4085a7d32ed6104d17287952b9b4f708f01e5f92c44ebb8fb1626f9fa2a216f7db121ae5743535f7b7e7773be4d736d518504f2fa45085c2cc8fe0ed29f12c195685904d084615985f986ebef52cc20e97068039569ad715a6a27e1f436fbbb67dd73fd355e581404ddac85f53e112e43da4523bf1e97f4fb114079c402f72d14856a319e600ebfbb01c74ef4b1e463377ea575e93aac3b04b69dc06f334aaa60ec06ade1cb7b28a72c0e07bd104fce03941538b3a6f400987d24822759ba17b80ada344fd2f24183f8c7b16775ad6316330864a160d899cbe32ff24b86c5969480c88e4b486ec65812ace86fdb89a4248a592275f1da60a1064cca4ed3b955717f484951914878c40190e58ccc17668bf107273dca55f0cd039c1a22de71ce855191d3e7f34a9bd111ba18d0e71cafecd4bfbe2e3b1dfae95da168e82f44d780c4a8b26beb59fee6f7fc6f4f36b61f711ec4e9e006a4fe4c16b34c6458b5b910e2593ad2cb7e40fa5a5022c56a7e0266b5394e8c10fb0a14c49b68fafd095f53b7b7e4391bc4020151fef5d4ca7faf6451e1717ae24efccec4957a2b855517d430553e9e8bcdbdb521296774d7cc40a5faa7e620fec8171f8aabfc91dde2f52de07640b96b6d043078202d2ff709bbd0a6ebf867751657189944ec077b3db93ca69b6257469617aa7cd2d70367a99f600c0e6572e1b0470b4512e2d044fcf0ce3f2c07a22e5629725d5eabeeb9f1d1658b8acdf55ba24d9c6d1d5026ffa963f871b993f92d3fb3f0d3c1a61c09472f3d41ce6d45f228c29e49b4800a1edb807d7a2299a34dd32b010ee49f2583db9d6ba254789dab83dfe9cc085ad502482406d6c1daddef1afd7122410f040ff1aa64ceb76b48f40076623ddc0964b4f6e41d60737311a745234c6cce896460e56f29bac4ddae3da27468734a9a3be9b64232ca6f75aa8e095e014c02fedb49cf33f57446b3df496ed7993cc2dbdbf27362936ed1abae3d0f4686c008d1ff6edb45752b39b409b3dc3ee844e3b1127fd90009a7a13fc38aa905a498c070c53cee00822b92dd3c2903f12a2c4cf65b9cd9c8dde7a8127218c6cb36307a09da501caf87461f8367efb75a382764b5a25a6eebc66281f684226c8003f615e94a8b59698f580f1aa935e13f7d7db529850d1540610b5ef34899a64ed1092e0902f257df96ecc24b54aaf3c3202a3f24ee9e3777703d9d9d741eb0c6c97752237d34a86d0b132ca93dcc74b4b5e7fbaa8c447ae495d76da57d5006f1c768bfe3f9a0e64d9de296313fb1c459beef65a8993b47d3c9667013177f8a8d9fbf93801fe5814702b1e6e6e1f645534105d32123edd578220672a17f500987fa7a09557511c990b61b3f8ec5f7d60b4f3b38d634d83b922cf46388e570db835ef068c64e29d01bf8582bcd02037dc6e75b740c3f8ad57bb83c5b74874c03e5f41c71308c3d708c2ff39c51aad6f9da5fef2806d99dd28c1be9a8b9ca5e950abf1d3c271b95d0f660abb945e9e19dfdcfe12900b6f4717301528dfe689ba3384adf050b61670912a932a4e2aa690172e241a0d3fc292094860f7717d7b5bcbfd6b89b667424272afe087f5e5d5feafc239e0d09ef4f8da3210ab89e82f8b207410e311c5b708c20b452749d8aff7d0a4bb41f7560545355c5a2ec747b1152202f90e29794853e4f075336348e3150f200e77fc3c5b7eaa607a7eff454d2fd199e1112c0b3f39bd1186eb97241112bc49d4f0556a0a0d2f4d43aa18ce2fb0461560a492b71c3ab877b0c932d76af5ba31744fe2688f37a3e332ca851364df7054b45080f02da936b1247f9d8c210a598158c3cdb88fb38ca588611905b56ecf61df355421e4032533cbf4b9f950b7f88dedd955e5b5186b115ee2dc4c1632826e3dbd72c8320302c81608df864b8baf98faff77d7371e7797b2c64e7007f4b38a1fbb0a4c4efef3e264d64e2b9f800a43eea5158132c1c9af5c589badd07f519c514c18b9fecb86208970e4406324224d3c99f93bc12d73ec95f971b5a6d707851293d75bb6d6793b1c008e974bf68ebf5b634fe88e7ddf2ef6578c4c36cb8dfa74d08265080e65e8f8d91c6d712f691d7ed1bcac0f9e01e7cba0d5d8db13a10527102eece69e5abb69c2dbb3a2594ae5b16855afbd19c0f8ef82bf2623cbc9560b3e06d3058be688a0e1a87a41912946a63ea188b41b46efa371ee6bd8671768b608eed83567934aab9430db044e0405afdfbd3637317b004e29153cfe419ddd8f0c1a64f0adb9c45d5b7f9fd6d1f47259b55212626ab414c6ca30a3bfef964c084f9a5eb8c96a306bc78c6dcb8f0caa01f1b58477268186671334ceadfbe52d70679087d9c3f33fdffb2275d927e9856c7260db71617d90ddbcb7392483402f55e2728812d4df6d90120bf02d78d411888e09a07ace40dbe16c7f13ce519b3dc98933d6d9ae04a4dd49890b9c9e7e5caa5ee1089ceec6b93bf8536462378298da3182c3165e2acdaaa71c83fc29037e5c8608a2a8f9052f118bdd186c3c5659d8bcfd75dec99f55f0bed51ba2e3a77061de82f751f2c85fc7c0fd8233de7793765690231e48dd02e891575f96547564e32dcb67fd5496876527866fb955c87863cac450bd68fba76156f4d66aabcf80dabfc509726e9dcb6a12ae135c3d25f305cdb2daf88d87de8c7289f27e204ed81187f3750bf9b89d2b614fc56b56547ca81b8e7804b8f73fda6dc8518144ba551fab5be4c0ff559224d6b89a5322c0aa9b68973df366d6d46188a293e94ebd19e6a3671fbbf341009b94b0378995fbecc1fbf3250faacb8a1de9e17d395c63cd5f5b662e113a324bbc4362d372c1eb433e1ca77a99a752c6b680bcd936beebb791866e3a8fde999668885fa9c5f796b0d56fa4517d8d5be8cb725b8442ef3c3283937135405822105f8d405794f4a74248063e8851ab438c3abfc6c3f7382fe21effd263a0f8dd430f6be90924cf2d1110e68e1b1ac6d5a20df34a494624545d04c6c58535a98a24f33f9d7758c2d575673ccf9678d8e27c1350178eeeb65a1301adc050f4d6c3711ed1adb02e6617f7e877c0900cba48f09b68d99627c9cc8b8320be5f83daea3071c6c8519eda3d7a3aae7b5cb93819bfa20383bd2a35e516a8d483f94d3670bf1c253593b115cfe76e80676690c4b26f889ff0f4381472219f916bb2c53f65c569f3be15d1df14f90563f7f6e17c8bea76e4b7369f5135b83160b7eba499e4f04ead173110faeb7dbed5e0eccf5ee4b98060cc6064b644b9fb5d48ea84aaf8a535ba76fee068aa8811846361fca472219031f18ff3274c6a29c981a5f78a5297be926618018e2becbdd459a36548c1c66f767bb0538d8ff906bc27454c4eb07b7df2e01b01cf1fe3fc1348590e7e78400c613fba865ff63a6d9509cbef9c043849308baea8173df896cde21d896559ac0c4fc6e38c4a5dc18bb768f929208e71a0f2e68e2ae7e7eae531915319834c06ee9bc04539367ff2f667eed032987300f4a2965ec05a860072698644af0ca01244d70d6197715f384d0c766b7f8c63db299b678cb5b36963ed5ad18bd8793fb0a7276d00363e7b0f3f9607f0b812b18224df27fc64de0c43325f7eeb1e830a21387e668813dac2e9a1198c99fdf06c7f67bb663352ca8e7960c7592e6aabca3f406da8cf8cd1fb1e96e5b633a1070964eafed7ce9633801bd1162df79d526bed58afe9ca6de911726686b6f28bc92d1b73f529ea7021ed2a612609a072d1d7e8167314847db29c9b3b6bb05b01235adbb00a45fdd04a32e0ca10b38014be254e37c7037c15d44492392b337ebb4c2aa708d4eac300270ab19035701ce740d5ac495c814eab18abf278f03be3ad035bcc34baaa3ed77daba3658b2722aac80dabb478dcc85137dc277c8dabf9ef207861d983a937be0fab59da91fce5ec12568b5ab93edec566fd7aa6029abb21954875a48f130126dc5f26e77facb852ed341f42c708e919950b1334fccc7ea86169148387461b9c629c49634f06a638f13defb6bab960d4987d659cf96da92d581dfea35c3c41f64290a15450415c779988028f76a669f3c12cf10f531810390284cb990c18ca9bf67739252f534fbd294290e5767062a5764c937e56c88932b4177c76f9eb2ffc571c7100e7d58ffbf23a3291397aa132382477d7876eba4ed0bba678afcb965cafaa913ae697215a6d78b41eb9fccb0cf20cee282caffe092aee335e56facfb12424f81c74792b6400271326cc9ae2acee03289ac3bd8f3ab22bdf4f596b7b183d261b24f2320cabf42866c4b63c480c7945655b9d17a529c309d5b0c2c09e01dbf1277a669fab415ce3418f96fb6121be56a791fecf4c519797bc6646691bd2e7c5ef8fcfe6bac769791aae830b5db8b1efe617351b9e778bb1c912699b560f4951d1645aaedd5865d5f143ea99fccf7cf585b0b73d86e58edff4b3f9d77534eb3a9b9bd2c8a65cb077f23b7e69fe8c0d45142985e7a312eb7b82518c145f9484b676ad1757290cdf0fe15b17a359871c2dbb49d82d9ac9c15d6bbace8559284d454da8c11cc907677ff18c796e72e5dd6e90ca7be65dda9b6f26dcc73db313f927cf18d05e80536bb422683c26325db90bb2f66c9403f2f9f85b44de5c06606f13219e07d443833820c5ae6689c694b6600f30baa055e0641676b8e9e63cfbd2ac932f0fc4e43db0c2b93f4a3be40915e30adcf5bc97d920cd2606715ebcf82f99cedb50dcb14482746f647f6c26340d5c05aeda5eb2911f870a0216530f8ac431adba13c8884587926d85fb03e985e7a3e994ba52b8dbbeccbae9b46ae9d06818575ff9737683fb45d42da39aa747a7c815466cf76ae08ad6436160bc536f5891db23e6d527ad8ce03f016acfb3212f5ee16e3c2d5bce97e21cb47d6993d92b807d375d26c7ea795acb3287a4e6ed52e499de8cd8809fe9ed5f71c1e3a28e06d01466ceac95280c3c65243f25921f84ce883f905bd6d077a680768ae0abc5805a03d6663f2f172f61a269e48fc5d6102efde08663265e4bbb6df8fcb58eceb4f53ebe749237c6099d973f9e05e8c3263d597dadef7238b61886d8e3c79a1d8ae240ec5f1aa412efce8e4ecb1c591287eaa3b10e9378d8e9823b18af5a78094f2850fa7e95cac428220bbd5e051a10436f1927eaaa58f1d9522f448c583195c7cafb3e4e7a900bcb208739a1581884b93850ee48561af857d5082f79d4754a22b70f35f883d227ce9c7d33f323455a30a4d1b240be52e7334d4416a05dfaf856537672435b695cfd2aa3100b8a52bc53fb7efb37b63f479b689872654433a09f24e6fb8d071c9f6cca47aa6a70b57f1cd6c660710a33e9292b63828f78fe1cf9135793d87fe9eb7efb7d06d9910aadcb67f03e92b041b45b57dda27aced09ffec49a449e8173df6b5c44e9fafdfa958dbaa456eb3d2bee6f07145ec95f10097509d5e3211773c4eb1c4f969e40e69beee8da2f947c20c0618f6258172dafc427770e5ce65b45fecadf7cc914d683ab39c768c55d9529f4183e29f948677d84e27cafb2a0de60cfc8cbfc599b2cf1f340f5f2a63f7839d6b46fd0c6039517526df25edda2805fffca93b3e0f558281b64b31ad08866df750d929e0d0e9ea0a09bb5b860a7cdd9a3aeeb0123c4826bf45a5c8d3c61004ad5c38be1793102b69e3ce66da170a15fb714e9502eb9dd7cbbdbae8e9bcdbd9f87ba8cb160119546bd647c20c507c16b3062349f3e21cc96fea879647e442e5cde52f2872f03f3878b37750cd7c64b6b073290b6081e04bd4395306492a3c8f69666b55f3d6d86987e34f0fa66f439f4d5653ee0343e4128260526ee6130d3d47a2b14a3cf2145b201585228a61c30977c4110e0412168250806ff108f5cbb8fef2f02db5add45d8523e01aec5e8093e4c52ca85254701a6bbd0320f0cad6bfd85f046d5a72969a86b85eaecd712aaddcbe2037250ae3b48051397013e423422a23ad1886c20328e64bb4b6f9f2f3c2bf5dcd3abb122ff3626f279705db654c9856ea0b399cb80d5ffbfce766b188560a553c7dd24d80b47a9317c2052fe3ee626a13fdfcea6c0c1b205ce66d6efb78e5c3fd6cae79db38ecaddec67840de2a7ba14f4a36f6790c7b2ba14532c0f8d530362de86f2062ac7d449424ee47609a30f4c4ed0806002eb45f565e5739fd0e346cb033b82d059ae7c32ac37a8acde5a5b36b9fa8c785341902dea2dae5fc5166a6297f258f3b56768aa2403615d25a0f3796dd0720d40e7924008f2b4dee50aff61097373af70ed500b8d04852ee59ab0b3b455c3365dc32627bd2e94df6a8196a55d28cc00ada80d144e0764ab0681aa7bcf069f412630f133c353a2a4a0b07f089f99d31e4a35a0235273967291651eb0d78cf0c21cf791ee16034a23016c6c029f53893baf79b2945980667d67f06d5a69e32cefa5689599c7b255db7d9a87dd0894ea50b74e18cecc985f4707dbe42a2fa833bc9e6a2ce85f31d64816a02588c7117539ac83f05575df2bb1c6044f26719952be4cd49c5decf558fab8410f7fb8ff27acaf771aa87730894cf12b4aa2fb2436690f38487e6b808e708d8cbdb256a0c6d06aeeeab78743c673f491c10d9530bf3c36f1273678fe0a3425dcaed32020b82816a8f1eb57bdd320f58ea9c22ffb32b5a88a5f92f9afbec7a9ccf5b9c45bb67adb3add6b8da41f49ecf3ef00e81ca2c51f7bdaacb0f0147540b46a34d277bed7521a42eb837267a58df83cf8c89a839605843962e28fb3e5a463dfaef53f333f5e0cfe09953fd3700874c368e498b7548e8592373397b4d5fb0bad8587ec8bd75469dba091ebd24abdcdcd335a426f44c332a10d2a79552e5a229561da3841767f19bd385c066f50e523f99bb93a2935c2a15679638af33f504a7b97085b75857d1a89a1dae8b8d508ba6f9816527b6ae9ba48d6234ced15456d1d730e0150773db31d3eb9675da3b2243daf06ba3e321e98208c6ed50963989cfd93369c71addfde75c38d038c11304d2801ca6b4ee57a95dce7844ba150bb3b844371d76e9939a5cf0d151160400db4a976eab8db6c99fb39ef96ef60094c0bc2c3f8c59265bce9ded0623461212e6a11e631580e68c00e9a460c34462927ec725a247d777b5d646a0f29adec37e8ca4a9e25b291ce0af0cd836e35202976b9bc8a230c747ec67d8c9df32ed94fc8a0a53cd8ac437428936cc6cceaa4cbff78c134260fa6b96ab97c5c82512b0eaa35916f19f20b5e32da94605188e9621fdf4b2931c6f5ccefd7a13153d1d5ab04ed2793c735103e14eb72d2d10665bcf3e6212b8bef7bbf47bd36bc54cccb315563ff7a2dc08a63b0c873dbd3ea0696027e002d4977d42be04e148606decffcce2edb512e1d3dcfd6b6e3c7d61e79c115de8e9215bc2f6417198256358c0987b81c4a9155cdcfc1f4217f88b368f0d3ede1b0bf424d24dcb81d28c72eaad7e523c1eb61d7647951534c42b842f1e6043f40e2036fc175998b6349941bd18558ff30e1de17eddc033a7a801ac8b44bfee6087c629a19dc3ffd3fb0dd998a06bba5800a1342cd38e1d53702a8480ee03843c4035f65d7cf6d04f7f3ee5e9ce83207be21d413d93ea368da1520d4e800d6aff9ed66b761ba0433b8204f87204053a69721398b6390d382407f30cab37d790e645064efae77dcae33e377411d3fe5ca7e83a2d65631bb35a247ec0b41009c1fc75a45c23bd4d616b0d5fc4c09d117f27e97e3881bba0b855a90367977bc3dde9232bd857d8fa9fcc138969e9062f1e924f3a8e728e7b343586153fc0f088caf394281e3817b504eb256184fa14e442949fce99cf975c29cea4bf3d792810a1a8873916833db987b0f509243dcf5f8afcc41393923aad045698d693e3cd0b599091a507619322081414d645de776361f79496b7d742c99ae57a93576fe1f1a6600e470073eceb56dfbaf546ef90e7d888481a99a990480fb8051d29ed9c90fc21683e1e3c10064d72f738f9257be5270ebe9fc496a209ef43eb603c08fbe994a27fdeb008d97c0dad7a342ba40d8a69c95ac5b01e8e862c67d6e38a93b8d9a4affeff3a4f1d46209fd4ce4ffdd6c3cc0a70f5d0e5cb05c1f34045176b6e734e8e59df86b447256d82be63ca14e437cd90c98012903ec6ce3a91706f45a61bf81b94b481eb1920fd8906430db3e58502258167934b6281ca83cdb3907b63494c593f1018ab1450e536ae49132278b2482518555963767b24dcfa7037ecf4f7e5f48b4a4124c0f282662132089584cff08b54f859ae008ec9b86cc8dedd48cf3567175a3fa2607eb354c19d76de548a6ec6aabd36c8e3a142be0117ea4996fd73e805858004913459382a460a5c9524b76f524122a4896db2774a33f4c89524938604a40402cf74f5453708a45b98b9165d766768c2fab15328d950cfc8f11f162437eed780fdacf075f2be66e4c5d51cddc0c6aec8ae60cc4a66bb937737ab4d3b9f33bd7e7325d17abfb2466e5a303e9e0acc982f5084c46c82084ce40f59c9b11dfdeb42973bd13931e11dde20cdeef4dd006ef2fa2618d31cf574ff383856509f998a2b72fe17e5cd642681f6d16a7ebbb5b5c974dbe31b3a2c984de707fc8b7e966bf01c46721221b314a4b9903c35ff0fe646ccf40a1e8f6715f3dfb712bc6a33a552bb57cd20c280cad98377f1103c3e487f48280c927efb58f7ff3de9651d29076d2417ecf5aa59bc51d886dc6d4c3fba9de1a3d40b468a7532077530acedea7f73502c624352b64ff63382f2f6dfa4f0d233ccbc43e99581951f74cc65c878f898903dbb862bd83be29fded7fa8e3f72d9c62c9d1c544edf75650b904b25f382b3c085d5c6acd2539056c0e84032d3c1b37b08bbd59f801aab8362debb450cd3513cc0030c23d0814ba2ae059b2d56360475d685c5d8d2e5e770b8604b2ff4b161eb153ad1cd507c958ecc1084c73e3ec712d1b00607e5b413b10e80c4e761550f7340cd8b1fca847a01a4d112f3186dc7c90d1d9d30a96031d08ca0cf067070cef95eeb309a94fa1054e7f154522a286577f8792a80d1c2ade6264800fbf0955f1dfb30c8b089319d2eaaf3faf1679648a847f056067cb88eeb9e6375df4362d7f7628b6b9aa37c35094e89a193e1014c190d98d5b4f6a4814c563dc6b433901c800db7305f706457ad4bc420854f5f6038db8e3f85fd12b5d8c2177d04567b4637cec55fb6d62a46dd13f92c2ed1fa5fc822e514fbca4fb9fd55b5fc632e300973c06fcce827f44de5930e05f9ebce3b52f6f80afbbacd66fee713b1e1b9b1c1437ebbd5183efb606ea51bcbc969064e0b524c7def7f810ba2fe2541034090d4bb743fe6bac562d742cc9d4d09befca5f45eea3db1e700128347ed99d3acdd90e14adb69aab3210f39193e78c198731c0ad784fff3fdf66c2aa8143095c3224718743a4a17f71c6e78e6df6620391b1a5ab466d0d8c4b53d71f577d65d7222b3b5c29b29b8b4acb893bf2a6886efedf50f6f6bb93e6ca4328b8141c725be11e75f8a181b22d0fb43b408475e90e4258f0df26589e1bcf5b95c6af0e1162c11afee67b6ce0ca024e25807823cb08f42381cc8eb14ca0547a57389dd054aeb774744d6ca8856288790376ef4b5d12e67b83a1ec1a26f5a620449557e5b97c4c7823381df2cb6eb701932adfaf61a9ad7970869f33a5fb4af55287cd34c0d10a1e6f6bb21a0a30fdf21f7c1856a55ebc40d1e49e3b3c07b431d2d3c3746803f5e9c0cba34477246572295bf8fd9f37919040db1ac679e7e7d70400a519da1fad89f196e1243be2524ca95c54ee08b35fb7c86447fee3c9d99944cb78f5a5cbcb2202d517dce40cbecf37a66ed7320aa096e8f01d1d70b735a3f31d98c3309499fc25e7baa840a56914752d83d841d6495e797510e573ce5c6841c731a6de58713fe9c7a8781dbded3ca03d4c5118dd630f1f5e9f8eeced9839adca9202ab35ebfd711bcdfefcd290fa700fff23b1797a67a74f25f641eff75d73ec0cfcddd398363078a1f718c6c0ca28770405830bf27b6c9551059f98de5c9ae093a1b10a63d115bc19b9b64bf317b51fc7d26cf691cff2f55c1d681563c7e0ef2575e711969083ea979ed933d490e3b974245819fe22b11a681e8cd9ae5dbdd49178dfec40cc04c173f481b4e01b95e36ca58a36375ebf2813348383073d95a68ec4ff6bf2165fa97c7883d441c29ba70cf7253efaa910c9609c3b775cb0ee4c725737514aca7e2070c58aa2031ffe622c52a16d86da53e204e24ea8f431e71256cc4bef4e30db04f3a731d3cf9694454b09bf3dabe78571d6c1db468681fdc7b75cb3ec9ad623bdabef3717e45cc15d4d2fbde852ab6db9405da39fa8d9a292c886abc7b854c8d4bf72f21a666a45b791a4af7afaddd9e766fa858318382a7890c1707ec6ec6884adc9aeaac8c74e9d8e3438ea5dbb92e2011dddda1472031965a00312a04737f8ef2e56f20abedb9fe62e31498dd231a14211ede9ece8caab90fbc22654e9cef045e5d1e1325f32ba471cc92d1d4c2797a1df5102ea83b100dbf94b6ce57c981a329f63fb4521818cecde5172d84752dc471cd3758a2d42d5279b8f76cbf5c035a1fc88fcfa20b8fd80975f17f48320c1b4f23983ed508fe08334c09fae9c80d2d33bb59b9e49d59d80d48c5c752e93c4b0535e58dcd8af74516cfc6821b3ef6e5abba07641f40c357ebe4c4c15f86036a365639fb534991c76dd02f88e0e77138a0c30dac2679af4f31091d36df920ea8bec0e38fc4df9a8c275f8ed396ef73707b0d6fbf3fd8453d98960d15b33af75c5bacafefbbd8c5bc2f8a62d4086c6fff828dc01f795d22d927dda54f8b67ec1df0031a305844752647e3c8a724dfb6ac14445da1541c7e33f2bdf4dc4082a0d8df5f354a18136e319c13d94ef765ab3e3b4f3470f03e846d6948a4e68fc5eb9220aa1f15aea9128b765c73b7da063af9c8ea0c99c8a300673059f5ec78811413b8c1e539f25a2a533f4e9cf276630ccb1bca16fd9732d3ae4faa4bf4e9ef17b006ba946cbe95f381b3a85d22989de502ec3960ee94edab5b3de519a994bc85f15090cc6e26f4048eeb5022fad89f92691a5eca41cfd0f5724e0e8f1806e9666df817a7f1ce8be4239e491c520a25f6bd1d2d3d7056f5c7b3db9513ef890bf9b0a6fc996536129cbc656e6d7e0e0b5452bc110c3bcb8ff7fb134ca6e418e38f8860c3259f3159a4bfc09410c60e071095d34eb55a5ff36438f118a9c424b930950557ddf0484a9d42ebccc693a1452c8d0c4fb8b65d6d3d4f6c22c19bf9ac72cbf74ca66b81d98f127afedc44af98f7568a0c048b0dafb630ab467e3d5653126f3013e047efeb691b7c1aa545dcb395299edc30f45c55b055ed2e0ed3a9abe2b298038bd7367f7c20cc9b79097d348c22fb4d395530dae4a341bbbfaeddf26d3c1b413b9674d537abc8e843f374bf54026aee633f9ccc3d2ac61139bca923afab5060d4eeeacb793e78cdcbe8642e52d461eec2e0d1ed0938a9a6cb8b3ad41a614848913dbeb44ae9d3de020c7d4d0020a4ee231cd3525b0e77922cd6e3ec0a9432b7d7c68afd0bd3c17d46965fe989ef684982202335493ea2e091705f5106b9acf3ab046ffbee3fdee1372b5b83388bcbeff168b833d936fdb8bdafbc1608afa240d53a5983cc0145ae65e3d4f917fd8b1449024b39b547f0f5d1fdd6fb7b28d6c3537ccb8324bdda69776bc10ed38ff7b7872f44ebfcb2333d3e9f74be287f98f80c1c85b6138cf5f982b82062bd156fe3dd6588bb8a42365836a3bf09860ef4725bbfe8eced6452d9a36fc606ec664f3e57bc591d01930269bb71493a36062758e86c2dadce24f8e70dd6b24b6fc9aa86f589307dd5f4f1919f9d1cabce0fbec940e929c69b94e1f7e7462099ac2d051334c24db59eb330d05f9a68fbde4867507b0b1b33e6a1b36a6539ac36b4037c1f2f6ae3cb4991cd38ed1b6ce8f174a5a800b6d124e205dc0ae69c5e3dab549a4bfa3b362ab60175929905900fb487e964b7762e4ee5f8cb5881e4c1d8891dbf2347dab9ae4f5e99892f663f538007a4a587dc5a783dd1654a9ca2fdf550967ce94df8894ce3bca34580845dd87e0d7eb79b55cba49f8842ff77ae07c74cb88003f2268e4dd005b8b0272152eaebef9c2011361efe531310d173402a5c1abd26520aaf820ac4915361df8b0febcf57226c017d72a2392cf28b2136263202ee1e433f83cf045e4b4c39a33ef2592f7e04cbfb219d9324742c7beb524ffbdd56e3a9884f7cd5e511e92eeb7eba29116199c4ca2bd540493bfffd00210195dc37ba2773ad6d2f325b1a7800f4ea39e027a2e99bd640bf4515ce3bf5baf0806c4b4d352fb1e4dc1e04818c37245bddc2bf9fa89f4e168940d63fab45a2852a13a7f97906e6970ce63114410dd5117319f039ec4805ec39a48719226ebb3ac400a92f9ab10a0d99cc32fa2e1c914ce055de8a973bdf51627c87ec827a11dc3ab47007ecf73c855a181d82c1d812870c7697f80f0facb55ebc4eb2f0c41ea508499ff2f1a59ec2bbf8a6d6331c475397d65638b1c8785b161718b9af11687a47e2d98f14a4faf19a60feefa25ff7e7b0b5f9050f56dd22e48ef30ec96274999735ed981e2dc6d56dd9cbbab8e6fe4527f3d0b1876fa3f22456331094905126a010ebe9f261a116d85fcabbcc29a2dcfb5f9d62b15349a8beae97fe6a95ab094a525aaafcaa48bf0302ad9c9fbb40df79d51b5e0007e48eab6880493ec35ce65b60ab9326771fa2c8011581be098b20217d25146b9c48e156aa03fc6c329a71fa06199d575e4f01aac53a697e7b8409a2ca5702031767cc589e10205a4fe2fc4a25ef863264225f29a8702654a75e3226a2c32d6cbef9682584a7586b0132e26b7f40a38a6062d68f37b37accab86e264326d9b983a654011acb106654d1c0d14cb2c151a6f6988b1d288b3ad3eacbebdc2cfb357f125fc5c3e79aefca480cae4251623e12a18dd313f8e1db1cee4331ab727628c049db82b2f5646a043438ba93870615d0f646c8d472c3494b90fabd0be7d3d62df4e4dbd94cba27010d7758d0d41977c10afaf9e44815ff4e3a489699b007f71e27bd0c55d6b47400e8c4598940a16c3cddaf06ecda2ee406512cdaa11abc22a032853d052a9b06c5aefe1443001a7d797adc187591d232d87e7afa6561dd0ad92217c09ea9880e21ec2b9d2c6219e312702455a73b1edb1c89ffba0a0afdbb159dac921f31f18d12963c3ef2abb25ed4d96cc739b3bab06d0f7fda57b7201be120dde7124c2faa3ebd5c5e704accd4c5c76893815058586b27ad953f3186e71052f4c8051abe208c14d1a36991080d0ab760ca32e2c56e9259d0ca6c773410aa88afd40c47b84018344527f41ea2ce9f305a15a1e78e3b48220dd071a41231955a52b853aae12de6cbf4dbf683cbec9d2921d23569edffe7353b142d542833954e8abb61cbd6915bc3e2eedbf6682d152302e767c81377e5b25a9b7b65d2b45388ea4b72262cdaebabd9e61b22f48db0c259c47977b28374012111c7009ca6d88bece93421a70e0c2ab389f8d66296d4bed12e3e8419372a55cf488449c544a4b476cd972fba4a5d9c291bf3b8e0997b9028500b8141ba0e6db7ab8085e2a4c71f5f36faaf53c11e332debd7d48721f3e6d0c963fd50adca97dfb69db63b27542055fb27d8544147c31323c7be7eee6c2217f24907274e30512488ab1e9f719d7fc6fc55d0b09c0ed0a04a43f64a0812cc1b31e552f72555a590ba49b1073b1cb0d32fa6cb429056199ae10b219e3de3217cb6cffa0b0c39e8bc4dd17c3371e92c97fd5074a85d2e798287aff631702da6cf20586405b8e948087e252ddbb8fb8d9f20c490d6b5e3aa258b6bc714fdf6849ad7fd227ce09156a197569239f57d32d4baa6579fe9d9c15acfd00fac71d29aa71f03211a13a767296b9d8ee1a2161527833bc2bb932c86ce93d09dab6b660be08ac027db36b2f387961d7012770b1e4a8f5e8004c0f3edc18bc6f1be074fd499a2e787a8da819343f84d81f7823e394855aa5424877cc5003694a2a0a0c098a1b7226b22e9a8666e15f196034d000ded4db8222c9faffe246c0c6c6860de3cdc50744abef46c3d209e04459eaf638d16485dc5de74f27726558190445da698fdc2990a17fa4b807442f86953a5fab62ca440d7703fe8ceaa59302553bee7e7eb86ce650790bca948f9a96eca9547dc8998561f085c024d1006ef7b1e7792186d4a6401c095b75831f7c1315dfa0f2db289ef6697d08547e0041f63f1843752e8fa9234c73328901d72926371f130c37d59f852f9cbbcfcda44e190f4de677803de2e2695e020bce02475237f3b2da721dadd70bd497ed8ae87e6f9a271ca13ff68e8b8f8460ffb58ed22ec27c078f32fef211e9f4c69c9615931549ba5316f3e2bd0b1c7260d7f20ca8a475415ca124d59159ed64af9117fc4b44b09d0605b92339c373b818ced08fc3d8fe1b0d99fd39a1e86d449591304422249d9ded5f9046893cc97e5438bee50b91115e7c64c858f97ffdc124bbd9bb615b9d381c386d49ee3b268d109bf5d601e17948daefe481af9f7751347b08f48242fb6222711c574ae71d6489865662cf4167f3ee56fd291d690fe61b15ebdc5fb11e29039a8241dddfae1bcb45c653d02fbccbcd43b5b7a06051971bb778b00c07bd278dad362740c8b2448fc2c8104b2d81bc84e2eca1001ca64163255036a44a766e503cbbe2c9f2920546d5542eababe3a3671d7bbfa567de64f480c61e2ef58eb9eb56927b2d27fd63e9cb422f7f2b59957e7cd05683deba59605035049da9acc60305aba697b366bf6da637ba4ac1ca8d8bb9d6d253020e66ec417cb9eed5fd0d511defb11334682720997a7cdd9c04d6e6519a03c498beea4aef3c42bdc74bdb106e60ce45d2861efbd085106705bf4710a0126afc9d52d3ab59cad5dd74b6f44e6baff4e2f933b11c04f73f32b68de27246420abd229e434119f0d543818fd1330e6b256cf3bae09526859e2807fb02b44ebf256f70cc4716228d8bfe12fb5efa04413cd18ddd51ea2681cec16b31b0c4944e67c214c361c2898d6f76725aed95ab6a092f55ff59eb49e5159a0e9f74936da2d0f92c67eda4318d2cdc360c231355fc45bb79b379135e88067fd2f12dee4b25c6703c29b1d02669100d3ad3a6c81f1287f51a9cbbd39101f2c42007dbb53c6a591676ab62fe856563a916e238a8234fb54901dc1459d31e281eaa9bccf7ff4e31dde82bf6adc771d01fd8c1ff548181a439326b860f2ff3edc2adb1b0b79ed6a71daaae091dbb218cfd4fd45b98f7aa818ed414e73c381c5596fce9e913e867c251ab85059e10fa7c5f2210acd6a03d0285dab2c928685d7aa236e5b0a539824c4a65a7d4e3e0d324f660c9c53334e668f69819662d173ed810ba1ea8726042f0d0c11406d8127db28b6b58dcb738baee1eff65894d4a2d8fc6cb53e2b9b369d0f0b830b9891bd8ac9b604e489f0dd4ff3c8701ca014856e9699b154df843545d7f00dd10692719a9037a74ba4a3749184e4886a104799c1d6fd5b6de83742df0ae31e5d49df054dceb3d73a74eb2f0c78d553a3a0cea7e2c99700a2a5473406d82c747cc81525e6146f9690004eca444ae39a57dd45aa67278e304a13af2dc6d060726b4a69b23ecd2595c8d98b7b46498e2844811b89929138c919cd1a4d1175155d5c915ae70e10e7190e3d54fc816f393f92bc585288816815bdccf2ed665a61601bcd42ddaead9586949bee55d95643a5a0e64c9bba2d8682b3a787129600253ca17f3c709b746808df592ad6032a81c810a22493850e02a6ad32d4aed1c42f6ee88c2ce10e83738b1fad9e5bf3d969fb165bbed9e4837c6480c9119bba766121f42958056dba84118eeac28c095d2e6759f051f8101fa37066611274460422eab9f33a7fe3a025e1f30b9074416e1ee81d9107efbac3b24497e9eaaf9a149c690144e8818931e615b40f9063b97f4b66ee057a4c429d8524b71c1bf1313ba1199c7ec27c65dc2659d56e1829412bc01acbda2833b977e3878f886fcfcc6e1915e215414ce302f04efc49f518da7d326acf7aab6f55a619349548c1a5d4fdaee8396f65ae7c6158015799760b9dd63692c8b21af36421d39add3b442b879db37015fb790b8d956af7a447888765f2b080a49dd1dbc05ff2266701090f1226d877a5cd567e5f93af519252ff264387e09ff7d824fceb081080f4316c39c83311c40370735862ce3fad8d8d0de8135a61c9d248ddd2775138c5c6e03400401fafc09d27261a28bd5ff35e7974ab9022db3851fd3a463121da6f6c62bae66f4d2ac7bf75a14f29c58286a9d76cf1c4a99b579609b51c753a2c815d9619ee7ea4e5432aa2de45102f66eb171c4a4db37007a7f37311a7b68f4be1387e6ccabf4a38b9f9d416653c870e8d52ecfdbbcfc1f06304f1da8d82602f5157b78b253f9c606381bc223f401268f572e210858efeb69127718e214386fc850122cfdbb5acc7c68faa20d7a61be6f769c49d1fc6a6cfa64632c06a5955bc5576255673cbd64d052b135eb2be42920b3dda0bd87aef8b214b87948bbea320617fb8eb36330ca9286545b581d01006f591a90a1eb26e15a0053a7f43737dd32b44aeb7837ed6458067f7f6768b5a57ce81b766e5ba21bac3742b7f39ed13ea8847783e57140d4f743e18068e0189c286b1f2653f5dfdd024214422b05cc5fcdd16893fec113ce47bacb3ac55504b030578304f581116883a9adff3a7057fe42b093ac7e1c5832efe3f240ddf2f3619d85b15193f97bf9f52df0177c0c1eeac0a0dae5aa2a75c04400bbec0f608c5fe0d3795f5f4fefda4f4930d6c2bbb94058a2aa14d77166d63b3b9ea2961925ee99ae0b72cb0a44e855ed4458c5f4258604799fc137e593677075fe81a2c990f901bf92596084dc77e804d3a142cad42e5ce30850eddd8afbcf0b7f0907687ad4a5e424d0216bd6f0f6053feb9cef5d8edc7ab2c91d987d19aea38125fac2abea15a5ef668283b1f50021bdc319bade451c211f585ceb5a4b3ea3c0f9a292889ed496f57c86eae468cdd9edd06ed3425422ea3e3a9632737465814483bd6e199fdc3d5c52ceefda2236d229fb28cbf86da6732e7e84bfd17a1e3afea77afa81458c496e8c69550808f8a8723e3dac9b420ec5c24f536000ffcb2fd2ec834b23693e11d1b5f1a67d282f9d341a47ec3ecb0d8bbfa98da54ca5e6614d24617b62d74f9d6e79efc42186bec0752a7c2006624fa06b7fdcceff39e031e24f6d82725480ee5cffe738e7ede43d00b888608f6337741649dc9a21e754d919303e5a5ba18f640ec6fbca116a285965ca7ee8e085407b326836101135b026ec11bd88f6903619a245bf5f0254f64441baa46cb176c4869ed45fe0bfc35f9214b5063e32a158c2027adcf0623461525bf756d3dd06ec7b9967885612b3c834aa462671f1b453cf7d62ba2daeeb6905bd0c34024ddaa9380967d2dbfef4bb4c3e4d6edb7f3b404793bcd7ef5d413bcafb95c3a14e388fe68258bc71fe12a0a3de291b929ad20bb46b4e86926e61fd8c456bbf3e81509148c9fd8b551e9faa8c3183aa4dc84764d1a55b78457e5373abff258b1260e6d377d9a679050e4da861a1e63040fa0eb91fae81e1a1ec11501e5c6c09bccfd9b75d7b03241665cf267c8e5c30d10ccf6e0a2aa62627a1cd7ede89f6ce3c1ba80046f9a81c4a3d3414ab05ccded61fed892d23d59441a53a773ff38eeba225c439ae2a5eea6d5a64e819d53174a238f1d741c8321690def1f1cb52c9731308e3e7545833c7ae26304b61a3aa8d458184403da209052e30be859ee1c25d2f57528f9cd27d7d1d10ac5765e9524413d297b49f366438acb926ba67e2a36c76fdd687ee456370dc418d7640ef3ff7403f05fb80f0844a0e3cc149679778fc784f186a4969e30e4008936dd3ce4f671ea79f635f0460793feeb97d9275a66412cb87ad84dfa8907f4d1f690f2b1d42d33763882c764a8c91ec8b44424e07af353dfab4529afd9d75d292738a9f2b19ec690f9580f7818b5dd8901c491e3bf4e2a5d5d4694c415c1934aa8748c1d15436253b829c80655eca2429e392c475922298866dde11177db08a140862c0859e7b9f144d88ebc31bdaf96c775fda1031f303c6132b35e00ab7dd036f5bcbb5ffef296f3507141eb76deac03440543d9cbc3c2e364e2f1babb157cf92ce9ff9378cbd07c5a97cb0b0c6f837f17f71a782913701d6f9ff6f7bd19382877c303aa44e74594a25b6237db0d3b6cd636df55c92d58a7f89ee1ddd312e33e5fd9a49bc4a708224ff0c2f6bec734ff176d42b2c70718d8d9e183137a225d01b5332aef8ef81ec84df2b871ca91622d3089d35b7c4d3e5f97719ff17e013a9c189e7579df0e23d3c4651ca8d84fb3f67b518910ef6d205e7f9cd2a0b1feaa92f237c25062697cefe6ca4059cf1d42f16f741be9a9554ea8b7d6e63968fe4d65e32fdca1177a92891010d0c7c78e84f3d93ea8bf8a19f39b507cf90ed40775778dae5402d2a63b7a15a0781cbc7926937183cc4e2920f5ee50154600178531371b8f4d0c69d10ee8fefe548ebd0afcf4782d42b1032ce6aa545e4551e6d3ddb571ef87e69eb9eaf50cd2f049c435bda098e0b9d4d29297e3588ef6cd9d7bed103709a85196cf6b310b1bd5318937407f9e372b349e3a3b6a1086bbd23f9377013a4cd0db639371fcd60113d881b8a511d30bff798ee9615960c7ebbaa89a8531913713389699e14f9b4d55c4b8e445573ef77a1a0b4b87eb1b34c414391a2cb4b03f10e0c79c364c0b8ff07ee8d160fed332f72d615a791aea50ec9611274db59ccf18d42ae3f78726f21fa63eaa91db5db2115faf3cc3e61857997f58f330d6289b3ddd088a741f15eb5000cda81e65d683e784e46435186c2cef15dfce16bd82bede3420ffa1946c010192c123f7818f16f45a929f4f6dffc90a8beda35a9bb63b13fb0e54931b2eb4842697369c98816a409fc64eb175a357e3376d6f3ed6bcb016dc0e556d8f78ebe24f8bc736403c1f8e70575d1b4686044d00785fbd84a46cbef0e726045c4e7b3e3bbf1dc033a5320133cd67499567e1d02e28f079450da28a97a8684018deb91dee5ef6bc299211abe2858bb3fc2764ab1a259f34c890a5d66c39dcb9f0053662f282a37147d01fe878fb379f9fef85a20b9ceabe5a1d17a844561a3103f5160cf5d6ff115632a532e57c81c6980bb1b9b83a7159096eaf1a18265c966d6db7da28c7134f08d4e02808bb34899b4e0ac39a5ab584c2813ed619682dc895f5bd482aa39e989ee2b59fa60fec8797286302242d13bbd14afc6a06d1b858f91dc110029c707be864a6863c96ba1a3ce536860b9972e6cdf001a440db76a429fcadc120703e77bccc3ff10c79fdf24465f5b1e6dd6beddecae8acd24f9020b0ad3c3515e801d6034f26da398f85a0b218d26c8cef87d5c390e38d5cfc65cdeee16d4a28985f56b1f564ccac051614f14a4ea1a5b7fbcd5f29c64ec2aad69d61ecad39297e26187f7e9b6acb13f06324681d8c93bc1f0e9f43c668453dc824cbda437700615fd56d77cca962372fd0ea2722dab9cdff752ac68934320dd5fd37fa239d1fae316d8787ccd93d0d63954b4bdf0a57bbad86ad89d9a8fa8d60b5c66e69f14da68641b980f77aebc8423deec8a892fe0e18c3a6b33ebe4fb8ecf73a79fb220e2885622cb3db3f2fc1c38168fc64a415fd5cfa85be201f78d594dfae91a7e3df920132554c4ae6ce00b1dc933d79778788b6d1bc691a997444a3838bfe8c0adff54ba6fba04e7cda3f86d724ec9fbdfd4eed7adbf69c0ca443ffe96ef44125639e4978e65594874c7760627b5d8ad2815d6caea70537563abbcd90d0503af4c47fa959169067aafdba3619f66054de8fff10c769f392cf5ffac2f485f570ffe59e3a7eeb060005963ed2b7213e0856ea96bf34f2852aa28b61e1ba0dc2142e97b9c1609d93dd64839663d04d385e1b6bc7fe7262608375a6e71f4641ec0d5047c43db016de7c3351d6369c55a45f5bcecbccb9074ba715a7d1f5b35e7bcf389081f84b4d245eeb345d23a275bc09eb00db4fa1939d39531b53a9cb856e9968bd0e9260b4df4c01510f6503142f29dc87ebb8f2f7e68e670899ae730653459b6dfef81b777556096b3e3b0d33c3143fe349ecc27288ceaadab5aa2ad307ff399eb8eecb8d8781cababa3fffc16474e68c7fce0fc982ee098c4f415dca9421a42d87a37d83aff9091c0b4503b9ef3b36c4b766a125ab38af5d3737f18dc0f95f0b241a86de3426bbfee26b445e2b2cd4eda21b09afffe5163a62cf5f55cab65e9acc74548a3832405dd3965aaef84c7ad8f72f14d7de03d25f3f3223a527252ca8e790350c8d7ca4a09a7fb7e598af6e11839685d8f82fc44c1dbe2b7cd5b971ac46fdbc14756673b2a771b10269d67251502da31290ed82ce31e5953a580529c9f4be30d57244cf3ec70ba468278261b7f299dae3ffb76083c1fca48275fda36007702df4b1dee19669fedd37b4960fb761d709c32f49a40c91df8f9b670e57a6e7303a57f1ecf926c953cc5306f91c3af36b7a74cecd7c5c896132dccdae4260a17cd602b2ec5f8a4223838aa72592b5f0d7478a93af3f90775a10cc9fce5f070190a80fd2a65796402942b952ffad45d6dd2de82a5c8f66fd98016137dfa37ef8ed2571ead80706c49927c2daab5ab206343fd240439e5d958f4e1dd8a73b7ad929342588ec4346dbd147501dbfcbdec00603b7ac9d7802e4158415c4de5c08f0f5d69b4b0337a357e1c7e2149315b1e058b82630bd391f4fa1cbc3be5dda1d3db283b27e716de3f514a1a9b63333054c1929099be7a6410cc292c9d3084270ce327a32e25f33194f34181916c4461c5a24570c5c12b6b96eba94df06cabcdc88fbee4a051d4836742abbd70bb5e31bffa5bea5d772878e75e7eaed0b4e8c8941401cb6c95b0af8ba8140a8c944db2559a72fc3d4047f317480ba12b9310663d75871f61ee94170d2c6e8b9d68ff36638d48ad7d053a29bd0c0d99b0268776d0fab341a8589822d7e032b519c50f2b81acdbb5da24efb48994fd2a72891c7d1fc1e4313e3f36dab66998c32130b04e0dbb89f93d618645166e126298183d6454c9874b908a77097a1d8108fdb54c2b33a684c9248487f10bd6716e82605a4ae5d4ef5c05132a23c991bd327312a429faf4c39579d551aaed2dcd68470a7c6af7edff5f49cd19fd6de8c3a28bb3ef6403cf314fbcd62ed97d88234e7062c403531acf196c74178aeea7d432ba6fba4a0dbd58514275a596edf0b9b0b7179e90decc9cc6cf0cb880cfcc8c5069404d9fee9a023e8328bf04368d4f659fbc638221d7e064afa0341a51b6ff072925af96ad4d7fcee2b29c2737128f9d4a2fb550dd2ca9bc7e8cccfc4b0f1dde97dc13978d3c727ee61ad1a4f19fb5d95cd4019f54da60c43676cc898bdb85d18a92bf579033b3d29a965530278aa0c47fb5929ec2c59fc28f485141eec14cf57a86fafa4f6cf06386e328db8f0c0ef276e1095fe490525161b977ec59e21838e0895f8b485b36fa37f3273cac659e1fb20bb3959095445b3058538901803f5aa65b2911922f7c728aeeb86b8da4a3907557ee23acba0665abf211c12bee6e92f36e7e4fa66b0ff0232613a31ec77e733874b9d2a1036b0e5ac4fd83523779e032d4632a56960a86c41d23eb84a0fe1b407a56c19a0fd5badc65f1095ee4f78913e2886fb74a8815d492085f9797687ff37988b56f350fed3be0cb332c529e2000b39b1cd8bbda0a07fb9545c721853def2d2b43bff203ca4e2733a023c772e165be4b7853b3bb1c49ef2fae521e5f526325148c07fd9013117217505488e5e53a57c6b1ef7814ecb466c9cb559dbcf26c67fa77b872814cc1a38e45fdb4212a35252257e6a006b0a958062ec4b11d61ca1c59807c386eb374c823fd72341ff0e6e7d43fe2b15ba6a4f02ad6ba1d322864f42c3533b7462ed9e9139cc1eede7168b9c9c49f2b24038bf2551f1909af53b64a5cb8581453c066d8bbe9902c9879ec68133b4aec27ff76af01f7880d228c3b7d27fe18e6ca950efb32b6bcc9fad5c441e7875e19587745752b5a484ec0c8cab799f797ecc2e65ff4497c717ba2035d1065dc09889b7c743b97a31cbf9b927151c7e620b29f193cdf0cb585bf90c89fe7bc2af6fbec651316717bbe9afb3ea552754fe1c8f806c941a757894ec97bc41d678f9edc8a89a4bafd3e3f5eba87732b699bb96c41871939aa9ada76b8e33b23dfd6553415816b9e334466a62ae405c8a41ab389cd62095d8d080e47920614f8258aef1654026cff05fb3b7b033c0a490a2b41f9d4385aefbb89a068723e694797829dfcdc23ed138ce900d59bef9430f67061e7924ab70046d0ecff49bbbf27920253a4d5d36b243dd6153ba9c22612d20290191e827b40562de4bfc1a054c6b4084f7aa97bf83632bac3fbae8d95f89032f7caf57d43c51982bf5f8bd45197950593f6fbc158aeb80ac94f851acf0f35467d7e1c20070d58f6b54decfc0f73f29e3012a8922ad363dddc0d2803aa289e59cc8ba4edabdb0dd1f861436a2b401252478afcbe443db786c78660c8a7fa7561828055a00554d2c706053019a965a57596b3bbf3cae9c8a8cb795376d1440ca84dddd62d209251c0a87854867268df78536aeb23afb91704afe174d92fd67bd899986409605125440e7b57c24c26b10143dbd323b872d6df1b33036680fd76d9c5c1b69c1a29126997ff55dfaae6fbade3d3f5976de82d48cdaee3a918559fbac9c1dc91a8b5fd678259514079ab6c082a2bc712f148c1c29439d3dfeb4cb0ea0a6475dbcaa60ccad8a61c29adb3b53929f7dc1804580d58a033835858301be6299d23dcaa379d5ba3467a47473f50b077f051861eb763c815e8a4ec76e4f7759f96fc7ffb3acd5eccdb055fe02695f199c6b17fd8392914e9473f293187425889bf7f978735a8c15e10abb149df1cb184cb1c3c2ceff6f08a889a150ff77b3ee176e29044ae6834ea4adede8c29b59f9516a6406a43c6fa1d1d9984e5db1ce6e30292534eab6c9d4442b8483fa74064ba38d2cc4c60770bebe808c75475625d417e5236f8fdf86570a03ff2002b752086d19bf7386fdb1096311a04387fdb7b321075d82c5558a0e944c684b95ef9f95be9ce9ae0f96b83edd32c0c4e4bdf3fcd73ad62d388be15b020ff8323de2c5b1b82e65f26cf39c807dc27646b551dc721c9f63cc63f69aabb8bcddcc96b05012668f6d24e7e7d0d77366d1a2c9d9c3349ccfdc69253dc50a01248c1faf4fedfc363e1355f90492a335da47f13c82eeae4bb66e92f14154dfd26d890ffdacc52c331bff984c1734620207fb98f177c94e7ea12464b6dbb7beb01660b85b32e4285da0feff2268a84da7b56c7177d67ff76aea256dc52318292a6d831cf693dcc16ec219b0b7a1ce259928559cdd4eefce480ccbb1543594592ba7c9a9ba981922fb01d88f9997621655ad5e23c4e6c6c86ce87d9890057bc7fca2348dd5413a36508c2579eaa253a8a4d558ec267b9f00933de87dfb473d5427627404c36b91b63e2014044edc791fee929fbd5b3537029b76b861575697ea7bf7e89458b8a54b7b66d8ccefc2c13280bf52e5224a8c34f824400abe0a3e55d03ff2ccd6b35f83cc81450004ec7e4bfb15293cd3cd066cbd9ad11814fcdb8b1756269a3b7729be44af1e364c7b6c4412147cba31df303adbff176df7c6d00a16e2c7c393cdfe945f8e01ff933b776e6c40fcce7c01812deeb98be880b710811fd93f59a0eda45639070deb0e0b5af6d047c64a1050f9d3830977953072d338659981b00ca1283af92231d273156e1e7caa9095ab55bb630d4172ec43885a64fc9625a78ae3784a7944b23eb7e4da7560fb3334521b24faa8be6c0bd36e16fc98a0e8b7ef4479d3ec396dfb44be0766be2b5ca31ba00427486fdecf78456e5ecbfa21f36e2a9f92fafe327a6ca2b91201d7d4cc3490d9842c9d743f37e9a583283dcb800130c85bdc9117511212ac485c0d05abc64c3070fa6bed4be26c12ac36e7908e5cf34a8e9f930efe15a23a5499adc7ded384843b1fe29d93a8633cd107731588a44088408a96ea94ea333c5f6515f234665548c1e2f20fb8034b362c1db1cf8a9ac917efa835af93dc3b891c8649c9b5cff773917f7df8ff40bf24b62e366e5a75299d9128e624705241518be0a18a85ead6f4ccc57ec82b319011c9ad8fb3541518db6b93a3bfa3720804bde9515290372456ef4bc38de07d896d210a808e44b91ce60531bbdac9aeec421e818c505efbbd79a12755d901aac914affea76ce09cbf0a101a9c32b1a35bd7cf2b0cd9e0c959d5fb0b4be8177b868616eaa9819cf6c1c8c40a1ea035a037fb9d7d4902cd0d2020c9c2de2ce30f27db6e00cf72e2a27301cc3095d33b8d56e5ff18e219365325cc624dad3b14a4f4097769095760c685d997b536b08b51eaa943a2f7f6202552560bb0863759823bba577e155d368922b18dd82e70ccc25bd3a3022c304a54a62178b8e2a884590c6c14914454f00fcea58687a1cd6daae9dac83c208042073c3888397fc0e0a4ea40ce4ceb4043c82ead482e4da77102c31157ba49067be0723307dab08dbfe84073c88cccf8d99d9fedcfe93fb0ce49c3878a15896f1594ef131559a458e0872c751dafe7fe35760f820ea893597fb71fcdc8bf25c7c500c5cd4a3494d0827aa81967e9ddb48d23c31b3b93a84353c3bcdae72c57a7d1fbac1ba7c9cf177990ab60add68d5e2f5483ae09e26ce0b4e256377e121745cad52e3664204733a18813a3fdfe1b2e760896e273b922a258dbd0959fd06f873f5d2b07284179e75ffccd15333ea5236634edd202edc2785edb385ccbd18e6646f43f0b934e2a0f9139de96715e3facf2aef3d612b393a574c7e3aa2bb5b9ba4c1733f305eb1e9e3a0293287562d5acb9953acbe74dd6fa342c996c8d19ecb749577cd3142ffed37174fc4d18592e8fd4f11571e0739935f127cd69cf83f01ecc50080c5ae5d6be9a9b1fb4145aeb5a84b2dc818d3c72c7029c2c17d0018793bd0bbdcb2d7151e2fdbe0cac898a8ceba25cd186e86e4f61641372faf5ad76733b84f467398a9514b34114541383633b9f57513e16634cf8cc2ee93a090b02b6e48b5c08176f92bd2cb1ed91a5fb27166f18535a59e0cbead584a8cf2459493447a6ff970251d6b1ad53cbe437f3e3d0e193791c98a840d20672874d23350ca40360fe7ac3b7eaa8f037da01e25e2d4f106b3b06585ed699fed6a410e615a7204fd2336742657512d15d62a4de03e47f6df0f7654410174a5ce0d1d0d88c7156265617a8d6d7f632cd8d78ddca36bd5a38f2c00a3fe1f28ef0799f97c0f72c16b66db33fd3de40db5687486273535ed7f928d11df57a7cc9c602f6eaa42a1d41ac38370d3fc605f207625d4c8e05969fa3a56ebb6bc7f5d3a69b9b1c833eae1a02699b119391a630c48db13e28cb1929ad8b1324f65e73bc81510d633c4f7cfa4626ccca05f6f132249f54c3abf0eb3952b3a99d78448348112325d07dd165eafb8a6829a8110efdbc1bb830310a8e0e616478db02bad17c46d63bd2835b7326bff88421c35e244e4ad319fbd4454bf955373bd0b21154aae68236d5f9dd8574a89b879a6bfb4f2db8e17523d7f7a523071547157061bf3aeeaa12039c909fd9a867aaaa228583b7b99bd2459620193c73dcf9bb91eb1949df344b3eaf15304e1d123327025e668bcf864a40e0dddbe3c82150c78934015f6eb270696cc7f829fd2add2fd61243182e5bc6e326ddf1964d0e81c1a3467bd95ac56c0c095bb9b04200763eb15b4a9bb60e5769ff13c4c8d2c99705ad69544602ef59e26828a92434753736f1b9830c2b202db624bf7a5189bca00e7ec2717bc74f5a6933975b9b74ab9f407a4fd5f650638ddab2c683e9a39b0469a016493a50248051b2a5beef952576414b0fd8980d33633740edeb225b84c94072bbd79c6af8de67bd5567fb62f850d5170fa1a2fb437be314cf247baf3ddddc1fe4b9266309a2dc396b2ee51096e284047a317ec628d02f0677c0a5e9bb1e8cf7b08a61e6d4dbb1b2876fbb79d8f879ff78651469f85928209a9800802dc9be528cb03a3cb76cc0f4ba38d82503fa08bb7f923a19d71fd3e3326d9bbd48a730edeb26bc1afade89a54018c177ea1f3bfb0da4a94d538408056a786a354cb729bd450aaa13b6d04366caf0cdd7c5adadc8fe7e2781d8f6504afe2d3433fee73aacb719ea5a6257f2b09d6befd5938de9b6160af3679dbcd4481f8b8b83d40ebb36f629104ccfb68ff93d7c78fb4c393973024b3e31c3d1e47cf90fcae2ae341f2c786e7e636ed0bbb8ed99b737b5e450e1396500009e1e3ec8e7c883ebd794ae732e6479e8d8c63d343d980f32291573694e23a9658bdccfbd626ed6cea3e8527209ec523bb5b8be79ac626d1cdc941cbe7bf8cce20dcdaa61476e3d16b6e534386ed82cc24dd79f51bbba7d51cc9be25bbf9a46c74015fc66d2d408c026f4493e8f44c86c6472c96c16a39bc1efac2e423c65750c8b224b0eaa7a51bf8b20397b872f6f003832816c11f756de1a30a329ef51c91a8245b57020d5148413ef7d68740f700c62b4f322168fdf0278c1b104ced6dc7ef7fe3f7a3abd3a9ce9e6a1d8de4756aa82e6bd458677afd6f9720e88801b4d6748462da4c7c52b5f804219f0262e6e7431cf26d286230d4eefb1c06b4e55a0fd58910c63d6f58b3232933b79ed4e8205d448efa9f01427c6f205f82e629e4894efdc57e4020bd43cd4276f1d3907689f8cde4e626dfcfabc533df6e6b3146a97924b0d7b4afe5f32475701f19636242e88c1bbd54bde2d7947bf354016ec271750adf8e3f399b6c0a066fdf95665270bf59cc5eeafde64d07667887690b18015b0e928d5de8b6ebf8daf0ead340bd2cddca3e30ce0df746ae8b92a893fa495320f4ea609085955f2ed3afdb9eee713d3ec6e6bbd98ee2ed817f6df7550d45bed49c03459afd54d239ee3a7dff16fd0d1748a4388d566b8789e74c4dd2b63d666727a6b38992c4f12125bbd5fd2eefba35f532a67c085434b58f7d94981baf8bd71137c4f792295fe21fd43bebfcf822a83932fc28546f73716fcd6ece7432ef5594aca26b10fd2a4611d82971854a79448f4dc28045a8b946849ba064b81bc98262c6fd7bb10742d0a1d211617eca5942944294517b79125699f406569003053de0472a3470ca699ad4cc0e1133d70ab5e1516adc97a1641be016af7a182380b13cb4f38cea204a37ca4e9356168c102a3c4d44a71ab6fddf7839809b542e9a6ed910820b0b24fe237fd5a548596ab7c6692c0d7953464e8104c2a9bc10989f6a719e8973c3581b532a92ba41212b60e178ca3e67edd5a6df926d5e52b0d954e505c4b73dbca60bfc515ecba077cadb2fdbfceff15084c51d9044460fa082aabb37ee30210be7eb4e4ed248c7fd01fc9899d97e10cbb7b643f96753492a0e3c231d7fcbe34cab9e924047fea687453c6cf83cdcd9a7e15dfd9ac17805ba074958814f90a6b9e1be4212a818a81514dd0e7ebeeb0ea6160b352a56a724927e8caf5dde43dfdf2c5e72f7d50c218e82797e23d0c0154772682566039361b9d916191dfbdae0b7083f5f19fa6fcf8c5a048ae18bc3e6dea9e27dc742461b3b8d8e86be169c0149acf8678c19f16455acb67b7caca6b3d1ed2f9f5ca48b0235ba695de498c2e3f6aad418a9c3c8aa32dc64248a538d631b3b0f5d814f7eec0dbbe8f548f09fdb1d8af2a4958c88e50a5cb45c3327ff6336247c95838f06a6c39480f0aeedb0edddd4c2cd653b8952d5dbc85f53c0d56a29535c867581c9ecf71632cab2d6482eed42a86fcc60eb84c9687866f8ba1138365acc17499b2b07dfaf66ede65974567422003d0bad54592ee726cb99a39e5e678b54f08387ffc6971bc41d35e28290d4c75ab33a076e7a0eb834ce79ba6adb3be41b4fe16bffcb6fcb1a7a054ebc4876449fe66a21392dca430e6b83d9efbb6dd1051b1ebb43eccfb2ae38100119bd4825b9d57a54460d0ce95d445bce9f3029ab20ff01cf80588180a30435ee0b3807c37193cba5093a72db4186c49ba54c56bfe0584bb6114d2bb63f5471947202f6010cb24b5d6196ef0da3c37a34554c291ee29ab5b091f154847d911b4d55df80637f835174961743746b6714c2268be4ce4ae28b87538039db6f9936a70c5118a533090b8d86a5b86d83fd3f6ea019f3aed99bc4f8f2c4aac9d83f28a08a24087a84a8e6e3e41fe168e1c793a330ecd04b69e86cfbd03524c260cf32ccbc015a1a1011b29026ef3dd66e4e57f8d0ca56e1c9c0fe0ec5e8d00454cdfe595cd1f3e221ac7fd3009bc0bbb87c6755187d8c3e71efaa60ca47adb387fd4f81d7b7b67da9579c7219ba6cb52f7fe8b30cf7fc5b76340cb4305b5c993239836106ebabbb2cb9539636288372bdce61548662e235241507ba21f90da9718b0fe120217e9b91b20e62e9adad6548ad30ee68b8299aa742bcd36db49c4322f557f717b4a348f128deb8ec15ba727996061f30f5325219c0e07394ecd4d6cef9c556efd8f8fe1e7608ca747a8a9803698f90aca71fe9b8fb16c070f18164be8e94e7e25361452f418f0b5e3ba9b112d55e4485277ab16c46b7e7ff5f0a5e7518fa71ad6bdc373cfe5d9df5785e0151a36a757245cd1f5eab6e382527c7a1ff80e5198aa4df3e3b44aeabdb97170e3fdec9da499c8af43e0f10318514b0af66b72498614c8c79ad282b10812e8555e46e61b4eb332c47fd37d613ada69e4e163c08cba8171df60998c976715339a5a4e709712e21d2cbefca9abddebac391cfbb1caca43d8a04dd7de0a1cfce35079a507f3b52e3518c570e0cd025103ceb0d62bbd08b923f8ea5b7398d0a4f9a6804fbe526146a4a2cbfaddce5fffe4bde37c5d2c5463fb08fb9f3974c8780df1dc0806407db9637eed7acf49c06fc2e7bf619db3fdab16bd0a822f34b7e6a2e1c9ef4c779bf5edbe8be33da6b7fea85fedbc29ff563c21ff422bafb0c1e62a56fd8121c008a270adfb725178896d853ed0faf5dae72c095bbdb825564e2d00dbd70aa76938f8fa8f304807fe8de150277705b209c6d7962cd3e7132387450a1db90fcda8b6f9b720a5d62b65eac0473744f746eb9eaff7d43ed81af1b52df67924d16038e39292489445508b078e7981a3339c3f378cca74dfede01c67956c64120bc7fb47b9cf5d30b3b01d7e8ec88ac6df85380b2adfb3e3fd7349e27df8d3fd0a3822b52df5f839ab076ebefa68e5052ba179763ed2bcd0924bd436779104ccc018434b55a8a4b2a65d18153b5dcbaa5d29bbab05247534371dfb02275d2c4aaba9e78ceef0900c55f8a1bc29957097cc55e82a8664371063395b1d4218f96eb768bc94dc7467824cf51371a6814aee204b65a7e663f5e3771017bf722b222ea5ce8d56ba03b4913e70d20740647b7198fc9d531bcca004154ac6dacbc7913ddea6588ded202045d7701c279fbb6e204e3f4c741b87cf8bd14c6f71c91a774e9de2e1506f8c2d71e3f702bf84073d2524767a64b27dcaace4e9bcfd574f689a1e107b08a1a14728b22a5b5719f3bb1a737a20c98b50a8830abf7e6c2af2d7556526a90ae6337b07751d2f57bb05103ad436d581cc0ec2ec55d40c8f38f0e960987e93af4ebbc1c873a0345a7a6325c1f7cb2956b1028c74fce41d8887ef1ae12f3b37f30ba38f4e8dc1c9fe771e9d03f8879f867d926c6f21c29280d2ac2c924fa6b89e5d0bd62f2c021fc19289fe71f71d4509c1565b0443c7bddd3910dcb05b6d6651e0c50a114a655506d6ce50135e8b8ec50eb4aa4462a78e59090b528c495ac78a4c65de9581ad4fa72c4cd1e384f67a8350c66605266826e15cea13051947c4778127af6a714597745eeb26fb18e6d09740678e66b28d877108c371579eb55c44971f84fe5e4b66ffc8cf1f40a7a9611c7afe899dafa77c2e3bf038a38f1022b42e604542f27ee7f9a36d50d4959239d861805b5367dcfdb14ffdbf008ea0f889b18c6047762f12b967a50e1c54257673beeff27eabb796c4dfac0ccd5904494855b0fe5236ad82dc6d209caf0b2ac5da317a72a982c2b771d3d5d180a7b52e3735d80c037a6867eb13e5c437d0fb81e01632da656a906e6cfd3f85dc500df99c0d241439bca465ddfcead2d4cfc6acca7e7cf2287d63e3cec391540912365b3b7f601a6adeac2f37881f7ea56d14156a8cbe354fedaa40ff5088b28dcff2f779a48aadbfd72df50840efab6188f36c050702ed33bb39e2895c8afcb9b0147b7e0ef24c2594e757b6c0ad77678e677a72507f7a0bb87aac7df2dddb5972caaa151734ce2e6fbfe46f885bf62330ad14f7e0c1b38b1456a6dd131d43d94ed69a6ae6e0bb6ee191f0793a18760783f80dc2b53bdb7416b5786384f8ffb5f4bf22cded84c935770d7ec83dc540268e1af615e57fa620c6f732c756b2318b70ebc40e22d47cad0b417e6c102e8a6249be7e009c4c41580ffd4c201fce79e193ad51e718b36435c80f0aa64f4853b8b4e23195f855c82851b203dba798e0d47ec32197359450287597616b3a535ef98f51b5adb6a656d961adefb7cc2b07ca759161e6425b33f92a080c27f837b25d513a1e2d3c597ef3d0e1024c6afbb20b6659a73e4b3dbb3c7abea87a1c86cec36bb062200733b0fc8f9a96f4e746e6ae17f34da8eb0f4912d86c26c15e56a25981be841e097a8c093ef11094b905c4980435b1ce9b913a6bbc60f07721d8ec200ac3704a399679bb1f16a5706e0a995de7faf6dafa5d76df0768a30222a98f5d16b3cc1f50167c3a003e545e350daee5a8001b52f1906e9b99e34748e6da02f09e89b5051c14b1201f7e7de964ddc961ed38a8d27f7b48343276726f89b73152141829ba50f91c0abc83e0d01c0a1e028e25f8f41948cfce1aa5305a207fecabd1d7a039f511ea4e90c3021fd69265d2cd7ce032c827bfcd5c7e7e0aef22d872c2a7119cbcb13a90bbdfe9505bb36c352e38cf2fe74ab3c53843462f431f6a547dc3cd2e30c68d5963be5bb07f1697308f908abf571615938c72783faf8968543df6e252709c384642ddf7784ecbc84de07941a21c3d56efed186f2acf58c5ec54b3073b6ac06a90158017805fef2479c16ee7fa5f100d16a45de4a1c2face0936b3f89e13dd834e63b216af9be701887251f6174904e724ab06c9cb5942f30bddc225fe79c4cf3b29ef5ad200095c1a1eb48cf86e0cc808b9108306214013cedfc24d7b0562fb76100ae3aec7791c9b396742b08bb45200ff8af5b447c0b9fc0bd92c49d38a1f24568fc089d318dcf5ccc62f1058bea85dd89ebb9f143a712bfc4262d98843e99c4f5045760ba9cc374180925a6951d311f2a472cf0addd6fb53ec18d3cce091a33743cd8551b3d3aeedf87a5733d61d0469b0f520d017105e2da59c298a666fb2cd24857f8a2fec0d768ecd9745933b6e79c9dae48a728a8607527fbd9059cbd913cc4ca214ef0cf33af2c670884471ebb73f03c58aa7179eb78781b8a13bd7a5e6fdf180e9c8138237c6b2a4d3e28e3f758bf389bf72d5ae4778a7dffd92cea63fd28d8d227b1de7f2ba16b0789724a8d5aa9bff0188c7fa859cd4f0137d9be559f34374f48fdf3c37f89539a078a0f7b150f7f7e812b3b2d5bfcd7b3d57e1346f6d6846a3bc420ade9aabc69a8c483f276b1a22e87c7e4f346d2e828e1446be221fe2e83cc99e309a0b9d81964867a3c45deea862c2863945fe9f222d479e9a0bb42c4b2f3a32f3a386dec18f9c5188ad0993f33cd9d66e040ebcd1f8bff1a363190c21b6bd3362c020589f6de900b149b358db3971fd6efd229b11a3e6a8239341ed076bbd4205084ae781e3da21fd2599bf66c50986bf5584da50fce0322983433c1a379ab447fe897d3522ccce6bf16d585d1c37f2f60c0bdf7c747b3bdad146f53de0711de29d68ef9259d380eb3e51b1f29c500a7587615acd1fa5a25103969cca20860af26c2161c5c7f850a964527d48d61e88a133c555dce2a02e7b4043349b81add3d62f748b07cbcc08dbb39f3f905c995e2c221132d74ef540bf684183fd68431ef1941fdf3d055c168c2a0f631933a37693d8c4179a1b1ad4326ceb46bf1253b8adf29fe24170ada831259cc5c2cc822e3cf01b8ab955c6cd2bebeae058c8303aaf428406e6663d35df0bed82879a376a5e2e62b68a483055e69884e3da501723bdaf5d57a8e7181cf28dc0dd5253d01dfb6367dc673388d5c46a02cba874d964120f3b1ac027e2a33c6b8c3f6654bc3f593d0030466fa4883e3e28b7f0dd7e551ca7be6a0cdff6b2080ecaddd1947f4a569855bd92523db2e98e4d6030e9c8f5cfeabe375a4287585337739ccac708b5c5b4222d6c41047a8b61921dccbc70385120ff5645aabced922ab14b590ea7ef0c049af3f006aaa9554d37ac99e4c3bf0c8fa320929e0b2968d183b4eb51cc05f81e4b5d0d25e235c66ef14181c0c128cbfa0e264ecf1569cbd782bb90c7156feeb8dd3ad1d277830cca12f18150e968d3a7f33609bb2b92ebcb71dc68b97cf09f3dc215843f5965323f974061f4ca5b5297ffa825e3a30d2af722cca036df906529b44e4faf37cb706f656f90d868538d9f3bc84add516a76ab5755d68e38920c9d61016a07712608d5938f5e16522f29d023fe651eb04cfbee039dce6a5d175ab0aa36f953f0e92dbe7473275831e8ec524d002218648b42d698e099d4728d2526edb04d4b6879a7d165f4beaf23f8b3d7ee50222d2d559514c963c66811e73728ae540bc42cfcef11924743479888c461c663234851de435d2e0dafad199b3d80ca57f856b626f9b4acbc4710fea511c72c6316a31f1ead231cdc9ed93f1b1766293b5edc2697bba0312d576f9c520239f4ebc8b676dc34d15dbb81c4787ab412e5df5b2cd57ed433685fce0b77aa966bb3f33945cdf6bcf2ea0b4d671c6dc17b98c99890f68e9c846c87049ede38af7af2f75265a63332ae09e5db9865c937c1ed8d3b4be4ad71310a7efd82b7fe10d3a048809fed34f0eba579c4c6c402b9c7912eb7a438c60b7a86e86a70ff8de2298dc72c1595ca4e465b5ff128085d0991c19bfbb7fe582c6a529fcb8b1da5935595fb772e086e13f6d582b41187b94e11b6446f4e05d614eaf2ad45fd08663068f635163d75adf0e362624387d4f269e55ab383acedd7437cd43bdb092e041f36768b2108d8ebdfc056215779a951002cab7a63b34b2181fab94b725287234dd3a856cb9370fa3e05d54de3db3c7ed4d392751c276a1f263713c18e3a835b88194a313fc4b03e1e24f1013de9a519b6091e19d42a3320c37bfb6e691a1f492990fd619c420775eb1364b96f16233196fcdac5c618642406f4cab85cd48bb6a491f0e7dfb7b9cd616a5cd1e5305da4605d58aaa6b3561dd457e3c8ee59ae00e80c1617d4f8c1d709f73dcd11cefa052cbdc3d1bc36652af236655f2e291bb73fe05138b03a73c0cebf0f9da73e4f7942b18e614f947a71d3c7e4aec93f844f32d3bf62d22c6e43a7352897da529769e469c5512044baa047f160397d4d956b691bd3659e07571026f568471479f3e36e9f1e4aec6b02f5c6b03d91d26c79f8f54be673dd8c7686bf4d9562f574e0334eb846c2c55ce744981476c6efad577048789ce311584b6f31b59560d1305eeb2cd48c30955e364c34262b74cabd32df3bc8880246e89acf91a3e172082ddcd9ef96e2cc44e130a863a0f3a4e4243459a3ff477aeabeab5e35c5aa5533ce332dd1c4862bd452752d292896adf556fbe3e6beebb69f9cb0f65d94b7c9620ed7dcc442523ba791133eb3b0e2b1f95d3ead9e266905cc09c379c41ed2ae52316f5678ad8a0e6b66c8a94da1cc0c255eacb2aafe17b0e1804eb96d1df63550fbe437ff3d4553a42b4eaf3fd229a59db85c38a732f04521ffcdd916199676c73df249f2998bd20ffec19b439892f8e22f54a4a002fcf3a2f04e058e2db3ca9c4b8605d326e2fcc1f61aac2202f6388f1894059382a0512cbb6b429ffefa825bd7e4f8f1fff50510ee83b1d72572e9840dbb2cd4af9af25c275f7424492f2033fce24f49f82ed5c3ed68bb9044416fd6dfb37f763ccace58e7d42e55e5677d3062ce47a5fa26961f32d9c8e2dc5fba9e1eaecf5c8c2f7f454ba3347eac575e519a5436e28a7d56cc1f4281687e2053c4804f316ad89b94f4f90dab52ec292bfd5601786af56876e10a11788f42b8a691921142becb7b6ba9c72f4d5271e57e737413e8dcaeb5a5c3564e6242e6beab49c97bd33477252eab47b8deedcad7223f01bbc9f79b91b97a213c070d5146a388f8fa701668874972a7184662e660c1e8d5287e71dcc4d1971e6fb52977c2bdd7d15996e1c256a33d0417c430be27310bb17c41228f4c3d4a1a1c20462a77b1aeef69e54483b387079dae2f004370f0cab4dc4bd5a0d0cfeca8260f80875d09afd1786b637a9deb053b2b61b1415c9e5de721dc4dd63d2321012e36eb893fe9331896458ef0f1a3cf08955125c6965be47b9cb261b6cc5db37a23258c713265965941e49f9f160bb381550dc7233c3f8a4d760a7a5b05229cb2b123d91e825a90c6178def604905e8d433aa7dc23aac71068a260d9fad17fcd3a250231395ca8a2721a9534398d9a831254189b21a1da051e13472dca9f7812ab676e1432ec20773b842c457003f346bb1b6be4808dcb99eb5022207242157dea6eaa1fbeca47fe3ec6a46057a9ad15c129f2bbe7285331839a9f675641077b5c6b4e919eabe2b562672d960aefe63c6ee25de3e8a6ca20f1793998b50feff57ce5569e7c79ac619fe047f75e8accaab375113eb4339f4d69f893769f6a1ca7eaa8c676580c07b4ee4031382266fa0581ffc76ab17a39afa5bed76c27c90e4d4784f81fe43882729c8bb6882418a762393c8a023743910a951723cac760c1299563b1a8a747e5b3eaf2604caad39b45573c3faa0fac5d392016b9a7c0661d7f4db9112191eb06890cccaef93eb5dc2bc89eb70279eca34cdeeee69a170727ab8fb5d1d6c6e8c3a4af9275fb71a132ff29872d91b2cb81247cdfd05d05cfbc6e71c487bac5f7b9e02ae46251ad38c14f5a7c6c42d6d62a5c99cb755fc4388c259ed58d198a4095384ee1cb288921a64a21585ebd77e6938a1f308e40d20b74ada9f979b538d1c6502afcdaf85df7f647d06127d88b1b05e70c3195e2cbe20cbdffb23feeeff9531c37cdbaef42f4782d3fbbb79f0fa1d0669ae3ea653b71798d6d8a9a3412868a0eee222f0982398e4ad768630316e6e076fd38c44d42cb49d7beb0542eea3f651bf9a5364ec1f2f49dd92987b86f16acf77ca0badd6b475d2630de18285fce525d4ff3c0b46ec0232f9113323cbe8e38c87fd6256cb33a7197a0fa944fef7e4176399e948a375f39d1e532bcfe20de6eecd959653ce401caac74097837ce53afd3bad2ae6f43e67a9a20a2802bfda69084a0b3c449c7bbecad64a79f2f982c8eff9f65477aa55b2c49410eec1d15c41813651ccee7ec562ca182cd2f0dd321747e6584d00cbf56bf129c8eb28f8023e20fb50d73af283d9cc752cbdb540f9ba67830c06f1c3ca8be7a157f687f37421d567afe709d70cec1fb933de0d3144e2f0a468c43aea4a929d6bf54edad641a0d9de760bcb9647e575cff29ada625550809656e1fdb5151d0c1c09aab653a5ec258971eb5f3b0b601c55ea9452078b7da287efee04887bfb67db40e04549fbcf9ea1d67f88ff4076af8e15ff40c0f9100b66ecfd73b96ce3f48a46485d250508795116ff2e0ceecbff040226ce207af25ec4d112c1bcb857ef2812f5340ca4a4659e29ded38325e4d3eb00fba00d3cd65d6c8e4311a00996257bb66bc03710c1f1de491bc4138b82c5f4b17f18d67319489c12af065b9b2a50ebf0658b502f7c0d17a20a1bde8d499e26f03d0b891e258f8d08b44c2c8901c1d6feda5291580672306449d047ce9f918917a605791a6917705364dfc04ef4531145a8ad89ceebc58691467274e9c8fdff275fe32ab48db48ecad74a3adb3948cd24420681269ef66f25b1a0933dcdd4f98b5e020601dd308578056e72ef410c837cc292bedb8a841b032a2fbfbf8e90b58830ca306c79d67e3ebe73dfb526a22d339ba1c82fd28e0080f481a0de49861bd4d3d1c46e04dc9c5351bbdfc57aa0861372b41a513134b15c1aa7a0a632f9017bd6adff636e63ba42fb228c80cb2772ee99aebb962e0aa1de4d63f9e492f638f88b7ab758f12536e669cbfb315951fae1b7c86a4b77c07cd08b775abe2041cea96c20736a257d81be42c2f3c732ba79e3e27552fac075b22c9be7bfc92e5d94ac673aef0a3024358b91a44fdf6a645df9c8c3aeebfcdd670ee095828738153659fed2cc714d8cd5941b7f1d0644adb0c45b9b9a60b130a0d3a83a36b54c8a92593ff0da36e2eb33e7bad6125099df833d7db0ff0c179d5b504e75a12f21e1f0e0323daf1ec0dc9b94e16361f033bf485358726bffab036e9c8ddb97834cc8526600cc190d046777756da08d8e500fec99fbb4635ebb92955f4ac8f6974b2dfae542e7b16d2a174937ff099d6312c69ca6b5979cf2b005eed4e8e2520b3222355c0f19adbb4b5ffe3625dc279f1fcf9ce00b2b4ea788327a2e5216ed06013bbb9cf058f20720e704395a21273927a28e536420fe80956cc5dfc91e74ac7ae88323d7597321f57459044363e1b165c91690d4fbc6f4549d7657cb46437e4881005472454b06d707788d59f27af04a6f1d0c5f10934450c5eec3f18721dee890f16837d5f7201565953afe27f4bf8863bf07f9317d42d329b3ce222440b4d7473a7e6f2f7c9556b7d9d55df7222941752770508283ea672e5bd7fe9b5ab8ec68c75261d3b60d9d8086c3970d813bedbe6db5de8ac521d08c8ed0d27aa89e418948f6834d101b5d28a4abed4948e6b581809a1ed77107a1f79df394f128ef37ae195e27460bf3fecfe64250ff79f680b9f15baa87021e7f6537069e8a3e515f88f0dfa3e9758d4def2f7711e9c51ed3802b1672592a33ebc378404942e9995f3069be728bac2c3ce394005cd570552684b51f90f5a59818c860189e3704df0ce81072dde67c9448487861655bec4b3de3a35e750e77553bf65e3910c977ec1b17ad108ba67295ef2c8ab3bb070fbbd6e79bbf8620b8e41856b140437e4314d849f040fa14d56e294b3057aa71df7af1e7052e6d6ac755cae95db9d647444395bdb311833f597222352d98e768b30831f1892026d10063579c84920dfc79a7fdc1c669a736923ed4c2c5b208a355a33807db7fad3fe7616b4449326583d20738ade76d0607dfb046f93ed903631796bf57aa1121c40dc05040410186f7ab46dc47f56edaa30bc561b216597b79338290ffdc4e2fb08af01854bbf399d648326ab8d12e769c47eb9d5f82b17cd76e0f12f17a383c667fee968663b17bdea72f7a0e6f6c79ab760da7bcc432f96b44b8c51e97a29195e50050ab506f87d98fbf76eef504ad03d8a81a92dd53c037347d7ca5e6a0d75cd9a7f8146e6f6ccd7c6f0b6f38b0e67cedd9befcc1c22e2033f68e2eb786ba5c0ac2510e751a0328452311670cf77b6646efd79481625d05a4c4a97558d9f6e5a03d85cb3c7260ea67f53f9fe888f34793e3d706fb6b2448f8130cf888c93a27e865971f45934a6bf9604414a11fd7fdbf1ad8454d220cd33058f5129cdd9e10a1720b50a01e12db3addc43c05925c4956ae3462fd3773accdeb5038c84ace679912895c21631bafef896d41dfd2ce5863a8e4e0c0718e6bd7cb37b49efe6c3378ee7f4ca396f4a361fc9f2f1418f4d557dee12896956449660d78d0e1eb197e18613d217f482efbe0ae058ac3dbc8743f6a18c4edecf2826c7acd9d3cb0521db58f8eca2b4eb3f72bbc280ee4ebb252f5c861d08bc007e187da2ea3dd35e861f5c27252a355e17cbaa3d1cef42c49273508d244f06e7157b98c71b7dcd9fd428cd0511e4a7bee2a5a580ba6f43b97dbe550c818cc8a1fce16c55558fba7275d7a965e17ec69b355aac21641e0b7a82dba833ebe8744678e2b09b1fad0020b8ef12aa0f2c0ff24b4e156b7e5421e8b8b00e17128254f18fbe3192cc2a8d1ba2c7a0fa28e4f9ce6476610c289a1eb8f424534e37a2eb5b9da6fca44eba03f8a578eae10cd011aa2c6a425a2c4bc56c663f25695c188a61379159d6b9f9dc41a9758cd93bd6f8bdd2c5912202a934c950eaa0c89a4a07fa428d802eaf35da3fa3c9c3ebba442ebbc0eda452b27429673532855eae5c4e9843f1ca887e4fbaea929c0a1a9ed45e82b90b3f630c63ecb8fdd0c8c6a090881170acf353d73dd32017662481ba85e1b301d728ef2b88f32b80214abb0ea2755028669fbefb192a93b0fd08507756f67f802ce125846bf66609e86557857bd98399b5b1c950783a3b100bec9ae1ca0e3cb1d0829e2044b19516de00e273c8bd38413374ec5a19bc8a1369a483318cefa16ef43bfb59d3d3915499b914312eebd343ee71d15d844a3dcd7c6102b677885864084ccfd23ac50530ad95c7f7fa70e3d08bb302a84ea2e817a225ee99a0b529bb9a0a0495be5a7775a88e8b187dab7ae52fd94f6f50938156201549d1c7da6f85e3cddcabe0e2b5878136b67a6fc6b177d8faff356c2a5a62ce23f2541a70fe988b99bea435c26a4297e343c05af7a61eac27275a05036e554e6f1aa63a79c1d6ad7bd760de014c2130bf8e0ae19ee4232531c02a61850ef33cbf6cfeb868d5202c8b213b0cda3a7a9e2597e7579c862fd2a7b6aefd2fcaeecc978c326bdc5f50053ed096781ebb130161d2b89f471bbcd0f072500bd5cfed552c2fa75e5a6b9fa204d6902fd5ef401ba1599fb355d086741ae8dc0f179b6066c55dd5c844d01de997cc90a99e75b7c8c7d6cd68e799c1bf601383551dba1a9be3e91772af67a3fc343e8703796546276fa9038bf3dd577fc744457146df654b42bd1ff68a45d76afdd60333f746e249779b8e5aa4574d6925356238d4a213d6e2173e19ce84ad91a433347896bc992ed5088b9f0be43473bb559774f2b9d279aa56740982cc3529844254483cc1dc43ea4ea09fb10523ce48076556aec87a946eee1b22e929ad31676bf792fb7e45f3c32f3ed77766a66f547d43a7d1a772d28a7f8740f96ee3d8e6195cb135db8838f10756c90c936cc34c54c1b3c75385d419476a6765f2db1cbb71c7a6e8489e236f7b4ac8ae596cac444855053b10aaf0d8b5aceaa4ad816a194451e9779f701e115d2d7fc163f832ff00890d502ca77f38f84877dcc032254289ed74dc898963ae33ed9c8eb89ce45a32fc55c31061e33e0d70fb15109321ed4c2e4bad7ebc9bb4950dcfbd50da9bf8316fab335aee168aaac6a6023135dfb24f3d03911e21991c474604cb5646d76ecd49bb5c3ed7e02e8fe2a889499be3eee798f1042c00c24eaae3e589350591fe8108ef418f21a576599b907e681f5428eda56c1caf65a2e4c4352de7ab0bed85df8acee9cdf45330eaf3a0b94eff233c64af9c72d12085445d24e6e051efba2927fe166564e29d84fbae8e7c2eb60f3d4ced4a6511ee85484f7b6ea05a85219b13afa2c5ecdc1cab72ee069222f5a578043879fa9b965ea71358acab6cf95ba2c698f3c1f5d113b4c4899bc54f90613e21addeb289d4b0df180e21dbf1d9502229a31b6ab854a27ecb299896050530a7963d3f19a670d866b8748ab2c86d944bb8f0d6f42b3785fb6332a015f7251960c50dd12615fdb3c7f82965fa1421e68a3aeab413d28afc612daae65898aaca2e74c55e8d8143418a708f6e38efc99d98bef16b6c8c37a9e5abe1bc281b3dd0edf943381db96291a6d8ab996245deaa735bcb56714022556f53e28fb84465efc14804a767ae1387e80313cb6367aa34d7f4f7409965bcfba9f39f031627036a827961a409b31418a622f81c7166c4f58df04673f001391e2a3a1cedf2f68c3fa2ac2b994deaf70b2d6ef1acc24aaca2c1ef2821f80ca094382e321d6a71bc32574c823ea75388cbc60b01956b1bbe0762b08ba9f433aacb3b22686729ea2f9f3ec047e486353118162c542ebaea8f07ee23255171921a32833095db51f1c5aaf8e2cde787e58f0a74269d5cb6a8ab5ac454fc1ce03b7aa465fa617769d4cf7e7957d4dc8e7c42784514f3830233e9ea6fa3b3bcb9492030c422a2b3c3120d316c2fc17d7ace141fbea9960e05fefd378be48deee199fed49494be5ad0b3731f1a02a20bcb60100406d28350d70c5e0128d639a5f6688ae4d564ba62529327d9b3ebe3fe971269e96a1cb2d5a2d8e47316716bb5ac98b64e501e283c947413eb9720ad328de1b97ad6c8d386d5f48755521e15db42bd692d4952377316b586f594a68adf0353c76643f9a159a4a4f949aa40d8f276c56095f50065bff923c9b0fb3a7f81f1abdeecd1efecf35e7a4b20b7b7e36eeaa6263b23b2ecac01057831e51ab9e9909e61777d459bf51eb686ab364fbe23a7d12eae48d7b04ddcab28c2b04caa5888b60fb58335b9006822e312dbdff1777812cac3c9ada42a871cf64fbfd9217e2a7b93d7a2626410b26160bda8f9978c1db09699594a1ea5564b021225cf1d555f19787301bd045320d83a4ddf2f31d1edc97cca5f19b712262b002cb46e608a3bbfe17092f7f78d433e772cddd9fba302e4f03643aaca23ecdded38eaf9e01448c2066059bde62396378ae6d67dfc9ff47d6b0ab9c09ddc33b0816c63ac09877b2dc1ce2bc3d915cc5e0a027c539158b9ca9ae52ed92dea8fe85d1c3f126872ccd403fb7d932054e6fe91abbe94fdebcf221c2a9c6a26600aea9eee22bd92384cb8b7a9674b0c5715eae364f09eb48d997c93d2763dbd4711dd2d30696cc9962210d66b2d0decad10eaf2e670737b26664bdaa5888611825f09de4baa79aac86e7a7a6d12b3146945b742899baa827ec8559efb84a6a41abe21bb094aac671cc9e37d8809999a812f0c75c4043f354b57cd995943c4901a92f6cc30f08c344c81fb9e1cd67b5cf9c91b445b24c8d236e3fff0d74e4bbb1662840c4c9b7c8c6d30b32740e9fcda500021a627424b2514f044d6bfce9a41498e33466f0228b84749ab28c17f339f0487fd125aee040cf34e309cbb94db0e55003a94c73c6b3f0d65ad2c1463951d45a418107c73b0366b6b9102ee8ca0976b0925265e56ea3dc1adca4404e38ff2da986016dec0ae077edd2e3993b385acf4e07454e2a0ab0aa5f9f7d91882ba3b72fe619577103c4e8c92ad1f4fcbda32fb2f7cfdebfbd2a969f26a5ae5e2a1f0c172beafd2a56bddb1347fa98de27971568fe04b51c53a073a7cce0ce667308cc337653b6c25d5cbe3e152ba11a08997b63e15ff73db27a98ca234461c1e74f1c60998a8698b3fa4c76b7685d4db59fd300f655b3e2d943d1d39d7d60bbc0df7b9e9d06f01f17580d05e81f44f5ae16c66bc4a1e245b3416d8c86515540d7a11b8a85a3467da8d48ff7ac6f0b2ad2a4716f49f12a2e851c464375d1b05e0eda1348e698e6c0b8316e639ea98c1a5e635b5660d924cfa4e17aac38309110d0fc24a42abcdd3c97e5d79b386e836f7af482cc368188218ba6b1a83267e664d8d40e6d3537caad458d9b974327da28ba1eaae19658913a5a017fcbc0fa74ba383706e0381faffb2f314f53f22c4b3e2ab332508b0e1217fe38197deae1eeea3e73c77ca1e1137a62041010d22a14f23539c8fc6f0e93834853024f446f8f7f7ba0786e45a0afbf55d8a9f109c00c2502e117729de4375604b382be830c2e1d93a800faba765ca756ff5d4b0475a833765f66bb2a0ff663c8af86710afc87c7238f6cdcb863f1e69ddceb6316f38e9548cab7cca3ae270ca5475e6d79b3d6d5e76daaf8d81d02914ece25d6a7e365879eb4af9a5ca8b46edb9cf4c9886a9fb361cbbd9bc2f3a1e65771c89ae4bb3ac8d243feeebf3603d306c1a4166431e3db3e289265770c6eea8bf356ba1dc03685af40a5a40d95e147382b9581fe10d5a17acfbb535831435504e408d27d8b6dc0fab1053d3b063851186767d49e3116296b959c380a34ac5a9e4ce5dac73284dca0292afd9ead4c781815f22eb791c8e51839504e1cca066431f4bbae30562bfbf7892f0aa4fdd89af8277eb7dce0fd6f6b517c657e0e02f140afca6647ac03b09dbe421918650c9a5793d578a8113ad38de762d514047b1719b99a8df559a17dd0c156705b5cd5f6d82b4fdb1cc9272ff839510edf2b593a1ad36a7d05d789bec50c361995dfdbc507bbe1d15cc31030ba79b5356abf7ce4418972dc3e9c1e234e3132b85abce5ce09e8a72b7484a6de012e2720618b126f565ba9d3ab63f33d2d56ca934959a567cd286d155cc2281eb9b29486a49a5a284148bafc8b8b744fb6dd03f6bcb124f940c0227fe837456eb57725e2e56def5a8c89caf9d822e9d8242eef2f38bf8a02115ef55ea611a3be53d4e80152290a3de2e813334adb0b0b7e1d9e21f100cd6a93dca78238734274538bdf9b7b017fd0612746850f81f92c24b36332eebc5e4395bea787c53980b24833e6eeb3e03e6103d2647b7181975741b7b3b2b01a85118b9dd8c2a2da4a66b813eaea2b7d2dbfe43156a3494766e167b572f5ea2aea13280c09d84b8feb571b567bb3113e229ffb9d429a2458876c0802dc6318a2dc6f5fb346bf2def6013f74b151e45f4e029a8ae4af0358a36f1311d53d85d5f6e1cb93d28eb13be01834922985952892204f2640c415a845597101ded033be710877b71fa1eb5bec3f488a67b3cafbf6cf346fc22da37f57bad33f4f6a42b218711998ac5f5d62948e4393ad1e8dada9e4490199ba51a89c0e7b08421568d2664394c78ddec0f25ca905ad9a72810cbfa35374d1e353cc6b3691f4110bc6d493209d3d73bde1816001118bcf896c81d89ba549e664b5140982125dc15030d02f0ab720854dcf0073eebe2abb322d8f7b98a8c51fb6727b400f06b50c83e56cb2b482a76f510ddfda6aa97a2edf0b760ab9daf87eeff11827dea6fd5f5c13d469f6d40b10b43b0b9beec5c4d37e0fadca968e14cb77fc5f9299cd5d623147cd1468ac58ccb87b30d3ac4b020ee1263fec5f4efd3d7ad8a0e189a1ce88862b835324f3010d4154825ef174ce928e926e5379800e90f50f38a73b3c44ac75c5f954daf3941af1891f23166752da5ac536010352dda917faff8b1de0cfe0ebd4d9541babcc736369040fb6cd5d0eb4674c039521e5907ba42dd12d1aaa572a5b92d27884a8c17bb865c8208fe6a28598c1f1bb81b6e6588a52e244455326e119d7d73faae260569684e60e54e2bebd025e530d9f314c1be817b0c427f7591e484bbf464be6a26bf2e594f179a9b8ee7825e216bcbf5a2b8291ed49e736a4b29b63b5d4d67af49f35c7fffae1307882c5b958ba4c7db163dda6ce0af7f2f52a3dd0c23700c6112aaef3e6c5ad4a32504acbf0aaba8cfdc1463f130bdf5569ab13e8030fd2e828ae3f457002dbfbd0a0644291570daf588579ba8fd3fa45f9cc46827cc66eac1aeebd8071deb718361ba498e4678a3fce7b9c81915e87d529c04082f7eaa4221949c32fc16abd6974338c27ac95bdeaaf3e0004837aeaedecd21e7474597bcaac33fd10a06cd82809424f5dc203ca2b3b26ec24668d667730663ed4c080852cc5a3ca4bbbdcfa1ae6cf08ca827eb11cdf851d8215581c8ebc663e5a269f8d2df9ac9552032e5a416e45bfa7671228f18b8668e6edbe00f859beba7baadcfe56654ed0e30c097cce66637d18cdaed2daf37b27b4c08b7867512a3d6988e91ddbc0585e21bb811cd5b8a2ff91db36cc33b293d6df78bb68c6f4c7202422e3757e79be7e5b8a17540efb35a822de51ef69b5674015b8a893502544b1c85f78c75b5643ce0b79172bcfa9b1de8ca4c40d953096bb6b604f167680b989a3a569d3150d2400b7f9cc2671ef6db1d862053e8be7444692699175267a7154a044dd7d7e19b8b065d7cd396428b6c1b2dbc71e50a977a8e756a48d207c9446447551a54b0855c8ff73330b49bddac5ebc085bd0696648b1d3cb698e8549e87bd39c7a3ae13afdfdd355d0382c712f5b0f4a2520ddeaf1d5641e6abd25e2ef2f58ae78da7b4d50d71747ead87fff856ee2ab33e70dafee76f56630d74e02162b1ff38aa6b484c060d82d68101bdd9e3af4c923b435f8b1a67c46a2b5ab2f175131cf178c3b4ad7531e21e0e874f9e5e6c81ac99e5d0c99d93ea0134763dd8c926916ca09e2424e7ffcc1e726bfa694603d873be8cd258dd9abd3f17d32bd9e4ef5a70e17fd695ff46919db00cab0ed43d545a606cddb3d53eb65b868a848111c07ca0979088733caced481225a31689d0dc28afdce04b5d3a17be5aa7fc25f6bd036c36af4ee1e9c1cf70134508f75fb5fa4c01e46e913c4b22ea01d001df7d6e23357eada6cdaedc0169e9f19927519150dcdd7ed61189c0bd14573e51e20d4ff1b3ee9bef3871562bad80adf03658128c700ca74308aa002bbf73f5d22a1cbb6469238bf024e3fc5d821078017fb2b4041a437ac4dc369d8521872a0fe79de02652bbc2fdcdc91e1c3247555a381601e89f9ecc08babf7104e8fed2df322b4593d88c90e6dd30fcfcba50c77ac40d9411f4d89ce326d26993de08eabd6c7a01ed458adb17ef5384a94d1eb1d7a0b7daa1631b1e828d52d615be211ad15f2b416c57874c332f13857632965e26450412bc9c4d5352fb8d950b02f28521a40da5ff6f1c3eabeab12bfcf13a50dc01bcab9674e36f19d4631fc1218ad0e3879d4060db4d7e4529d692f8689f401637c732525cce15e5f68f567cea21a3b18b8688ac37bcdf7fb9ba50ca6a40474972176fc70478edf63ae8b6aea6ae4974342913f35ecb56f0181905c1e5f29814c3cefd329cdc89e6bc00833c714c5f176d535b5e76e000e494fc4c294a4e400d8a94853301b699752e01a068e316c6958b27e4992593e33bb9ba012ffc913e236b36e52676be41980e240e6bb306c3c4f45a775dfd1a5cfc14df1c91a6aaf1d3e51bf851676033878b27c643075f211c246eaeea7ee35fb015e24b9ff4259a766f27924f8238fa02b0e29e2296bb787023ca70bcf75bf590fb5336161e1b58ac6d5a71e7cd596c4911c7476dd6a7c64e52ad73650d1f5fbfdf8ca980aba417c16af27dd17b92d8a3e2e7ef50a0e60c99a6bf5a973502dee24aa012d6c4861d0b287f9748a1c818baa301624cd8616f6d783afa83c32804d225dbe52cc5c961148eb10413cff6e338e37cf15703c7a5832b7851de9d29211ef7c660e661e526e45bf04e0f4c466b20a235845b0f67904258a0d092e3406030fea15ac60fe2240f2bae1d9f137e3d3d78d9213a59ba9bb4ecc33bbef36fe088e197b2700937f3469c4cc3bf5be5e0e669c4f6543a702f4d2fd8b60eb32e5fa5a8209171aee71c37cae245abbe87b1e5ee7ae5b985b08f3f7b5383e091440cdbec6211250502423a7956b1a086eacd51c3635417a93ef068ad111358a7daae36ee0af668a378ea4403762fe739ad5322cf44d1ead0fd4d90e9897789e0910ad2005facdf77252ce9f71c133e851c9c102529bfde9faffa38b5a846d3ce673f7006a1ebb7df10acd192b99151dd6356b7dabf516c9e9cec0c80f2813af21479283dba863d8b77ec865f1a4694818ae282d7c6e7ede60d3e5244dfc4a5304ba1ae93987965e476b674a5dd568d0feeca628553f6dcc6b302e801bb466322055cbd6ebabe605245e38bfef3da2da3ec0d0c68670a9bb145ec53fc1865c07023a0798ee477590a4c892fff3e181309a50cffebee0b9a261842c1d6cd397593860f8efc4262c16f0fcb50aa7849cb2b4b570394700e3327b2eb331d7beb23bb36c167b0d647c7306e8a69c38ee492a05935fceda800f6df7ea4879ed27bed158a883d1001fa3d73e575520ed8a9cfdf4d539d5387a9dc72b4d5451bc286caddf3912a6a6b64ada174a1c250f9324c0c242b9b082188d98c0685174741baa1b3c9e883c27a33be0fb6bea9ca58a1cbcf50f87ede9b671ce719051e767f8c70dcc3cb7c1f1fbafbdf6e587c74793308decc40202592c0cb7cd9337ac60436c5d45efffeec8f9f3462d4bef6cd73395bd09cdb3ef34e88af1c17d5c435ad400380e7a4c9852387ebce06e68daf78761c09cebd0a08fbbaa181c143736ab60c91373141e031e6c6893b16ffc9726fde78d6bfb1b35b09e33579efc11413803ae4f92e6831c8c8232052f5205dc40232bcf62339eaa83e421a4fb898f3bfeb800029d24a2cc99829ee34e690bf47051fece72eaf52cb199e8573b02f8441dc71048f5271831730bebd8857569e238a7663563c005df1fccf97cfc36a50d5f63f5137455cbd54e539ad7bc5387c01162959f9bb8637dbd24c06754b6a8be584ef7711432cdc45910627233ca30cadc5a304cfd31ccc645e5a85fb496e8fbeec4884a5ed0c4935139f3aad5ae654a24c6b6222823f411ef7d6da0b9cb6417e765f485442ebbc14e55f4b9825c2ba8c14ca2ae0c558acc213af1c5d8787228a4c89bf4d2e79062737e9b3975785eb8e1f8f9a9406f8ce5fb9e9db03a54ac2a0a3533e3367a62205495938e8518d84e454c10568dd11469dcdcd78a27efe7f4d82268719338878fa1a3ba36078037842c5442202e0a02a98d5bbcc1ccc66e047e8950a3118dc36b35714b1243db2acdb3ef0269bfe1de6a3a15787625ed47c00ec9d5bc17a76b9576bea86d45cc93a8f2128e8052554a967b5cfe42ce247183ea9bf229816dcdb6a201442e21b7448bd300dba4f49de2fc7404f2a3a5e5ba2215f0664d9477281efda04c471b0da4cad5a74d190b64497b190d55ddff98eb0a242d1177c63d9ce16562fc4bd987933212733bfbc8cde57c5b98dcd59aaac9a54bc707418f502c08bd47fa5088140b8b8401653aae8c6225dfca565c807b748e8ed7d9b9a2a67706088ef433c908112e2a8f87f48ed6cd45f3f09294fca19bfe402426bab58b5037b32eb64e31784a8d63397e6cf211e7a923eb874275fd56f7939eaa2ba8ef97203f9a7d304e2d002f39331f8640426dd3047e582b70a9bef291c514b013b55a7eecb22d11e3cf1bb4a1175697998ecc91b3013d696c7d38130abb89cda9701500caad7e5711c9a4719d1c76baea934260207b8062af0dacf99d2f1622b04af5e434b52f1e59130a2ac8b0b30231413376d23e961b954865a53907e206800376bce996e82a360e4b728dc2ad029f7c5757f92a3501e897a630ed699a11215c2fe1f358cf64d4013afc7df0e778382409ca25eb1d64107df8205dc467fbd5163385d73570f307bd24f9638024013da8d4fe33df8420871f922d63ece0efc88d1a7122cd5e674014711e8b3406a1ec4371d139cc6b609c774684da856443c4417e0b28b412dfa37a8fd7b84a74b3a486fd9e23b47100c3c5898f7e446ed4e8943dbb641d0e10fd36829b4d517064322c81ec49b03fd19464394b471ea8da334cf424f9dab1222aa1ce063513e68571b32cd48676db8961f949f84a306cb94b4a70643a4da6b4ce04b4703845d566e8294acaaca17e9cb869134da2a92281ff25b4b4883c2c7b3f624cf0bf32e2ae3cc776560f51ff751e3370786f1115c556cef9ca9424038c1e0a340150f4d5b37a5dd6937c65bde2f45d21c8afb929d1181b401abfdada7fd3e4c41f8a089c95d6c8f3283dc38d55d2c2d7e9dfc66ade8a1b4e0bf6ee4d3150be185c005d0cf41dc95ead30b3ac6ad419d1ad3a104640945a8179ed2a79f6bf72a4a179795bba4afcea02532715fac58750295b002ed01f5b63112d144300007bb7b641845263cdabeadbd8ab70cb63b2d31575204b323c4a11e3b06e9e1e09cc683c4ef19bee65c5262d638022ec29537f7635a0792fa9884a5a29f6cf1b5fc2676318c618ab38b6fed2becf4c2aeaff2362d0e7062e9b52176f9a4134d19c284bb65c0d87d82d0f098f871439b5ee119c35d07f7a51081992708f25ee728dfc2cd5fff62517daa2475471e6396a9367a3171c9cea1f9e3a72cd1745eff90dafe50e0a4e4ab555d16328937880f8752d3c84893c29509d1feb0d3c7e37b1568db86d087a0fc0872ad7ba712fe2f432f0a689d39e57d8cda73119e763315838f5cc13568ce4c818cb3ed57aad58eefa28b88535b4cff3c43ee58c81455de11f931e461bda88746b4a4b7eff96fca84eb61e4b2937a6b5cc4cb482c07771c5a5b111897be3281db96773bfc1283763c5c98e16149cb322c0a90190cf33fb99d0f3299e52ca1fbd34771495bca0b6b006a02717f66d16fedf1a7ca61a00f6f8d2658c9bda32eff776f7ccf4bba3668c4b8f3b9614e49e10fe7b61f7691585fa2f36aa5680485d4ac5deea1e38ac2b3a8300b90c52bf684f8110fce1ae52ab1e84aed59322c28c3099eb1e060b4c78bc26d31886e6f565c99e60c43be7f6caa835565d1aedfb0f2d7f90f586d9edec7c989537431dd2ad3a69e7f3ea90574ca5d8aab09cd3545ddf429e4cefeb80092381c1f610e6b15fffd1796171e70455e48b86b949f84428235ca95165d4f5803a00c89a84efb6b1862417aa76d07bb3b96fd44b4d63c526383c8fd5cc0f804466c872779c273aec7e51608b412e243bc04e3fe5a67af71724a5d431009226b6eccf19027b7c26584a9ee766d986c6318a03838ce11d698edcedb20a6a766891b42d25fe4d4bd4a239d427ac5f7d87bf7c8f5e199c3aef3e0a7387859522ac636d73f3d4b15aad59282f71e0ac7e1d0412a48738be9df547a7ca33b9aaf2140236e4775f57037402777622eac1b29760dd1b08ba2ce3501b438be921e2defe6e2a36609fe2f40eecadf3a53463a189218af8ef055d8de4e3eb5b95890e38f4e7b5ca03983186827b32687d4867fe6f15fb74f0f708f8bc6ced5691dc0339077e62c9694d0e5adf703b4c37bb71161892806c668e06e3da3c2723415b29df426d2717eb9ebf3dd7d98833339a5d3e8683d4b4a57407796bb83f8f12436855c832082da01385ac2008528242a31a9e636f0668d9e760f7d050dcb3f5187e08fb47207e3a96143c0c2c2a47afdc7740374b0223dced27b927bd5a258a3a697e04a6a33364db1133b38e2f035a99a2b6a99d43165bf86717f3ab5a3ab255d78fbddf4e34138834517a4dfec29e95a1a5cb28e0d57f6a155e44379f58e3138959dcecace3bc04f93a951380739f04464b6b252229a5819cf8c8904f139728b4684f96ef84c166c3e73e975a64808a4495b9f2b8882697a647360666673909cbeb1fbf883ef642701479039c4b7368320d08090ad6812bbec9224b68bbc4d8d9cf8553e18efc57a796374ff55dda19566eee996c034df2639b271ef1939f929be1aacc62f8e3f72467b3e395a95356543c34cc1355df12536271754eb2bdef68e5657561c78dd8917eaf293c4f69fe97af94264d073203e73cd1ee038d112237d9393b13a9080adacd2c646fdbfd2518dc290fdc908290922aaece893652a2223625d19a91948ab288c116f9abd0b28accba42903836dfe844148263cc48a6ffabaa0dbe7e7a01336dfeb04262a7b4ee2c868e5abbcbbcfe90be722c98a004a059fb045a361fa9f72a34bdc1c7c8ebfd87028e4ddc5a5000d07eb73f873eb1d6e231769415db068d847f40e22291812ad2ee323875edadbb73e9b1669f839e745e7b644af578d05a91befa451304900406efa2a5bedc7c4da82e67b21d76f4a33d7de6352b55b576013f0a11505785b44325460ea4a9c5606225cefac62c1fd919fb21e06f5e50166b1c37a64160919d31105a98ab64e096715bfe41d818cbf22447e10b245cff75660a2163adb8578ce34c27d073ad6e083760cd6fef9b87e4ef93dd2237a04e1af4f8b630ab890654b83ec98485c1e3cb2b45769f623387114a2690fb64a7e44f22b15920c65bbd0e8fe0a50a7488d153a4e4ea41994219eeb67bdab52dfc978cbcc1472bfeb3334b421ff5a856bf4de7c0c305729f25d6b024e569c35e37799a38d30da0bf7e5914c94e2e163ec916a4d3ed84aaf98004050bddde20995eabd1063b6bcecf0a71cd4a553f5eb35680c4dd2d1b1adb8565d065bbd7d9e576a85ff740ae15fbccabb60409b8e8854e209a166452999f90c3da8cd11fa7023f6b02aff4c306266efce76e45e5495eafe4ba76b987b2b28b05a7ffb2a687dd8cd58c38560db618c7d1551b83bf4a7b6c182e34b523b0fcde3dc76a7edc2a1013574cb934e131f3cd4d6b11862305b8ee713d28019bf5fe8f3cb42cc3c39ea7b26adf4e8248b60510ebab00e3a6cd01a677ccfbaa94861403f2cb24de30b7d318291caa6ffcb807c98b3594a98f435cec6bc38171a37f3fd0d73d3f57a615d4653e70b0e0ff0853230aa2ddc912af0baa343d08e3f9973c93b3aa631feb0b944024761a4966e2b26108218d05d7671b37daeca2d12fe63529fb366f48f117c840a70222a6d7408bcae6818a920d4c2c3eb4c3e0683b6ba5380e54912d84d348190b51a22ad41d892f29dea9d75314cad4dca83452f1ce2046ac884d6dd0102a385b49dec27e470ae9406bdf78ad3f2df91779b741f44bb5b673baee213d20808e48acbd3897ad921de8c3714d02767aeca8da82da0e1b84fa92d2de7a7455864e69d41e53a051c5dfa9725fbc91c16ef55499c736a3b07f1792489e857edd232d02c0bd7226096bf8dc77d6de35ef99feccf4fe2cc36e033b784dd20b1944143ec3cedf04df1e5bf3a7897a25d2d2765fde778057e5244343e950b3547f95478eabda199fb13cd06ac7375a5ae6577564d3f81160b2b437e64ce884bec3de6de2a67c5e8ab3a0c6a45ebec421ce0aaaaf79e45ea3b74100c3097fca2da6efc91097fc2d5d50700ce0158c3d04a7b4b387f8bd6f4395573fd1205b1a69d9104682f0fdd427c82b260f503f2080e9b43cb9c12cf7a9f68346bd24876da3b0002c84a9fbbb7e8f626e90f9f51e1847b8a064a077127d57bad0437b530a7ae8c8ef1f20b06dd59958bbc01730361892b27b4ea26a96b58e7c1132a9447c2d7fd772766759d291a1ff4527bea5edef8bf839bd40b7b78d9301730ea587189a44534c4d701c7944f40ea8ea5ca295ba857fb57577f89943d9a125e02c67b97da445161d67ff58541f143b1aa281685788324383c16e89055329b4c310881918807db5b9a605fbb8b7cbda75131f601207af11101184694ff66b9a09a466addb3cd4030d97d1819bb300dc937b889cd6fd795ca7f338df75c4a7201cfe5a93540940663f40b93ae2bb9c4b82538086d9f61d6f5b1435177735ba7b4eea768a8fb7a5fdc3446fa127ba9a368612d2dd7206fea735fb1396a4f6ed55bb3afe5eb2eb2a39cb967f6756af5b8a5114375a4496700130a2bdcd76e5ca010c6ffb77e7e482c33c7cecb49d1fbf035ae263f6c89e106b94a3a1c4a34a77caa129e25be10a1e3dbaa72ac59f78d92e76eab16538cefbbcdefaa074119b2c9628b0f1a48c15565507d8d0cd3fba9958e42ca7da125ba70a032e2a6f98d5648cc83104ab7405c2adc728ee525e71d663278822cd37daf1dc929b83650605fc410a6f70f179289847aa6ff3d00e6d0040d148a474f859b9de97fcf35010b87c46d87c5402d6a60425db41a8bbac413f7ca335bc94d321176960bb9c5bffee7c22cebe8d8e5358a194efc86bf5d43b3fb02cb0b27460b635710700124124594a973583782a305332f1573c3b5a297e6517d1a3f83d9cd7c5996953c69fbfdb680e65634798eb7afb2ffc2de375d10a515aa77fabac1a9b58b82e7d5d9530f35b4bc6a56110b6e6ce22ceb32af19eb7f2c1bcfd2980d53da303c25725af8637ee447541954210c58e2b63c21a93072f0f4a24bac1e64fdd41b314abd6c372a5df7e3df387a4039abe0c71a8e2378130167b15c2038202ed9f56852036680ab812717044c9145338c90b717566b2afdddc50de45af482f3c551e940c1a8e4a4714ddb2c6ebff1fb79db900fcf98bc25cf8b5251cf418d7afc095d6aa08655ae6951c7f007fe1e225d935f7c1763d9537a914b02a8ec4d68fd46deb32c696f2a00d4e5cac49a9e81a5509589a3db85fba47ac351358ce43bea03dc53c16195743631f5080d546dacfc14c684b45594831812ae5263b407483820cf82f5fba35951ee969a9f09c8c96c12fe883e418b496f8ebf0b1938e848753bfc12c7cced6eddfe5bba8e4c5e53b220a531382c13381f36ce19983b444e4c106987b8019494e0469859da1c12ae85b75ffd00739ba16cbe3c4ffaf3618ff9ea7c7bc054218850cf33a464a3adac04f6830d2f817fc8052f14cb6a5c723ad528d0102b1207eb0f40363c872acfdb637d3435821528d30c80c8600dbaea25bd89785a59bf9cd63ba1eb812ec806ff363b1ea3aa50511972410f47441a710ab30a5f7d6b008d10aea799cf7109fc678ad632f7f857f62ab4d167643dbb174140daed17b4f56c0be3c5a6bd1cf1819ee47e35382875af9ae6879bfe4e517815daff3f67d5f24c83c90096e7e4661edc9b75f32cc955c5796371c9a840b3afb17a1a66d1f1b9005012b2a3814d71708622340efcbe76a5ace3936effd98cd7a8b4a33fc2ec56d88e0d7adcab6e8a7266d95aaa9d9f3760cbc29a03ac9a0256436db6b1ae4a5ab8b0b829d34a47f170a37db465b352ff48166eb3c7f08c26ffd1f3d15e6e191ae43dd071f980d4950f9e72a80c2763ead7838b12341ff23d1dc6c754d5730f7bc4f39ea054b7517bfe077bbf350aeab523863664d68a5edc2a8b62a96255db7286ad2790c212c03c93033b844f5358f5828b4e0efaf6c85d8363e4719c930ddadf30c7876f986b8a8cc67e94da4fc6772b67668159d12a2daf0737bfcc8f3d3740ef76f33b38a1334d595a2f5a376fa31ccd527d6b2cb0bdd69212121e61f94300f5cdf040862e2dc8deac300d7f3c7d594370ee7acf7d872a3a724118bcd479e8cfc359f78ed21eb093e8d0976262de507157d24e89e512ecc4da310d9bdc3384b0200c2648150722e2fd29e86fbc71b80dd17dc8d958fb24cb741ce60c43451518bd6deffb704de9dc22989803f9d13f4aeb0452dd727d6c2dc8342921024d94026ab808cb2753174f161c7a9d37a1ccf7f4f49236660cd020cc06a985e45f237558fae94c9da7f86474cba95a7a8fa1cc38965e7f69eb191e62420073bcce418d4ecbb8f590aa65876ef943a370509967e1e1e7b99523675996adfb5f53ed0b78fe89514e284cd306830061006495667381568ccd609bc497dda4396b4c970bfa6f56099a4f12f33a3135f5b3c9153ccbf607657ec9475dfca2cdd064d0502bd0969b3b8800fcfa0461892afdbd16c7489b4ab1ae8add3804fd801b8331dc7d896e260b7fcc766292b73dad191dbad58307d8f049dc1323ac459bacf8f6c3c769fb18e3be11b9a5f696f71251183b731a69a0f0b944a4b50517a608c51e23b605ef6a9cb93af3dd9c4b631a2180d1a2a9ac32cf64285c87034516649791f7892fbe31b596f74694a73a8cf61cc558be4a26e5e00202a420fb885672d788129203a8ca8bdd5a4093a1a46dc6edb98209fc2b5d0532c5226ec11e51418f4d55f906d68f7df5977c61fc84f36b86bfe0092bc293d5b454a47ee1de126629a16a657a57c09caa7166ff2a09543195e829c087d61af1c4b66f6e4e68c0b35de6a76ea170f9822a19882b192ada2b9ac9268565250740d7a3d389c5f5be1f7f1de89e10b12683f8773e2a198c4a28338dc8814110123fca8043b058d132cc143e5a747ff249f599bffb52972df6557e765403f8b2c3563aa955e5289a7a8e518401f7113aae0d6c67628525a67831fef79c3417a71fe78d0a31a72f848ae0fcbaacb8fa1f028d5fd22c3879ee26d6b0d0299b904a1f4c9d602e7ad02de9977c6f6dd3c7bbf74ca2105c6bed81756cd7ba4638105babd7f14d8bd98c8c3d1cd863351b5886b41665b76bbd475d6dfc6696e48d461e7fe0c00fb1e50868a4761bb0cd6dc86f357521ff6e22cb3dd70cf26c8bb49ee3668f6bde8bd40501ed009faf56491e02d0c0a29c78fd79e6c806202a7992e61f72d9bd5d218cac06799383451ccd7487740a55eae2e12dc425ca697ed9b86ff42f3446ead018b1642681d160e78a950ad21019933878cbd136167c29286e2ab59d52a7700434cb17ccdfe044f4b9391ee972a6760e4152a340d5317645dd12de621265ed7df4b770ccb35db3f7404c606b4065fc8b178e9a30a6446756c2609b6ee18e27562cbaa711f601e6a123a646823e8e355aa95c01952a21d45d713f3f73eb13501d509a6e5f2efa6093432095f6e22e61e1937c54f05f8198281c978ef6ea1bc0797a3d742ebc4d40c649989a38e745f6773c773c0bea1496771b078fcb5837a8585e2343839e804093e8f92e17f4b921fd0bcf3f89213e6ecbccc6011808925f2f5101b48e7666406587c171ed0b3578a3dd792dcbfd3910d0a6f335e585969314817700d2d8b624632460e5c784d1af057c88ee38f8addc2174bfde2ffe0e42c23cd7f8598ef679be7412591b29ceebf349fbcd388be83958b9ba172d4de9c7fc146fbefc26afd4156f6f7d8faa4b035deb9de49919323f128593b743a2a7e52053f4b08ad5c31b8a0dd1fad393f1c69c2cbb954327fd0fb732c3edc3d2dda9f4ceec24aeb79855ff109f85521a05a2e7c31b1b3598f7e1301d9528f2c0b712a88ea604b51f56bde9be1c9c80d6b2531260a6611653db3216f296110a546de8ebfb2d9ffca4b36a391f64a1b5c26c77516800fd1f2f00922b5194c274aaee8af5c67d5bc3549cfe593d26cdfed00d639a08eb96f7ccd403d4b6e195173a62485600ae632fdc31ab3c0dd0ca69fa53653628f7ddfb5bbed5c3e98eaeb43c7f628ab581940f9fda622caa0a637303aefff5a48880fed6d68441e696bb766aabbde97dda8a1d53ba467f04e75676c3b30a9534e705d560848a8b3e76d3dcf3cefd5407b9300723df16c57b99f80c2018b3d7651992234d8c1e50356cf3bfb554bcb360bf625c00412c2707b1e6fd2d69a57e9500f56bf6d4532f5e13182f93a95038c58f3e90426e1e145bb016998b1ec4d6f73d0dcd6703d7886fa8acc622c930d6f72807bcd90d0eca8d963d18b330dd80439447be711a467032bc1e6a4505360876f6671649fb92cd79d2dea256beb1dc41704caf29756024e442af0ee19486d766f2c9e38a698160c1acc2d15db1e84238193505f94a0d4853ce63ce42588cd81f937668148ca5633cf451f4c593c09205bb8d0958a575b3c3eed212f91b84c7c2003d0a5963896a7c747cc0d48c4f049780e32fbbd29b1228636d35426381b1fa1a932f06f8b07e0e0bc7bad4090886bfbd176f37b35edeb0ac01e0ee96f5dc9061b13d9abc25f24d569333dfc9b2fd67c1a3cb044d6b56de05fc1b1112f52109aa2d67f1fa10c09713754d45840de27208e84d2f09bce5962caa0aa5fee2a2d0e8933ab37fd51ab804e30ea6efefde799d69dc1fc0ee2b2c23218d5f1a7c36d8decf18795d3c5ae5d4e9a24117341fc76fcabe50d24bdf3d22f7393744b3b3ee8c5689e5ff77f4df98c2195c55784e66bcb9f79a36231d30472f9c6dc9215328820f4ba08f58f49dc02a0bff7084024eaf53b85a913cd349b80f61b2a7a9ab062171f03e13f8e0b4e4ed8b0f315c8612e24fe3b884e00d2546aefc87002a39eecfacdefae178e3b02eae30a075b88ce8fe1a1b6029d3ada5cff6017d7bd2536c5aecf9c07ac041324cf2dc8e2617d5b88dad14c66281e639d84db55deb748b5ff68584111d6dbd936ac2a9a2bfac968de3599b5c3bc67198b95c2eb5f1e83899981ff6db81942029c4f347b8e36f1b3fe973150ae659df77f16a23919cf84d4c9b89bb82f2bd84522856a7d1aef388f9f6821b48d11efbaa3a3c409ec13d6264575d6bc75b5b3b002ef7b9a9a9882dc7ab10ce5dc0b3f02454093c57a2e8f90d383fca8c736c3f432e747bc5a8c55ed5ac29ef25e18299244d900a769d303523ce7c537402523f3cda2310deb37a7b9ba128f185837d725f2a8acfb6233ffa675c358ea6454892ba2f346d034ab904bff527dc5f239cd512f1acf00718a2f3cb9168c45ae0eeffaa65b21e2700ae1dee346f83436f5dd702f6ba823219a32550fdba68c17e161be1bd7c6c1b9119388ea57e30f90bdc3402c7a45148ad9a2cece1092efdfe6e2f15427ac63a60a68a89b8fee9dc187309e09aeeca0768d2d57b6daebdba992dbab02a96b7fc0129a81bb9c07c36560eeca798a659e46d3c60b10b82be012d1337955e168d9df6d0fbb7c1d2941c2583940dbe4d6d226094f5c76ceee7cae1c11286809aef20ac5065225cb5c26517f1866b933485a69aa6275f56ae7bb84793174a9f306c5a3770de57761e3ebcfb19f4c7072a107684dae2ece341efb4fd0f2e97ff9d31c8348a9705e0640fa87b21c330cf0a5c1c93266c833f3cf29acf457ebd23818b2f46ffade86d823fd3ccb32a0aab3ac50aaad7b9343668a4d66cafe534ae5bb052b5d4575f914eaf4c2757c3efb5b6be08794ab1e457094a28f56bd12fd0d7f645850a7a73a54506c0bcb916caa106bb95af35c8aa19ed32eb60f8e6162f43890ad69ffe82d2c1e3920e3f9569c886b8f0637085120ef16a4f386b156436e5c2b46e03df7f549dc5e8065d56c503eec6958c94c7ab97faa566c06db76583883be6b7eba02b5d2d149f5e004221d713b96669424114e5eaddfa984d648b1d218d0095778d885c4efa567b017dccb1f5df0a988c8bbe3c56c3b12c2247ff87c619986f1ca09fbe1e290f10dc8330168449a1aae90895bb1c2a1289c782c24715e2e8ed7ffebc71c0fbed4bc752434276bf45382c2d06883824ba37372142b985297df7f85faa6a9562caf86e6cac2d37b100a7df9154ca61f9de4ed4190161f8f1c5b23a962e03e2afa167058f3f3e388ee0613cc8777dbf352010536dc706db07abc6ab12c2dded6a24fef67f211bc1b94f18697129878ca20ac95ff193930f8ef3b35310fcf5ded723f27852e1605fb800e6b5906df38bb05252148a02f69517ac1a40233729cd9790376d7ac47bda4fc1bdf51711197bc6a0c87b7445100f633af31124a28a314a8025cb0ba6c826011f6b18e9628ee64fe4605a3147160beaae854a17381e8bbffd44e8ca35031ddb8a732d4c0a92cf9e3274aedc2e9d979e747863c7f2a4a1f59c25588b8810e95d4be8ffaa8cc372f2fbcc946d4202bab6530b520312082d11594b941aac22fe195c9cab8dfdd24b7b7cf81fe8a7462c39d710d9c5f21d32595e1d29927bde125e1a786aa476db11ba432bef297cc90810095fc5de00c7ba09ebcc66ec1ea7a03a03cdf3fb106eec31128aca172bc91896acbdf95dbc6d8efe65ae2a12d44cf6e793b9bb1968a0848bd8fb14d7a2d25faf33b7d4013d9c731422dde0e1ff678db67c90cefb80a4c45d8d3f5cc268dd6c94a922cf4ada597129460193d1031baf31d6d7c87eb13c950aeb865fd56c5b64fb9b983b044043d42f20ba78b70557e51234f530db7f142ee4bd3d416e628768465ee1b1c540359ec2225da057b79a024828d20dea54d4792f5cc5bd979477e3e3d9286cb4d87ad1f35e6eae5f5b8ca76d8ca2f3b69238ab649a34e1f742b33e819ecd6c121648f935e5455e4ac8db3fd5b8037a91f8bb77cb673d361b8ae72577b6614408c18832055e1570ab0c90fd89c475222f9957958570ccc522aa3e8a4713165ba939665a34d9ac20b728714229f0d7d518a316e0fad158a0ec94fd5af7aab5ea83fe8f7a5814de718ec8876469a82c85118007857ad64e3e5c8292fe4c22b68a30d95dd4cb49d02ec4e7ef457683c62442a0835ea3c5e416f8692cd71088fda842f370dd7f34ec669bea4078ebeee068ba3dc76725bfa6b1a448572b57eae3a0a423a230d63c4141be3c2f0372a0243955f7ed3ed782432beaa6453cf5688971fcefa1a3bdaff8fd9481b4d81ea9e35b909ec1b861cdfd37907627a491746cf95562e694a2bfbc34e825694deda159b9134b9135fd54f0e285b0b91b03137b31fc4c4716bed6e730f2668e6cf96602338a939547afcd514711da7b28596f1baa3c30c6fc1e72047f395391222d5836abfda15a4d9fed20d00cc2e5397f5f18d6fc260fb2db75e039d019d96cc91062c7e9d5456ccec29cc67151ded666b1ef016181603ccc505a998261b0de310a286d80b340ae2e3fd6ea4c867e2f76d68558c66a1ae2382e7e5d51cc1e053211cfa13437eaf65c6d8010762396771c142a39d66d95a7886e327281effc09ea38000929d4f4b430d6fe743620fd7e3fa0d4f967156b6984bfb13c6944923df143a83b7323188e1c0b45b8310db7d7583c34e3e9a7dde2deb703798784fc4a0556b0accf91d11183b45ec68b451ba36b990fa5057e8bbbeb9eb0ca708ec0f563189f7c0cab9f16445328cc2dc1053c133e92977c46d2bafe7c83c381a0849060b20484ca4ac3c077cf59e9ef8ac786489aed9ae4323a3fa38b175e2fa707280b61543025ed4e29194291006eba3f9ff43f49d409549e07874160755cb09c096533e40ec2551217719b4bf96b6cd8325db9c92ff612c02abe01651c16a49f64ec5db96aefe8db3208e0b88d9170f9708b4d11b5dcb752560bc47555bab7abe12bc08cf66da1af442ac3a695cae52a6669c39f53dc0389f5ea6832c4dd90a25e058734762b2fc44f5dd7d4c892be1df8887062c5132fde2165791e92e9b0aa091061026499fa12efd246b45a42563c935eaea70b1645b87bfc578cfd4d0b3f4eae6bbb4242cf61ce760deea83f23ca5d7e09e854fbe6a2b0968499b9f236e798e6c1c30441361f5999a105579296706a0352ffb2ed80ab796494a668749d34c856c34092af1987948ee45f62dcb0e01fb56637b58f9309bcfb8888c29c526cabb2df27b5fca2b6a0fcf9c2ffc83bda2e0cba90b8491ae00c43e9b0b283609af557d8eea5dff213fff3f1ad20d95acfb45c5177b95787ea45f34a02167eacb499f3a32a3159dda4397f38a16e10f6a9f7e2356740323d67d7237cdaffc2bffe047c4e78b15b11707bd5a7ac456bee727baacf45bebd8b52db9e4c7219cdee4d958a64b6ff2ddd20326f46835e109e62d74f059845bb2d24a7e7d0333ab8069ab8d8935eb1dca564a94c53169ea4ef5823c95ca348b015223d9f645a8e0c25a8e783a344c4095f0ec5e02ea998a8cc149adf17e66fccd5c7880823cfe6330af29d6c8b76a1060d3e9fcaa3ac1f9d26728ec6418d3a0f2170ba9343d6519f1b07ce20404e213c6a0a6f0abf778610a4f70a867adf75430e5c50d0cb363888d4b6828aaf9acd9761e24e3736edcd11d45e0b3127cbf5bfeab3fe489aefa1987aa9ccf2d28dae31e109ffd6d5a3f6036b83caae7ed7e2319a52ddbe88f58ba628fa6cb0de76ef887e0a77b9f59f6d1917c6bbe924f9dc580b5d20c4fba7193c476fa0ecb421f2a1860d00ed8ff7a1d284eebdd003d4aff9b3ce39e0eb85e565ae08904271f505408bd3ffd94a120fc80f7909e1c2f405e30523706da5080167cd5c48d238142a45b9113af562b9cf6ad04ddae4379b61265969406c65829907aba3e9f343e8cd3d54a9a76ced9f6a415765e4f312875e0f129dcbecf7c16eac4dcee538cde6758cec8abbc6af2e466c5bfd7e45c4fc61c19fe83609f71705f87e75235ca26cfeb4935d5d6dc6ed0ab3b31cce81c5c19f0194f8bdb94e6f866836cd04abe404452776c9f6d8cebba29eaf1a5ec10318bbbdfeb99625bb14f1d60d3cb856d742320fcc3929d5452a21fb9d230d19bb83600cc438217d3e6eb83a4c400d4d4d3629c1c74c84c40e480518316785137f9e6a7ea6bcb1876c7baf204aa420644f10f42eb27284505dc73b4d578708152793ebcd3aebecf9a139b563e56b1f7a43c982280a3f7ab252f7cb895f9d67a99fcc74417c0115534bd65e71301a1e9f987edb76f868cc98513c9cd275634b9df09e7912bf5b931cc5da7620729dee437e7e170e90783ec89401d946ef1372e4b540c6253c892d208bf01c2188dacb8e1b85005228e1551bad7159608523df470ba3757741308495e7755956b54a2b5c58a96df57950b82c71de47c44584fcd83154d97f8e7843d0faaa9970bcbd2e80b2867adce616865cad44440564cd8b8a33e51ac00c4a9ac2c9c56f12c685706a40062056d2e4d02a7898c5597976d4763f32312dfe554e40b7e76debe9488dab466f1f871481d9dfebce1dda45870414f3799a1989099bf483c4848c24d7b2f162aff395a899b6e8df72152ee1670bde1a47c8de2d831305edcf9cb6203f8c7b189e2c5ee5d2b00c6f3cf33fbd94fc4ef68243452b32d48aa24e6835ded087ca8e87b9cd7c50bdc1b3989b121cb80fbf74cc501cbd6110dc11fbb6a77541a157266461164343a1c24b750b50f3e28f2926ab7841692e4ba71cc030c63b3ef37739a47c609a07e9024c0f09061b4682ee4133729c1e7bf605bfc7225ffc68f890893f9f0be4863b0a99c95a2ff3fe92fc01c2e6bc118c0e1b9bf9b031e3ec73b190e0862150b4dd32534011b2ef8aa3a721a9f8758644b0d725ad560d83073feb46c5d39009255a58f43592b33812d1c7ee75aa2fe6cee0a2a918afa9eda27ad332916c01eb1cac5ada14a76132e17f9735f1bbe1533ceb8816826c700a95d69d474c5f547c2ab60d4cb093a3a594d82edd5a1b94a1546c1327337f71432c3d36e38c881e63463f6a91e1d19a2bb30eae0d3c0ad09c216a449a71772841d822ff72bb1d1d4628cbc4c67b6afd0ddc890b4fdd77343f0f2572414679a08db07cc764a7502dbfb318754d48c4e8d88ce76927d97f90e0fb3e09a8f8ef2e640cefa03347bbb2c8122101015ee2108f4d03f6fd5e26a474ef1b455d8025b7618a57f2ad8d9521f00e6ed34338adee6c3ee6eb8275c7635a26cbdb9e3b8caa756bc5727f2a2c6c25a33c3601affb2c0d248498eaa97f27062f9b60a0d718c2b303c3555d7b075a4a26a326bdf47f56125cc11aa1c7698a0d15fee40fab9bbbbd9028680647c64aa5a8a884380854b102d37784e51fe7836aba1e5b6450edc6ba30c73395c9f42efcf615a5eb3a1c97da3155bfda9dea6444067e5222020fac58056ec121ee03a5ebe3b3769d0f9bd94beb666d820891bc557d2025f41a3eb19e62da238a48c3b9d1385922530fa225b5ab0c0ba9269bc0e6713926a180531ea38f980753ee4510196d02b620708b0149915065b289f0f402fd734acdf408ef26fcac668bf87d3a004c951853ea3b2891f216adf76d16244c92395b2e4301ee463e369f8fecb8e1018a7db860ec0724452cb7eec6f333ee183a2448c7c598d985a3f728f9857962f7c52fdfedd11edc724a882d197e49ba51c392f6fa0884e2a8220ffd3e80aeb46fd15516346278aad78be43c89c4e243e375b270d4266c6ce84948a05b8de4847b2766f0b02041fddc61c1d1f891433d9d4c753e3f7da1a17e9b4e8242d59893e557fc1a0b32fd61ae162f01186df330beda1d6eec8814853b092db76d9dc337df24ec2f4074317df4e594ff7ca43af54a82b318af132cdb43f0c6b90d5a4e56c598bd22fa3b57c380349517c502fbc42ec7bca7ae7d6296e12de1a2e3ced6f3f79f6ad44f8a7bc98ea91446b93fa9b9eb14db97b34bddf182b1d1a65a577ae5830a6a5bbaa239bdf10b66d4967110cd8c238d75aac48e34a53342167d3dcbd670d0ae9cce431c70da2b739467b2168f24191844f8a69bf71e3920b8bba33a3a258b5b6a9687d854b36bcb9744f9fdec8afccc8c4f91efde3d96266319253f47ec85cbfc1531727c434c8cd680e6ad943dbf043d2ff88556f0466409a1092b3f2e40cdb1cd6d314b52cd6291c474a596bb7c97bbe4118797e0e6130d439843bdfd1bda1dc14b4dae7b2da43bb9b3ec675d94dd86fc49c4da03bbcc3589f7b4c3f402293fdeec8e93b164626aaa53d68ee094a7790ec0cc016b351aa2c61d40fc6c80099d4a83b9b1dd1a13a30251cf31dea4131c8a8988941b82123def09bec433cf5a0e77f488d376ef81f8621ed0c79a758b800dd809c2676cf471d2aa868ad99b757ad83ab4b62e26c839f5080de56091775a180c0ac34b1012a9f51d19c8eb07adbce09159fba47e65f38c8d4b79bbf0576bb0ddf7cb1760be47948b39f381ab253978b93c8ff2e6158d5944731cb9569aa33c12d386268b1127a39aa709c24dfb4258d3b3df849a844b60ed06620c3b6d529e8b8dccd2bacc868254b1558824e69ec23b5883b3a95be6f5160f028fec27fa8c5d6c264fda59727bb275f37cb7f01d8e377aae4f0578ae856863d89327f9c10cc73f58d405891000b6f01b5fac4cb7fe01071bfa29e9010c11ad6bff471fb0f9dc30820cbdf55d8e807c8b1e4359b97b155fb7648b020ef93ebe6026171d7ccd50a1ebb8f391a6a833d2906aed43ac71b0806cc817ab10d12b23d6fad37cdc21234fad7a4ddf410e6cfd2a0beb195652640abb2046e11b9caee78deeb0276449699250783170cbe22bf892c7ba04e547eb61e5d66f6673491483a4a68209d3acd3a1772c36e0cf1a0defe8ad9cfad8665eb6b060b62505f9010a19a1717aa4135dc64075745dc7102f49fddf1de3194025fb1117b279bc5f5ec7e52cd34a12885c683f8ba71a5b5e9e2d715b56569c09d79cfcd81c710a804514d502f39831a0f9488b28b130d9248b1d4daeac740111c395c803c7e3e3aa95c52144a08a587da549e4d23981d9848770cd73709306823f82cd1200fa6ee3035a95c478685cf81cfbc6f05eaced1991bc2b9a6f8a5a6b5e7cb73e0a1b21e39f4abf969a59d2de051e95725d2f01cae1e02ba254f8010d31b5e27ebbb6e7102cce797792319e8a1aa7971b47aff456b3e02efb3c9a526cc164e5538ad4664b38dd4b350ecfb2eefab2007a54f1150fa062aad83fea91889550a374d76251b75aea4dd1e04b9aafece982bf04e2cee22d978de231af591dfc333c0858cbdb5680d6a3938f91e0e0dae31be69f1d45efb272fa88348ad736fb31c29404ab00f9625e20e55ff2158ac69b10622c0005610a4e830eb891dc78adebb9b5c21e26f6a58df64347e65b1fafa9b544d88a7d8d77f26925336ff830d5e7811d14b60560240e29a83c5294b3b8b55f89331b1679a96c72c66e7acdbc67061d251143edf901d7c14a81562bde698b724173cedec312af46923b305d587eaac60b7ef836579a176c1c43adda955f1b3cfd091301d54fb6ebb40cd55371b57304ca37e6875df2feec226825d301c002b3ecf004f3cc018ec577555e246d49703fedb394e743012e1127bfb3ee36c7ad0a5325626667cf2425e1d880be398d8e93c159110d198656b9a22ed78107dbbceb0fc591be55aaabd6eaf66d45d8af264d45ee2bb96607d5d91090f6c1a47bd586d451e57fad9b6f11a91f68930d2a9bb63a9cc7a2ab2ded8ae5b6aef095f1f2eb8d204a9ec9087bf9a03784ae5f0a1366db9da078b4523512ee3f25209754ca0b9747885664ce2e71f0c13b16e7a2255f84e3223093cbbb18373b6229925b0dc2af703e5ee6d78b56e344d42bfc8129026fe24d07a2fd67a2b3243e0d9c1f742a8e2ab7aff978c429669929cb616ab3d7c17e33dfe66097b93d4a976246410fe771de00d6bce78a305448ba223b15bb4664e26dc76cc066e3febd76883a2d16c67c07aab5be5f9ef33f87e343b73db7d3d28cf9d744ecb6b518ea207aab2c6abf16500507aa3d81ac5daa8c28275ec470e89be0b18e102282ad6a8bce11b079c6b66dc7fbf308b9e8cfe3760dcb7e510dcc85c34f51229b3e3699178bb3fe0a2a8b3bcba611fc78434cb328aedf5c6db654fca848e46a59ece2fc6662db389a67d229e04ec5bafda1c538142cb3224e2e9344e914e7026eb0998f6dfe8578502c21f43297c6df7ecb284e159efc1a0a598af58c874db485d55e72a3fe1b6c0e5baa161904f1d3ce739ceca3f5d97b68bf1bcf4931403355f9528798b5211bc76a3df29c35be6bd7709e464e179f3e984fc6214041ccc550f6947e83d9a6f5367b02a62e68bff1de539ef6b91d5c350eebfdeac70974169aa13ac4a11442377b1c0818d0ea497018f6270cdaf4bd1e3a2a6db02ebb5352da96cb8acc7061f819931ab78b5c71684872a628931611d51c12a32fddc8d978cd76b8afc493ff577e99e1442e2b0303fe1beca70a34486d07fe80fbb942c6fc2c1141e02a32e6b0ff00bb228892024b0b587204b933bdb38e5f9d8319e862a48f802119893381b00b0fccfdafb8f12647f0ec030319489cb4c4c46f2e702800798aff9444988ebab0f54e2dd9508a4fc7de780dbec4c9f9afdda96e492a88da8fa3ff3e3a0c71b7d14cb3f246d8f45bb7150d22b0e9669072e2abbece7020b49e263c792755d4cd08f7fb7424e9b40457cc74b9621e331ac6ac1588f46b2476e7dfc6aa49e023b77378925f6e0a3140d6245f074e01747a4ab293e7433cc8fcd98d42d3f435ca7769f7e28a7b355a1910fb892e9c1caa18f194fec1594c8ced9d2f3fcddd76e74c0949ab707974cb1ae6ca32055534e47e85b4d79c99e35166d647c280022551d037af6b4d8f66c6d63d214826d2137a1b7a5a8ba02ab3d1a3de1a67a925b6d823561e1b700c2c83ab07873bb725b5412419e312f5c893bea8215f6bb1a537bf3c5706f538c416bf9d917c2b762d3bd7a89e9ed9c96b3bb05bdbfac6f99ebf0d6ce8f64b7a5ab729abffd7d20130bcbb5eac2458c04442cd3116a3f657edf8ef0a9b7a784abe006d7cdffc1334de3f93ab457573f3053e9fa0c1aee5972bd11a19f8a84679bbe0e6cdf93c2ffe44b0d81ce2089bd5343ced9203cc8c759109950eee3964ac58206748849869a60ddf35ef1d4ad9d2fb644d53d85d9b09aa069df5414d7ef47559eb5e03d391df23b7db36062cdce0d4a9eb11fbd2695a1dfab633f396c583737c2f57640f339bfabb9154f19605393377dfb1c3c106a981d886a4e03726d4e66d7e37e8795306ba51107350e25b2aab3dac18aa5d41aca75ab2af43cea20548f52646eaf0f94d792192b554fda95eaa62f8b0723558c67f0f4e74d0e7bec953c1c3f9f1e2c2470bed86e1ddacba542f8554513889c482dc4a5f64fa5a8b42302c4ce0bf81b7154a3a49870b80fc8b44d3835d836ab0d49dd6d493cf147aff1df568c9c5509acecc0a5c05c998faf11af78db63c6d9c1a71700bc8708017a6a3bdc21a43c75be5e481c4e00cded2818e9726ee8f5c0c0d0eb88b4236adf093f5b4979ad0b870d50ddb3507cc9a3127d73f34d03324a7d52ce52e22bd1a00547f3c61588dcb4d604d2c02fb445d037c057470dad87eac6dd92d11664f3ee21229dca660a0c0121f525e1fdc61246b15c0455f0605eddd410bff96abd5866835e0dc8e9731eb9c3b07ee8c0c7bfb94ca4ac3acc540361425757ff6ea5f6130f23cca0aee58f6a2aaf10bbd1c557f2bf39277dbdeebe2107135848578cf0f32acd257d0b6a26fa46a7fce70f70e1e627cdc37502ddb143dc6eaa7715b0e77dedde1c833a3a6e50b9b46310300577d83162d5ca0ac3dc9bbfc15c8ea8c3406467c1cb036947f202b8735748a6e5501fecfb71e881b821e9f7510d400f4a68b56bd2234aa37734476e37fa3bb9f9c1f12fc0c9612603ee5a5c0d3f46bf2d92ec0b467ee9a490dd9da64a8441de249274c7faaa53394de6ac0582ea1c44d6f6a40b2aabd3e1de78c4a0ca06decee172832d2bfe7536ee80604318efe8d50276a4b95d1a00f72065ab2847b233926fd114c08325bc56245db1dd1e236bed28feca01800189db6e849555349de37dc87889e44f8816f1c578a1d312dce0721a8ad91b434b781346f67ff27e1876aaa574ebd009ec378e0c57a21fdfe2ee11f6cab6b377e21823dcea9818ff365dc5fe4bf7399f423aaea8ccfdcb475bc16d563696131551d84fb64965260809614e9774234329afd04c76dfe091df5fe65b91875494d0b994661cf5afaedb1917a34083eb4448041b410f9e49c68459809cfa22bed1ee2065bba159ab05671263c1834e223b2fce268e4c4ab05a887c71c7588670d53118cfe3e930e61f7f13bb522454c09f221b55d022010c410b22be531d012c62d1c5aae2a385096ba5ea46af09b0587e272336c029afaa80211f1e1b208906c7fcd1b1d3231bab5751867a41829990c8df9afb897bbd73ea44271d2f6f945d317b980a99b0083cba87076060f805efcdf2d140b44460728851d50ea5ad66a2453c88bc001659e516a9c24a58bd2441c16e8b1c3ba7ab5ed5729305c3a1e8ae17138be05115a7e539c978b17a1b74b5972c5bcc485a3f2bd7c9277782e649e90c5c9bf6a53f74b961bf81a755c8b9da0c014cf75992d88fcb62e1a5a064211a811c48fe4ff6496f9890fc131aeb155261efda3f6c8801f1716d1dee1d5a3ddc488b1aee28a6b3128c5532e92873f2f7c184fa032df53f37144e8495928e9914d1de2ec6fdce2e6e553a65a0ac0d7551360217a96d006503a2fe53136b1fef3f7e808da980c36c4a8704d359c5763247f646e0f52155be9959f9adbe85a1bda660aab6b5671646d6392760a9a4daf53da20d938e7a5d63c838d1714c7c362a45d3d567abd1c3d3909fbe6e4afa2199b1d4e838399cb8c4132035c071804fab818692b3ce9cd3fb53e81abee15ed8399e57f20992b1c62d8aebbd072ddf923ce453a165fbf20bf6f91bb569bab151dfc88585c0f28bb60ce9b7b27659aad41c23b694f57d97bdae3cdf94a71b343a523d00648478ad2d906ff747b3f555af99a84ad057eafca35ee069dd73df8ec372c0e1360d246f6cdb71aa80b46028b8081db37653b0d434ed65f0cd901fdb6696455a25584129d31b218244b738fbc5a72ad69f2ffb4f304028a50cde358e4efa845e7f0e6b563e01ab3e20b79f95c34073c405efbafd872324832be7389c009b89f9d98c2a43eb21ecd348c59447758aa208d23ea7d66fe285711505c5b3243af5bbfcfdd07fda791fcd22635fa2db919137069b30a0e1616c7ee53e15834e285ab55953d3b65418b8c5c5bbcf8ec693ba3f5434c7647a66aa5ee4b1ade0275fdba8a2949ba8bcb5606196fe259451a19eba8e79cf032c0855a79d9f314592b73124f4399f7e2859389beed620c643c3292cc2d1f16ad9c13b255f607453f621573322888895c216cb27be2ce0bf93ea6bc24c869b4c5dc1693852c504d00783524c7e1803e9a71eba81694303590371ffc5d869a69437b64652376548c10db0609bd447327f183df4bdd0e05e15498b1654ae12d2f383533fab6f34bacd7cf2cb2b9a73d952d92dfdb2c99be7f00176ca686f6cb129f1c72c6eaf7d12f01f8deac53bfcb50418f5ae5b4d98ad30002b35bc2f272452754e4b4a683cf67c9fc40f2ea68cc07f70dbc7ead23ba4835c4c4026f6ddbdd4595236a247097ad5225be4c5a75326bee41879337e42c4d295042afc573a43f2da376024ffd4be5f305d908265eef2aebac004afd9f9f68d14053c86e59fb7faccaba27bf2e11381fc05eff6b97bd9ca57ad93427bcaadf95de8c0093be14afde063516177cbb282505ac2260d3a369aa302b7640bd5841664d088c75a56cebd1da525b13b3af7596b86ccc24f352dfae0ea52b1805294053fb4cebbd2cbbb97817442b77af994d1c017510cb3aeb7e9a6c02b894ab55dd596d98bd7653a248503ca2d913f19610c715ab3b647713b0d2cfdfa8db94348e644d91d542e5d9f1e16759fdd28baee38d5b0d86ffc0ce97e66ac91cbdca075bbe369664afa72c35880ed02218d2f2896129d06cd4a72d374b33b594b2f83c90dd2f9cf9bc96a1beecb755aa0ebb52f2f34bc23a7c9005c9600fc8f0501cd2496df8875b3b85acf99e643e6f88cf96e142e2f35886d8e68c3720fcfd965b58d95de6e2091151c35d2d4cb1c2594fcb5c172f85ce51e0cfb29fbc2b98e2b4dd7b2dc4e024b0a1a88a019498aa913b4f861ef04964cb74f4169ac5d50acb7a4eb777c97e66e9f56364ab982d094c4e8944f410232b8f8f3c61592747ca9e49fd523f122f3bb8fe2c7fe00bf1592a926bfc792542db201985b51b023bca2d8d67abcbdb11633fef06a46fcaeaa4cf9a6709f372826b5f84aeaf4318e7972d3e18bff92bba5c8bbaa26378f497acfae6cfe67240e297c38ee3b8160554a4ec142ecae0c57931dc10016b977d5b5465c91fdd60a3592815647c7bd2b813a4e8cac64f9a1edb5df280530f6a65879fada84617102dcff6f085b17fc36030db34933992901d9bf731b58c064449f43650f5ea653c9fc13623b50a9f5afa9017c20f186049a0a7c9fbcdb921d242a2ccb2f5f9c61ab4ab9d178d23c796a9bb6b972b38b0e44e57c8e0d0cf114144ce1b601e49818085c179afb52697703b69532906bb50e2e66a48f2dc1b83840679dda4ebb9de9403b0941cf89727dfc3e9c54309f293f9d433b5ca1a6de8240f0a46ea8ab61285489135893007c57a9accc963de254b580b653c76b3054f674f0ec4bfd9c4cc160af64abd9993ecf76d2e800a271861c7fd593e3c2c51030cf74d1c2009881dbcfb760a87056eb2d6c635c0ac6b5964800157b06f072e9a622629237a64b8c97f62c76aca7c7e2694d49dab4797dfbb8292fb2c4c02e1a094d253da3503842acebcc3277aa967b0e2f6605990baffc3ff1c17dc40d27947b564df3daa143746758207d15a986f7c432e0325c60b211c81808fd9554ab68b4e7324dc8128f54f5715b6ec5df42ef4c915b2c093891b7fe5222297a994150cd4e2ba8daa45c753f7c02f7efa507dd212929144722666dd7bbbf0485c8e5834b08c46d4c3c07d28b1276cd859fa75996176b38aa0ea807ce8896d64c2e08bd790278115b0a2dda3ce04d60aa88f7859d50984ba8a024aeb641ca4596e18b660733fd94de4fcf284ab78afb91413db50f545d3e7ba8a4b956de53e1e50395e3b2ae1c04c08727ef5ab868cc1a97b81d72a0faaa780751d49087a6db13011f48f5cf34a7692acb764c6886807402a8b39454a90954327d8a462fb4e99245c8584fa177aea7ddcfbee78e70db10e7e01049160de42dde4d334d86d25966750ca53bfcb2ec73bf0980cd277b6e37f5de2e0ba25825d9792ec1d87b7bb0b0364749f86d0235db6889a841a94f3935de2db61e2f7d9cd70069187dd21c506d770c9ffdb091f47581b55fe5bf1494f4cbade64ad3bf96c2769ffb0983bc4fd9cfe6fc04772c047d36327bb9a9e04e758c24cd3227441cee81a7bcff2f34c73057d3ac14d4afbe2aea6ea93ad8fc13b2b3e35fb7475df0a4147d2aec4f08a108e1b81d0d021264226ab87afb857220f22c1ad699d3449e756af85d928a0492d92d5b213fba494ce8802766ebcd9dfa1d8ea192ff599a1bc9c1fee50e5869ab1ce62edafe9fe728cab9afcec5fd01147e75ab9b37984f39cfc4e326c882234ee51ddaeae0d9c4da28f3b1408bc9adb94f91f6fe3befeb119e57ba12ecfc166a735de6188f134e6b467276ae13099f53a1a6d1d6f3a37e99cb4c5e973b4649a9f576ca8ff081e71b9d9287b37a71f25870b473dbee2453f08614dfd5bc4a50ec602941e187d015c3f38347981acbc6f2650a0fd84d4439fc70b01e60f92a144f87d2516cddaf957628c05dfd0df84d2e4d1e1d7358790d005d6be87f8d88e6164716a0f817de7f32a8c0b1296a1c3e3b1f058dd5d90ec9da853f72ec17848d2ce83b1095262b0750f58f29a3df8903689f9831f0a830e71a02d121bfd046e30ba8e166f50dbe7ae2f0ac71827b0670842c8893b4c5d444d0bc5137c7139e30fe822fb64d1c28d7ff446d3fd32c921fff80871f44845231de6b223a7a8eb003589d40ab0ef82f3db4abcab62b1f5aad68999107d8f41782c40204fee043cb55e73599174bab5a2e14ec8b5fa126c3f1c14864b91f90a6127c1271aec42900ba6c23cdad79bb271bb350dd8ddbb9dd3ffb9d9985464935694c5b1100988a107f8386236081de386605c163bdefdbcbce248af5ce8a382ca6ab8b2fbfcc6d0ffc93b2745fd51a81880cbe933873a51a3b8b13369971ce19b7cff3f16417f0640cf38522dd3a96d88d6131c95805efbfb3b9627efbfa7fdaccb53eb34d57bac3610c5d5bb4dbe18cc699c4bc1c0112af2bfba16a21b5a93e97232bde8342ada96dd5282732492cc6d6bee731cdd98ad7de079922884a886ce02e7103c0593c54bc23dc634d73b2ae6ea7e3ae67439c6b2a4772d669fa52b14d853557375ec3b83efd9cf48cca16d5e3bd73708c403f5618e18887ad6851749bbfcba7dc512ea3cda5a36e453e7290a787da73f7234837f29ec45aa972f26db2ab42663f2ee2b22cfd0d9d8c6adbea1042e0144a8a40fe30985a4eda58f3e6182c26457484b29f602ed7584264a5a1503dfe911bd0964a4a9f6100c46e6fb5f80c4f6c74f8fbc7bd8ea0723af37ae667cc7c40c656e709f2bf75d377da67a1c9be0520de40b46450f9f5622b828b2fa9beab4103e454fe5c02bb5bb5502b812319a88f417ee981f58019e3b26200bb73afc2f808d721fd6692efb00b49af6b7ff17d631734856a703c158f44a15c8df9f8d9f9f5ac7ad522b05740b4dd4b43b96443457900b3c9b042f474547d72edcb18edec76681485e3f6823d1c52aa756d4820c61785cb836766ec634b697765aab2923a04446d25b026d16bbe7ba7c749522afe638323ee54882341a37861468f3e9cfb71a372984f926c8a222dab8d9341e3c54c06a20189938d44ebebe608cbc96fe9b8a609c3ecc87e32ad6c5fca1ea1361698dde358199df31903bcb617bc8daa4a66641967b4673d1a888f7b4dfd6b98efc7c1f468a5dcc79989af3932154311f8c980a5ba55f1b0fbcf5051d0a5a5e85faa20ec7b95361a6df61e5901d56d6051a592c21334d05ef1a890bbb8f0a83732926653351f2f5b88df80db0accdb631c4bf4f357d65fd8e8362ee09facb57ee470a58a319ab21d001b5feb8fe945162cc3568d0cb5ebb0aba3b07494a61629e7dbd2cde8a75c1c60824f6fad5c30421dd6d96eb8a32983e4572e62970e86ce5117ee422a50c87516125821d0fbe5ab8962c4bdb82f0d461a419a62dee6342353df60d3b0e99c2884ab16c0d86be58b93cb9f22d5acf8977606c4d0bf20d04456f6f2976c46575df3486ccadba7fa496cae607d42c319cdea291bbb4aaac624c39d9ec161acad7469d6f1ee23f50e61f2597bd2815692cab5e8c0b1778d7b5f061b7534f965ad7b3d8bb2214f106629a60becd1b4dcb6d7ba84bb16cdcccf1e38b42ad6eb6279944c782d483b5e42d0cbbb609b266a67da0da478371931bc6920f2a0c9c898fb3694d488f425417ab0cbcac71b75421143c8cbeb3d6be364d8ae36c7095a7004132ead8fd30670f65a9e4382f619b9d35977caf82a6762bdf9382392b889b38fb44d2fa266601f26f5dec8be764752406eb5553783ae2a803159a5b4b363be94b9ef2a91d5ee24766b2ceac6f95969c824f318a349394530bc02e9dd7654641106b8768b226f3415b3fc264a2ea0b3b334a2172cbda6363a6bd2d86592994242750f890079481b2aec692e77bc427db8fcc63c9894ecc0c62e65936ce33773e61b9d08715ecd61b74a41854b53c430638aa334383d067c17df0b70ae98ae03341022d1a49b8813daaaea0de283d414a84e0166c66fcb0de4265cd26377710c18e16a936d420b551c2787c961127ff113c43cbc95ec1c204da7c54b23f60397c94edbdb88614770368b7d6d43ec37982b352d7414ee2480d79111850258c7d86448a9e1817f7ff4f22b17f04c906beb0073d835435954e6d5734796e157b07de1f50c2d5173a84139cff86b255c18daf569ec6af77bc1bd9a13474f1dac112ed960730f20d66c3011440f561c54c657837457d0f5814c65d9535004788341695f0f9549226d50454c1b0a6448ab61202af688dce26c16a185f7f99a3e7678be834db76bc75871c3b653f8ba0efceed694eb315b1e107974a0cf39bdc0aa8c86bc1c467e3551097c75d50a1b5b69ec528eb3b308302426fafd61e8f063624254a2faa1ccd60796d7ec3546a30ea43c3f30f08a08430404f4f77fcbaca4528c679245a523d8b393d63a524a6bd5ea46fa15724381605e638972a95c3a7787942c183f067c77ef8c5bcb1a2fce618c7a338a240ab91d6d9e1df995b43b351bc6947c68e0a20f99dc32575ab19eed2ee2917c1ec37e5e7c93e00bc9ae4740c0bdebfe70546e24b6ab771daa473827a94187354e45127b9813c44b93d5e7d92bf71402173321a92ef5ca1f6285c86cf771a47bbe6c4c466402ad4c452562a8f74601c629c231813e3463d09cae477672745470dd02b5eac58ef0f5692f0fef930c9c573504240d9926303a612b78c028f9036a884368e9a45aee30e478c2bd31fcb47b0cf94305d993c897cf359421cd800caddf9bc8a95bada00767a9475a701172b3f95e2bde99997f2e9de57f8659ca6231a4114210848f989b728c3aca5bb3671ed40b7b59b4952908cfa9642ec779ecedbdd7ac40f30b69b844c69de03a47a26c39a5ed37dae290340241fa81a188cdfd094f647b0e2a00266ff77814dda5af5f217895c1640560212832d0f319d625195eb7c5472dfc61ec04ea9fab377248c44456f84162278f9d97f5ef8950ea72204a236570d2dccd2f04c3800b8eb60d662caf2a7c3896a07f89b9b98ca99c250f42ca5a6478ccb077cfa87ae9bdee3d523257b77d5bf2405bf5dbcdc11ab8f8698a49dcfcfb7e2b4ca5b45b814f5d101fce215696983dc2bca8b9ce1b001ad8c7250f7d06e1e6d9e0e3c213a2195ae56daa51803f1a4e036aa034dc8a085477fdfa4e3d420886251e05e47e6740a38922d88a051a57300bb272aa36a8e52f91d2f92fd39f4bd8e45244e257f5a0035c54410cb1d5d99a42bcea50295baee64c62ced8c326216e8ea6d4ed4e217f00c452f4e89a75dba7377247db7ccd68228a6bb958b7c0adda1d411e632ff258ed454101d1a879b6aa184f968699c2d360cf46176c8732e42712391ac0f61dc2b2748d91fc0756329f263fcfbbd5bbe353d479df5d350b066031e0fb45a2eda9ad4a77de8a6d448dac3ea3a23388022921701d57c5c88ffb841190d1c12d961d4418021bfa69db083542e744bd04663fe0c535015835572a6c90f6ebfa8807520de9264287a3f9aaa96ac43723000cb86d6997b94819e21d00bbb669e34f2983b9f0c524a90648ac7d461339c718ccd01d16860f37e6798aae0f0e6dbc9f76033e3d3b7e1bf76882eb7d963f83cff2750c1a37711e8bd6d745cacc50be30781d09b0a6b85b052abca166b95bb13edb497a713e4c64e8cdf9ac753ffa7c8cc228103c85f474c75c3c9faac61a4dbab44a7b3c9da581c1cfd7bd0ace12b239ee021c851169b6adb7216aa038e692415d209d6a8ad30fc14be140fc81f9c893a15be4f89bfbee45bf62c40b33e1e4afbffe4231e6fe104a3c6f6db7e050e574ddfb94593a56152a52b645f6b54bc3690884b6262d1ca6f0847dec86f968c8da6be2f533ee068dbfc35e27a56be3152cdfd29cb84daad627f3accd8f121bbb9b5f5ea2b9c33b3e70d66be74244f349ff30f3d7b6c62a51a8107b35f2f2294ae9642687719d2bca022b248cf7707aca80fc7dcbb43c72b50fa3a405128fa57a0563f030983117a6a4d0f494a62c442b1c63e14551a459c7edbb61d2547e77b68fca19f5ec56fd1661351b6771dabbab42675aaf454051a966c471c1de19a458bc0349e094914e8f9645e05186829cb25121e6e3e6a7119a77dec6a38228d41b2f3acfc3c6b984bb77eba6b3ffec4a570e54177bf4c36527b4c32eb913fcddb2d606b2a366ffbd8187d41379e7af580c315eaf26eaa8c7abca8cf2217d3bd8e6105ffc3baec9c21ecb5647c802a7428bf6523ae20967f731c34327f2daa1834e3fffe0a4d2956868740f7ee5ab49351e2753d8b51dbf7a498eecc336e04b67b090697497fb5e5f311680e30fa989e0e14e2c464ec71a2771e5982d583c5ff42ffabca05ebadddde68af6dc605f5e7fa2d2e8a0acaf54e1f9b6b77b0886a9fd54a7638bd901813753cc55cf4811ce8fd94ac2b7c75115b9ddc23b8791ab8eb2156e3bb2f752ca10d823824680204e1f9030c676602a73bc03a8f35497c556e83aab4f46ff366725a72747bbb49e6ebe9a0fe0770ec07cf348dd75179d0f20310153eec22a52bc56c4a3cf88157a3c2e20ced2152195b2089bc35c49406318504cfeddeb95934fb6aaebee3d14e69370ee20b613ddfae0f76d95946656a89c2284b689a21c4af10bef0a4cf4d556515c16ea4c9ce37f1caaeebc9e340d60f0e3f2b58a8ec412c71655b8de74d9ca9ce7d1818b4cb89ae806ea4576ea3415fa1d4276f59dca9a8f1f5969d3bb8f8c23b42f556f7b61958b01873c3a4f579fa94d5a9055e91105d2a0f231168afecdb03964801692587c15ce70267aeccf3520b743ded556eea9f1a157de091869c4fb7d366909eeab76f4e00e9fdc3f487236ae294f14a3f221fdfa8b41666787b5ca02d0e004d5ff85efc9a11a667766bd51f8fe6ee2857cdcb04a1aadc93aea77323a174d321f73b6b7fffd72312d1ce8d193309af325815b0250563445bc4271de2e6c0d64343a0499154ba60e01597e83b3d71d9d3de746e88160d0e6a3a04cfb24bc8caae2231e9b942364261a6465993938156f92818609cd848c5e23115b26e2b10d0823269ea833c2863eae2f9c39266add906267e20cfeb30a4cbd554d30a7ccd2f22e5c4e122261ec4e92bccbcd558207839728a980e09b3798810c47cb7d2e41fabda10df13ec66498ce852e175b95582c763f700bed597c63e36e6175237913d26db4f0f4d4c2066443f349744df71ea7a537c3c668d5c9c3db363e896096ecd1af796a2ecbfdc09534941f151f23a47c83c6a978985cc1787bda8010aef6ad0eaf737706d92696f343932d2e44bd401f1f4c8049cc0ff4d9f4882f71cec54265fedeb135a9e94472be5ba09e13142d8d3808d7e5494b31ac16449b5b20edbf57ef556365213214bf9cc6a6121d72794d7c24d9caaddcacff656c429e17244d65c8ceffdee310864254fb7c7c8b1ee58e420f8373ba78cccf4b53cdf40447496f8a871f5374bc7cb54d7eeccfd15d36da26940ec66a8ac27e38de063cde1579b44c22952723da39e4dfee2cf619a70421597f6dff15d2cc6b413dd318712c0e6c278e65946c02767ad2f3addaf09f0796adf72b09ff947b27b3fed42acd4ba2ecbe67249bcb9102a5bcf7d40dbcbd6ba7daa30e72d7f3882ac77b62adf072d18a22897f154c26df7d9a41daa63f95b7e03df44771f711a0f3f99b40e002c753638d2a05baf15275235023090540be7e67b9c12b232c6c63a2a994c0af6279a6cc483a3535d37750e6032f1fc0e7ff14eef61a598f4b1b1b90ac695ef4942555a5536dc9d046c201f547df5db0632498d347c06072a489cd152a45eef0bd04263da486308e98b73af597fa36e0a5c0495699140b50fcebb9c2a226463bceaaeb47b4b830db31e21422aa81933ae2cacd2e31681f39c87025e1294c1e8b70e9b4f360d6c56da7246849b0ce49f5be135cc135b732a72aa399f57b562b690db458a8a14bb84e752a84f9169349a9261ddd4bc8b0843fff6b11312e26e2cade72d22c27da9c9c706a7681cb0f2e8be18ba830f6d204c504a8f3948dc97fad36b0532746d4f0dd8f4009ad6ad2aa5198d90d3e2d6231eb897971fe783847987a3ddbebfdb95ef8dbdc091a4e59664a8c50e79bb9dcb1d9a1e6ae0ea365317a7361dde1fb24aa9dec976b72bd1c34345f94f2645116d82db2f4218503d20cadfa05b27bc2dd7527d21877ff896b1b996b2e1d522ab682fa9b9e91b514b5121f1ddc814e758e75fc3454189c5fefbbe048ca4610bbda4061bdf426becfd34680994c0419791d2d865292435fa3c15015360bb6b9c8be076aa790c1076588f385f68e4b6602a38ef916fa68d43768289408a36f3dffc2a9077660022e3992450a30e52c7ed156769c769963b95e92de80794c2ce14d89581e4ee2e260bed2848ba425f8dbd518b7a9264c568a802c20db677f2ab8630fdd3cc3202844622c4873a0dc74ba16c00388c7099ee9de4ae7a1158644b67f65608b87659a77d5ac7ed924beeb59cefcb839b10f82ab9d4d7d6041f35538a615f483bd94a40247a0ac0af364b6a98813409f48620da7da3da1ba3d7643cfb4534ea64ea0239c1261b00f22cac1d7b11853b6eacdfeca457a6001fbe6817b1f2a55c507396a6331f4053af31a6fefe3704d84319512e91632e4a41259c586847b230752afb40b557a3cd92ad892bf72f3b14401807b77d1e3e24032f6d06556cd76272dc8473083706dda543797fbb3b3366a7c80b0cd63236e6f13a6046dcc7c957f5282a5827408134a787a366dc480b1c684eea7cde9fd941530e0ab0b0b04bbccdb501770750519d83f46710db8e8ddd383233fb14877d78adf5d38c2a2c5aa87db7eab2931c381e50a19a22609924dce44dcdfc77c2660d2fb43151f569b501ac7608f03c3979dacf02a4fb94e759050f2cbd68e7cd99375e92c8454bc33d5211c35d5685788bfaa71bb4ea15a34601e591b9913cf99c76086bc2c572ae338ac3f58aab794c1fb397ab0ce6b0140bd0a7e62d00ce907add1169b32bb20b32c2a1a6d3d33cc38dbb3de39f8595392fa7e77d80898c941ff8e24f5c78bf08de47b0c9db16a82ad95dda6709e3ddfb891173faaba3ff24e21db3b696daf0510e660fa74e136bf4446a5096ee215738131f6130e6a41ec55806c1ef09ae5caaaa6c19dd0a67ebdd989d7af6c0c297a02d60787949a105a19dfabf0d3fe8a74e9d7f49755812cd4bfabcbda8c7c2d3ed58cd9f49304bc8ab23e3ed9940f85394f674d0777e262fea8003fb09ff7d4314d65cf6470bda23cc0c2bc55d9dc4ee8053afb02b868656757117f37ed1472d327568f027cb2bdf2fe1451d8e0cec71717675e4e93ff4463371d8c467dcbda1d1ebd6ce08c9b21cc3a839c4844279f0957ec7bc1dd56c0cab0ad450cbdd495d34fb4d4bd7fb8816a09909218932d3bbbf42df271675d3cd7846d2ac76258c71f5826065ae1eaf6d05c8d5e5843f9eda6af4e3cdacfdae0dfa88ebd4fe4305dfb5a6f11b05659b34432b08c8094099150b69ef47f2f11340f4169f6818a8e2a6910fc67c448f959dd0e1789aecb38527aa7ae41f5f45b6207d70fb6285fc396ed85ef92933ff33ee5f715cd936063e54a97dba54943ca54f10c98e20d4de20bce17601076643c993718bcae307f02fcced431178a2e5251f87f343c15e26d746cef680a52366228596270a2c9793a1fb187f1cac5e3cf1c3d75c988992b1717e10327da6826e89d93e169ed3229dc526c076577f53a234dce300ff384fd8d5777b495fd98706e24922f5f69dc0bedeb89e1a06787ebbf5cb65ef2ac88e0a216b26029aa635ce2d052cf1d74d2068e426388d981103d42774f2f1fced6c59b062e2249bdf021cd196959792d5da52918f72907f932b47fa83957fe166d2ae002292fcc9786638c9ba35a61559552b6979b4aab836d642899d5c234bca7e8e3e8237a0cf15db665a3ae0e6e525b6bf9262fae616c694e7f65e4fdad1c5460939681ae3a7e45511ea31bb4a5f3513f9429f7d049a33acbabf4dc18374ea2a7f484698f6f5d47fe0217206552c3bc54011b6ad3e6d8321597d41605f9ce4b4db4a0b6e7eeac90dae647d4e60094f560cd9f37b9ab563e4233ec8ec9dc047743520d0e5b8663a085c491722528958e122ed0860a0dae4a7f102a1beb10301b3cd7d5d0f889013333dd3b9f96477b7c8548f91561f5d3e0440c52ff4226aa6123f69cb470861812d516b614d71b5eba28f9827c9e05be15161935fcdb1fe082d28b568fac2d21f1dff52392b7b8e8c7f20fe911d3647a36f8fbfbf9868c5971a662a2e717c8ccb081908a79a34e9978ca8aab73480e92eee833689fb39df43c4d1cf71e2558589611602dc58f59459a14aad5092f62bbada3e3c3c913e4c0f97045db755bfab7d1aa80b0d6d1974f0960408f5749dcfda1611552050f89e932e05a07258d852049a79ae89413da310df718433aa89c43e8df4a3db9a3fb86ae242b3da6e1a5f903476e0b284b24c5c4604ea4c99016d0544b26ce53bdf2fdf22fc4e4dc76d9d45d597f70a2949c36f1edbbd6336ce14f5dd46d2062bbd61c67a6cc4aa76d9501b6b9a936b92b71a7759682329eec84ae40ab14af99829012fae9ac8a4d3ae56d44fa5a35179d4ad1e05d76a266fd82f9fb5519e86a4dc0840297113ca4f8a6736990947e8448d102997de2efde6cd495d4996eeca4d6bb394b35994df09945f3ddd674d4b082f9e5864756595c47f5ce4403a820d5efee9f2f26b9c5cdc7b58a308121e449a5490f0ffff47d4a550788dcdde3eb74da31bb9c70cef9c1eb80b7d010c08a49ce3cd8a24763cc17a8e2e899ddd169b20faa380e9758dcdb06d27e22b45f543376e89a26ad045b92aa9834c1cf4ed81b9b242bdaa801b71d90f3b74b01fc6aa77af62d425f124c4e4356a5a38df0b8f6fb7c199617fdb9fe052bb096ff4a2627f26ddbe747a6177d7cb04a46911c0a783985bde9582c594e53ac7f6ff837164ab683b87819056e56ef9ff236c3c966ce76af593571339161887110b01067781e45d0ea5b82889901744054ad1d94caaf3b5c3c6a62ef8e459a7794c6f3ffd18d7e11b669499b604cc6e1c55ee08895ac89afd741a825d61230329058edf1844a1ea213c258b0727363875170c8b18e511259ac96de23d2c91caec7bb24b56e95a3bca7bc745deb9808ad933d2774d5fc11da54ade39ad6ba5386d012f95f3f58e9217743bc1493580f3587040c87f0172937cf755fba3293d878ea8a15bfda72cf0c684b08a2f9ff73914fb792a028ad1f44618e32927b1d1a054baa82eecc6f1171ff5fa807dfd165aee63b4ba259684e0b832197f502d94369a734902cf806c7f66bcd24d2e8281ffd89f48238dcf85683cc32a9da4823fedac9e8a107ab8cea4d6a7f5f8888ce84b854254b53a0c2999690152b272f7363ff86a5097508b65fbd935d386084024d51f73328b66ce4c0931102e43f82aee25fe871c99019b47e372cccdc020cd3a02b731b305c1aad80863eed84a73baafb006f12afe24d27e4fa661a6614d307e7b7f8805bc69a0d72bb6fc460df37c87f2a94f311f37b918b3b5daf37f4ed3e38544c8b3631f09d5ba74bbcb30a2d1a4c164145b424af46283ccec92a81af521aa1b83b2c0bb8de319874164d6e04c923d0d6fecc4fbab7c31419c2b82a758ca4937441f5e053772c673cf5cd60c1b384b161de2907cd588dd011848968616d8736225ed6898be45a98920934a0101a38f791ec25d2657d83338b850bc1dcaf834dca9620211088a1f7ca0436569bf08ec8599adc9b7d171c5f4106050287390e07bae216c1233eab487f5e3addb0903a3bbe4264b45c3502a1e192496bf34b6e1368410ef575bcf630016bd5215a5562a4524485bbad6aacce0e5e5019433df0ea1fe89640ad5adbc7a5d9607865beacda865896131c49a68e7b6b64f486f7d7720aa1119fc1447bca0689796d649648ab82e8b15e5d5887861197d04e7321160bbe651d1d1563fbf25f1b2ae8df5023fbeedeb1915ed7b4255cfd97037d7b3d465c6ad7aab5c6d1187d5d701f16081c5e79f2329f88e40edd783e8d9b0b67d5409f2ee559f6ec1953e5c43797653a16430872ead0512eb6ac49a15855e01febc7d6e1ae620cc1f5cd5e5b060335d878b1cdae5fcdc09926b752fde9e6b4ad9fb1dadece56fa35470d97ff21081442fdff69f658736ad0f1c700385b37eb809e170243f7a199390355b822c073536ed38334f88a63a1cdd5f0e7a0f7f2abd6d26ae7a8c4cf28079e5449df03902cb4ecfe5c2f9b3d27b3c3c2387217f2ec5f5fd59da083ddaceb5ea12dea967dbfa173dc039e31d399387ab55fff0141983fde8dd8f6044a815792070007597fd094d3169ab4fd43a5e3a1aa8a5f92c4f2614090ac2a9e34ade14599a57a7471ef63f475562cdd97e99bc1ddb5b5e20453b60c8211b956fdc04e92699f0a75133af7e21a4c6167e471a6d36a742421b06486fbae2161f344742500c58c9ab57074436e68aa327724b91064a76a23eeb7e0391c0b6f5be87f0bcef2b15443a798c749c4f7d5b9aa7556836a9e684415552458d85208d8200caf3d239914b6e9977f7a15cc6bbfc319ae385e94d38c90df0a0799223b4bb4ea4b745ce58054b0c5bf22671ed3e25c76ea4600e7099878b87ef1a3746021134c676a7cc2cd434c5a7e096ebbde9e26b41f94083ccea06038f5aa84a65b2690a26e0bbbb17fa27c745c7f8368c34a91172f141ae7a3cd2409bd0e03eda0159e6c8fb382f83efd7a9328755fe23cbe8d5cc50c51989e35ec74f945ce6ab629dffb6f66058c86f37cdd1f095b8040366712d4efc776d1206039388511252e24a60d494c62a818489c3823d0b3ac54113d4e293dfc1c7ff6f442ec47369920faaf666ca2a927308b66dc8f92270f9e67dabdcae58e5ee12a2e01ebdbbd2171ea76086762630a928ccbcbc3e8dbe02c30f4fc6ae2514af2ba38b562765d742e4bd8cd0b04a6362d679c9fd7583b0ebbaf3cdd9d14699ff39820b0dfc9801e4b5d342a676db2fa5487f6eb666a9e80d183f3928e5ba6eb4e5c9b95bc560de9c3c2583e314a4ad44fed6befc17839654aeb5163fba359d437b6ae53060d69db797eb05fad0ea620313a4cd575e5f0c8a114fa334bb0abddc77d758732b5aec4eb1ccad2b53a8c710ccdb20fc023e13ca02edb6cbe852e9d3695b66ea8ae0ffe8ecc09beab74abd9867084634d10d878ad9a7f70dbdd32724b0ecc201c5c2272220e9bb45b46a6b671bdc6e7882175c49582b62244767c6e1c9a0b3a0a1125716fbb042d09480836fb02291700e44314f27ce836103fd92eb5456f0f1a58946c82143fb1d3538bfbfa2740e487fac1068b365bcfffa1b53625f3eb55c27c0194077f20f7d3a6c8b6837c991140a81127ba1cb51576f5a12cbf11525fa8edd9a58252bac4f682ce2a2698818639c80cccfdb7e41ef0c0b1b69b6ed14dd5549ec4c938b036fb5d63effd618649aeb53d6949f50d382e335f39e781209ae9aa6f6b5860ce02468f16bcb02f78e402479c57111ae027e42d00aba289d7af6a9094c95434c294041770adb059403c041a817ce81611124e5a5f06f2b492e81607ad67f2199249957d3f6b6afa09181a8c722e743ed04d3fdb7d0fa0023b24abf1a2da7f46bce3cfaca7a7587c8790e86946fd79c4908fb5b8aa87a70e3b5d3e123bfd7536cff0214a9e817242fb4c5c79eef8a1d3acee8c7817d982518d0c61ed0b511a2ffdc6b77772954c2b3937957e213db1bbfe5ed23d6ec7a3f6195cba604e75697c0e29a285c41e1373b890df101140fca3a1e6768b1d260de8d5616867eb1164ed75f125cb3c384f75e69a59f443204c9749e4a21b44db26a290f055cec2509ed2e53809e28a28d127805ea4e0290808f9e6284f501a487df6054032090303f23be4c0886772b8bef90dba360f8cb89d0157ad346024644871a87035c600a9872017767dd9c96fd97402dc688012b2a2540c55bb685062c54783e303b4a9d4f593024bfd8520fa322e798a14ee63fd6346f383aaddc7c9a1b30df827d99a02f6582bc16590aace6a76271495258ecf884617a90c227a4d3364429b26bccd695e4110d08e2d405c350b35c278581bf46aaae291495b4c8dabb09e34621cba46114bc36f0e3fba48b29b23ab29da857f0f29a65e12acdf4e646eff8556b69a00d48f5862ccbcdcb23c2ed4905757dbff842c0bc4f1729d214620696e2ff3151e7adb21cbae21043b8e27fe4804847a1be83ca9756f844562e7e6adb277f9381f736035f3f318cbee46f83d04557e4e9a88a15f33a03d9c5733c3b0ba9d33e6f28a03ea81411f995a5b6f8eda4fc7702de9fc88e77ba71c1873058317bb338101df5975f55bb96074474f957029c561e86573828fcb2ba9840ab9f46d36bcc2be5459bf71674736e119ab47cd91def223eef15896e7a4239bcb7b03d7c600ebd2b33d4daf12201c23c3fb90b54be5ac2da8959a3765f40986d3063cabb4c00d24db7edfa743a1e2b7861e780344a988979cc2a04d0720e50e22329ad6ce03b5e4aa3e94232831adedb0ccdc1bb5116094a3ca4657afd8f6c384ad6438b838d511dec2b7f47ecac4d617f852230398ef2773b8424fffc9ca6d0b87ca1215bce96d18099fd1e7411d1f0a565059093fb67da8e11d2bf2d59672266975fcc8f95ba39109d765f9238fdd72ebc155be82b5f781b93bf44907885e89652e4054c256d05698dc13d687b9ec09e47e797f4c19706ae2a19f5f4f4d47482c99fe0db334d3c4a612d67661ca7945cd8be28b198614446d79106ceef328fb4f1b703b571b6ecd88a57134db249304bfdccbf7f8bb93a39f8c59a6adc165052f947c7529282bc3245867b783e5c6e414d264aa50445a2eefbd80756cb51f43a9e8047d9868fd4e11074eaa3bfd835aa58c02f0751847172207a0a206abb7c09e6a032a22f0ffe7b90cc71f4101c3189e9bb215612ccfde68a094d225c58b4c27307012e620c7e7f470188c63810d615eb39d4a71405c33a9828ffeb2909fec92add756f6ee6b1a35d015b3bc4f24a6067377796e1bedc93093accbbf7c833b1720892e664cf22f0ff0065a55a40fa70692b31722000e67a340e76620bf7609068a31781a1f68e12144e7d655287aef910b403348c3e18d32f3df33af475c2d19c612527ff9813c421ba48275f0c93b955c3cb201a0cdb3abd9ddbe22f8d684e7bd13c9ad20d21f0d31da7076e80476751b1377aafc6445f4a0ec6ad997a3703861e763ccd0a51e4d26b60f88ac65a70017973c52681b708b32170fbd52e55e70cc09de0c07adc9799377dcf5be527f9fab6c3261e97f4d4614cfae9f568bcc7ad9917f2cfb13bd7bf0a621ccc192f0a1581e2ccbff9750409f355e89c6ff537760a03d25b8a0bdecb6fadcb6d7aa6ecea3592c2cebb37f7e829a2d3954ff87d22b4d8aea05887a58aace4c447a8dbd91b07d3c80791fc5e4fb0fa39163b225645c3724a433eba91d1591c612e75f8b870bea7b8ef5d9a5e0d0ba73efe3d06046fce29d0ab59afe3af06bf467df9e5f9e327ce9e33199a2d2e73cb0fe87e502517960a356aa0da44ccaada2cfd50cddc6a267c759a8707d6b34f0ee34a3a16e3d60e6e4e552f58673eabd3f9b7813d514fe694b36bd04497a125eb19563dead0ce81b3bd5cde4c71341c4c0a442556981a03292c8aab4bc40aa14c81d74eb2d86a338fc93673f8b0f2e283632dc7a51fd28deab5a06cebb61e0e8914508784dc9a4cd3bb2bb8102cda00ed1d7a062c60596a9704a95cceac8d683d22f3b0b5b460b4168b64c9ba237032db615298a19c2c18f01868be382ff3584ed095e53b0e766f79010b57b0d035ebcf9a1defa663369322a633c19c7f891226b76bde7961b54be8f44e50e580aac33f25269f6edeb4255812edf811cd4ee45a003ba1f08a69d52a67c48a0712ab8d1f170ce014516dbf2e3aeaf6e5d6f4d40d9a2811a4b5f1071abd33a27d899e9602e6a9ddb3db105517e3177a43917c345023466c8daaf4ca6c66f7740b05fb973017628c0b1c17f35fea00153f9084754d55f5ad7952accbe1ed697c37424f81e5c11df67721b63b1f741f6c4690e72a4a50a70985205241d9c93ad4d35db04f12e828fba7dcdce9f15ff97e7db9bfa7db165d3acb086181e4b2b0e9d626632083b659994c863da2e133096aaacdafe988bc42da87a7ff326355b721b8da85524c9847f34cc815010a73de30ff2a13b800d8f7425af65ee29035ee429dc2f6f43cfbeceb125e599debcc17b8da2bb35821d8ae77fac8ada8dda74b8f3ef66e1ff402027ad11b0f0b461bc55e4d19e4b5006afe7395b31e81ba28b906886b1feaa9c2c23cfab3609db82fdce4afabb9973c9736a18986c8697d11f8825da206edad2e8d105d9cd6d0abd55aabfc4de3389a921f080af6b851ff7da70a44adbce354692a3575b882025cec609aec3ee6d4b992b7b489d0dee9fa976b4a45e08aa286d65841c8ac633caaffd60aa7f6b48bc4c30efc274e777f54fd8082782b485362587b54315245db4d93bf8989ba9da0846d3d8f28d4adade81287279f1ddb619385127ec0074574d9e14a0d1802281228cf3155677491f5aae627bd0cf69a2f86d0271fff051603eb20cf79776bf9ccd5609a61a226d708874e69e134770324895a013a720915978888cf4cabcbc196a297cdbb4bec28d1ebd95633d396899f7c4c10986689c7d84801442b3424d5892af560059de7daef4104956f65d0f83c865a96e381985cc0d4e946a39d8fea3a36e566519b6b597ecc0edf069ed79072cefdec47b92e2757b50563206f0d10c79fd56111b95f188060fbedc0913cc4903407fd41ebef9ebbd7c6a83269af7654c5102da44f1f6679e5924b2d9c9ee937ad7978919e0cc61c99e545e9c04acbae11d1b7fc377f05d81e89520b511fac5bb52545b5da79aab6e85613374dd2138fdcef00d359eb82c16ceb19ba060cc23b6d93d6312fd68b09138f7f3ffa01b1dec3c3876339112e326550789bbcfdc3d1950d2cd3c97583b26d6eb68b6861f068181120512cb7de382e1a1b6d5a70bc1f5a4106b916ea90ed03ed5dbd8b8d4f9288088d1d7f1712eb6403c85abc324119f0e7a5b3e25e7daedf66dc6010db16ea05b015e149d0bc229ceeaddbc503bc8eaadaa92010b7c47296cb5c2a815b2074fd11b3ebfe53babe07bb026773dc14a99fefac1d5dc26cedbaabbf1159adaba02dbdae2805cdc2841dfb3cd6aa0759d765ee2233ce6e92f2abc19c0ceb3a1099bea3db94f8dd106f995bf3878d4773f441b8493fa549e6ce4f66a9753de3f2945705551a22e7b100647285d8a91f94f76eac0cf38823dfa19a1d01d6d0ce30500ac518f99389c81125ced2a5b086e67c8f2f0789a52c001043b2b95f61368970da4a8ad6e83d4b3c74118aa992da37739e9dbbf0c677ea448c9f2425b0294d9ccddd3c557c2933cf183ac591e27cae08f9159d6cc055687b5b9e2d443c3197cf79abc307fd65510501b27d49abb2e3d7e69df60db82e3996ed8487f73f381d901a9bbb0728df3ca4ae3f53c2864b5e439961a84d0f4a504b3bda8b9be054756c28e991c39201ba3ebfa676877f6b2467c71d706d7c7cf5ebcc3cbb8af7c1f7fe2e122a07c8e04f81512348d121a833af4bb14aa104cc4b5d17f572b00fd04cdbce05812690eee2ffd34208ecad2d06ae0f6179456937d863d702317735c5fcd2f86e3fb90fb4c931dd4ac70a0a0f6cc1c07f16f98667842428eb0e779bd39b60e4410f6f3b82f529dfce907e6f9d7ceea0c837c550aa67ba9ce9be7e1b6ca782257625071afe3a16805d8ffa8f08e0bb502e3583d34186f2abda5b55fa58de59930a25373e4195d3a4788d488d057698cbe647fe4c459219dc9cd6b71e2f9e7d3b7b03baee02b5bf67dfd55a72c484dd4d556621b678a4a999973c50a41cbf0cb4722cab216474c07695f99f9de768a5fc739d7fc42554ac01ae8eddc12392a6ed7d3535e4e41524ab9add3af1a279b3c40e4f22bc71d89f6f70d6c4fee3c2536ec28288e2f03af5b3786f38182ff989c75ef30d3be79abd2f043e815a4464a811c72820b9634b09942982329cd0a10bbeec481c163df65f0d17367e8d6c0a0d11838d7832784ff3807e03919675e9061374518147b349506c41fcdb38f7d988e6f45f382a4376ed788dce4efd55f67f114088173b3874ccca4ea8a817f415ec7fee12a7993473a8b6f98f05cda4339d2e3c15076b6e02701f37efc1bce907c9db4ed616500c0c50f3d70e7a2b5a6ddc7e34e1cb3a06b4612ee67e176f3b1e6be3b490d6046d3a353929ca4d49f8313991da11636239678671c40b6c5d727dddeb8057f70d70a29319ab09ec4a718f6e4bd5778b73ff144cd504e510faa98f563e55b2474c2cc58610e3205231974111bb4c3b4193a56c087f87bb90a80b9db337296f8ca45bfd6f4f2e35363068474dc8f4df284c1e3c86d884be98d7d13c0c5371df1a5108e5268a43ca58e0a530182c9b3ccd3336630f677b50464082b95bcd30e9dd64548c28694331cd3c8a5d91d23c1fa466d97e1fc2a1020204786aa9ab847e5abc8e710b5684624100a8775d3d3abe9f9ecb53681c2c9428b08b4c4bee2259e946695fc9f895c8c52f2c64d69f5129633a3cb23d4d6a58aa0001421593b968d37ba2af3f9f667fe6a1e37fa66b4caf5ecb14919d2e9683661a1b0a46961eda3b36ad8b2050c707f64580785898083da79482cc9543fbee913d4ae8d8a36a71816f23077f55007a13c1b39e5b1e7e58f67f7f980ec98ccd5a39ef70494189d8480662627b3276cf08ba1eb68c1b00ac3dd96ef9519651dc21af9416e3f6517f9300febcf44210b49486d2db7da1c90ea83acb85031b2d0d7a0f33bf1826f9111ec6a919e80d440307a5a15fc9f95fe76772894061cb386294151cb62a75dfa635862d94d3e4041ef7be7cc2e23a6aabcf29f3cd1c591d7bcb1b295b8e54d16ea23ca0c9a46c0493e6e5366f8fd20d2afdb183562038677de6e9fd9200dfd42929aef4c501c2ce15ff8ef6431a38185ef5a344e02c95a8e91fa6a4baf2ba85e3bdcb10bb9735f1ac7532a87856d7ae590c34bb2e884d8fa0d3a6dd0d871e66e016927a8afa688a260847a78539382b42c690ca1469408a0cb9132cb7e4aaa8e0137537260d7b5974aa6b7da37cec71b9866d8161210ac431140d47d115637ca4c0e4e6320fca34d634fb38e7244bf9a1eade1e05bfa54a4064efffd649e997065bcbc7a29f62c51e6aae24d4b3fe45fb0b905ee2edadd3c552405dd388e85106b32618d7f251f311884e957c5bb9744c98bcb820d729afec284ab1d45fb748f6e1df18e38b14af282c1bce8941aab9c1e1e60c9332911667923c27af34fc547bf60310d9a273a0f54f1aac64383b200843ed8521ea60871808a5b8c6109d5da2efe55c3aea36fc0f6691cfa3c1db37d8576b59575397826f34d6ea6194d09894f34db1435bfb1716db1ac4a70ccff3beb2059c6bb9196297860b4e889e126d4d0d072e293a82b897e6180972daf02901c24887115cd45f5a442096a9ae85ba8febf0f396b420d3b1e33d13417167656eba9379020cb05e96959b54b3175311b351b3b25e1c79944e7acc7ff1c66ff6430913b15850f2fe7437b9ccb08fb03210c31332fbcf6a3b8a456ba723a5c95fad961cf422a9ce25f03543ec6dab12744a13b7bb110cf10c82f5a07b3e0e6780dbce36484a58465c88734da31270e88e7ae972ef797b758d00fdc1a6ac0745ebe411f36d3a4ce8165ac46ca0832150f2a2beb5cb1669e7e963902ea186b04e56a2a0e2973eede246f0648d185c16393876b57f0a83e0b2997865a625790b56f41a8c26ccb8c446b0d4811df163bb92fb6b9996113de18b98f14cb25466a59e0070bd6514ccee1e8e630c96f2164dba5ed8c8a31111b09b1e16e9882466cea9c91373f259852fbee15c4ff2835db7010247064cfa547a60c5837b246e2397660970d2204dc22f768d77a530dd618088b45f21ff92d9bf7b4eafd1e3af3d6cc6ffdf6e343259266265ef13f3ee80cfb12808b5a4922e6712dc6f29b7c52e6b315680fe93a8a3a5a190886cd2c4657cbd858719295d23f45a1acdf8085a3b7ec65a625acbebb650bbc0674c4c041f950f7d2c6be82639768a73dc9d43ccbd9d146fd2274d32d890a297c193b1e807ebb4b207e574eaf8608ccd3318b608a9f2422683d275824fb4b0bb4858bc84edab9e3d9b9c5fdf3abdb42856e0c21d3b0d93ec06c1fd20ab6ffcb400961f8a953dd8468592b83a028d2a07dc1d20fccd0d3b2d133583c519c47060a2fa3ab41f794488855b3a2189653e7e33be8b20008fa66cd19adb1902f866f0ec8382979b65e23e380d27b13399a8e9d97fdf255a6e5d393ec75ceab70daa173cfe1bcf81b0e3566b6a9ea963b15536aa89e36a7b42da030e92790324a10c6b611f0287f0e44557eb57cb575ed111c500e4f53d5a6035c929e53d33a9356463bd22480da61ca46661e0b768e40425cd2f2f0d309a10763f3af9658e1ed977ee1959197418296eef171ce1798f8d51501ab443db34c08fabb864092a1cdcfb76f4e3d449ae611a3c957bbc16ee90a30e7d624ae592234dcde02353cd6f79ae4ab90ebec66fcb9ea35e8999d7627b73890c8493ae7145240ec56c1cebe722e3f4a3c35141c6180e612ad6743994940de7a19d4ce9dcb01f7c72574ab5ad8572d8f1a1559bd6a6fba57ced3d9a3279be016c9af7a88159adc0ef91d8559e677eac0d6d2bd656e83f4755987cbf5473c8958870f2956e3a6cb4d90ec1723cdde2c0b61cd33eefe11d1e55d05dabbbf64feca03ba305cd7bcb44c2c6cf5ca947043a9fb6e2919cf91c04f12166b96849a20b4aa5a7e809f97f6e6b01f448c365efc90d8b468355ddfac64ac47281820b3476dbeeb50df1609140cb5e5a6110ea0e6fa3f04e70992877909cf462079044c00a15a507a9181e6dc03598af247d31051b8b3c5a28b9d56a3a836ce62645b4dd7c13b5044fcc46b98eb623c2c9995ae17c248b303022fa48a6426e8fd990f592ed77c8d2eed0d0fbe6797aa806fdf6e7c24bea2a92f7746fb9c2b72dc1b432df7da28907fc2d281b4bfbd1f309a3b9892f7d04c38f97a3db949605f88e1b9ed31ce7d8893acc2766ae0828ee52ef21bc7565f48db6dea8b4fcd3c08955b6f7cf9dd1e42dffd01459d07f55882657e0492a534668f702a85ea8afa52710ea305bcebbb76abff31074fe5a4004ac68abe4fec10341c30d95a00286fbfdf4c1d4bca804a135c1081de0a5573d14d4a3e9a7d8af2af1fad021884ca9bf41cb791328be18dfbf6e91ca7bc1bedf99e5398158b8ec4e41ffa13f3b5bb01cf3a812cb9f60fd1f2f96d2d39048f3b9909478e3bee244c2de395e8df210aca5bac54144019db290f7236f08520e97d06e8d493739f69e81f76869bd737cc7ca2b06aabbc2c4b551d66ffbe0bc6dd2b3f6d968f2a6e26cd2ffc7852a6b4227667fe72e0620629240292995047bdb5cb15dc13d2c0743023444722fb4866e2a1c66b2dda4ec0ad193416748b51688052fa43751b8985bbca225c27699ae043ee382530342e8556bb0f541d6d9f80d068b0dc394a18bcc80402fb21971b6766bfa790d439c97de277685c1b20727b1267b472c172b915ab47119a92c3b6ad66e7331cd2373b1f50e860d1dee74d7b894a71aa43decf00757276447fc9785c07cf99de564b3b2a57e4889078e7edb6114c978291f79b8529e8e0c8bbcba68b00d49cf8c01902fb13278783219facfa8cad095f689e6cc10d1a4dacbbac9740db8fe742701e6bce8c7ddd27e96a76e6e3d91d82c70f9bec2c74c77a8849e4abd2fd85bdc404b54b1f86cd8a851cd81544754aa9c52fa18a367d39961f96cbd8eb9d4368cf4dd6115f9c360d233121c8436db54db4fdc076c67448614a9f1d85bf82c26646ae25bd53c0cb69cba00332bdf5bfa06429fba44a410276bce0035be3ebde1d12c524c1e98019169a6fc1f897f4d08744dfb7e298b1d8f223619650140e9d4feb151e1f7776f8fafe70dbe25cd4241df4532a0cd03ddf19026e64669a743da14882e5b0b7b617737e5e98a90bcfd01d4d19152fb54e1a5220957b58e132032d73b996afc7ab384c5af402d35ff3d8f1abc4078685221903d7cdccf9ab4ec9ca869faed1d1f4a2ce35d3d5bdcfa873d1ba8a34cc0003655e97b3c63f22dd796e164b76901b43bf51e67d846fe271fc8d0888544a62d837882677827509c519d09882a303ce23c8e11845340c741554bb67ef8efc2fb854195df756a09eb8222b3312733fd53b6c58720c86c956e6f94c5a38be091423fe5ca5127b67e250470cdc00f3ca2a13debb2331ac0f1b10b691778067aea7263a32c82ce42287481640d09dd2ccc489649584a43a43e3d04b8e37af287877c470f7b88079e22e4f997a1887958f6a57a6ff908fffd9815b0533202b6ac8a209d5197b6fdc9f7e041d054459b2e1b05a92d680af89c75f166b66b891a7a52d7a77a03684dc045ffced8335f6dc2a92f87257a9bfe3d891a312b474df4a3e72e146f9b0262035159731bcb5b7a363c01588b48fe5d063a2cb7a6d204fb41786d981481aec70291c10b535ddf7b45dc176470c1000e0e42462c6360f9dd3a9dc99b4fe66ddec54b0db9ef4951c2263898bba667313afafbd0f0f40debf8e66bea75ae9948c6c1cd65b9f2d70e56faeccc0b9e1e6bb698fe43f406e82bbf8812db9d2bc39ef35f6289f9a973e387d97012bbe87c5849dcb07af3fd8e20dfd2281110b2f5ee56b26b90e3ff87ee27c9918732f149014bbd52247f73a7ed77fd58e4207a72b18f790aeb9de6cd9d49b8b175612bdfb89d3f510eb856a10304908b4aeb641476109fd2353a6ab5b63a63a324fcb5469450db179cae2be8a8d314c098ef0895b2df84df90258855e9983e30b774738d4b78646562e9a4cc95e4c27c773df77fffaecccce7473e17870530182b220b662e3ca550e246658320737544d57d8f4b68dd03788c2f95bb91e465f0969a88d8a6126af9364393cc3a205d43ed966040f879629ca210ef2cf535b59dd7490a1cb0175d7e2a7f895f53a8ba9f698aaad9d6317ad74abba9eeef4f67979f0392956f50f9c1699c85d3223cbb28bcf6c3cd2e2d9615f6debe7c140772594bd5e442b39adb2a970199ae49251445ed40bec449090b5988e83758f0820b62658370136f216c554b0c7d5cd60ea0ff128f27ca37e21af6533b0c5e72a50acc13d63a643f8bce9adc64c37376c7b1bd3de8e86da7ffae3a5101eed170752e726713909d0d08b07ab3ee24f3d447d5345007233af444feceb3be6265bdb775c89906516d931860a3bb0090a9b74099db8161c4040894c26b9477759dce3c34f92b259b1305d1e613947a80c8e0d596ce5f212bab91d6caa81e613992fbee2b353958ac438894e0543bdc1a3a25d38cdb9b497500acf9829e4d5a3ac922e01065de400a488d554490093751f1eb1a4d9defb7ba84956028c398a18a492c66fcd8883eeb07f8025c0c530083984f5f69ec77f1046ccbe43467208f4c680e4c7a2fab1217f65f1965303050eff6fccfe92076bf8fea776c96ca8e9194233c0b0c47577196e5431e0a02ce1d6761f9040b611f05ef85bd52d6da8805c655653fd932c627c7fac9bb9e7635cdd6a7fd332c195683ea79ccce12a63d24aa73c5e3eb0039a9f3394e5c15dda59a7e290d205ecacdee1b5515fd30f1b01ee97720372eac22af20209126ef645db4b4c1642d37a39d7ec6c744b5423bffa91a136da848df999d33300720fd12a1524473b35ccc4bd408b127c43498fe706b6b66eab4440974236c68676424ad76ab382ba138d706ab83fe4dc5235eaf0796873ee3b23ae98c5d0e4138b9b3c93a4a25f093e4895de08d4e976a1f59bbd73c63c73cac9c4347b7ea3a68069768de8dc45ac951044c3b6226d4186884b34ef8be12c4539e816b9b490cece1485d4d6f1b385b0966b253fec78e7dd37c9de9e31ad49cf0f10b4135fc9bf5a8f513e41a1f487bf654eac4ef806a45d9184a9b385e6e789e875b3125d42f2434a24cfb5afa9a395fc80f38f7ec7a3b4692efd194d21b8eef834428cda6f404e172ca0ad47b3e7a258149bc7298aef446ff53d8792a2728fa912259c90ec07071fe2ade96edff601e94b0bc30aa4846324d5b457fb6f2d9a532215f6325b4e395c3e65ca74d84f7c17e83db9851a44ce5671bd31996c809c1add1b2dd31cf9cf910e2e39817a9db7c85504de56718c7f96ac2677773ab5307868f38702976086e49456260d8fffe7035e9772711d8fab725c64559a8590021d22a8e69ac4f59fc94bb084d911a433fe5cb818481c6c8b95ee39a38241f535dbdd34c2f7c51a588eedc8bc45db717302813df3dc45267062f156137da24bf407738d6ffca7840943fb0ce428aa43799cfd3936863a557d13cf9998561998b00dc93d91b13fe1a91424dbf38ea7ab1a7deecb33e0e13d456c1d3156377a46e65352d40311f2284d2d30103783f053752e2d7df7c1ef1e519e746e22c77dab6fe90cb10afab2229cac215a45e39eab7a7eb914f04be97455e4130629677102736c6996d4fa261ada3b8e1079dde5245def6a03f7f02dbbe3408a525a1b3332cac86ab22dd8ecdb5f4c096b7e66526598c06786603c8f78687d9741ddc3880983ee5016720631602de3604e9db3bd6ee73c90e40172515f8e1186df48a0ca74686d06b97670938d886ac4ee0a50acb50a364fdb613b56a565ad5cd70f9caf051aebff3a7441b046906cfb671690e1d8b8415c67b6eae76e363384433431a3f660244607fc0e1168e47eccff268fe505bd4f50c5806bdf3884898b4913c63f0711753a8b925dae1b52f5eeb3fd41bc7f82f58416eb9d30762dc323894125e2fcbd69ed691e0220f66405f6466f856d1c9eac0c1a4b3512d078d07a3d51c666748701f8df41cfe8cd4c32801604240ef0def9fb179e3a44018b1c1999b295f89a67e3c60c4d599346c067b7b959750d37fdddffb29b762c31f0613d209410ade82a062c62a4d2f89880e677ea2ec14fa71d86c7f4f3cb794ab142ffda6a4364679e59760c0f96845838556433c4d2f809759446d98e5c9f3699a6c7dcb142d1e426a7d7215589255416fb06c7b514f7dd36ad60e89db3fe88d0415c6d2d546d1bd9a12f9bf1afc54bf16cad95318ab8220ed02bb1cc4754d9643cd823f6eaabe14067c8b3e58afc6d0f5eac1ff5671656e730bdb921df2875423e75305696fd0d6c38add5b8b46b19998f846d3289aa0241d9aa46ef88fee842d1d57bf854a157034549b2b7cd5d88ccf6782089f4e0c3ef607bd0080b4326de2f3559d24626dba6f54bf385d58ef85d797b4a88f89c56793dfa958f71fdcee92e0f01620960f7ca7299f08319c33a8d4d4d899d688a3a6335ccc5bd3493ea9e9d6dfbf50231c6f554cf682ec60d516bf4ab3da811a5b062b914917f1a57e4c385476e27926c55a49e3b2a7c64dc0ee1047290b0b68526864b1802b7f801ad918fc9ebeb93e485057681ab7a7fd2a5e2d452c1680a40656a5af4995bd91321d1e3e843cbc2c24b300192fb82e1096b8097b28e6940aae2d64678d6ee86b0fed266d612ad9fbe8b9ca3915d30b8e6dc8134a22bde241357e8cad8328d888c71ab5ee3d5fc98e8f7266e617ea493f8a6a7995acd7525d4d007fbd0824c441754e8e6f70d2df1086be5c9ad56f605dd536f69f455b935bd5cf76b91745f0f35c8e560d7b685a9dc169ef133ebb0399ff74d7913fdb79f95d3b05c2c8356c9e6b477315204575bb23b647176a048f1c14b98e568bd281cf45b6ad0268a49ea0629e73b58ca1ce39a6b20a7b9d10bdc709e95df57d2c09c578346fa689350e29f73aeb108025b6339b02022cbc86097fc26b13fe4564dd4368e270a2dd88173e62c98c6a4d7deb8c51069dec45111a1c2d3c61eb3011f9399b4549bbb72f0bdd24620a46ecdd0322f71ebd2be38c33be906dbd35257e4ba8818cee6782120d3021c7c85f8b41cd01af7c22b36585467882cc1ada9e930fe82545b06ad89de0873479ba235fc4bccb772526d8cade0f50f6b89d1c6f288a5e7b884d8e615e1acf0953ea000bc160e0620f6bc077b297cce55732b9f7053c67ca113c0b9745c2e0088cc7c4698bd486876c971875a1064ba867ae97a8abeda174b28d22475e4e1e816965f4df268aa7c8308af9cf15d94652dca16a2580d7178f307151c2c1e0b9b38bbb67ba6c2b99431741706b10e5e57a70611eb8d5ec774230d933bd89b2c69c166f0887635312fa98e28dc6942c26e9803e6f299ed51fd82ade498acff9213d8faac13b3c879e65b95d5137bd3e3a269dc794c3428a71400784e3e08dfb75c4fe0c3f869d3c4962fa403caed308ed2126937988df610f3cc9318b6ae68f10e08c90c944ac41e630235cd4014b4fbef4801b9936f050ccb2b2f71cfc6e3e02a36e52aba5c807c19cd0e1c25106554941d0f235067a206b44b0ad2014ade6c155352c9ebacec37082c009685545591028c021a29575d89f22d8283aa4aaff55020ea6b5465f7045ac8164ca1b4067199349709e215d96765ede79334e9fb2f967250549df87035c7e8525f4a8454f4cd58fab7e0271c3c92c085619d713154e1095274a6e358f5f10c3e39e152f9ccf4d06ee76204767b879d22c416e2a2d75b59022bcde535feb13820dcfeab688409bf391443440d57f35dbf8caeb8d504d7a5cfd43b8b8a1223913c59364cbce0b38adf5a8709c2c5dcbedf9dda70fe9b72c6513e8c6c6fbd4baaa3176b30c89190543fd335ef1af94911c9d8410c3113465f386765f436e4a3d3cf1ad840012b7f043fa19592a920c930ef770282ff6e1bf4a17ecd3cbb464b96c520ad3d9f64692650b9a65fa4d219b58e20d7711b62eff93ddf2fa9c529c6947cc9d5c3bc8539b8574d788d1f153195eebff65eec9071b438666e90c116c283f94a33ecfe3782f54a4757cbddb02fdcf7bd88c45eb31f2ad7e19bb8e1c53c3c575d1e80f47defbed86ec5fdd31b01eeaead09fc2d85113aa301fc3cb7903e846b325b746cc119ef697b460da709f73145ba2c0b8018bb5d43665ee671234e178276ef4583706f84ebf55c2e3bc2fcd613ed58c4f9476c14fce0325319683af8f08e3f271d4f82a265dd82750ddbf53370ac66f31fbbd3fd7ddd9d830be0e19d9ef347631533c60cbd38676577c5c451e74c7c31ceb0aff2da7829d01d3c6886913bd88a07dd798f80734ec3b7d92b169c7e48130d7051c61682865bc5f2b26514c968e0a89ee9b2c5053eb18398fd03e39bd88d192b3b0ad994e928b63e26839ed93f4598f0081e89ad29b218c9337ec40d43697abc6714d2db79863d5e72e6851551e8ce701d2ccd31b5e6bad5f4941b42cda2ef4dbf8a2a1e77b0e127ec1b78dc515551781ec3e9301f10f2c43d881f917a52b826a64564018c7fa72d61825a4b6aa598ed24ea314cbf1bdf6967cedabc197208a3e2cba5025421fd3cee7f6dc3a07740cab969f5847cb9650523757318cffbbc31310edc3966361e3847ba3c6bc5f476a86f8c58b95ae361970e8cdec306984ef1f8e172f206b82faa748a05dae08c72b0dd7f6637efe234d1885d3e1441bac8b7cf8b5c7edcc62cb1a6c21f88cf66c2b94c682e1c065c76138c141bc18979a889cb4ba84a9c54d80ac4c56c0c1bdc9a50ca3b1fc9a33537e89db9928c2306438818b07c8ee3c14d9eef799a5df1b19618923c1dd98c93a431dbec623edca829dd7c4d8a8fbf07124fc181faca198ae6d8166e772e0720df0610ca316a880074ebe0677eeebc3de74055b8b6895c6e17c0cfc057b48f7bd8df82954e04712cbef4cb9c86bbfc7b16844711143e61d9bfa45e9703fb7664b41d5fb0a5057e1075073ebbc11b1470455952de47514af68a3ad56f423003ff808b44775469b0d3c3736900853e33b3c440dfae73eb3b0ede3521f73f56e5ee316c95829ea246acc89779e9f30c76c1ee3a51ff4066e940d045cac375b8ace3faf749ee9c7fe788541ab4aa8445abe39a52faef4374237268129e76fc9025857071d23c7292f7ccc498b0768eb55ffed9efd6e08d7c00af240e90c7449a0cb911c752051d115f4f9df5d2691a8462ca82f8dd37d04c23a1b185413c6584231f16a9200333d657bb3d50e172bc5eeb70e9499e64ff1314445cd3b942e811597adb0f335b8f5fd4aa80ada9b820760742f2fe913ea5165565c9e3d975d3bfe8564b3b40045af2bab10ed1bd86d7741cbdfaeaa167c36759fa85e5e8ab367993435e255d98b00a1f2a37967b0678aaba3608f514de1c43e3c12f62afa811dd03afaac4cfe228de416697687c035874548458bb68a715ce1dc04941689e955172de4be7b97583ed645b0280ed242e3107f984658b104b63179d6d3d671135db48517724f27fd5ed8e6aad79817ebb84d80aff5f577744862fea20e00fd401103464d8d9d9d154bb15153a51d7ade0744cd8018aa022c0e23288a521c30f16894b10370bd9334394ada98531dc09bdf5ebab52ce0a3cc5f2327648f946b4d582b4578e6abad778a036ae4c6ee382a3f86beaab580fc99d50d84c5dc17b40d828f35722225dc4c27816c0c6a3453ff2b9070588c1f197f42bcdb48baab23122ab20a7bd9259554fcd308b03244b01797a042b9acec0654cd372065078d764d64b96bbdec2dd31d10f371b4a41476138b4355ada18537678206c50b5a8f3195ec752a970a72849a1a897025b38888cd05fb15f4ac5dc4b2f53271de59b2d92a12a2a1d004b790292c3d593125d1c92de99a935d6987ba018839bad50693cac0780cd0b71704588a24f902ec8f3e87469ee6cbef7f3da177e8df5ecd9246ef361e0e1921c9e4b37801eb30443d44cebc24993016a4ad7978583fbe312249adff77b4dcdc6361338a448b03802f0f088b1d6c57df4a1d3fe930b02a5f9b180980aa5e1f605eb28e5c27da6c58547fa3ccd9eba291003c71283e1cacf89645605040ddeb776f12a25b799a61abae5af6f620f4b02dff0c7a6216f850ad0e29469bb0003da30d50bfed365aa88fde680fe297f08a7e594ef8b8216c94404490de578fd2448649f9460b5f31f093f7f7834ba2ee8b7e8643dae21261b425d4159dd3bd96dc9d9f565317f9fec3c49b8564c0a9d4dd6f238984ff3690c0a56c4b8af63185c577f1de7e0d6fec0941a93856422c59ae6e1820606db4f08a0fc8d7d51e76f21cdd4a210ab47243ad063e720bdb270a720754493be5b7f0eef86d24c5b735d45e069d2e85936dfbaf190bfb406f1427c7d5a0739e862e20f45f69812cb58c1dca089364396119de70bebfa5652f228cf71c4bf4b094e7666b251c20827724d65fa6497ec055ab08c8fe28298e46d4051e5a5824001f31ca0df9420d2c3347980ab775fbf37b7625cf107c9080df51768ea548df0c88380f76699da334615d3e361c13a080fb8305d7bbf19ab56b449e53979f6eb249d3602b0ca5fbc4261d4fd9afc220ec6fe595f2e778d5c7b85abb22b767fad86a40f7facab29f26b8cc8e247073d577f99ccee7092ea064dbf22ddd5e72f3935a7735ff650b0af4c6df4720a909fc6e784a685e4e958d6097b381d2cfe2868e4499334e4cc0d304d9b16140ebad1f4b11ba1eac71cf2d1e7fe30de40c0402291f1f775d70767707526cff0e3c022b87e4cb0a221cb4196784449c0a11096052f2642c57aba135b8478fff10c71b2e5920d2692f8bd23827586145fbec263c89f1cde7cfa8a967881cbcb5ef92d851db84d56ec2bfd8164d4b26709595ee9af77f51ccb776d5d8e83dc1c5c56557b5b7909fcb9581306dbf28b56c9843778eed17e5d3a4601d65faa3b0e08d80cac7c0de750f6eb9d565e52e56b13ae4506f3243f1e2cc012bf102ca42508bf82508bc499667e83c0fc5f8e26d747fbfb99569127d633932553a954bdae0f03d90462eb8afcde7939b9accc73c2480236d5a85877cf1f63293590e645e3e85478f316cc261ee82fd954736c96bce684946567bf5eeab7581aef710a1c826f3a13fc0eb2248ac87224b2d47c38e88415fc40e681f43352145f58ec32615195460704e2b4f1509794cbe6a9dec6ed3c99f57f77fc37f6f41ce1137f29c78b08b52fc1a4062be3c09a76feac0a4da5d88374861f091e40297ffef47a2b9e214b807f67b106af8ae405f432c01b72b4e9fea868bfcadb131c718bd0357113a6da5a946bd8df14cf11e2877e08ff3626fc9d24d7d13967e985dead916f2f6ab39ea02e44d266cfb155b8ab6f0be8187fe4c96a4a1a8a0e3c834a5beed27daebd1e341be0522e66ace8542ed4d7d75234ba58b841430c639c83724d966f7cfd89f0e4cb493bd1a3481507485217cc6774c9e46fbf7d6f5f29b6d923c864fa680cf47371d68497995edaab35f54a04dc8519e4eefa1c3f2c092f693a1ff8b5f9a2544296ecdf011368aacf6b28b57461da59fafca50e76f3edcd301178ccfdebc1633d6005a0c6abb31dd38a0664d4d15ee03444df487612b88cf77d872096a8c6cb4ecaaba6bb6440b613d83e647c3827fb7abed518a531e3074ca401eedf25c51f7a2aa130f291456b7d5c009dfa71b3732e1b19268fa947f7ac7b06fb7ecd75992737f9a1d9c9cbe81e675018691cf5ccb36ab0f7dc464651ed7c90b3b0c2508f7d9e5e0f33ce246c32e5fcbb7eb37bdb78eae00ac7020e43961cdd52e6eef9c7ff08fd2748f0b7d068ac0508ae09261a8f3afa03143e84181b7348e60797d39ced41241bdc56a1a1223896715c7c648fb08fdf9f6dbda57403d3193ea2d77e57a66a9597f07f35b098470c21f719a3f88c5941086363ee8306702a2fbbbd2f39df99f5ff060c2c9a3d7ca4083707e9a1667e3ce7779a941279e272258ff54f9f061fc9bec015beed2526f41fdcc53ce400dee75759034f43a83cce6cded3cd52e872a6abcbb21b95b6a801eb31cb0fc94513a3979cbf7086b44eb3259f6ddf244d00a696255245c07192d25a42611306d852d989a921f053a77c8a63805181288d45c1dad5d8963536e0a1f998704ad758efb5f3b44454c5a38d331979a04eadb2a9389558e5c6b9c2c3cdbe5f7eee508dae87bb9209775428acb464107b8b66897e197dc25c081c07388a4118b323026b9d73ab20dd08a02071ebd0a9f5cb03879cf1c1d656ec7bdc28b77ac11a3838be305e9979d2bc0232b71774e5ba893fd487bcbe48dd9867648d99299af9953ed20c6fa1ff45e553202710a51514f6a3072de3a89eaae25f09bb63d08c0e9790d20bb953a47d2097a537dedbcee124d30c2e2c0c3e78bcf076ea63de40db8c2d04b2426a000d4ed4576dcbef38c72802dbf98c1f8fd5e1e55c9414b3ba27e3970249d3161d7c65e505d24c334aa684eb7eaffc9016f60c875b82f227c896c6fab82daafcfc7a4adabc9c5a881b4c1f490d6b82bb544671d10a9add83ebc4113b6b31cf005741f143251585fe7082b17a10089815331e4a1e72b0c5f980d5eba08fc9acf22ed377bafda934c3982b5d232b6e956488c4b86e001ff316e68e9bd3d9f1adfa0c02c221488a9582856fb631b87de70f06cd4894fd5ff5ac3fafa729fb6660d512d587eb09e33b8c716957fdc47cafe118d97478fe782886cec4375387c79aa74917559b38d62c7c1749ebd624381a988311f1e81139eab6924c08bab5a5318de86ba3a0f678ad957fca9a4e877993a60e75423448c4aa7f3d5693a24eee3fe788b56c8e1a48e8c145d1670504fe883ba3dc5b8323ed54105c3d54c38e18e330a8ade21d7d5cb97dbfbd70002532043f86fbcf026766dc73dd2bf709725474574433897fb8641aefa9817f82b5d68853849346e9792736e4bf2108c36d684891983c143cb74cc12044c4d16c7a4f8a983943bd3ddc98cea492d6f6a9456314c4f2ba29e31bee99a8f6cb4d1ff89d054b7dbf4448011f29f426fb8fbf941abcd7b20e93e7ecac3f0d21342e7f1a3048baa8a0cc9e1025fd343ee74c467b069ea1d5b1b613f31d85686f5b034f5f502097d08b44d55e97cf8c243edcc8dec5b7f1bb26d543862d0442557acba1b9b456022a6d49a6b7f0e8537c81df7b3cb3f4b2895debecc65394e586ad842c26e507865c72a6cb23f8d17ac8bdd0116bb30ec0f552c0de6dd0f3682c776fc545ec253cbb4e0af3ef30eab727991652666e77625c78019e74ff04fbb143ff0855bc2316015cafea1dd7884c8e734bb6ac62c31bc805b4b94d231e25f9d606080f8fd3c956f9d772a6ede2c1c5313a5c6f1e9d0d828a663b811eea129b72de5667d5caefede46f1c337919eeccc598bcb87d2f0defc85db9f86d90578f2355cb3db7b889411436fa51582c0318f6dedfcf1bfeeba58d1cac84f34b045e3437533cd12da1e2e1f17eb713ef0708737ce19affc15a16e25d32ba6cf9bcd7333589a7f9ad8bdb55c55b5b5648cd6f29466d0f583494aa9c51f6710b185f9d7e817e94214d599f8eff0a53f57813a8333cb403e2c576b008a9d68e0ddb1d92c3ab0334a434e9dfc8f4920876bdf20b2cec90c1e92ac2047bcbdb6df8baf2cb180183293ca137894986eb704bc2bb7960ae94266a8811c1a44d36f6edb8aca4ee4c313d8801d96e0b7c92fac19f00d4c70ae94557419a44f5777aeb3ba5a57b3fd52a11c21159c4129696db88a7f916f08211a7611f9b9304bf29f83aa05da76a504cfe7d46b3f1b91dc33603f9f7f20e2d31015ab41ea3cd224fb43e0266755bc4affc16a9e402a50f89890c9a6f139328ba26b394bb00e601c21e8bcbae8d7a7cd7bc7644a33fd9ffd1a4d7e42fec76f1be239e622a3127bd5a3ff7a299494dba20e608a72c44ba574dc600208a6ff05003e3fbb1c1a6c9024d2982c1b5099df3178d2d2e1ab3ba6bb625cb61ebac4f7decf71fc3c41f396a47178948e627d4a141e1cf14083959f529a0be84103f113307079056d45390f7b2ebd672c599637e8d794762e8b25fadd48fb20e26fafce738f77e56082093c89386b75930c3b040ded07a94fdf9648de70aa640d7eb7e3bb61e135122ef59875a913f48c2081bb8dac7004c9f9c629000b6f78d701be2660227d9390605d34971d24ba9d3ac944eef3b2b1438b6f2111ff7643b7655fce2aa864c536ebefd6c4125681a0a2c775e490e55ae0861dd0609b1959f083118c7304fc64d51509be2e395ec37149c57cee27e1dd92442469589dd60240c6ed96f5a2e402006e65cb68534242e2bd5f9c277f3e58e02ecba4eaa8baf29b676955a640432ef7a15da61f472c8d525ab88f1b8d6d15a2301dbbabacad5f1d76110857c48a4f805fe1220882833ced39d1cd1086bd90cfdd8f09d442a94149de2c02ebc20a0e6fec4114bf0123035f5c46d0482ee43159aa3ba0e073ac4be3d9b6869a13cb33508bf4c73c69f1c4dfda18e722c7d1e350d96f77ddad99c2daac02388af356effee88125333f4fe67679fdcc66bd1d48b43a0a4294eacafae902f47c3682639c95bfc66048bd5d1e0dca260ab7222c9c3fa758cdcf5fc69f52159e125174d88fdb7d4afa79fd13c468c8d9b6740b94f82dfa5ee6ddd3496db07f966799b68c8d4b1fc297ab853f57a8960cae25582e0981b5648224dbd43882b15235692f2805b5147cfbda8948898b7f122775b7e956b9ecdabc1c13af15ce313918a53c556264f7c493bbf33d63e9625bd86238099c2c4b2e48ad9a5ca0594c3a5b91f4c39bcc97098f4b8069285390e96d4b12ce76d38d57aba95dc16d25fa7fe519efde0b5ac8f99afe926b8e30854f083a6207c915ef0363be28502ffdf61379ca53eec04eb3d6317d2900202a9b7fffb7e0afff60d4c0327d544ccce01ace199c3c5eb10befa7d473c3e8513e0c600bcafbe8576f1e649f51acc5886d60417608ce3b7f96737ba7855f701405c84188efbf8eb0aaab89f35d218bf9c22d0b519a4dfe3f50ea981b7a147585be2ad7913240ee9936e42376718b2b327057120af66f70a21ffc749484d3a0f66df88109d6cb14313a194d351b5b0ce7c6070d58aaeac6ab84719bca20c2eabd7189e7a361a65c1b9ff13e614b6f250afe2df00d5b2bd8b7b4d990be2786a8a2174ae2b49cf76f76ed59b7cd3a944890a6ec432e8ead94c7cace26baffe43e416418f7a5754d92badc2ebe65adfe093305d75dd0ec93f971fb041c03918a442de79321e33f90ca5c120f9855c2c7e2bf1c922fffc56ed42f5e2ee2cec3115839db99fd0c52afcdacd59190d626811a1429dee36c2590550ae65749f9b9dbfbafe5605a89514da4f6eb84ab9feecd04e92725e4cf422189c2665e58bb439bfeba2401879b029ab828783d7cc57fd00c9fc282b973607afa4c4b93f72c971606f62121311e66b4467b889e4bd0e19eb1c15f3c36c529228fa66335d68ffb98cacc9e826dab932fcf9f54f97e31796320415b35caf609c3a770b91cb9a13872c9da039086cfbcf296f1fb2eecf90ede63c3714b509fe61738c40b714b337339892cfaae1300da6dd47a5a1dcb6b20aeee17e2359eb71d1856e6c6fb6c595cd82b432cb5287aca6303998a274e734a33909500fea6fd2e28e627f6edb3c98debb4662f38e7720f101516e64875de5a855834e2471b58d665faca2db4998291458bc9e45f59af6b4a0b3ac6d46a999125728c604d09c963bf60d9977d7090fe83eaba2efdc3ba2c2bdf1bb48397bf9ce78c43154205009c89921e0103b121506f82601d848a85831fe13ec5bc0628403e79b0bc0f14ae942e51c7259df8683bb2ebdfc59a086251cf9620365bebb07998f20a35d11341d6dd7a20da476afcaa3ac8f0727e060b70ce450f5074a80ce197ff2912c366d1e973fb1cbde4249c16b9a87f7939765b93ce730fac3ac2bdd8b8ad93ff0b6a2645a8ed518fd57ef614d1f6a83560557c2cfc94df406ca2c56206664a3c0e6186a38e5bcafd2a076b8370ccf231a1fa70d5527539de7eec033e6a7844246182808f49b3fcdac7f6b43447697dda8306a1d4bcd06e38826111f2056b82568154d7f61726e2b1788ed3671ddbaad5c7608fdbb58b0ab9279e59d1ab10e322638614e11953ec39929ed8110dcf31f2ae9a724bef00ffaedd83d0671ea3ae24a4a506bf0d6b137fc19f4b71f30c9ce973ee862d716fa09555dea06b0217d158dbfd6525f8c6eedd379d0aa92865ae57be8b9d28b4631395b75bb93c88e0d7ccf4751220538565c80270579b2612b45f7a4dad67b926519f54833dd920e7d178e988b51799e7a14ad4eaa8d049f3b5a8d94cb1ead42dd66aa184e66dd217f26efaae14a861f3eddb4f7ee06b53ee82d4876f1f0a78092f895bb0ef9a7fe3e97115a007fdba77c4067d4083abd23af8a863dfb6d9acbb0595471ac45e6d02f3c325be7cec85d8f8658cbb37d937148661c6d97710a179c36dcd2dc69f024109d3b3dcf72c0db7be5efb5619afc321856573d2e8a2becf2fb54a21bd6c322e897aaea58b3554c3e0a5c6b5d3435acb60a318913a2c0f6f431daba1ca2620430706ed9e831681c4f2ee6c99051f8fafb5df01bd7db2f9285961aab2387e478c033a521a43519a2d983a9cd3b8c708b19ee6488de9ad834c731193be590da478947c003b113b0e1bca52c300b1c74b809c0f5127078a9cecbcbee176f10fe03dc9b5a0d963ce5d9ba1293c24a1ac6527c32b8070dd1fc0315226a1f21261658655a1ab99356a2828a7c2163e3e9b22aeb1e6a387695d04d50c300ef59dcd8d005815f58b81dc97a2c568e01172284f5646f05162583900a9448bcf980f42924a02e9bb8035131e9c57a5c3008fc1acad52c6a3483ce37c5248e47ebed0ebf06a8170aa310ffbd463526c8d0f4b40bfbefa251f38f9de022c92f1bbae062f12a9a58cb21c0c6842f3a2f969ec21519d63dd0df045f9240399c80e9c17364f9e938bb8618ad2c69e8da9bfdd230d0ce52b78a5d97927a6d7cf803df83d2154eb709d9553adedd6fbfc148e8046e3d21a03827e439209c5f2e7a95d7b8eb0c67bcafdac841efd23926db63aa9b62bdbd02dfaf826645944b4245bac92857a4f983cd5ddd2cc9c34d16e591ef4efc2103470d6c676161a14064f3606b14c09c7733f36f484c6b6ee8e91eb5edbb31205ef3f550471e7d7f0555fd51669ee398bb61b822544bf303c474a122141dc2dc32cb13aff076a958cdc55b82d26a53613db0efce67112ea39c06094dba22714973b7598ad77d0d15f4974c2a29fb17bf6dc44637bd474d02f1fa5324362fcba4153e22d1c59c6f67c0a38eb243dbb7f8356f9e2bf48532a99d25bc17049af19f28bc444b49d02a60d0d12884ad73113310a615c1ba93c2b3ab798af9ae85c9e85952591db83d7dc8c93d2c07e82a6b214f2aa0543d7fc063b70851668c797ed9c91b4d662095dea8b7e95cacf92885c3b46f5a8a19123ef1676b992c3e85f8813b6909b166700b2ce3a119acbfea63e2f4003840a18021473f41e4a23690c6ab2327d698c0515c6625b3740b69cbcba3cc0c2c5f29bbf4c4c87fafa85feef55ec682ff77eb76618d21ce16f72ef0b5fa724a7323a7c57c78e0f9e14b36b66d933b0464b3cb6bc27c765fed87bd75f590bbce0b5fb9f2482108e74e9d134dfcd500cb5f2853d76980fb00e48976fc721608790f349df49f4bb738fef038eb066c7c0c71e6edae0f568f4d33601a50db124915779f65f0c1856cbb440b609eed917fc01da415ca43e5a9d7192060accaff662e5f48abb7c9fc7376d7eebc9dec36779620672d90fcf390a575d5d98d86a315ba29b9a283cf8fd39973a51f1419e8dcbdf5d1d567cb810437b29d6b523f1fc42e2d611e6b2d275173c01022b3633b3ac59870b2638897e2003bbb7e567823cae4f41056902f5630d7258f9491e1e6557b5eae28d9474cf07dbee675bd140ed166f9e1eda4e838eb1507b87bb31cfeabc9aac007d8bcdec4bc02ca77af536d9303ba43d71a9cbb47deb97c40336a5637904350492172cd2d7c73c2037afecb363e0eea5cdc749415d794df255b9967803d65b4bc440b973aa0110ad1976ed895de7caa2f5d71e3ef609305f60f379552cbb01e6944cc23ac7ce4448ab96c2c54a033fcbdfe65f47a28cfb6cdb0b47d8e3a0cf38cc5756811554ecd17340f6dabbcdf6e0e4095a66e89c4226c5dbc38135b8e02db332aaae3a6c6f46498b6671536f163eaeb21c3fd1f4845d20ed831b37f8e5164e18aa691494f8ce9352e965119e44ebd260868e886aa9cfcd1f78e9006fe70c989493c2f148952a5ce5f611d3eb50a69d5fd7f8ec9e324d15b3f88fdcaa84bf2fb5b886829b9b1dbf5695ab4bb83555a5580215b5898240d15c0cd82ea190ac47760423e269a19348f62c11d31a6ead3dd12dfadafccee029115fd4828e29a287d7ea2bc3a1a93e8ac53eab6ea38267d234593714e6d64d5291a82cc97d837992f6c7c91fe39a8cd98fe7cd4ae865fa389067ca7bb76eda5fe05d436e47b8c9f9ab54af641cf2abc5997c9d3a3a54343c3f99b24cf95641eec0b03e8854b3545dac43230984623dd8f6ff9ec8e706f09abc6b70d7ddf82b0b8d581af60d80f1258d30ce78036c9d0f63c4b1a1ba9f094da182548eb8101d0c7ab526c08defe8016fa4d19deb0318b97249343c8fce8a3c5b8dfa816e74dc1006d0838e1c2676d517d070145ff6b871fa17033eb9d47b367f19baec68d11874b936f998d66535ac8d810bb1e0a94c852eab92d51b14bff66868e11166ebb5721ebad4ee8d49b13e9a86b3c226a6fc1c6fb20d40ba32435a91bb97a7650687ec91abf0c3d6cabebadc26c9d1d503bfa898f3d8c324621b9487f9bc6de3b48fc7e7d60ae72fe43c9ede9ecf6a7f419821cbb5e9eb42f501c8699de1f3f3a930b24f7bab30a51e02b1ded9165f1c5ee2f665d6aeec19ba6f955bccde953f040e8698f7d00bdcb22bdbee6fc59069b008f8921f0985f67ff68a49e3ef47ae43f8844b3f58d2d99c5db2abdeb35f362e1cce884e8bb3338296bdcc02251c95dd564bd1ae5624f685f71e8fd26b325036339c735e1eee620e00883c6b378afdf6972040d4f3fc0d0a4528386d101ce44299096dc5c6ba3ac8311ca70c9adb19b23eae16364500d82fb4ce854ec836583bf2e26b71f847b0ddcafc6489f725f5b606ad061e40abde7852a6b3ebd1d338d1364d8d9a99c523d29e7fee465e6b51e47c493fbebf0207b19a610b9759fbc03ad0438e02b4059d00b76ef36a4683fd56ab5e1464f96d1cde23f118218cedbdf0df89accc5085c6b16d49c1973ab30d8d61a113ed90be4bc2697f29ddbe6cc7c93878363c1d598988e0938e04d205f3f5e41c21eff535ccbb59085936c8b4df15cd334443cba36beecd446cc78cc94cc3fe00af3901691944ce09092831e4935e53103f1210634ecb33d73c0ec37969bdb552a9bf06106cd7b45f304a5cfee1d0c72bedab3c6189fc965ec3db8a3ca3aa2ae713952c99a10d1395aac69685443442907f6da85cb284ebe66642ca718d91afd02eac039d36e5a454c462ee2cc3555fb25f1a89dd7c8269ea26617e0040050084296a1c069a201a8f7377168f1073c7b1f8597995157bb982c517d292f3da61468227f13f9d23050166706c2e59e6f80cfbcb01dc3017c754477eeadb7520ac415cd8f7782ec5fcb9948f650dc6b20163fe6b7938cc218847dff8a2ec5a29e52c5101b533b25ec435f4d8fe5ffa4229a218622949c48a631188fbe7b7cb58729f813e55653f83f687292b204063d4d0c3e9905da6a2748718069559823dcaf1c426a01b449a31afe8f4a1530c55918652a9856755c591a3c5aa8d37f522523941df5f55657b7fdd905d6418ed06e320b74ee8358cf2d1046f472c47a4113cbd4cada9b9eccab1c07d38049e5e3e57c1f55ab2df8599e82bee9a168b40052bfd25e1e0393fba804c5deb38e72fc9bfd99141cd1cab8fd37b0d32d1a99b63b0a7a90ecbbae7a1219f49d9f2cf54b0f615122662bdfabb2696e750aae2f62f7c1f577daabcbb7e97697b165cc47e82424f4622206257dff3566310108737ac51bb1273d4615ec5e1f8aa861862352526eda6d3139ef759bce603724af89c0d8523c77c8ee5afb22d5bfd74f4c6ee3f611d639390080ed11dd94894eb0cc905efa7051a56e6e4b84024cb573088d02abeeb3768ad01a3d6751226ca7a0c525ebb4fe1297eff1b9205ef0c3e4a0716642892d02156c5ff0988bfba5d836222abf0b755447a01b1d0da8589f3a754b2149d8fc3174daaee3471779645c42ee6931c13f0686231169c987ab757b1b9631c5a8b32161fddbb2ffc5841f1c295ed46a502d3bf0861e210abd620d6fc1867fbd1dc061afd995a5ed84d2f1220bb4d6258c1e0414f165b6fba9f0a4644768f317a57cca26539893cd33f7d32854a4127d38e6209b403bc60e10991420585c07f1975d51a80c5471b731bc24e4391fd12b30102ef47165ac3c07b5f33fc337d8fdc021dd48bc1980e3a5b8a6c23539eb64bd4397058e666cad0a3cf9e6914f2046717ad2e84de845f438e5089201dbfbc89dade10eba38140f27759ced734ebb9aa612037adfa247c72844ca883c95c6d94437299e5dd9f131938e3e504c0e5dc0f5ed281020927936210d606d07257e2bed2208709b0970caf1006f6c8ee44b5254c33515b2dedcbcf0c3a7ea2bb8d6827858ee29cb174c58f765ab79e15d495c8d7bc772c1449645c88b55700a365a647d6cdf8adb2949a9a80cfd6d8d95bff4451def0f1af0438b4d8f431193ed9e36ab8e61ac784179d197f07233da1ec61afc42045e20b8ee63c681be6258057ffe9e9adcfbe0814f24002d90ffc52f46b5c0a09f5d5c95b35efd8b97e310fd2add7c5e555f485657b40e34405443dec8792231f135bffb8344dca509e8954f01f97c258f5dec58b5f63ab0bdbd7566dd6f015f58dd14e647a2add71ef1af560b3471d3ae5aef13b68e2176b0d9029b28b1e6eb42cbf96179e45c90f2ab7a9a40b17eaa81a8ef672f36b51f503cdd50955cc0639e823e008a65ba290d71d21b910e07ae220272c2afa7a11fd2ae9329749543ae95411c7d784bbbd37bef2a9804b087e7611f5997099b1cd1738da39db3c66104ead23fe1d67bbeb4fe7720d1220ec5a038f50d13e5eee2bb66f80e186f28309e83cb970272bd8614fd684ecba7fd57b028d1b517347229bc83da65f1f082b23e93a4b1876cae65437a6de563b3474cb577be7786f4d7d8e4b774cd644f113e94f4e741c9029720eee0c0448097cbd5375f474019229a351ddde8cf45e42a3f0fa377863b58a9df52a29ddb49cae1e716edfc23132f0a9fefb51e68f0c31f344fb88d45933cde567c0d0411749bd1cc72b5cc87e080881d2f58fa93bb0f72e43be76c5f72db19d034d0c2df742ed8b687e82325fa69f67d71fb12bb81c3c88852d786288ffc64b3a64d87d3b89d227aaf7930daa151d4de673efa6567f4ae3124e9549a15c76fdf83175139dbef16bb59ed06af2b78cdfa03cdedb99c165d8793d35480cdfe5f46559ca0baeebd2b8d47a7c1798efda29a50615c94975690c7c5bb4df3600c887d0e27bdec431e4e56d9591ddf1b071df1acfb1fd840dd9f085522fed7c34eaad604bb1e7be91114ec5e69e9bf5647011d7a1afdfac112f009fc6c0f066d91e2b31ec3c025daad2f189a621a60bd7180a6a29b542bf706332a59c35bb2b1d5a6fe4ac9b16389a16102a66c76c5d3544d5913ec12e60eda669faceaedf37f7a59208ed8695613de834a4663312d69df5da7d041d5336c0bad85d62ee28071a561b6220f7295898f71af584af309b98ffeab4f12ecd48608c4d908e0b4251683a8caae9c3f419957e6487d3d113f990686d9a147228248889a33a0daf1b7989ad4d08b2cc30ec57371c662e7a1609bfc7f9ef3dc2b3c8dc914f98ab6c81387e3cfa33915e1e4a1792d9a3f41b5949e912aeead01ee1df41937ff1b0e6205992e929227eeb1cf5ec4a33819f2f5e65becc1fd0d72f55b4c1356d2e1c86a6b00f446ffdc58f344f1c056435d1a70bcf08c69a626c2df0cf798124585f96992857c22e3798b86162c513e4f63de122ffeeb858ee7de78dd878c4364c97993d16d390634ca8ab4c7cb2b5c29f309527c2673dea288d031db7e971d795e9566d7eb6d2554fba6f42247851bfeef53b9fdb5a85874032eaa0c52e85284ec3c6b4c69ecaec3cbc10a6d191d6852211aacb521c7991da116a479dcedab5794d557dd8b9624e1fd97e5d8437f57f011cc690840fd6a2bee4dafa0013100ee2eb65e98ca2b414214e91c8cf3e07295e05bca14a6195b5f7828cf8f712cfdddcfc47fc6eaf6a897de864b0abd5a70454244be4b578b38596ed515457fb71c821870cce9caac90677682cb7edd183d3cb1eadc59a6f83b0446f77829b57320e92f5930f715b2caf151f1390323ca2ccdd5599de48bb0ead972137d39c90082a777cd43af50ff7ef651ea69272d997ef60820d1347a90f7397fcb92b8d06ab7ed30c5dd0fccf417385179f4310e5030e16e9e34442a1e5706ee90892095028c8c9d3c995d47330e951048b6ac5cb818deb50f4ca8f2fab4c06f4d75d1ee663f7c9cad0ee0b1fd4fddf06cac21947b899fc1aa5b5a13a211cd0b5ed485202cedfb2f8b0993e300b7a4a250d61a4f8e5059029f09a0a97f96221b555b22a738915c6d4ae8d485b16b0782aaebc1fcf28dd7c4991278a07790211b3b1d9b8bfefa909b81b760b670dc430faf2c7774bf94d998ae0968b0631855d89e9335ee2bd3f25cc94291647e58ad3eab51e7ee04d043446ca5380dd04b9ca009b9a2d22cd512b0a81e815855c971dc2b013065122aff0d8ef7d981939648d721906b6f9ceec4a291f657fee68b11fe7a037f79d70ced3103feb1faeccd0789c3443326a89582ef903f76b8d7b3382b7505a5126ebbc0b1e53648403ea41f533e12577b3088d992eee6f691d5dfbdb4d723a747d60c1f3f622e0032786d8a3358f1fadf852e956ab86bb9254bb3541873b34c8566c17b58c57d1a5f4d70294f6e587092d6fa371f66f2b495c8aaf833eaa2f39ae94faec6a8d829e25dc99b0853ddc999f65c0b7198823002a9671d22029d4e978b05cbb48254c7b694e40385feeb5bcf40bf39ad6ed6279fd034e35de1cbf5b62b2502f4ca28cc41e73026c6997b2ff118256005e44f5d8a6752d581ab1cf0f573a60968138143541b0acb32ba1df4d8576a7b9cdb23c5e5d39427e410d7b52f381d81c0bf9d255ac2c4951e8823069a935963a76e8c8cd4fdb06e4d5db595eca36cae71f1386a69c0d53e7c5737afdcebf96514dbd8d1456b05013197e7edd7554bda187fcccbe97061b4b527b6018ac6e67263e523ad7a41d4a9f0b65f30e3e0e56c1c395912b1b48a4f08a4e0076474fb3859102d718650a34df2cc6d1029ffe969011f05cc7f363fc7242e3477b4725771610026d3943ff1be19bbcf4c38d3de0be56dd74eaeb8cc70a52f7f69bf80fec023480007494046fef1f2d9b236a17919e68a1046b17cdeef06024dbf524496cc7d0d9ca47f6e3b894bc2b71b7746cc543c6cd8846bea452ff7262930de420bd58b162aef767ef4e6ac33dedc979896ee8107641e1afce9668825947dd683941c7c45006a5111ae88c7c9e71a61812982857d1dc66c5eb9c3c42c16832f61b7d286692e2e8d0b7fbcc1759ccf03ba915b643914a2165708a01cbcf7fe06ee964d3fa32cb8c14b09a3bcc2eea648c02d75a6ecfbd140dbac588211171fe7d9e89c823878b29256b057ec0752ae8f577f30dd8678a4b469cc90c31f8e18cbacbdb963432df57cd7221fd98c647d81dc2e50216baa4113710ebacd6aeb86c17469dff140869266eff9a1e4ef2c737f8741e20dd47978d6f4a4aaaf6737262754f31d7a9ff212876a24eb00d3179b1c0eb2e3352f1fa6566b5c931485c5ff26dc4fe08dd724b59695a7721b598fbab5eb83f56e67f724e5bb95c15f5600456618562524e4e63352e60f7fd83f426bc625f43cac9f9f1bc7d7f206d095bd94539defa79e035f99826f463aec2511c2892242929783a9b23786bfbc6aeb59cb88dc4f2a9be7f6c752de43233d0d35e11081fae9e41299a2dbee0953f554eeddacc4fb753b1dd70f6e1635426db95c8cdb7336e9b153e08d5938fa7e0151183486a714d0047a0e1342d9b29f5f9798954d45686719d648bfc91a312dec177348b36fb298277a065529dbf920148588864846f3c332d87fb083907ae7b2931a9bb605bdee0475c9443651094f0e00f07b0956bb152af1d214db82f1ae3d26ee15d2e7c6a32dfa77906890081dee160e3eb54821d7d468bfb94051afdf4625f7e139875984b01e333225e4d4d1a746591802c17b8c02343dc75f88383908548e59d16e1e6d5febeb0321c3a3393f4d220b3692c219c17af5d535613cfccdf4f46f5085270b8eb30e9710450bf1405608891a9f9bd3f0d9cae32a0a323731f893137f476c843bfc2d96c1530a967985941710c25a05435af2db5f23212590e7408e55e16372ac8bb8b1f7221c2fee672f32f8fee7017dfa8cb33e39834ac45f4d5fdebceb85aed70555b8c7440a7f792c9431237a07e4b943ba6487c6ef485becc56b1508b77f6e40c68a487362e0f00d9a690ca643dc08b949ebddaa0818be38a804f38671c95e17b26099e961c68aab98709ef5abde3bd8ec3d5be71ba6d5e207cdc196a2c9248d546f5c59686225e80ee315ae9f2c4ecce8d8c043bc1c387d8396f50b2edb5a134d32095a0bb3bf572fbb06e0fae3ecb6c3b4b1777cd827ea2e60104236473c8852f425786f4438a9a4e606dfd580d9e53caca2981a09262b96dff380d426bdf450f27cff7456c0cd97e2c5acb9b105e6a7bbffc6249dc6a84979b61955dec648505efe8f78f452ddcd721c4c99be0264733b537c9d4d209747c3fad6f913c18f9bb268c1ae1457b62d865288b03494d211a96b3465154219f6a5192c431480e23a0c9faa64016e25d779b2b352f5407c61b6a5c47625bb8f596044e8d5226e0a54ec29e8266c9d02ae6f918beb7ebd8d2f2ed1e8aa666efc66143a5d1d60c99764cdc0517cec7c149970d0c0a5e6a872fddfe1fc2205ada0a9208706a4be406250306d89673656ada39b10a1db80550b0c9833dc70e1144eabaec4911da8c30103831a16c0c9a737b35cac87f9ed3c7d4dd01c04ded211f168a14d93a04b3071855f4f3f4a404e4b5db023fb009d5d8d77fa0960e2635fe935bb2d135e489af77421fefb724a50d503c9d0e957b7f82a009ff25ef42f665bcc230deb13e527330d69259bfb0847b5796eec01d84a7b6beed88b2a1a19a52aac5eef9b49e909e3b5e527bfe25b6f90f4f60105e5657a7438e0248ddb9d6d7a9538e8bf90a39d669621ac5aa57d0b1cdcb2f59cddf3f91921b9d513fd8b5f72d87ba4f85798a3fa4e0c4d28f8467aaed165d3e3c42ea22dcd2d3c6103fed9e255c1e19110a0870cacf639c8e728982f7fa2c163ce430ec9cd06bd6708da95fdc89a989390f5000ec51938658581c25a04dc40077b9767da0462ed937a2630a247f6573222f1b7dabc2d1fee23053c249b72060969e1149a7e12d1b49c7ca89c11851810a69a0cd6c060e270832344403fb2aa81d8322e46863b2bbc9c3a0cb2605559c7fbbb487e5683ff1587de38858ba0a702efc75ddb54534d7c964b2aef1512bfd5a337d35c5c26e0ab7b36a7b1d1af839e94cc7e2567c7e41126dd2b4056f21f2f1003b584e789d6fe46a6f4ac05855173605888abbfd48575da659ec5d45cbc60be3dd631e0c651da1e95b7be21b6dbf03a4de99f1e3995fb3cd3fc1a2e6ee28a21bdf586395da71e9f67d562413b9a42183b73d31f8fa9350418532173313a11413b7a4e4ea710c96bbcf5e0b00711e58c913ca40f6b0dd2bf68c42dbfbc52ff2afbd1bddf1615e65da9fe66830017424316ff9b5033b1482321c796a197fa16297cad9676dbbe4723e5f75d82771798d78555938eaf64b0abc064784ef41ac8040e7d67b7a13af7dbacb24ad4a4bba29848b763330ff47893621926da88c93931eb9f2c1287b126710f46928c26c88195aa3eacddf96f17f3b1fdecd0ae1e44c373f4c7a9119daa0fe468db5c456e1864788f14ef8604898d9dbfd81b158e79edd94e2142ee96919bf490b4a71dd01d31b8ffb23fbdf0bf844a5e5ffdb89e880c8df9dc388886928d7bd34ffd6beaa58ceb52f0ec197b5443d21b53f16650aefcab3071798b4b6799791d80057c07ee494a5987de9e2a5bb53383c5225263c90b69271755a6b2aefdfaa6a5fdfe0f0719a4380d246a635ad5a2e8800320de8669917ae39feff27f08fe642de3c55594c3413940a9753fdda00188ae8d97f964976bf33253d8e77c9026ff5e506c189d534f4c5dfb20d39c737facdf6111f5ec942adcc6635a859fde892c53abb6cc71fef0a5e72e22a30c8ffd9d8416fef696b75ba26ef4c2be1a663aa80ef2958a2f6500e0a0045ed9464aa138122abc52c9cbb79296df7ada493b2ba3724b8145c783b5b96fbafcaad197ba515f17d533b20b302162cde9b98f01dfedebf35cdb4ac42d251b4036ede7dddc27a67e805ff91bfe4e8b2cefebf92533ea93a4d69bb5e104e00260f16756b8a5caccb4001ac709e6ca26e88af8fc203be860fc52d544c66e568da84cd11c39c19fdb8ee01c068ba6a883619c819ad1f3d4fa93414e649abcfc0db87b4c39ba2cad909e50e7f70be16e5c0aca4201e4200dd2c3a44a15b7e665de9717971daf1cc348f678c42e4fa6494f4ddd803cf83582430d8517df4cf9107c9633b98bd12a8fd33189dc4e494373cca050a6bec285e0890b6d91fb82bad2a579b1544ba4c64e1fbfdf977204735e686ccf6d68ffaad43f19919d0c8ca5e7e37b076c9e15cf4d4df46fd21c904be3e0334ffbe433d81ce8b5d7c3bec3feb3f08b584b46f167f1c360d695e414c28038984fd74e666965e179c5c19d11b16a93a45ac31c5faac1fec4bed8e166e45a3f4ec676886b0b12879d4df1c9c262c63dd3d11b9d5ae30b3458012ca81406d06c47b38a540f12aeeb13eea410de49b0e9c5c943de3682e9443991769d7ccd72c98a3df614c513f956d3ea83e840601d53809c8fd6b9857d796798666d37e279458f905ed660683f1ba0ae8982ee6c84c5e20f1592a7fdca14e7b9fd49e392a673df568d7cf77d745c5ca07e9269b21c48e8e2b61195b50ed73de05ee65409725093fe1e493855aa3a3ea77839445eae5bd191b8ce7edef02f901831fbc4fbd172c132c74c228c490f5be9483f5f6db28c6a119fe0a737b23ee5981a8ea05da2c976d22f72217fe45aa14e04fa567ca4b2f4d2987e04af74894464d231b31b1039959ec9d81ebe071f3605816fef555eec795a53bb908caa3729214646401d4b7baebe5bb6fe8aee8373b24570a721798655565248723dd46ab1442d09724c68fecadd37c52d4b10ed4a3d3adf858dbe6c3caeb3a46ba7fd45576bc04237cb2d607c3c38192abbfc66a2b763a6a1eedc7d0377d0a6b31012c7ca801f70c4641ab57ffad0dd23eee876dd4014ab0341f51d726952a97d3f59e2da7d247a2580217e363e3a1b07362c86f76579992d0bc479d01286774c0e763600b929a66e1e3bd90068d4c2d0a7e9249c4730986340c755c41394fd7cb80cd6a8d48f84bbaf4e28df8f28a3e3f9a8289a3cd3fb5dd240e4797ed613b00a5098a784c0b1e652348d5989d355cc45d653fb33e744acf9bbd2778da14907752f46b4ed1de7cb8084da02b72fdca29a3bea0b48f2bb4fa65253c138aa9aae775b09756fd121b78947da3a8b442347854aac6c7446edc18f8bb033ca4f1b2cbd6b5b40bda5ea87a5352ffdaa29ee6fd0c28a1905546efbb4ec2ceafed13048e1584c752affb70a628f7a64580e9b1a990926412f8f703716c0a7ce</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合计数 </tag>
            
            <tag> 容斥 </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTS 2019 珍珠</title>
      <link href="/2019/05/22/CTS%202019%20%E7%8F%8D%E7%8F%A0/"/>
      <url>/2019/05/22/CTS%202019%20%E7%8F%8D%E7%8F%A0/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/3120" target="_blank" rel="noopener">https://loj.ac/problem/3120</a></p><h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>有 $n$ 个在 $[1,D]$ 范围内的随机变量，求使得相同变量能够配成至少 $m$ 对的方案数（$1\le D\le 10^5，1\le m\le n\le 10^9$）</p><a id="more"></a><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>根据 ECNU 游族杯 2019 的抽乌龟那题，可以轻松获得 50+ 的部分分，并联想到权值出现次数为奇数的个数 $\le n-2m$</p><p>根据出现次数考虑生成函数，由 $\sum\frac {x^k}{k!}$ 联想到一些前置技能：</p><script type="math/tex; mode=display">\begin{aligned}1+x+\frac {x^2} {2!}+\frac {x^3}{3!}+...&=e^x\\1-x+\frac {x^2} {2!}-\frac {x^3}{3!}+...&=e^{-x}\\1+\frac {x^2} {2!}+\frac {x^4} {4!}+\frac {x^6} {6!}+...&=\frac {e^x+e^{-x}} 2\\x+\frac {x^3} {3!}+\frac {x^5} {5!}+\frac {x^7} {7!}+...&=\frac {e^x-e^{-x}} 2\end{aligned}</script><p>于是出现偶数次的生成函数为 $\frac {e^x+e^{-x}} 2$，出现奇数次的生成函数为 $\frac {e^x-e^{-x}} 2$。我们所求的答案如下，其中 $[x^n]$ 表示求 $x^n$ 的系数，$y$ 表示出现奇数次的个数。显然，只有当 $x$ 刚好被选择了 $n$ 个且 $y$ 不超过 $n-2m$ 个时，需要统计如答案，接着便可以进行一系列的化简：</p><script type="math/tex; mode=display">n!\sum_{k=0}^{n-2m}(\frac {e^x+e^{-x}} 2+y\frac {e^x-e^{-x}} 2)^D[x^n][y^k]\\\begin{aligned}&=n!\frac 1 {2^D}\sum_{k=0}^{n-2m}(e^x(1+y)+e^{-x}(1-y))^D[x^n][y^k]\\\end{aligned}</script><p>使用两次二项式定理，将 D 次方展开、交换求和顺序即可直接消去 $[x^n]$</p><script type="math/tex; mode=display">\begin{aligned}&=n!\frac 1 {2^D}\sum_{k=0}^{n-2m}\sum_{i=0}^D(e^x(1+y))^i(e^{-x}(1-y))^{D-i}[x^n][y^k]\\&=n!\frac 1 {2^D}\sum_{k=0}^{n-2m}\sum_{i=0}^D\binom Die^{(2i-D)x}(1+y)^i(1-y)^{D-i}[x^n][y^k]\\&=\frac 1 {2^D}\sum_{i=0}^D\binom Di(2i-D)^n\sum_{k=0}^{n-2m}(1+y)^i(1-y)^{D-i}[y^k]\\\end{aligned}</script><p>当 $i$ 确定时，我们只需考虑 $S=\sum_{k=0}^{n-2m}(1+y)^i(1-y)^{D-i}[y^k]$ 的求法。当 $i=D$ 时暴力枚举 $k$ 即可，当 $i≠D$ 时可以将 $[y^k]$ 换个形式：</p><script type="math/tex; mode=display">S=(1+y)^i(1-y)^{D-i}(1+y+y^2+...)[y^{n-2m}]</script><p>后面的 $1+y+y^2+…=\frac 1{1-y}$ 即为补足指数的部分，这样的好处在于多出可以抵消掉的 $1-y$ 与指数统一的 $y^{n-2m}\implies S=(1+y)^i(1-y)^{D-i-1}[y^{n-2m}]$</p><p>$(1+y)^i$ 取指数 $j$，$(1-y)^{D-i-1}$ 取指数 $n-2m-j$，因此 $S=\sum_{j=0}^k\binom ij\binom{d-i}{k-j}$，其中便于书写设 $d=D=1,k=n-2m$</p><script type="math/tex; mode=display">\sum_{j=0}^k\binom ij\binom{d-i}{k-j}=\sum_{j=0}^k\frac{i!}{j!(i-j)!}\cdot\frac{(d-i)!}{(k-j)!(d-k-i+j)}</script><p>此时如果将 $j$ 和 $i-j$ 看成指数，那么已经是卷积形式了——对应指数为 $i$ 的系数，而且不需要对于每个 $i$ 单独计算，直接跑一遍 NTT 即可</p><p>最后别忘了 $i=D$ 需单独处理，以及前面剩下的系数 $\frac 1 {2^D}\binom Di(2i-D)^n$</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>终于推导完啦，现在只要把公式都敲进去就好了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">5e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,D,N,d,k;</span><br><span class="line">ll jc[maxn],iv[maxn],ivjc[maxn];</span><br><span class="line">ll a[maxn],b[maxn],fa[maxn],fb[maxn];</span><br><span class="line">ll rev[maxn],ans,tmp;</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;<span class="number">0</span>) x+=mod;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y/=<span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jc[x]*ivjc[y]%mod*ivjc[x-y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N=<span class="number">1</span>; <span class="keyword">int</span> lg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (N&lt;n) N*=<span class="number">2</span>,lg++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>,ii=i;j&lt;=lg;j++,ii/=<span class="number">2</span>)</span><br><span class="line">            rev[i]=rev[i]*<span class="number">2</span>+(ii%<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(ll *a,ll *out,<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[maxn];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) tmp[rev[i]]=a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">1</span>;<span class="built_in">step</span>&lt;N;<span class="built_in">step</span>*=<span class="number">2</span>) &#123;</span><br><span class="line">        ll wn=ksm(<span class="number">3</span>,(mod<span class="number">-1</span>)/(<span class="built_in">step</span>*<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="number">-1</span>) wn=ksm(wn,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i+=<span class="built_in">step</span>*<span class="number">2</span>) &#123;</span><br><span class="line">            ll w=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=i;k&lt;i+<span class="built_in">step</span>;k++) &#123;</span><br><span class="line">                ll u=tmp[k],v=tmp[k+<span class="built_in">step</span>]*w%mod;</span><br><span class="line">                tmp[k]=(u+v)%mod; tmp[k+<span class="built_in">step</span>]=(u-v+mod)%mod;</span><br><span class="line">                w=w*wn%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) out[i]=tmp[i];</span><br><span class="line">    <span class="keyword">if</span> (flag==<span class="number">-1</span>) &#123;</span><br><span class="line">        ll t=ksm(N,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">            out[i]=out[i]*t%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    jc[<span class="number">0</span>]=iv[<span class="number">0</span>]=ivjc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    jc[<span class="number">1</span>]=iv[<span class="number">1</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn/<span class="number">5</span>;i++) &#123;</span><br><span class="line">        jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(D); <span class="built_in">read</span>(n); <span class="built_in">read</span>(m); d=D<span class="number">-1</span>; k=<span class="built_in">min</span>(D,n<span class="number">-2</span>*m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=k;j++) &#123;</span><br><span class="line">        a[j]=ivjc[j]*ivjc[k-j]%mod;</span><br><span class="line">        <span class="keyword">if</span> ((k-j)&amp;<span class="number">1</span>) a[j]=mod-a[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=d-k;j++) b[j]=ivjc[j]*ivjc[d-k-j]%mod;</span><br><span class="line">    init(d*<span class="number">2</span>);</span><br><span class="line">    fft(a,fa,<span class="number">1</span>); fft(b,fb,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) fa[i]=fa[i]*fb[i]%mod;</span><br><span class="line">    fft(fa,a,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=d;i++) a[i]=a[i]*jc[i]%mod*jc[d-i]%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=d;i++)</span><br><span class="line">        ans=(ans+a[i]*C(D,i)%mod*ksm(<span class="number">2</span>*i-D,n)%mod)%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++) tmp=(tmp+C(D,i))%mod;</span><br><span class="line">    ans=(ans+tmp*ksm(D,n)%mod)%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans*ksm(ksm(<span class="number">2</span>,mod<span class="number">-2</span>),D)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合计数 </tag>
            
            <tag> 生成函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTS 2019 氪金手游</title>
      <link href="/2019/05/20/CTS%202019%20%E6%B0%AA%E9%87%91%E6%89%8B%E6%B8%B8/"/>
      <url>/2019/05/20/CTS%202019%20%E6%B0%AA%E9%87%91%E6%89%8B%E6%B8%B8/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/3124" target="_blank" rel="noopener">https://loj.ac/problem/3124</a></p><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>最麻烦的地方在于 $w_i$ 不能直接赋为期望值，因此需要分开保留权值为 1、2、3 的概率</p><a id="more"></a><p>我们只关心第一次出现某张卡牌的先后关系，所以可以直接将序列看成排列；我们只关心权值之和，具体内部调整只需体现在概率上</p><p>在这棵有向树上进行树形 DP，表示子树内权值和确定（最终要用在分母上）且满足一切指向关系的对应概率</p><p>转移和背包有些类似，直接暴力枚举权值之和即可，注意指向关系需要分别讨论</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,mx[<span class="number">1010</span>],head[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> tot,nxt[<span class="number">2010</span>],to[<span class="number">2010</span>];</span><br><span class="line">ll w[<span class="number">1010</span>][<span class="number">4</span>],tmp,ans;</span><br><span class="line">ll dp[<span class="number">3010</span>][<span class="number">3010</span>],DP[<span class="number">3010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    tot++; nxt[tot]=head[a];</span><br><span class="line">    head[a]=tot; to[tot]=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    mx[u]=<span class="number">3</span>;</span><br><span class="line">    dp[u][<span class="number">1</span>]=w[u][<span class="number">1</span>];</span><br><span class="line">    dp[u][<span class="number">2</span>]=w[u][<span class="number">2</span>]*<span class="number">2</span>%mod;</span><br><span class="line">    dp[u][<span class="number">3</span>]=w[u][<span class="number">3</span>]*<span class="number">3</span>%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">        v=to[i]; <span class="keyword">if</span> (v==p) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        <span class="keyword">if</span> (i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mx[u];j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=mx[v];k++)</span><br><span class="line">                DP[j+k]=(DP[j+k]+dp[u][j]*dp[v][k]%mod)%mod;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mx[u];j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=mx[v];k++)</span><br><span class="line">                DP[j]=(DP[j]+dp[u][j]*dp[v][k]%mod)%mod,</span><br><span class="line">                DP[j+k]=(DP[j+k]-dp[u][j]*dp[v][k]%mod+mod)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        mx[u]+=mx[v];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mx[u];j++) dp[u][j]=DP[j],DP[j]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mx[u];i++) dp[u][i]=dp[u][i]*ksm(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a); <span class="built_in">read</span>(b); <span class="built_in">read</span>(c);</span><br><span class="line">        tmp=ksm(a+b+c,mod<span class="number">-2</span>);</span><br><span class="line">        w[i][<span class="number">1</span>]=a*tmp%mod;</span><br><span class="line">        w[i][<span class="number">2</span>]=b*tmp%mod;</span><br><span class="line">        w[i][<span class="number">3</span>]=c*tmp%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a); <span class="built_in">read</span>(b);</span><br><span class="line">        add(a,b); add(b,a);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mx[<span class="number">1</span>];i++)</span><br><span class="line">        ans=(ans+dp[<span class="number">1</span>][i])%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 概率期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTS 2019 随机立方体</title>
      <link href="/2019/05/20/CTS%202019%20%E9%9A%8F%E6%9C%BA%E7%AB%8B%E6%96%B9%E4%BD%93/"/>
      <url>/2019/05/20/CTS%202019%20%E9%9A%8F%E6%9C%BA%E7%AB%8B%E6%96%B9%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/3119" target="_blank" rel="noopener">https://loj.ac/problem/3119</a></p><h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>在一个 $n\times m\times l$ 立方体的每个格子上，随机不重复地填上 $1$ 到 $n\times m\times l$（排列）</p><p>定义一个格子是极大的，当且仅当它比所有至少有一维坐标相同的格子，数值都要大</p><p>求恰好有 $k$ 个极大格子的概率，答案取模。</p><a id="more"></a><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>首先将恰好有 $k$ 个极大的转化成至少有 $i$ 个极大的并容斥（自行意会）</p><p>以 $k=2$ 为例，假设当前两个极大格所填数为 $a_1$ 和 $a_2$，与 $a_1$ 至少一维相同的格子记为 $S_1$，与 $a_2$ 至少一维相同的格子记为 $S_2$</p><p>不妨 $a_1&gt;a_2$，我们要使得 $a_1$ 是 $S_1\cup S_2$ 中的最大值，$a_2$ 是 $S_2$ 中的最大值，注意到两个事件独立，则概率（分别为 “ 集合大小分之一 ”）可以连乘</p><p>推广到 $a_1&gt;a_2&gt;…&gt;a_i$ 也是完全一样的道理，因此可以直接预处理出概率的前缀积 $|S_1\cup S_2\cup …\cup S_i|=n\times m\times l-(n-i)(m-i)(l-i)$</p><p>最后在统计至少有 $i$ 个极大格子的概率时，还需乘上 $\binom ik$ 表示选出真正的 $k$ 个极大格，以及从 $n$ 或 $m$ 或 $l$ 中选出 $i$ 行摆放的方案数</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5000010</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">ll n,m,l,k,ans,N,tmp;</span><br><span class="line">ll a[maxn],b[maxn];</span><br><span class="line">ll jc[maxn],iv[maxn],ivjc[maxn];</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123; x%=mod;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jc[x]*ivjc[y]%mod*ivjc[x-y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">A</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jc[x]*ivjc[x-y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    jc[<span class="number">0</span>]=iv[<span class="number">0</span>]=ivjc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    jc[<span class="number">1</span>]=iv[<span class="number">1</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++) &#123;</span><br><span class="line">        jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(n); <span class="built_in">read</span>(m); <span class="built_in">read</span>(l); <span class="built_in">read</span>(k);</span><br><span class="line">        N=<span class="built_in">min</span>(n,<span class="built_in">min</span>(m,l)); ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) a[i]=(n*m%mod*l%mod-(n-i)*(m-i)%mod*(l-i)%mod+mod)%mod;</span><br><span class="line">        b[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) b[i]=b[i<span class="number">-1</span>]*a[i]%mod;</span><br><span class="line">        b[N]=ksm(b[N],mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=N<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--) b[i]=b[i+<span class="number">1</span>]*a[i+<span class="number">1</span>]%mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=k;i&lt;=N;i++) &#123;</span><br><span class="line">            tmp=C(i,k)*b[i]%mod*A(n,i)%mod*A(m,i)%mod*A(l,i)%mod;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==k%<span class="number">2</span>) ans+=tmp; <span class="keyword">else</span> ans-=tmp;</span><br><span class="line">            <span class="keyword">if</span> (ans&gt;=mod) ans-=mod; <span class="keyword">if</span> (ans&lt;<span class="number">0</span>) ans+=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合计数 </tag>
            
            <tag> 容斥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APIO 2012 派遣</title>
      <link href="/2019/05/06/APIO%202012%20%E6%B4%BE%E9%81%A3/"/>
      <url>/2019/05/06/APIO%202012%20%E6%B4%BE%E9%81%A3/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="http://121.42.139.219/problem.php?cid=1708&amp;pid=0" target="_blank" rel="noopener">http://121.42.139.219/problem.php?cid=1708&amp;pid=0</a></p><p>链接：<a href="https://www.luogu.com.cn/problem/P1552" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P1552</a></p><h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>给定一棵有点权 $(c_i,l_i)$ 的树，对于每棵子树计算在总 $c_i$ 不超过 $m$ 的前提下，能选出的点数最大值，求它 $\times$ 根的 $l_i$ 的最大值</p><p>$1\leq n\leq 10^6，1\leq c_i\leq m\leq 10^9，1\leq l_i\leq 10^9$</p><a id="more"></a><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>从暴力的角度来说，我们可以借用 SHOI 2019 春节十二响中，合并儿子子树上堆的方法从而进行优化——并获得 40 ~ 80 不等的分数</p><p>具体来说，用大根堆维护每个子树内前若干小的点，使得其点权和不超过 $m$（且个数达到最多）“ 转移 ” 的时候挨个儿拿出来合并入自己</p><p>接下来的事情就相当于手写的启发式堆（可并堆）了，也就是在 “ 堆森林 ” 里操作——包括合并和弹根</p><p>对于堆中的每个元素记录左右儿子 ls、rs 以及对应节点的 $c_i$，对于树上每个点记录其在可并堆中的 root、堆大小 sz 以及点权和sum</p><p>弹根即合并左右儿子并重设根，下面考虑合并两个堆（设根为 $x$ 和 $y$）的实现方法，首先需要保证将小的并入大的（大根堆）</p><p>递归将 $y$ 并入 $rs[x]$，再交换 $x$ 的左右儿子，使得复杂度尽量均摊——想清楚了就并不复杂</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,rt,nxt[maxn*<span class="number">2</span>],tot,head[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn],c[maxn],l[maxn],root[maxn];</span><br><span class="line"><span class="keyword">int</span> to[maxn*<span class="number">2</span>],sz[maxn],val[maxn];</span><br><span class="line">ll sum[maxn],ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    tot++; nxt[tot]=head[x];</span><br><span class="line">    head[x]=tot; to[tot]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ls[maxn],rs[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">    <span class="keyword">if</span> (val[x]&lt;val[y]) swap(x,y);</span><br><span class="line">    rs[x]=merge(rs[x],y);</span><br><span class="line">    swap(ls[x],rs[x]);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; <span class="keyword">return</span> x=merge(ls[x],rs[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> val[x]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>; root[u]=++tot; val[tot]=sum[u]=c[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v,a;i;i=nxt[i]) &#123;</span><br><span class="line">        v=to[i]; <span class="keyword">if</span> (v==p) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        sum[u]+=sum[v]; sz[u]+=sz[v];</span><br><span class="line">        root[u]=merge(root[u],root[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (sum[u]&gt;m) &#123;</span><br><span class="line">        sum[u]-=top(root[u]); sz[u]--;</span><br><span class="line">        pop(root[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,(ll)l[u]*sz[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"dispatching.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"dispatching.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(fa[i]); <span class="built_in">read</span>(c[i]); <span class="built_in">read</span>(l[i]);</span><br><span class="line">        <span class="keyword">if</span> (fa[i]) add(i,fa[i]),add(fa[i],i); <span class="keyword">else</span> rt=i;</span><br><span class="line">    &#125; tot=<span class="number">0</span>;</span><br><span class="line">    dfs(rt,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> APIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可并堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNOI 2019 D1T3 多边形</title>
      <link href="/2019/05/01/HNOI%202019%20D1T3%20%E5%A4%9A%E8%BE%B9%E5%BD%A2/"/>
      <url>/2019/05/01/HNOI%202019%20D1T3%20%E5%A4%9A%E8%BE%B9%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/3056" target="_blank" rel="noopener">https://loj.ac/problem/3056</a></p><h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>给定一个正 $n$ 边形的三角剖分，对顶点 $1\leq a&lt;b&lt;c&lt;d\leq n$ 定义旋转操作 $(a,c)$：当 $(a,b),(b,c),(c,d),(d,a),(a,c)$ 间都存在连边，删去 $(a,c)$ 并连接 $(b,d)$ 且此时仍为三角剖分（没有形内相交）</p><a id="more"></a><p>可以证明若要对 $(a,c)$ 进行旋转，必然存在唯一的 $(b,d)$ 满足条件。如样例解释所示，操作是有限的：</p><p><img src="\graph\5.png" alt="img"></p><p>当 $W=0$ 时求最少旋转多少次，当 $W=1$ 时还需求出最少旋转次数的方案数。此外有 $m$ 次询问，每次先旋转 $(x,y)$ 后输出答案，询问之间互相独立——输出共 $m+1$ 行，包括不进行事先旋转的询问（$1\leq n,m\leq 10^5$）</p><h6 id="思路与暴力"><a href="#思路与暴力" class="headerlink" title="思路与暴力"></a>思路与暴力</h6><p>$*$ 假设正 $n$ 边形上相邻点之间的也算连边，即除三角剖分给出的边外默认有 $(i,i+1)$ 和 $(1,n)$</p><p>题图画得很棒，不难发现最后状态是所有点都连向了 $n$，每次旋转相当于把 $(a,c)$ 连边两侧三角形构成四边形的对角线进行了交换（感性理解）</p><p>于是<strong>最少旋转次数为初始时不与 $n$ 连边的点数</strong>，最优方案下每次必然转一个点连到 $n$，一旦连向 $n$ 就不动了</p><p>如何求出方案数呢？根据刚才的结论可知，$n$ 的所有连边将多边形划分成了若干个独立的区间</p><p>具体来说，考虑区间 DP 的思想，假设当前分治到 $[l,r]$ 且 $l$ 和 $r$ 均与 $n$ 有连边，同时 $(l,r)$ 也有连边！</p><p>现在有且仅有一个可旋转的点 $k$ 满足 $(l,k),(k,r)$ 有连边，进一步观察可知 <strong>$k$ 是 $l$ 的邻居中 $r$ 的前一个</strong></p><p>用 set 维护邻居就能方便地处理旋转（加边删边）和找前驱后继了，对于每次询问都先旋转后递归求解</p><p>如何合并区间呢？这个问题出现在合并 $(l,mid),(mid,r)$ 以及 $n$ 初始的邻居之间构成的区间时</p><p>区间操作序列的长度设为 $x$、$y$ 且它们相对独立，那么合并后的方案数为 $\binom {x+y} x$ 再乘上各自本身的方案数</p><h6 id="代码-1"><a href="#代码-1" class="headerlink" title="代码 1"></a>代码 1</h6><p>想清楚了就不难写，稳稳的 65 分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> W,n,m;</span><br><span class="line">ll ans,iv[maxn],ivjc[maxn],jc[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; g[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it,pre,nxt,f;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    g[x].insert(y);</span><br><span class="line">    g[y].insert(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    g[x].erase(y);</span><br><span class="line">    g[y].erase(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> ll s1,s2; &#125; A;</span><br><span class="line"><span class="function">node <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r-l&lt;=<span class="number">1</span>) <span class="keyword">return</span> (node)&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    f=g[l].lower_bound(r);</span><br><span class="line">    <span class="keyword">if</span> (f==g[l].<span class="built_in">begin</span>()) f=g[l].<span class="built_in">end</span>(); f--;</span><br><span class="line">    <span class="keyword">int</span> mid=*f;</span><br><span class="line">    add(n,mid); del(l,r);</span><br><span class="line">    node a=dfs(l,mid),b=dfs(mid,r);</span><br><span class="line">    add(l,r); del(n,mid);</span><br><span class="line">    A.s1=a.s1+b.s1+<span class="number">1</span>;</span><br><span class="line">    A.s2=a.s2*b.s2%mod*jc[a.s1+b.s1]%mod*ivjc[a.s1]%mod*ivjc[b.s1]%mod;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ans=n-g[n].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!W) &#123; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans); ans=<span class="number">1</span>; ll tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (it=g[n].<span class="built_in">begin</span>();it!=g[n].<span class="built_in">end</span>();it++) &#123;</span><br><span class="line">        it++; nxt=it; it--;</span><br><span class="line">        <span class="keyword">if</span> (nxt==g[n].<span class="built_in">end</span>()) <span class="keyword">break</span>;</span><br><span class="line">        A=dfs(*it,*nxt);</span><br><span class="line">        ans=ans*A.s2%mod;</span><br><span class="line">        tmp+=A.s1;</span><br><span class="line">        ans=ans*ivjc[A.s1]%mod;</span><br><span class="line">    &#125; ans=ans*jc[tmp]%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"polygon.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"polygon.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(W); <span class="built_in">read</span>(n); <span class="keyword">int</span> x,y,a,b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-3</span>;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y); add(x,y);</span><br><span class="line">    &#125; add(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) add(i,i+<span class="number">1</span>);</span><br><span class="line">    iv[<span class="number">0</span>]=iv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    ivjc[<span class="number">0</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    jc[<span class="number">0</span>]=jc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">        jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i) &#123;</span><br><span class="line">            <span class="built_in">read</span>(x); <span class="built_in">read</span>(y);</span><br><span class="line">            it=g[x].lower_bound(y);</span><br><span class="line">            <span class="keyword">if</span> (it==g[x].<span class="built_in">begin</span>()) pre=g[x].<span class="built_in">end</span>(),pre--;</span><br><span class="line">            <span class="keyword">else</span> it--,pre=it,it++;</span><br><span class="line">            <span class="keyword">if</span> (it==g[x].<span class="built_in">end</span>()) nxt=g[x].<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">else</span> it++,nxt=it,it--;</span><br><span class="line">            a=*pre,b=*nxt;</span><br><span class="line">            add(a,b); del(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        solve();</span><br><span class="line">        <span class="keyword">if</span> (i) add(x,y),del(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="走向正解"><a href="#走向正解" class="headerlink" title="走向正解"></a>走向正解</h6><p>分治的过程看起来很高效，问题在于每次询问都要重新遍历这棵 $(l,r)\rightarrow(l,mid),(mid,r)$ 的决策树</p><p>确定第一次操作会对初始决策树产生多大的影响呢？注意到有两种完全不同的情况：</p><ol><li>旋转后仍没有点连到 $n$，最少操作数不变</li></ol><p>假设事先进行的操作为 $(l,k)$ 并转至了 $(t,r)$，那么首先影响到的是决策树上的父亲 $(l,r)$，原本下一步要转到 $n$ 的 $k$ 变为了 $t$</p><p><img src="\graph\HNOI 2019 D1T3 多边形 1.png" alt="img"></p><p>决策树上的变化如下，结合上图非常好理解，事实证明 $(l,r),(t,k),(k,r)$ 的子树都可以沿用以前的！</p><p><img src="\graph\HNOI 2019 D1T3 多边形 3.png" alt="img"></p><p>因为方案数是由乘积得到，所以只需在原来的基础上除以这部分的组合数再乘上新的（每次合并都产生组合数）</p><p>先通过 map 在决策树上找到 $(l,k)$ 的位置，进而找到附近的其他节点——这一过程其实与二叉树上 rotate 类似，右儿子的情况与上图左儿子对称</p><ol><li>旋转后有点连到 $n$，最少操作数减一</li></ol><p>假设事先进行的操作为 $(l,r)$ 并转至了 $(k,n)$，而此时 $(l,r)$ 在决策树（森林）上为若干个根之一，可以用是否存在父亲来判这一情况</p><p><img src="\graph\HNOI 2019 D1T3 多边形 2.png" alt="img"></p><p>决策树如上图所示，操作后两棵子树被 split 成为单独的树，同样除以子树相互合并、整体合并入森林的组合数再乘上分别合并入森林的</p><h6 id="代码-2"><a href="#代码-2" class="headerlink" title="代码 2"></a>代码 2</h6><p>实现上不需要实际的旋转（加边删边），因此 vector 排序后在邻居中二分与上述 set 效果一样（常数小）</p><p>先在初始三角剖分下建出决策树，然后每次一波计算即可 ~</p><p>P.S. 两种方法的代码长度几乎一样</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">3e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> W,n,m,tot,ch[maxn][<span class="number">2</span>],S;</span><br><span class="line"><span class="keyword">int</span> sz[maxn],fa[maxn],rt[maxn];</span><br><span class="line">ll ans,res,iv[maxn],ivjc[maxn],jc[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; M;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jc[x+y]*ivjc[x]%mod*ivjc[y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ivC</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ivjc[x+y]*jc[x]%mod*jc[y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    g[x].push_back(y);</span><br><span class="line">    g[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r-l&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    root=++tot; M[make_pair(l,r)]=tot;</span><br><span class="line">    it=lower_bound(g[l].<span class="built_in">begin</span>(),g[l].<span class="built_in">end</span>(),r);</span><br><span class="line">    <span class="keyword">if</span> (it==g[l].<span class="built_in">begin</span>()) it=g[l].<span class="built_in">end</span>(); it--;</span><br><span class="line">    <span class="keyword">int</span> mid=*it;</span><br><span class="line">    dfs(l,mid,ch[root][<span class="number">0</span>]);</span><br><span class="line">    dfs(mid,r,ch[root][<span class="number">1</span>]);</span><br><span class="line">    fa[ch[root][<span class="number">0</span>]]=fa[ch[root][<span class="number">1</span>]]=root;</span><br><span class="line">    sz[root]=sz[ch[root][<span class="number">0</span>]]+sz[ch[root][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">    ans=ans*C(sz[ch[root][<span class="number">0</span>]],sz[ch[root][<span class="number">1</span>]])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"polygon.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"polygon.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(W); <span class="built_in">read</span>(n); <span class="keyword">int</span> x,y,root,f,op;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-3</span>;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y); add(x,y);</span><br><span class="line">    &#125; add(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) add(i,i+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sort(g[i].<span class="built_in">begin</span>(),g[i].<span class="built_in">end</span>());</span><br><span class="line">    iv[<span class="number">0</span>]=iv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    ivjc[<span class="number">0</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    jc[<span class="number">0</span>]=jc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">        jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    &#125; ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[n].<span class="built_in">size</span>()<span class="number">-1</span>;i++)</span><br><span class="line">        dfs(g[n][i],g[n][i+<span class="number">1</span>],rt[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[n].<span class="built_in">size</span>()<span class="number">-1</span>;i++)</span><br><span class="line">        ans=ans*C(S,sz[rt[i]])%mod,S+=sz[rt[i]];</span><br><span class="line">    <span class="keyword">if</span> (!W) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,S);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>,S,ans);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y);</span><br><span class="line">        root=M[make_pair(x,y)];</span><br><span class="line">        res=S-(fa[root]?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (!W) &#123; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>,res);</span><br><span class="line">        <span class="keyword">if</span> (fa[root]) &#123; <span class="comment">// rotate root</span></span><br><span class="line">            f=fa[root]; op=(ch[f][<span class="number">1</span>]==root);</span><br><span class="line">            res=ans*ivC(sz[ch[root][<span class="number">0</span>]],sz[ch[root][<span class="number">1</span>]])%mod;</span><br><span class="line">            res=res*ivC(sz[root],sz[ch[f][op^<span class="number">1</span>]])%mod;</span><br><span class="line">            res=res*C(sz[ch[root][op^<span class="number">1</span>]],sz[ch[f][op^<span class="number">1</span>]])%mod;</span><br><span class="line">            res=res*C(sz[ch[root][op]],sz[f]-sz[root]+sz[ch[root][op^<span class="number">1</span>]])%mod;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// split root's 2 sons</span></span><br><span class="line">            res=ans*ivC(S-sz[root],sz[root])%mod;</span><br><span class="line">            res=res*ivC(sz[ch[root][<span class="number">0</span>]],sz[ch[root][<span class="number">1</span>]])%mod;</span><br><span class="line">            res=res*C(S-sz[root],sz[ch[root][<span class="number">0</span>]])%mod;</span><br><span class="line">            res=res*C(S-sz[root]+sz[ch[root][<span class="number">0</span>]],sz[ch[root][<span class="number">1</span>]])%mod;</span><br><span class="line">        &#125; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合计数 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNOI 2019 D2T1 鱼</title>
      <link href="/2019/04/30/HNOI%202019%20D1T1%20%E9%B1%BC/"/>
      <url>/2019/04/30/HNOI%202019%20D1T1%20%E9%B1%BC/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/3054" target="_blank" rel="noopener">https://loj.ac/problem/3054</a></p><h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>在给定的 $n$ 个点中求 6 元组 $(A,B,C,D,E,F)$ 的个数：$AB=AC,BD=CD,DE=DF$</p><a id="more"></a><p>当然鱼身体和尾巴必须是凸的：$\angle BAD,\angle BDA,\angle CAD,\angle CDA&lt;90°$，$90°&lt;\angle ADE,\angle ADF\leq 180°$</p><p>6 元组内部调换顺序后视为不同，$n\leq 1000$</p><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>从暴力的角度来说，我们可以先确定 $A$ 和 $D$，然后分别计算 $(B,C)$、$(E,F)$ 的个数并相乘</p><ol><li><p>$(B,C)$</p><p> AD 过 BC 中垂线且中点在 AD 上，预处理出所有 BC 的中垂线，以 $($ 直线方程 $,$ 中点坐标 $)$ 的 pair 记录</p><p> AD 的直线方程是确定的，因此 $($ 直线方程 $,A)$ 和 $($ 直线方程 $,D)$ 之间的 BC 都使中点在 AD 上</p><p> 将 pair 排序后二分即可；由于坐标均为整数，<strong>直线方程使用 $ax+by+c=0$ 并化到最简以求一致</strong></p></li><li><p>$(E,F)$</p><p> E 和 F 在过 D 作 AD 垂线、与 A 相对的另一侧；DE = DF 可以通过 map 维护相同长度的个数解决</p><p> 考虑对于 D 将 A 犄角排序并<strong>复制成两遍</strong>，那么 EF 所处半平面相当于每次顺时针单调旋转</p><p> 假设当前线段长度的个数为 $s$，那么<strong>加入后 $(E,F)$ 个数增加 $s$，删除后 $(E,F)$ 个数减少 $s-1​</strong>$</p></li></ol><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>对于 $($ 直线方程 $,$ 中点坐标 $)$ 的处理，在实现上为避免 double 还有不少细节</p><p>BC 和 EF 分别可交换顺序，$ans$ 开 long long 并需 × 4</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PIE=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> P90=PIE*<span class="number">0.5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> P360=PIE*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=(<span class="number">1e-10</span>);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ABS</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,lst,tot,cnt; ll ans,c1,c2;</span><br><span class="line"><span class="keyword">double</span> tmp,dij,dis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ll x,y; <span class="keyword">double</span> angle;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; angle=<span class="built_in">atan2</span>(y,x); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> + (node t) &#123; <span class="keyword">return</span> (node)&#123;x+t.x,y+t.y&#125;; &#125;</span><br><span class="line">    node <span class="keyword">operator</span> - (node t) &#123; <span class="keyword">return</span> (node)&#123;x-t.x,y-t.y&#125;; &#125;</span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> * (node t) &#123; <span class="keyword">return</span> x*t.x+y*t.y; &#125;</span><br><span class="line">    node <span class="keyword">operator</span> ^ (<span class="keyword">double</span> t) &#123; <span class="keyword">return</span> (node)&#123;x*t,y*t&#125;; &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a,node b) &#123; <span class="keyword">return</span> a.x==b.x?a.y&lt;b.y:a.x&lt;b.x; &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (node a,node b) &#123; <span class="keyword">return</span> a.x==b.x&amp;&amp;a.y==b.y; &#125;</span><br><span class="line">&#125; d[maxn],A,B,N[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span> &#123;</span></span><br><span class="line">    ll a,b,c,x,y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="built_in">line</span> t1,<span class="built_in">line</span> t2) &#123;</span><br><span class="line">        <span class="keyword">return</span> t1.a==t2.a&amp;&amp;t1.b==t2.b&amp;&amp;t1.c==t2.c&amp;&amp;t1.x==t2.x&amp;&amp;t1.y==t2.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="built_in">line</span> t1,<span class="built_in">line</span> t2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t1.a!=t2.a) <span class="keyword">return</span> t1.a&lt;t2.a;</span><br><span class="line">        <span class="keyword">if</span> (t1.b!=t2.b) <span class="keyword">return</span> t1.b&lt;t2.b;</span><br><span class="line">        <span class="keyword">if</span> (t1.c!=t2.c) <span class="keyword">return</span> t1.c&lt;t2.c;</span><br><span class="line">        <span class="keyword">if</span> (t1.x!=t2.x) <span class="keyword">return</span> t1.x&lt;t2.x;</span><br><span class="line">        <span class="keyword">return</span> t1.y&lt;t2.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; M[maxn*maxn],nw;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span> </span>&#123; <span class="keyword">return</span> a.angle&lt;b.angle; &#125;</span><br><span class="line"><span class="function">ll <span class="title">len</span><span class="params">(node a)</span> </span>&#123; <span class="keyword">return</span> a.x*a.x+a.y*a.y; &#125;</span><br><span class="line"><span class="built_in">map</span>&lt;ll,<span class="keyword">int</span>&gt; T;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;=n;a++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> b=<span class="number">1</span>;b&lt;=n;b++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a==b) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c=<span class="number">1</span>;c&lt;=n;c++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a==c||b==c) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> D=<span class="number">1</span>;D&lt;=n;D++)</span><br><span class="line">            <span class="keyword">if</span> (a!=D&amp;&amp;b!=D&amp;&amp;c!=D)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> e=<span class="number">1</span>;e&lt;=n;e++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> f=<span class="number">1</span>;f&lt;=n;f++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a==e||b==e||c==e||D==e||e==f) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (a==f||b==f||c==f||D==f) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (len(d[f]-d[D])!=len(d[e]-d[D])) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (len(d[b]-d[a])!=len(d[c]-d[a])) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (len(d[b]-d[D])!=len(d[c]-d[D])) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> ((d[b]-d[a])*(d[D]-d[a])&gt;<span class="number">0</span>&amp;&amp;(d[b]-d[D])*(d[a]-d[D])&gt;<span class="number">0</span></span><br><span class="line">                    &amp;&amp;(d[a]-d[D])*(d[e]-d[D])&lt;<span class="number">0</span>&amp;&amp;(d[a]-d[D])*(d[f]-d[D])&lt;<span class="number">0</span>) ans++;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (delta==<span class="number">1</span>) c2+=T[x],T[x]++;</span><br><span class="line">    <span class="keyword">else</span> T[x]--,c2-=T[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a||!b) <span class="keyword">return</span> a+b;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(ll &amp;a,ll &amp;b,ll &amp;c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a&lt;<span class="number">0</span>||(a==<span class="number">0</span>&amp;&amp;b&lt;<span class="number">0</span>)) a=-a,b=-b,c=-c;</span><br><span class="line">    ll d=gcd(<span class="built_in">abs</span>(a),gcd(<span class="built_in">abs</span>(b),<span class="built_in">abs</span>(c)));</span><br><span class="line">    a/=d; b/=d; c/=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll a,b,c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">        A=d[j]-d[i]; B=d[i]+d[j];</span><br><span class="line">        a=<span class="number">2</span>*A.x; b=<span class="number">2</span>*A.y;</span><br><span class="line">        c=A.x*B.x+A.y*B.y;</span><br><span class="line">        solve(a,b,c);</span><br><span class="line">        M[++cnt]=(<span class="built_in">line</span>)&#123;a,b,c,B.x,B.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(M+<span class="number">1</span>,M+cnt+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        c1=c2=tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span> (j!=i) N[++tot]=d[j]-d[i],N[tot].init();</span><br><span class="line">        sort(N+<span class="number">1</span>,N+tot+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) N[tot+j]=N[j],N[tot+j].angle=N[j].angle+P360;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>; T.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) &#123;</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">double</span> L=N[j].angle+P90,R=L+PIE;</span><br><span class="line">            <span class="keyword">while</span> (r&lt;tot*<span class="number">2</span>&amp;&amp;ABS(R-N[r+<span class="number">1</span>].angle)&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                r++; update(len(N[r]),<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;=tot*<span class="number">2</span>&amp;&amp;ABS(N[l].angle-L)&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">                update(len(N[l]),<span class="number">-1</span>); l++;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; &#123;</span><br><span class="line">            A=d[i]+N[j];</span><br><span class="line">            a=N[j].y,b=-N[j].x;</span><br><span class="line">            c=a*d[i].x+b*d[i].y;</span><br><span class="line">            solve(a,b,c);</span><br><span class="line">            <span class="built_in">line</span> L=(<span class="built_in">line</span>)&#123;a,b,c,d[i].x*<span class="number">2</span>,d[i].y*<span class="number">2</span>&#125;;</span><br><span class="line">            <span class="built_in">line</span> R=(<span class="built_in">line</span>)&#123;a,b,c,A.x*<span class="number">2</span>,A.y*<span class="number">2</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span> (R&lt;L) swap(L,R);</span><br><span class="line">            <span class="keyword">if</span> (L==R) <span class="keyword">continue</span>;</span><br><span class="line">            c1=lower_bound(M+<span class="number">1</span>,M+cnt+<span class="number">1</span>,R)-upper_bound(M+<span class="number">1</span>,M+cnt+<span class="number">1</span>,L);</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=c1*c2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans*<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"fish.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"fish.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(d[i].x);</span><br><span class="line">        <span class="built_in">read</span>(d[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">10</span>) solve1();</span><br><span class="line">    <span class="keyword">else</span> solve2();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNOI 2019 D2T1 校园旅行</title>
      <link href="/2019/04/30/HNOI%202019%20D2T1%20%E6%A0%A1%E5%9B%AD%E6%97%85%E8%A1%8C/"/>
      <url>/2019/04/30/HNOI%202019%20D2T1%20%E6%A0%A1%E5%9B%AD%E6%97%85%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/3057" target="_blank" rel="noopener">https://loj.ac/problem/3057</a></p><h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>在一张点权为 01 的无向图上，$q$ 次询问从 $x$ 到 $y$ 是否存在一条点权构成回文串的路径（允许有环）$n\leq 5000，m\leq 5\cdot 10^5，q\leq 10^5$</p><a id="more"></a><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>记 $dp[i][j]$ 表示从 $i$ 到 $j$ 是否存在回文路径，那么可以由 $dp[i][i]$ 和 $dp[x][y]$ $(x,y$ 之间有连边 $)$ 出发，BFS 到所有可行的状态</p><p>转移时枚举 $i$ 和 $j$ 的每对邻居，必须满足点权相同——如此暴力即可获得 30 分的好成绩，可以先写好用于对拍</p><p>往后的难点主要在于 $m$ 太大 $\implies$ 邻居太多而无法枚举，不过单看 BFS + DP 还是可以接受的</p><p>考虑<strong>构造等价的图</strong>，也就是删去一些边后对任何询问都没有影响</p><p>当点权在 01 交替出现时，相当于是在 01 二分图上来回跳。假设只连点权不同的无向边，那么构成的连通块中满足 $a[i]=a[j]$ 的 $(i,j)$ 之间存在回文路径；$a[i]≠a[j]$ 的 $(i,j)$ 本身就不存在。因此<strong>在点权不同的 01 无向边中，对于每个连通块选择生成树上的边</strong>即可达到相同的效果，原本连通的同色点仍然可行，原本不连通的同色点依然不行，异色点显然不行。</p><p>当点权出现连续的 0 或 1 时，假设只连点权相同的无向边：如果仍然构成二分图，那么与上述情况一样；如果不构成二分图，那么必然存在奇环，也导致了可以从 $i$ 经过奇环走到 $j$ 使其路径长度改变了奇偶性（为了保持回文性质不变，我们只需使得如果原来存在长度为奇数的路径，化简后也必须存在，偶数亦然）在生成树的基础之上，我们只需要添加一个自环，即可达到与奇环一样的效果</p><p>总而言之，对于两种无向边我们分别拎出来建图，再对每个连通块取其生成树上的边，如果连通块不是二分图添加一个自环</p><p>走 01 交替相当于是前一种边，走连续的 0 或 1 是后一种边，这样就完美地等效替代了回文串！边数顺利地降至 $O(n)$，接着用暴力即可</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>方便起见，我将 DFS 黑白染色判二分图 + 找生成树构造新图的两张图，写到了同一个 struct 下，尽管可能会被卡</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">6e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,Q,tot,L,R,x,y;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5010</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">5010</span>][<span class="number">5010</span>],a[<span class="number">5010</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">5010</span>],to[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> nxt[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> x,y; &#125; A,q[<span class="number">5000</span>*<span class="number">5000</span>+<span class="number">5</span>],e[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[x][y]) <span class="keyword">return</span>;</span><br><span class="line">    q[++R]=(node)&#123;x,y&#125;; dp[x][y]=dp[y][x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    tot++; nxt[tot]=head[x];</span><br><span class="line">    to[tot]=y; head[x]=tot;</span><br><span class="line">    <span class="keyword">if</span> (a[x]==a[y]&amp;&amp;x&lt;=y) insert(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) insert(i,i); L=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (L&lt;=R) &#123;</span><br><span class="line">        A=q[L]; L++;</span><br><span class="line">        x=A.x,y=A.y;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=nxt[i])</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=head[y];j;j=nxt[j])</span><br><span class="line">            <span class="keyword">if</span> (a[to[i]]==a[to[j]])</span><br><span class="line">                insert(to[i],to[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (Q--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (!dp[x][y]) <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> Head[<span class="number">5010</span>],Tot,Nxt[maxn*<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> To[maxn*<span class="number">2</span>],vis[<span class="number">5010</span>],b[<span class="number">5010</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; Tot=<span class="number">0</span>; <span class="built_in">memset</span>(Head,<span class="number">0</span>,<span class="keyword">sizeof</span>(Head)); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        Tot++; Nxt[Tot]=Head[x];</span><br><span class="line">        Head[x]=Tot; To[Tot]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (b[u]!=<span class="number">-1</span>) flag=(b[u]==p);</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">return</span> flag;</span><br><span class="line">        b[u]=p; vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=Head[u],v;i;i=Nxt[i]) &#123;</span><br><span class="line">            v=To[i];</span><br><span class="line">            <span class="keyword">if</span> (!vis[v]) add(u,v),add(v,u);</span><br><span class="line">            <span class="keyword">if</span> (!dfs(v,p^<span class="number">1</span>)) flag=<span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(b,<span class="number">-1</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dfs(i,<span class="number">0</span>)) add(i,i);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; G;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(e[i].x),<span class="built_in">read</span>(e[i].y);</span><br><span class="line">    G.init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span> (a[e[i].x]!=a[e[i].y]) &#123;</span><br><span class="line">            G.Add(e[i].x,e[i].y);</span><br><span class="line">            G.Add(e[i].y,e[i].x);</span><br><span class="line">        &#125; G.solve();</span><br><span class="line">    G.init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span> (a[e[i].x]==a[e[i].y]) &#123;</span><br><span class="line">            G.Add(e[i].x,e[i].y);</span><br><span class="line">            G.Add(e[i].y,e[i].x);</span><br><span class="line">        &#125; G.solve();</span><br><span class="line">    solve1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"tour.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"tour.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m); <span class="built_in">read</span>(Q);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">5000</span>&amp;&amp;m&lt;=<span class="number">10000</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            <span class="built_in">read</span>(x); <span class="built_in">read</span>(y);</span><br><span class="line">            add(x,y); add(y,x);</span><br><span class="line">        &#125; solve1();</span><br><span class="line">    &#125; <span class="keyword">else</span> solve2();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 连通性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO 2019 Open Platinum T1 Tree Boxes</title>
      <link href="/2019/04/18/USACO%202019%20Open%20Platinum%20T1%20Tree%20Boxes/"/>
      <url>/2019/04/18/USACO%202019%20Open%20Platinum%20T1%20Tree%20Boxes/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=948" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=948</a></p><h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>给出一棵树，你需要先确定 $n$ 个点的坐标（范围 $[1,n]$），接着有 $q$ 次询问点对，要求返回（不超过）两个平面上的长方形，不重叠地覆盖到路径上所有点（$1\leq n,q\leq 10^5$）。</p><a id="more"></a><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>这是一道交互题，下面讨论一种个人认为不复杂的构造坐标的方案，当然一定时间的手工尝试是不可避免的</p><p>将 1 号点设为根并放在右上角 $(n,n)$，假设 2 是 1 的儿子，那么把 2 放在下面那行上</p><p>但 2 的左边需要留地方给 2 的子树，具体来说可以发现，左边需要留的距离（横坐标）是 2 的子树大小</p><p>于是 2 的坐标确定了，递归处理子树假设没有矛盾，接着来看下一个儿子 3</p><p>3 一定在 2 的子树下面，左边从 2 右边算起仍留出自己子树大小的距离</p><p>这样一来，如果设每个点在前序遍历中是第 $a_i$ 个，后序遍历中是第 $b_i$ 个，那么其坐标为 $(n-a_i+1,b_i)$</p><p>于是对于任何询问，$y$ 到 LCA 能用一个长方形覆盖，$x$ 到 LCA 下面的儿子也能用一个不重叠的长方形覆盖</p><p>当 $x$、$y$ 本身就是祖先关系时，就只需要一个长方形了——愉快地解决啦 ~</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>在构造的过程中，需要非常小心地确保，任何一条祖孙链都能用（唯一的）一个长方形来覆盖</p><p>也就是说，任何一个点的儿子都不能在自己右上方 $\implies$ 都在左下方进行类似的构造</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grader.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; ch=getchar(); <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n,tot,head[maxn],nxt[maxn*<span class="number">2</span>],to[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addRoad</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x++; y++;</span><br><span class="line">    tot++; nxt[tot]=head[x];</span><br><span class="line">    head[x]=tot; to[tot]=y;</span><br><span class="line">    swap(x,y);</span><br><span class="line">    tot++; nxt[tot]=head[x];</span><br><span class="line">    head[x]=tot; to[tot]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],c1,c2;</span><br><span class="line"><span class="keyword">int</span> fa[maxn][<span class="number">21</span>],dep[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    a[u]=++c1; dep[u]=dep[p]+<span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>]=p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">        v=to[i]; <span class="keyword">if</span> (v==p) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">    &#125; b[u]=++c2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildFarms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n=getN();</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        fa[j][i]=fa[fa[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        a[i]=n-a[i]+<span class="number">1</span>;</span><br><span class="line">        setFarmLocation(i<span class="number">-1</span>,a[i],b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyFJ</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x++; y++;</span><br><span class="line">    <span class="keyword">if</span> (dep[x]&gt;dep[y]) swap(x,y);</span><br><span class="line">    <span class="keyword">int</span> X=x,Y=y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (dep[fa[y][i]]&gt;=dep[x]) y=fa[y][i];</span><br><span class="line">    <span class="keyword">if</span> (x==y) &#123;</span><br><span class="line">        addBox(a[Y],b[Y],a[X],b[X]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (fa[x][i]!=fa[y][i])</span><br><span class="line">            x=fa[x][i],y=fa[y][i];</span><br><span class="line">    addBox(a[X],b[X],a[x],b[x]);</span><br><span class="line">    x=fa[x][<span class="number">0</span>];</span><br><span class="line">    addBox(a[Y],b[Y],a[x],b[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 交互 </tag>
            
            <tag> 构造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO 2019 Open Platinum T2 Compound Escape</title>
      <link href="/2019/04/18/USACO%202019%20Open%20Platinum%20T2%20Compound%20Escape/"/>
      <url>/2019/04/18/USACO%202019%20Open%20Platinum%20T2%20Compound%20Escape/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=949" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=949</a></p><h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>对于一张带边权的 $n\times m$ 网格图，求对偶图的最小生成树个数（将方格看成点）</p><p>$1\leq n \leq 30000，1\leq m \leq 6$</p><a id="more"></a><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>看到生成树想到连通性，看到行数不多想到插头 DP，唯一的问题是一点也不好写啊！</p><p>状态：轮廓线连通（染色）情况 + 目前处理到第 $i$ 列</p><ol><li><p>首先，我们需要预处理出每个状态可以转移至的邻居，显然每行都是一样的</p><p>一开始只考虑横向边，$2^m$ 即可枚举出所有不连横向边的位置，继而推出连通块位置（预处理第一行 dp 值类似）</p><p>用 queue 来维护枚举状态的过程，状态转移的下一步可选共 4 种，分别用 0~3 来表示：$i$ 与 $i-1$、上一行 $i$ 的连边情况</p><p>单独处理一下 $i=1$ 即可，下面再来解释一些相关函数的作用，注意最后必须 recolor（用 vector 方便很多）</p><p>insert：发现一个新状态，加入 map 和 queue</p><p>count：计算所在连通块大小，即如果上一行 $i$ 自成一块，$i$ 必须与它连边</p><p>Empty：$i$ 自成一块，直接设 $i$ 颜色为 $m$，通过 recolor 按顺序重新标颜色</p><p>connectL 和 connect2：与两格连边，合并连通块即可</p></li><li><p>用 dfs 进行滚动数组 dp，逐个扫描到底时记录答案（dfs 不是必须的）</p><p>利用预处理出的邻居进行转移，额外统计边权之和（不取模）</p><p>dp 记录最小边权和 + 方案数，需要单独处理更新</p></li></ol><p>P.S. 原来轮廓线 DP 并没有那么困难……</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>据说轮廓线状态数就是卡特兰数，总之对于 $m=6$ 是肯定可以接受的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,tot,tmp;</span><br><span class="line">ll dp[<span class="number">2</span>][<span class="number">1010</span>],ans,DP[<span class="number">2</span>][<span class="number">1010</span>],delta;</span><br><span class="line">ll heng[<span class="number">30010</span>][<span class="number">7</span>],shu[<span class="number">30010</span>][<span class="number">7</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; M;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; N[<span class="number">1010</span>][<span class="number">7</span>];</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">recolor</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa[<span class="number">7</span>],cnt=<span class="number">0</span>; <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span>(fa));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!fa[a[i]]) fa[a[i]]=++cnt;</span><br><span class="line">        a[i]=fa[a[i]];</span><br><span class="line">    &#125; <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (M[a]) <span class="keyword">return</span>;</span><br><span class="line">    M[a]=++tot; q.push(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,<span class="keyword">int</span> tmp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.<span class="built_in">size</span>();i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i]==tmp) cnt++;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Empty</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    a[pos]=m; <span class="keyword">return</span> recolor(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">connectL</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    a[pos]=a[pos<span class="number">-1</span>]; <span class="keyword">return</span> recolor(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">connect2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[pos]==a[pos<span class="number">-1</span>]) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">int</span> tmp=a[pos];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.<span class="built_in">size</span>();i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i]==tmp) a[i]=a[pos<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> recolor(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;m);i++)</span><br><span class="line">        <span class="keyword">if</span> (i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            a.<span class="built_in">clear</span>(); a.push_back(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">                <span class="keyword">if</span> (i&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>)))</span><br><span class="line">                    a.push_back(a.back()+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> a.push_back(a.back());</span><br><span class="line">            insert(a);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        a=q.front(); q.pop(); tmp=M[a];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            N[tmp][i].push_back(make_pair(tmp,<span class="number">2</span>));</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count(a,a[i])&gt;<span class="number">1</span>) &#123;</span><br><span class="line">                    b=Empty(a,i);</span><br><span class="line">                    insert(b); N[tmp][i].push_back(make_pair(M[b],<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                b=connect2(a,i);</span><br><span class="line">                insert(b); N[tmp][i].push_back(make_pair(M[b],<span class="number">3</span>));</span><br><span class="line">                <span class="keyword">if</span> (count(a,a[i])&gt;<span class="number">1</span>) &#123;</span><br><span class="line">                    b=Empty(a,i);</span><br><span class="line">                    insert(b); N[tmp][i].push_back(make_pair(M[b],<span class="number">0</span>));</span><br><span class="line">                    b=connectL(a,i);</span><br><span class="line">                    insert(b); N[tmp][i].push_back(make_pair(M[b],<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> s,ll cost,ll cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[t][s]==<span class="number">-1</span>) &#123;</span><br><span class="line">        dp[t][s]=cost; DP[t][s]=cnt;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[t][s]&gt;cost)</span><br><span class="line">            dp[t][s]=cost,DP[t][s]=cnt;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dp[t][s]==cost)</span><br><span class="line">            DP[t][s]=(DP[t][s]+cnt)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ToN</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> s,ll cost,ll cnt)</span> </span>&#123;</span><br><span class="line">    pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N[s][y].<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        tmp=N[s][y][i];</span><br><span class="line">        delta=cost;</span><br><span class="line">        <span class="keyword">if</span> (tmp.second&gt;=<span class="number">2</span>) delta+=shu[x][y];</span><br><span class="line">        <span class="keyword">if</span> (tmp.second&amp;<span class="number">1</span>) delta+=heng[x][y];</span><br><span class="line">        update(t,tmp.first,delta,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t1,<span class="keyword">int</span> t2,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x==n+<span class="number">1</span>) &#123; ans=DP[t1][<span class="number">1</span>]; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (y==m+<span class="number">1</span>) &#123; dfs(t1,t2,x+<span class="number">1</span>,<span class="number">1</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp[t2],<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp[t2]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">        <span class="keyword">if</span> (dp[t1][i]!=<span class="number">-1</span>) ToN(t2,x,y,i,dp[t1][i],DP[t1][i]);</span><br><span class="line">    dfs(t2,t1,x,y+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"escape.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"escape.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;j++) <span class="built_in">read</span>(heng[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=n;j++) <span class="built_in">read</span>(shu[j][i]);</span><br><span class="line">    init(); <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;m);i++)</span><br><span class="line">        <span class="keyword">if</span> (i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            a.<span class="built_in">clear</span>(); a.push_back(<span class="number">0</span>); delta=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">                <span class="keyword">if</span> (i&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))) a.push_back(a.back()+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> a.push_back(a.back()),delta+=heng[<span class="number">1</span>][j];</span><br><span class="line">            update(<span class="number">0</span>,M[a],delta,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 插头DP </tag>
            
            <tag> 状态压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO 2019 Open Platinum T3 Valleys</title>
      <link href="/2019/04/18/USACO%202019%20Open%20Platinum%20T3%20Valleys/"/>
      <url>/2019/04/18/USACO%202019%20Open%20Platinum%20T3%20Valleys/</url>
      
        <content type="html"><![CDATA[<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=950" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=950</a></p><h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>有一张 $n\times n$ 的网格，每个位置有个高度，你需要统计所有满足下面条件的连通块（valley）大小之和：周围有相邻边的所有格子必须都比内部所有格子高，并且如果删去连通块不会破坏网格的连通性，允许斜线连通（$1\leq n\leq 750$）。</p><a id="more"></a><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>将所有位置从低到高依次加入，容易发现 valley 必然是某时刻的一整个连通块，否则 valley 附近的会比 valley 中最高的低</p><p>于是在加入任何位置时，判断一下所在连通块是否合法即可</p><p>接下来就要处理是否构成环（holey）的问题了，我们想知道的是将平面分成多少块……</p><p>欧拉定理：V-E+F=2，其中 V 和 E 表示点数和边数，都可以通过并查集一并轻松解决</p><p>F 唯一的问题在于相邻的 2×2 实际不构成环（再大一圈就是环了）</p><p>于是统计一下自己与周围构成 2×2 的个数，即可一并放入并查集维护，最后再与四周邻居合并连通块</p><p>通过欧拉定理计算出 F 再减去 2×2，若剩下超过 1 个则表明 holey 啦</p><p>复杂度 $O(n^2\log n)$，做法相当巧妙</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>题面不好懂，代码很好写</p><p>数组不清空，爆零两行泪</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; ch=getchar(); <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">800</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn][maxn],vis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> N,fa[maxn*maxn],num[maxn][maxn],VS[maxn*maxn];</span><br><span class="line"><span class="keyword">int</span> e[maxn*maxn],v[maxn*maxn],u[<span class="number">4</span>],f[maxn*maxn];</span><br><span class="line"><span class="keyword">int</span> fx[<span class="number">5</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125; d[maxn*maxn];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.z&lt;b.z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"valleys.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"valleys.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="keyword">int</span> x,y,tmp,s1,s2,F;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i][j]); num[i][j]=++N;</span><br><span class="line">        d[N]=(node)&#123;i,j,a[i][j]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(d+<span class="number">1</span>,d+(N+<span class="number">1</span>),cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) fa[i]=i,e[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) &#123;</span><br><span class="line">        x=d[i].x; y=d[i].y; vis[x][y]=<span class="number">1</span>; s1=s2=F=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (vis[x<span class="number">-1</span>][y<span class="number">-1</span>]&amp;&amp;vis[x][y<span class="number">-1</span>]&amp;&amp;vis[x<span class="number">-1</span>][y]&amp;&amp;vis[x][y]) F++;</span><br><span class="line">        <span class="keyword">if</span> (vis[x<span class="number">-1</span>][y]&amp;&amp;vis[x<span class="number">-1</span>][y+<span class="number">1</span>]&amp;&amp;vis[x][y]&amp;&amp;vis[x][y+<span class="number">1</span>]) F++;</span><br><span class="line">        <span class="keyword">if</span> (vis[x][y<span class="number">-1</span>]&amp;&amp;vis[x][y]&amp;&amp;vis[x+<span class="number">1</span>][y<span class="number">-1</span>]&amp;&amp;vis[x+<span class="number">1</span>][y]) F++;</span><br><span class="line">        <span class="keyword">if</span> (vis[x][y]&amp;&amp;vis[x][y+<span class="number">1</span>]&amp;&amp;vis[x+<span class="number">1</span>][y]&amp;&amp;vis[x+<span class="number">1</span>][y+<span class="number">1</span>]) F++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">5</span>;k++) &#123;</span><br><span class="line">            u[k]=<span class="built_in">find</span>(num[x+fx[k][<span class="number">0</span>]][y+fx[k][<span class="number">1</span>]]);</span><br><span class="line">            <span class="keyword">if</span> (!VS[u[k]]&amp;&amp;vis[x+fx[k][<span class="number">0</span>]][y+fx[k][<span class="number">1</span>]]) &#123;</span><br><span class="line">                tmp=u[k],s1+=e[u[k]],s2+=v[u[k]],F+=f[u[k]];</span><br><span class="line">            &#125; <span class="keyword">else</span> u[k]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (vis[x+fx[k][<span class="number">0</span>]][y+fx[k][<span class="number">1</span>]]&amp;&amp;k) s2++;</span><br><span class="line">            VS[u[k]]=<span class="number">1</span>;</span><br><span class="line">        &#125; e[tmp]=s1; v[tmp]=s2; f[tmp]=F;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">5</span>;k++)</span><br><span class="line">            <span class="keyword">if</span> (u[k]) fa[u[k]]=tmp,VS[u[k]]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span>-s1+s2-F==<span class="number">1</span>) ans+=s1;</span><br><span class="line">    &#125; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 平面图欧拉定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ 3790 神奇项链</title>
      <link href="/2019/02/28/BZOJ%203790%20%E7%A5%9E%E5%A5%87%E9%A1%B9%E9%93%BE%EF%BC%88manacher%EF%BC%89/"/>
      <url>/2019/02/28/BZOJ%203790%20%E7%A5%9E%E5%A5%87%E9%A1%B9%E9%93%BE%EF%BC%88manacher%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3790" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3790</a></p><a id="more"></a><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>相当于求最少用多少可重叠回文串覆盖原串，当然回文串越长越优，因此跑 manacher 求出 $n$ 个可选回文区间</p><p>问题又变成了求最少用多少可重叠区间覆盖全部，直接扫一遍贪心解决！</p><blockquote><p>将所有区间按左端点排序，假设当前可覆盖范围为 $[1,r]$</p><p>那么后面必然要接一个左端点在 $[1,r]$ 内、右端点取最大值的区间</p><p>因此单调往后贪心即可</p></blockquote><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>根据题目要求，答案需要再减一哦</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,len[maxn],ans,r;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; d[maxn];</span><br><span class="line"><span class="keyword">char</span> t[maxn],s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>,t+<span class="number">1</span>)!=EOF) &#123;</span><br><span class="line">        m=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(len,<span class="number">0</span>,<span class="keyword">sizeof</span>(len));</span><br><span class="line">        s[<span class="number">0</span>]=<span class="string">'*'</span>; n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) s[++n]=<span class="string">'#'</span>,s[++n]=t[i];</span><br><span class="line">        s[++n]=<span class="string">'#'</span>;</span><br><span class="line">        <span class="keyword">int</span> mx=<span class="number">0</span>,pos=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mx&gt;i) len[i]=<span class="built_in">min</span>(mx-i,len[<span class="number">2</span>*pos-i]);</span><br><span class="line">            <span class="keyword">else</span> len[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (s[i-len[i]]==s[i+len[i]])</span><br><span class="line">                len[i]++;</span><br><span class="line">            <span class="keyword">if</span> (len[i]+i&gt;mx)</span><br><span class="line">                mx=len[i]+i,pos=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            d[i]=make_pair(i-len[i]+<span class="number">1</span>,i+len[i]<span class="number">-1</span>);</span><br><span class="line">        sort(d+<span class="number">1</span>,d+n+<span class="number">1</span>);</span><br><span class="line">        ans=<span class="number">0</span>; r=d[<span class="number">1</span>].second; pos=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (r&lt;n) &#123;</span><br><span class="line">            mx=r;</span><br><span class="line">            <span class="keyword">while</span> (pos&lt;=n&amp;&amp;d[pos].first&lt;=r) &#123;</span><br><span class="line">                mx=<span class="built_in">max</span>(mx,d[pos].second); pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans++; r=mx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BZOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> manacher </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ 4462 编程作业</title>
      <link href="/2019/02/20/BZOJ%204462%20%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A%EF%BC%88KMP%EF%BC%89/"/>
      <url>/2019/02/20/BZOJ%204462%20%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A%EF%BC%88KMP%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4462" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4462</a></p><a id="more"></a><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>大写字母做直接匹配，小写字母转化为到前一个相同字母的距离，如果不存在则默认前一个相同字母位置为 0</p><p>为了避免 “ 模板串中不存在前一个相同字母，母串中存在却仍在模板串范围内而判通过 ” 的情况（例如 abab 和 abcb）</p><p>需要在小写字母匹配时判断一下长度问题！</p><p>剩下的直接跑 KMP 就可以了，不需要再特判啦</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m,nxt[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">30</span>],ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eq</span><span class="params">(<span class="keyword">int</span> j,<span class="keyword">int</span> k,<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> j==k||(j&gt;len&amp;&amp;k&gt;len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    nxt[<span class="number">0</span>]=<span class="number">0</span>,nxt[<span class="number">1</span>]=<span class="number">0</span>; <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++) &#123; </span><br><span class="line">        <span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;!eq(b[i],b[j+<span class="number">1</span>],j)) j=nxt[j];</span><br><span class="line">        <span class="keyword">if</span> (eq(b[i],b[j+<span class="number">1</span>],j)) j++;</span><br><span class="line">        nxt[i]=j;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;!eq(a[i],b[j+<span class="number">1</span>],j)) j=nxt[j];</span><br><span class="line">        <span class="keyword">if</span> (eq(a[i],b[j+<span class="number">1</span>],j)) j++;</span><br><span class="line">        <span class="keyword">if</span> (j==m) ans++,j=nxt[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        n=<span class="built_in">strlen</span>(s+<span class="number">1</span>); <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">memset</span>(pos,<span class="number">0</span>,<span class="keyword">sizeof</span>(pos));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'a'</span>&lt;=s[i]&amp;&amp;s[i]&lt;=<span class="string">'z'</span>) &#123;</span><br><span class="line">                a[i]=i-pos[s[i]-<span class="string">'a'</span>+<span class="number">1</span>];</span><br><span class="line">                pos[s[i]-<span class="string">'a'</span>+<span class="number">1</span>]=i;</span><br><span class="line">            &#125; <span class="keyword">else</span> a[i]=-(s[i]-<span class="string">'A'</span>+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        m=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(pos,<span class="number">0</span>,<span class="keyword">sizeof</span>(pos));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'a'</span>&lt;=s[i]&amp;&amp;s[i]&lt;=<span class="string">'z'</span>) &#123;</span><br><span class="line">                b[i]=i-pos[s[i]-<span class="string">'a'</span>+<span class="number">1</span>];</span><br><span class="line">                pos[s[i]-<span class="string">'a'</span>+<span class="number">1</span>]=i;</span><br><span class="line">            &#125; <span class="keyword">else</span> b[i]=-(s[i]-<span class="string">'A'</span>+<span class="number">1</span>);</span><br><span class="line">        kmp();</span><br><span class="line">        ans=<span class="number">0</span>; solve(); <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BZOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BZOJ 2957 楼房重建</title>
      <link href="/2019/02/16/BZOJ%202957%20%E6%A5%BC%E6%88%BF%E9%87%8D%E5%BB%BA/"/>
      <url>/2019/02/16/BZOJ%202957%20%E6%A5%BC%E6%88%BF%E9%87%8D%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2957" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2957</a></p><h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>我们可以稍微转化一下问题，过 $(0,0)$ 和 $(i,Hi)$ 的直线斜率必须大于所有前面的斜率时，才可以看见第 $i$ 条线段。<br><a id="more"></a><br>于是相当于求有多少个数大于前面所有的数，这里用线段树维护区间的答案和斜率 max 值。</p><p>pushup 时 mx 不难，ans 更新为 ls 的 ans 加上 rs 拼接在 ls 后的答案，因为 <strong>ls 的 max 会对 rs 产生影响</strong>。</p><p>考虑递归（find）查询前面已有最大值 delta 时区间内的答案，l=r 时显然。如果 delta 比 ls 的 max 大，那么 ls 将没有可看见的，直接 find rs；如果 delta 比 ls 的 max 大，那么 find ls 找其中可看见的，而对于 rs 来说 ls 已经挡住了 delta，因此直接加上 rs 的贡献。</p><p>Q：为什么这里不用 $ans[rs]$ 而用 $ans[root]-ans[ls]$？</p><p>A：因为 $ans[rs]$ 是独立的一段区间，没有考虑前面 $ls$ 最大值的影响。$ans[root]$ 是完整的一段区间，减去前面 ls 的贡献即为 rs 受到影响后的答案。</p><p>虽然说每个节点每次都要调用 find，但是实际上 find 每次只会往 ls 和 rs 之一走，因此复杂度不会超过两个 log。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">4e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans[maxn];</span><br><span class="line"><span class="keyword">double</span> mx[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">double</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> delta&lt;mx[root];</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (mx[root*<span class="number">2</span>]&lt;delta) <span class="keyword">return</span> <span class="built_in">find</span>(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(l,mid,root*<span class="number">2</span>,delta)+ans[root]-ans[root*<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">double</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123; mx[root]=delta; ans[root]=<span class="number">1</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid) modify(x,l,mid,root*<span class="number">2</span>,delta);</span><br><span class="line">    <span class="keyword">else</span> modify(x,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">    mx[root]=<span class="built_in">max</span>(mx[root*<span class="number">2</span>],mx[root*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">    ans[root]=ans[root*<span class="number">2</span>]+<span class="built_in">find</span>(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,mx[root*<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y);</span><br><span class="line">        modify(x,<span class="number">1</span>,n,<span class="number">1</span>,y*<span class="number">1.0</span>/x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展版本：<a href="http://uoj.ac/contest/51/problem/515" target="_blank" rel="noopener">http://uoj.ac/contest/51/problem/515</a></p><p>求前缀/区间内在单调栈中的元素个数，带修改。其实也差不多，贴个代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=(<span class="number">1e9</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e6</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,a[maxn];</span><br><span class="line"><span class="keyword">int</span> mx[maxn*<span class="number">4</span>],tr[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mx[root]&gt;delta) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (delta&lt;mx[root*<span class="number">2</span>]) <span class="keyword">return</span> tr[root]+<span class="built_in">find</span>(l,mid,root*<span class="number">2</span>,delta);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">        mx[root]=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    build(l,mid,root*<span class="number">2</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    mx[root]=<span class="built_in">max</span>(mx[root*<span class="number">2</span>],mx[root*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">    tr[root]=<span class="built_in">find</span>(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,mx[root*<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">        mx[root]=a[l]; <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid) add(x,l,mid,root*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> add(x,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    mx[root]=<span class="built_in">max</span>(mx[root*<span class="number">2</span>],mx[root*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">    tr[root]=<span class="built_in">find</span>(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,mx[root*<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">int</span> &amp;delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L&gt;R) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="built_in">find</span>(l,r,root,delta);</span><br><span class="line">        delta=<span class="built_in">max</span>(delta,mx[root]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>,res;</span><br><span class="line">    <span class="keyword">if</span> (R&lt;=mid) <span class="keyword">return</span> query(L,R,l,mid,root*<span class="number">2</span>,delta);</span><br><span class="line">    <span class="keyword">if</span> (mid&lt;L) <span class="keyword">return</span> query(L,R,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">    res=query(L,R,l,mid,root*<span class="number">2</span>,delta);</span><br><span class="line">    res+=query(L,R,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]),a[i]=INF-a[i]+<span class="number">1</span>;</span><br><span class="line">    reverse(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> op,x,y;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(op); <span class="built_in">read</span>(x); x=n-x+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (op==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">read</span>(a[x]);</span><br><span class="line">            a[x]=INF-a[x]+<span class="number">1</span>;</span><br><span class="line">            add(x,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(<span class="number">1</span>,x,<span class="number">1</span>,n,<span class="number">1</span>,y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BZOJ UOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USACO 2019 Jan Platinum T1 Redistricting</title>
      <link href="/2019/02/12/USACO%202019%20Jan%20Platinum%20T1%20Redistricting/"/>
      <url>/2019/02/12/USACO%202019%20Jan%20Platinum%20T1%20Redistricting/</url>
      
        <content type="html"><![CDATA[<p>日期：2019-02-12</p><p>题目来源：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=900&amp;lang=en" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=900&amp;lang=en</a></p><p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=900&amp;lang=en" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=900&amp;lang=en</a></p><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>将 HG 序列（$1\leq n\leq 3\cdot 10^5$）划分成长度不超过 $k$ 的区间，如果至少一半是 ‘G’ 则贡献为 1，求最小贡献和。</p><a id="more"></a><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先我们转化一下问题：将 G 看成 1、H 看成 -1（类似括号序列）并求前缀和 $a$，那么当 $a_j\leq a_i$ 时 $[j+1,i]$ 贡献为 1。</p><p>不难想到 DP，设 $dp[i]$ 表示序列中前 $i$ 项划分区间的最小贡献，答案即为 $dp[n]$，初值 $dp[0]=0$。</p><p>转移比较简单，$dp[i]=min\{dp[j]+[a_j\leq a_i]\}（i-k\leq j&lt;i）$，这样暴力可以获得 50% 的分数，下面考虑优化。</p><p>分开处理 $a_j\leq a_i$ 和 $a_j&gt;a_i$，将 $a$ 放在线段树的下标中（负数进行平移处理，$max-min$ 不会超过 $n$），对于每个 $a_i$ 维护 $dp[i]$ 的最小值。</p><p>$dp[i]$ 分别从 $[1,a_i]$ 和 $[a_i+1,n]$ 中查询答案，前者贡献 $+1$，这样就完成了转移。</p><p>但此时还需要处理一下 $j$ 的范围问题，注意到转移区间的长度确定为 $k$，那么每次转移后删除 $i-k$、加入 $i$ 即可。</p><p>线段树上取 $min$ 操作，如果直接删除显然不可行。对于每个 $a_i$ 再维护一个放 $dp[i]$ 的 multiset​，加入和删除后更新线段树值时直接赋值。</p><p>至此，所有限制条件都已实现！算法时间复杂度 $O(n \log n)$ 略带常数。</p><p>P.S. $dp[i]$ 有重复要用 multiset；删除时直接 erase 即会删去所有值，使用 erase(find) 就只会删去一个了（里面是 iterator）</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">3e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=(<span class="number">1e9</span>);</span><br><span class="line"><span class="keyword">int</span> n,k,a[maxn],dp[maxn],mn,mx,N;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; t[maxn];</span><br><span class="line"><span class="keyword">int</span> tr[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123; tr[root]=delta; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid) modify(x,l,mid,root*<span class="number">2</span>,delta);</span><br><span class="line">    <span class="keyword">else</span> modify(x,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">    tr[root]=<span class="built_in">min</span>(tr[root*<span class="number">2</span>],tr[root*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    t[i].insert(delta);</span><br><span class="line">    modify(i,<span class="number">1</span>,N,<span class="number">1</span>,*(t[i].<span class="built_in">begin</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    t[i].erase(t[i].<span class="built_in">find</span>(delta));</span><br><span class="line">    <span class="keyword">if</span> (t[i].<span class="built_in">size</span>()) modify(i,<span class="number">1</span>,N,<span class="number">1</span>,*(t[i].<span class="built_in">begin</span>()));</span><br><span class="line">    <span class="keyword">else</span> modify(i,<span class="number">1</span>,N,<span class="number">1</span>,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> tr[root];</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>,res=INF;</span><br><span class="line">    <span class="keyword">if</span> (L&lt;=mid) res=<span class="built_in">min</span>(res,query(L,R,l,mid,root*<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">if</span> (mid&lt;R) res=<span class="built_in">min</span>(res,query(L,R,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"redistricting.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"redistricting.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(tr,<span class="number">0x7f7f7f7f</span>,<span class="keyword">sizeof</span>(tr));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i]==<span class="string">'H'</span>) a[i]=a[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> a[i]=a[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        mn=<span class="built_in">min</span>(mn,a[i]);</span><br><span class="line">        mx=<span class="built_in">max</span>(mx,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    mn=<span class="built_in">abs</span>(mn)+<span class="number">1</span>; N=mx+mn;</span><br><span class="line">    add(mn,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        dp[i]=query(<span class="number">1</span>,a[i]+mn,<span class="number">1</span>,N,<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">        dp[i]=<span class="built_in">min</span>(dp[i],query(a[i]+mn+<span class="number">1</span>,N,<span class="number">1</span>,N,<span class="number">1</span>));</span><br><span class="line">        add(a[i]+mn,dp[i]);</span><br><span class="line">        <span class="keyword">if</span> (i-k&gt;=<span class="number">0</span>) del(a[i-k]+mn,dp[i-k]);</span><br><span class="line">    &#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 线段树 </tag>
            
            <tag> multiset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Yahoo Programming Contest 2019 - D Ears</title>
      <link href="/2019/02/10/AtCoder%20Yahoo%20Programming%20Contest%202019%20-%20D%20Ears/"/>
      <url>/2019/02/10/AtCoder%20Yahoo%20Programming%20Contest%202019%20-%20D%20Ears/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_d" target="_blank" rel="noopener">https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_d</a></p><a id="more"></a><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>归纳一下找规律的结论：不可以存在 全奇- 全偶 - 全奇 这样的形式，也就是说</p><p><strong>可行的 $a_1…a_n$ 必然可以分成 5 段（允许段不存在）：全 0 - 全偶 - 全奇 - 全偶 - 全 0</strong></p><p>之后的事情就好办多了，设 $dp[i][j]$ 表示使 $a_1…a_i$ 合法的最小操作数，且目前 $a_i$ 在第 $j$ 段里（将这 5 段标记为 0~4）</p><p>转移时 $dp[i-1][k] \rightarrow dp[i][j] ( k \leq j)$，再加上 $a_i$ 变成第 $j$ 段所需的操作数即可</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=(<span class="number">9e18</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">2e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn];</span><br><span class="line">ll dp[maxn][<span class="number">5</span>],ans=INF;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">op</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (j==<span class="number">1</span>||j==<span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i]==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> a[i]&amp;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j==<span class="number">2</span>) <span class="keyword">return</span> a[i]&amp;<span class="number">1</span>^<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">4</span>;j++) &#123;</span><br><span class="line">        dp[i][j]=INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=j;k++)</span><br><span class="line">            dp[i][j]=<span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][k]);</span><br><span class="line">        dp[i][j]+=op(i,j);</span><br><span class="line">        <span class="keyword">if</span> (i==n) ans=<span class="built_in">min</span>(ans,dp[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AtCoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Parity </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Yahoo Programming Contest 2019 - E Odd Subrectangles</title>
      <link href="/2019/02/10/AtCoder%20Yahoo%20Programming%20Contest%202019%20-%20E%20Odd%20Subrectangles/"/>
      <url>/2019/02/10/AtCoder%20Yahoo%20Programming%20Contest%202019%20-%20E%20Odd%20Subrectangles/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_e" target="_blank" rel="noopener">https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_e</a></p><a id="more"></a><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>将每行看作一个 m 位 01 二进制数，固定行集合 A 后选 B，那么 A 中元素的异或和上的每一位，即代表了这一列中与 A 交叉位置 1 的个数（的奇偶性）。也就是说，B 相当于选出 A 异或和中的若干位，如果这些位上异或和是 1（即有奇数个 1），则 A 和 B 构成的 “ 矩阵 ” 合法。A 异或和为 0（每一位都是 0）时显然不存在这样的 B，而 <strong>A 异或和不为 0 时恰有一半的 B 合法</strong>。</p><p>为什么呢？此时 A 的异或和中必然存在 1，不妨假设是第 0 位。那么对于第 1~m-1 位的任意一种选法 C，要使第 0 位与 C 的异或和为 1，第 0 位选 / 不选就已经由 C 确定了。B = 第 0 位选 / 不选 + C，这样一来，C 有 $2^{m-1}$ 种选法，B 自然也有 $2^{m-1}$ 种选法了（正好是一半哦）。于是，问题转化为求 A 异或和不为 0 的方案数 $S$，答案即为 $2^{m-1}\cdot S$，当然反过来求异或和为 0 更容易些。</p><p>下面考虑每一行上对应二进制数的线性基（套路？）。如果只选择线性基中的行集合 A，异或和不可能是 0，否则线性基去掉 A 后依然合法且更优（与线性基定义矛盾）。于是先选择线性基外的行集合 D，那么（根据定义）线性基中有且仅有一个集合 E 异或和相同（D ^ E = 0），换句话说每个 D 都唯一对应了一个 A。因此，$S=2^n-2^{n-cnt}$ 其中 $cnt$ 表示线性基大小，大功告成！</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">310</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,cnt;</span><br><span class="line">ll mi[maxn],ans;</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; a,p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m); mi[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">max</span>(n,m);i++) mi[i]=mi[i<span class="number">-1</span>]*<span class="number">2</span>%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) <span class="built_in">read</span>(x),a.<span class="built_in">set</span>(j,x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=m<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (p[j].none()) &#123; p[j]=a; cnt++; <span class="keyword">break</span>; &#125;</span><br><span class="line">            a^=p[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=(mi[n]-mi[n-cnt]+mod)*mi[m<span class="number">-1</span>]%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AtCoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组合计数 </tag>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Yahoo Programming Contest 2019 - F Pass</title>
      <link href="/2019/02/10/AtCoder%20Yahoo%20Programming%20Contest%202019%20-%20F%20Pass/"/>
      <url>/2019/02/10/AtCoder%20Yahoo%20Programming%20Contest%202019%20-%20F%20Pass/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_f" target="_blank" rel="noopener">https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_f</a></p><a id="more"></a><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>首先将题目中的 “ 故事 ” 转化成限制条件：所得序列中第 $i$ 个球必然来自于第 $j$ $(j\leq i)$ 个人（不可能是第 $i$ 个人之后的球）</p><p>也就是说，序列的后 $n$ 个球没有特殊限制，在给定蓝色球数 $j$ 后乘上 $n\choose j$ 即可。重点在前 $n$ 个球，由于我们只关心序列中的颜色而非具体的人，那么限制的不过是前 $i$ 个球的<strong>蓝色球数</strong>不能超过前 $i$ 个人的前缀和 $s[i]$。</p><p>设 $dp[i][j]$ 表示前 $i$ 个球中蓝色球数为 $j$ 的序列个数，注意这里的 $j$ 有一定限制：$0\leq j\leq s[i]$，$2\cdot i-s[i]\geq i-j$（别忘了红色球），不满足条件时 $dp[i][j]=0$ 可以轻松防止访问。转移非常简单： $dp[i][j]=dp[i-1][j-1]+dp[i-1][j]$，最后统计答案就好啦！</p><p>P.S. 输入字符串中的 012 就是蓝色球的个数，于是前缀和处理起来很方便</p><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2010</span>;</span><br><span class="line"><span class="keyword">int</span> n,s[maxn];</span><br><span class="line">ll dp[maxn][maxn*<span class="number">2</span>],ans,C[maxn][maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> S[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,S+<span class="number">1</span>); n=<span class="built_in">strlen</span>(S+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">            C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]=s[i<span class="number">-1</span>]+S[i]-<span class="string">'0'</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=s[i];j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span>*i-s[i]&lt;i-j) <span class="keyword">continue</span>;</span><br><span class="line">        dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">        <span class="keyword">if</span> (j) dp[i][j]=(dp[i][j]+dp[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">        <span class="keyword">if</span> (i==n) ans=(ans+dp[i][j]*C[n][s[n]-j])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AtCoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 组合计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WC 2019 - I 君的商店 85pts</title>
      <link href="/2019/02/10/WC%202019%20-%20I%20%E5%90%9B%E7%9A%84%E5%95%86%E5%BA%97/"/>
      <url>/2019/02/10/WC%202019%20-%20I%20%E5%90%9B%E7%9A%84%E5%95%86%E5%BA%97/</url>
      
        <content type="html"><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/2985" target="_blank" rel="noopener">https://loj.ac/problem/2985</a></p><a id="more"></a><h5 id="子任务-3"><a href="#子任务-3" class="headerlink" title="子任务 3"></a>子任务 3</h5><p>保证 $ans$ 有序，首先通过询问 $\{0\}$ 和 $\{n-1\}$ 判断序列是 0…01…1 还是 1…10…0，不妨假设为前者。</p><p>接着二分 01 断点位置，通过奇偶性 K 确定二分的集合，每次比较 $\{mid-1,mid\}$ 和 $\{n-1\}$。由于 K 一定合法，则 $mid-1$ 与 $mid$ 必然相同，比较结果即表明 $mid$ 是 0 还是 1。如果二分不到答案，说明 $ans$ 全为 1，同理解决 1…10…0 的情况。</p><h5 id="子任务-1-2-4-5"><a href="#子任务-1-2-4-5" class="headerlink" title="子任务 1,2,4,5"></a>子任务 1,2,4,5</h5><p>用扫一遍找 max 的方法 $O(2n)$ 询问出 1 的位置 $a$（一定存在），然后通过维护 $queue$ 的方式每次找两个还未确定 $ans$ 的位置 $x$ 和 $y$，并询问 $\{a\}$ 和 $\{x,y\}$。如果 $a\leq x+y$，则 $x$ 和 $y$ 不可能全 0 $\Rightarrow$ 有 1；如果 $a\geq x+y$，则 $x$ 和 $y$ 不可能全 1 $\Rightarrow$ 有 0。再询问 $\{x\}$ 和 $\{y\}$ 就能确定其中一个了，总共花费 $O(7n)$ 即可确定所有值啦。（最后剩下的那个用 <strong>K</strong> 算一下）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"shop.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e6</span>);</span><br><span class="line"><span class="keyword">int</span> S[<span class="number">10</span>],T[<span class="number">10</span>],cnt,tot;</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_price</span><span class="params">(<span class="keyword">int</span> task_id, <span class="keyword">int</span> n, <span class="keyword">int</span> K, <span class="keyword">int</span> ans[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) &#123; ans[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (task_id==<span class="number">3</span>) &#123;</span><br><span class="line">        S[<span class="number">0</span>]=<span class="number">0</span>; T[<span class="number">0</span>]=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> l,r,mid,res=<span class="number">-1</span>; tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>;i++)</span><br><span class="line">                <span class="keyword">if</span> (((n-i<span class="number">-1</span>)&amp;<span class="number">1</span>)==K) d[++tot]=i;</span><br><span class="line">            l=<span class="number">1</span>,r=tot;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">                mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">                S[<span class="number">0</span>]=d[mid]<span class="number">-1</span>; S[<span class="number">1</span>]=d[mid]; T[<span class="number">0</span>]=n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span> (query(S,<span class="number">2</span>,T,<span class="number">1</span>)) res=d[mid],l=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res==<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((n&amp;<span class="number">1</span>)!=K) res=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=res;i++) ans[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=res+<span class="number">1</span>;i&lt;n;i++) ans[i]=<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>;i++)</span><br><span class="line">                <span class="keyword">if</span> ((i&amp;<span class="number">1</span>)==K) d[++tot]=i;</span><br><span class="line">            l=<span class="number">1</span>,r=tot;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">                mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">                S[<span class="number">0</span>]=d[mid]; S[<span class="number">1</span>]=d[mid]+<span class="number">1</span>; T[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (query(S,<span class="number">2</span>,T,<span class="number">1</span>)) res=d[mid],r=mid<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res==<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((n&amp;<span class="number">1</span>)!=K) res=n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> res=n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res;i++) ans[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=res;i&lt;n;i++) ans[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S[<span class="number">0</span>]=<span class="number">0</span>; T[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> a=query(S,<span class="number">1</span>,T,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) &#123;</span><br><span class="line">        S[<span class="number">0</span>]=a; T[<span class="number">0</span>]=i;</span><br><span class="line">        <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) a=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) ans[i]=<span class="number">-1</span>;</span><br><span class="line">    ans[a]=<span class="number">1</span>; cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span> (i!=a) q.push(i);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()&gt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front(); q.pop();</span><br><span class="line">        <span class="keyword">int</span> y=q.front(); q.pop();</span><br><span class="line">        S[<span class="number">0</span>]=a; T[<span class="number">0</span>]=x; T[<span class="number">1</span>]=y;</span><br><span class="line">        <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">2</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">            S[<span class="number">0</span>]=x; T[<span class="number">0</span>]=y;</span><br><span class="line">            <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">                ans[y]=<span class="number">0</span>; q.push(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; ans[x]=<span class="number">0</span>; q.push(y); &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            S[<span class="number">0</span>]=x; T[<span class="number">0</span>]=y;</span><br><span class="line">            <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">                ans[x]=<span class="number">1</span>; cnt++; q.push(y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; ans[y]=<span class="number">1</span>; cnt++; q.push(x); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) a=q.front(),q.pop();</span><br><span class="line">    ans[a]=(K-cnt&amp;<span class="number">1</span>+<span class="number">4</span>)%<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附 AC 代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"shop.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e6</span>);</span><br><span class="line"><span class="keyword">int</span> S[<span class="number">10</span>],T[<span class="number">10</span>],cnt,tot;</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_price</span><span class="params">(<span class="keyword">int</span> task_id, <span class="keyword">int</span> n, <span class="keyword">int</span> K, <span class="keyword">int</span> ans[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) &#123; ans[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (task_id==<span class="number">3</span>) &#123;</span><br><span class="line">        S[<span class="number">0</span>]=<span class="number">0</span>; T[<span class="number">0</span>]=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> l,r,mid,res=<span class="number">-1</span>; tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>;i++)</span><br><span class="line">                <span class="keyword">if</span> (((n-i<span class="number">-1</span>)&amp;<span class="number">1</span>)==K) d[++tot]=i;</span><br><span class="line">            l=<span class="number">1</span>,r=tot;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">                mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">                S[<span class="number">0</span>]=d[mid]<span class="number">-1</span>; S[<span class="number">1</span>]=d[mid]; T[<span class="number">0</span>]=n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span> (query(S,<span class="number">2</span>,T,<span class="number">1</span>)) res=d[mid],l=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res==<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((n&amp;<span class="number">1</span>)!=K) res=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=res;i++) ans[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=res+<span class="number">1</span>;i&lt;n;i++) ans[i]=<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>;i++)</span><br><span class="line">                <span class="keyword">if</span> ((i&amp;<span class="number">1</span>)==K) d[++tot]=i;</span><br><span class="line">            l=<span class="number">1</span>,r=tot;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">                mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">                S[<span class="number">0</span>]=d[mid]; S[<span class="number">1</span>]=d[mid]+<span class="number">1</span>; T[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (query(S,<span class="number">2</span>,T,<span class="number">1</span>)) res=d[mid],r=mid<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res==<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((n&amp;<span class="number">1</span>)!=K) res=n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> res=n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res;i++) ans[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=res;i&lt;n;i++) ans[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (task_id&lt;<span class="number">6</span>) &#123;</span><br><span class="line">        S[<span class="number">0</span>]=<span class="number">0</span>; T[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> a=query(S,<span class="number">1</span>,T,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) &#123;</span><br><span class="line">            S[<span class="number">0</span>]=a; T[<span class="number">0</span>]=i;</span><br><span class="line">            <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) a=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) ans[i]=<span class="number">-1</span>;</span><br><span class="line">        ans[a]=<span class="number">1</span>; cnt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">if</span> (i!=a) q.push(i);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front(); q.pop();</span><br><span class="line">            <span class="keyword">int</span> y=q.front(); q.pop();</span><br><span class="line">            S[<span class="number">0</span>]=a; T[<span class="number">0</span>]=x; T[<span class="number">1</span>]=y;</span><br><span class="line">            <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">2</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">                S[<span class="number">0</span>]=x; T[<span class="number">0</span>]=y;</span><br><span class="line">                <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">                    ans[y]=<span class="number">0</span>; q.push(x);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; ans[x]=<span class="number">0</span>; q.push(y); &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                S[<span class="number">0</span>]=x; T[<span class="number">0</span>]=y;</span><br><span class="line">                <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">                    ans[x]=<span class="number">1</span>; cnt++; q.push(y);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; ans[y]=<span class="number">1</span>; cnt++; q.push(x); &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) a=q.front(),q.pop();</span><br><span class="line">        ans[a]=(K-cnt&amp;<span class="number">1</span>+<span class="number">4</span>)%<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) ans[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>,x=<span class="number">2</span>,y=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=n+<span class="number">1</span>;i++) &#123;</span><br><span class="line">        S[<span class="number">0</span>]=x<span class="number">-1</span>,T[<span class="number">0</span>]=y<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) swap(x,y);</span><br><span class="line">        S[<span class="number">0</span>]=a<span class="number">-1</span>,T[<span class="number">0</span>]=x<span class="number">-1</span>,T[<span class="number">1</span>]=y<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!query(S,<span class="number">1</span>,T,<span class="number">2</span>)) ans[y]=<span class="number">0</span>,y=i;</span><br><span class="line">        <span class="keyword">else</span> d[++tot]=a,a=x,x=i;</span><br><span class="line">    &#125;</span><br><span class="line">    d[++tot]=a;</span><br><span class="line">    x=<span class="built_in">min</span>(x,y);</span><br><span class="line">    S[<span class="number">0</span>]=a<span class="number">-1</span>,T[<span class="number">0</span>]=x<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) d[++tot]=x,x=<span class="number">0</span>;</span><br><span class="line">    reverse(d+<span class="number">1</span>,d+tot+<span class="number">1</span>);</span><br><span class="line">    ans[d[<span class="number">1</span>]<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">2</span>,r=tot,mid;</span><br><span class="line">    <span class="keyword">while</span> (l&lt;r) &#123;</span><br><span class="line">        mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        S[<span class="number">0</span>]=d[mid]<span class="number">-1</span>; S[<span class="number">1</span>]=d[mid+<span class="number">1</span>]<span class="number">-1</span>; T[<span class="number">0</span>]=d[<span class="number">1</span>]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!query(T,<span class="number">1</span>,S,<span class="number">2</span>)) r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((l&amp;<span class="number">1</span>)!=K) l--;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mn,mx,delta=<span class="number">0</span>;</span><br><span class="line">        S[<span class="number">0</span>]=x<span class="number">-1</span>,T[<span class="number">0</span>]=d[l]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) mn=x,mx=d[l];</span><br><span class="line">        <span class="keyword">else</span> mn=d[l],mx=x;</span><br><span class="line">        S[<span class="number">0</span>]=d[<span class="number">1</span>]<span class="number">-1</span>,T[<span class="number">0</span>]=x<span class="number">-1</span>,T[<span class="number">1</span>]=d[l]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!query(S,<span class="number">1</span>,T,<span class="number">2</span>)) ans[mn<span class="number">-1</span>]=<span class="number">0</span>,d[l]=mx;</span><br><span class="line">        <span class="keyword">else</span> ans[mx<span class="number">-1</span>]=<span class="number">1</span>,d[l]=mn,delta=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (((l+delta)&amp;<span class="number">1</span>)!=K) l--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++) ans[d[i]<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=l+<span class="number">1</span>;i&lt;=tot;i++) ans[d[i]<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Parity </tag>
            
            <tag> 交互 </tag>
            
            <tag> 构造 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1029 每日一题（烧脑数论）</title>
      <link href="/2019/01/14/1029%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E7%83%A7%E8%84%91%E6%95%B0%E8%AE%BA%EF%BC%89/"/>
      <url>/2019/01/14/1029%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E7%83%A7%E8%84%91%E6%95%B0%E8%AE%BA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>证明：对于 $\forall n \in Z_+$，满足所有的 $n \choose m$ 中 mod 3 = 1 的个数大于 mod 3 = 2 的个数</p><a id="more"></a><p>链接：<a href="https://mp.weixin.qq.com/s/Cee6u7XlbuDekZrTIun5Nw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Cee6u7XlbuDekZrTIun5Nw</a></p><h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>由 Lucas 定理可知，将 $n$ 和 $m$ 分别写成三进制下的 $n_i$和 $m_i$，有 $\binom n m\equiv\prod \binom {n_i} {m_i}$ mod 3</p><p>观察 $\binom 0 0 \binom 0 1…\binom 2 2$，若要使 $\binom n m$ mod 3 ≠ 0，则 $m_i\leq n_i$</p><p>除了 $\binom 2 1\equiv -1$ 以外均为 1 ，因此 $\binom 2 1$ 个数的奇偶性决定了乘积是 $1$ 还是 $-1$</p><p>$n_i=0$ 时 $m_i=0$，而 $n_i=1$ 时 $m_i=0$ 或 $1$（根据乘法原理）均不影响结果</p><p>∴ 只需考虑 $n_i=2$ 的个数，不妨设为 $N$</p><p><strong>那么原问题等价于：</strong>有 $N$ 个球，每个球有 $\frac 13$ 的概率是白色的，有 $\frac 23$ 的概率是黑色的，即证一共有偶数个白球的概率大于奇数个白球的概率。也就是说，白球对应 $\binom 21$，黑球对应 $\binom 2 0$ 和 $\binom 2 2$</p><p>设 $dp[i][0]$ 表示前 $i$ 个球中有偶数个白球的概率，$dp[i][1]$ 表示前 $i$ 个球中有奇数个白球的概率，即证 $dp[i][0]&gt;dp[i][1]$</p><p>递推（转移）比较显然：设 $a=dp[i-1][0]$，$b=dp[i-1][1]$，那么 $dp[i][0]=\frac23a+\frac13b$，$dp[i][1]=\frac13a+\frac23b$</p><p>对 $i$ 数归：$i=1$ 时，$dp[i][0]=\frac23$，$dp[i][1]=\frac13$，$dp[i][0]&gt;dp[i][1]$ 成立</p><p>假设 $i-1$ 时已经满足 $a&gt;b$ 了，那么 $dp[i][0]=\frac13(2a+b)$，$dp[i][1]=\frac13(a+2b)$</p><p>$dp[i][0]-dp[i][1]=\frac13(a-b)&gt;0$，所以 $dp[i][0]&gt;dp[i][1]$</p><p><strong>至此，原问题即得证！</strong></p><p><strong>此外，我还有一些进一步的感想，如有错误希望能指出：</strong></p><p>注意到 $a+b=1$ 且 $i-1\rightarrow i$ 时 $a-b\rightarrow \frac13(a-b)$</p><p>这样一来，我们可以归纳出 $dp[i][0]$ 和 $dp[i][1]$ 的通项！</p><p>（此处省略若干字）设 $t=3^i$，那么 $dp[i][0]=\frac{(t-1)/2}{t}$，$dp[i][1]=\frac {(t+1)/2}{t}$</p><p>也就是说，当 $N$ 变大时，杨辉三角形第 $n$ 行里 mod 3 = 1 和 2 个数的比值，是在变大的</p><p>但是由于 $n_i$ 中 0 和 1 的存在，其个数在这一行里的比值是不确定的</p><p>实际上，当 $n_i$ 都是 2 即 $n=t-1$ 时，可以（找规律）发现这一行是 1 2 1 2 … 2 1 这个形式的，也验证了上述结论的正确性</p><p>感觉组合数 mod 3 还有可以继续深入的地方，但对更大的质数取模就会困难许多了</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论函数笔记</title>
      <link href="/2019/01/05/%E6%95%B0%E8%AE%BA%E5%87%BD%E6%95%B0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/01/05/%E6%95%B0%E8%AE%BA%E5%87%BD%E6%95%B0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="1d4ef741ab6a203fb7971ba07c9e0d567c96f65efc9e81d30f07f969c3476afb"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Miller Rabin 与 Pollard Rho——大整数分解质因数</title>
      <link href="/2018/08/30/Miller%20Rabin%20%E4%B8%8E%20Pollard%20Rho/"/>
      <url>/2018/08/30/Miller%20Rabin%20%E4%B8%8E%20Pollard%20Rho/</url>
      
        <content type="html"><![CDATA[<blockquote><p>分解质因数本身并不困难，直接枚举的 $O(\sqrt{n})$ 做法在大部分情况中也都适用，今天我想介绍一种更高效但 “ 玄学 ” 的做法——Pollard Rho，这时 Miller Rabin 也会派上用场呢。</p></blockquote><a id="more"></a><p>update：推荐写得比较清楚的 <a href="https://blog.csdn.net/qq_39972971/article/details/82346390" target="_blank" rel="noopener">https://blog.csdn.net/qq_39972971/article/details/82346390</a></p><h5 id="生日悖论"><a href="#生日悖论" class="headerlink" title="生日悖论"></a>生日悖论</h5><p>Miller Rabin 和 Pollard Rho 本质上都是随机算法，你有没有想过随机出任何一个质因数呢？你可能会说，当 $N=p1*p2$ 的时候，很难随机到呀！但是，随机选 23 个人，他们中有两人生日相同的概率是超过 50% 的——这里，生日悖论是个很好的例子。它的证明很好理解，假设第 1 个人已经选好了，那么第 2 个人生日与他不相同的概率为 $1-\frac 1 {365}$，第 3 个人与他们都不相同的概率为 $1-\frac 2 {365}$……以此类推。这样相乘起来，即可得出的结论是（这里就不给出严谨过程了，因为并不是重点…）：如果一年有 $N$ 天，那么只要 $n\geq\sqrt{N}$，随机选 $n$ 个人中有生日相同的概率超过 50%。</p><p>于是拓展到原来的问题，我们知道当 $n=\sqrt{N}$ 时，概率会达到 50%。直接随机 $\sqrt{N}$ 个数的代价是不可取的，但如果两两作差就有意思了，因为理论上来说只需要随机 $N^{1/4}$ 个数。此时的问题在于概率还不够大，并仍然需要枚举他们的差、再做除法，以找到一个质因数。进一步思考，取 $gcd(|a-b|,N)$ 时是非常优秀的，原因在于虽然 $p1$ 和 $p2$ 很难找，但 $p1$ 和 $p2$ 的倍数比比皆是，所以满足$1&lt;gcd&lt;N$ 时便找到一个因数啦。</p><h5 id="实现方法及细节"><a href="#实现方法及细节" class="headerlink" title="实现方法及细节"></a>实现方法及细节</h5><p>等一下，我们还是要存储 $N^{1/4}$ 个数吗？Pollard 告诉我们，只需要判断两个数哦。具体来说，我们先随机出 $x_1$，然后构造出一个很好的伪随机函数 $f(x)=(x^2+c)$ mod $N$ 来生成出下一项，也就是 $x_{n+1}=f(x_n)$。你会发现这样能通过大部分的数据，但也有可能陷入死循环，而永远找不到 $1&lt;gcd&lt;N$ 的情况（这时便找不到因数，需要换个 $c$ 再做一遍）。</p><p>$*$ 并不是所有伪随机函数都适用</p><p>用 $vis$ 记录是显然存不下的，于是 Floyd 发明了一个判环的方法。假设 $a$ 和 $b$ 同时从起点出发开始跑 $f(x)$，$b$ 比 $a$ 要快一倍，如果有环则很快会追上。按照这样的思路，从代码实现角度来说，$b$ 可以记录上一个 $2^k$ 的 $x$ 值，与 $a$ 进行比较、作差取 $gcd$，出现环时也能迅速判断到。</p><p>剩下需要做的就是维护好递归，每次先顺利找到一个因数 $p$，再分别对 $p$ 和 $N/p$ 进行类似的分解操作。当 $p$ 是质数时，就不需要继续了——这至关重要，否则很难判断。于是  Miller Rabin 就登场啦，我想细致地讲一遍实现方法。首先假设 $p-1=2^k \times t$ 且 $t$ 是奇数（把 2 都除掉），那么快速幂求得 $a^t$mod $p$ 后就可以自乘依次获得 $a^{2t}$、$a^{4t}$……$a^{2^k \times t}$ 也就是 $a^{p-1}$。在这个过程当中，如果出现前 1 项不是 ±1 而后一项是 1，或者 $a^{p-1}$ mod $p$ 不是 1，则 $p$ 不是质数。这里的 $a$ 我取的是 2~23 的质数，当然 $p$ 要先判下是不是 $a$ 的倍数。</p><p>$*$ 如果 $p$ 是质数，那么 $a^2\equiv 1$ 等价于 $a\equiv ±1$。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>总的来说，这个做法在 $N$ 的因数很多且都不大时尤其高效，但因为是随机的所以看起来比较 “ 玄学 ”，下面我想严谨证明一下期望复杂度。假设 $p1\leq p2$ 且 $y_i=x_i$ mod $p1$，根据生日悖论，$x_i$ 进入循环的期望步数是 $\sqrt{N}$ 而 $y_i$ 是 $\sqrt{p1}$。所以在 $y_i$ 进入循环后，$x_i$ 很可能还没有，此时 $x_i-x_j=(k1\cdot p1+y_i)-(k2\cdot p1+y_j)=(k_i-k_j)\cdot p1$ 因为 $y_i=y_j$。此时已经通过 $x_i-x_j$ 的 $gcd$ 已经找出了 $p1$ 这个因数，又因为 $p1\leq\sqrt{N}$，所以 $y_i$ 进入循环的期望步数是 $O(N^{1/4})$——如果复杂度不计常数的话。</p><p>其实最初 Pollard 在 1975 年发表了这个算法，之后再在 1980 年由 Richard Brent 提出了改进。关于 Pollard Rho 算法这个名字，其实非常有意思：进入一个 Floyd 循环的过程，是不是长的很像 $ρ$ 呢？</p><p>$*$ 我们不能直接将两个 $N$ 级别的 long long 相乘（带取模的），尽管结果是 long long。可以把 $a\cdot b$ 看成 $b$ 个 $a$ 相加，再用类似快速幂的方法计算，当然快速幂也需要注意这个乘法问题。对了，这样算出来的质因数是无序的哦，需要最后排序去重。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">ll d[<span class="number">100</span>];</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a&lt;<span class="number">0</span>) <span class="keyword">return</span> gcd(-a,b);</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        ll t=a%b;</span><br><span class="line">        a=b; b=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">cheng</span><span class="params">(ll a,ll b,ll mod)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (a%=mod;b;b&gt;&gt;=<span class="number">1</span>,a=(a+a)%mod)</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>) res+=a,res%=mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll a,ll b,ll mod)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (a%=mod;b;b&gt;&gt;=<span class="number">1</span>,a=cheng(a,a,mod))</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>) res=cheng(res,a,mod);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">9</span>]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MillerRabin</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll w=n<span class="number">-1</span>; <span class="keyword">int</span> lg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (w%<span class="number">2</span>==<span class="number">0</span>) w&gt;&gt;=<span class="number">1</span>,lg++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n==prime[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        ll x=ksm(prime[i],w,n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lg;j++) &#123;</span><br><span class="line">            ll y=cheng(x,x,n);</span><br><span class="line">            <span class="keyword">if</span> (x!=<span class="number">1</span>&amp;&amp;x!=n<span class="number">-1</span>&amp;&amp;y==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            x=y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x!=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">PollardRho</span><span class="params">(ll n,ll c)</span> </span>&#123;</span><br><span class="line">    ll x=rand()%(n<span class="number">-1</span>)+<span class="number">1</span>,y=x,tmp,i=<span class="number">1</span>,k=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        x=cheng(x,x,n)+c; x%=n;</span><br><span class="line">        tmp=gcd(y-x,n);</span><br><span class="line">        <span class="keyword">if</span> (tmp&gt;<span class="number">1</span>&amp;&amp;tmp&lt;n) <span class="keyword">return</span> tmp;</span><br><span class="line">        <span class="keyword">if</span> (x==y) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span> (i==k) y=x,k&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (MillerRabin(n)) &#123; d[++cnt]=n; <span class="keyword">return</span>; &#125;</span><br><span class="line">    ll tmp=n;</span><br><span class="line">    <span class="keyword">while</span> (tmp==n) tmp=PollardRho(tmp,rand()%(n<span class="number">-1</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">find</span>(tmp);</span><br><span class="line">    <span class="built_in">find</span>(n/tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
