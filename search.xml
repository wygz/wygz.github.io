<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021 秋季圆桌班部分题目解答（持续更新）</title>
    <url>/2022/01/01/2021%20%E7%A7%8B%E5%AD%A3%E5%9C%86%E6%A1%8C%E7%8F%AD%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AE%E8%A7%A3%E7%AD%94%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="091a32e00a3e6ce17faa040da5c5d5b9687eaf65febd49e99b423e87795b7f85">4fa62cfc2c930c9fef43b70d7e8ebf9e6daeb61f72c9b6b24bb93eaa31ac86dd814403806ffda2793bbde395d3ac81ad13b56a356778e22cfaccec1e09e94c2edde8576eba7725867d58e90c1774bf157e231539ba6a1350e3a6236de97cc32c78cae3f1d31f676b54fcf8e3326bf3f47ec01013a62b1dfba56c0b5648617f4ce92b644ee56b4addf7ced68726e3e7de5eb130981ad8b288f06567ce96577ffbb370f2704a695f43c52c598c6f367dec67197ecb77b0cee003c30d7a68c21bd63b5261ceadd3f166ad30e3314e9dbb711352145f3eb18a9a970a55c73d636a4caae0685b0a5ce2c4528f834907cc714868e715802785b7ef9945c1127ebcc802899a0be33ce0e0a083f54502374c7134a5b0ff9c191f48d01f4c47220815c80797f90169deafb780395c6ae647889b8e6840528ae1306c10585eea2108b9f38c3b782d067f128e8be7b8c8d29516cdf865b73bf5d13a80ac9c7ed6c4bb2808d296ec79e9a427b0d3d627cbdd048f244da77a16a0699a39aa29343d220639f158e0d75c308f2202a125e8177acb8496c622995b40731b570dfb4aa4d5ff50def874b8b6ec2cab59087f204e0a3b68fbeae9e5b8172fc8aec7a8a2068aeebeac993e91fb85f6be63ee4cb506d30bf7b5c0eb4570f3612138532d59763c4df6e37302978c7d86368a03769ce88c9c3851211dc0d9a8026a337563856b2cfde9bb707e4fded4f4d7f23a065069a1a27e7718f4fee67482c33ef1c105ee43e91c20e9656b5390dbcaa0ef0d956fcdb72196d90f7895712b8b08360bc9d471091202d3f815fbeb4deb9bfa2b619556dcadffcad104489b17f4c0f6b482c3af4d3cd14fce1b486ea9b8d5606c7f633e0eeeada3b701c9e1cabafff64270b4f5dac1e4334716fb21c09f3ba8d173cd5f562a9fc33fc216c2b346b57ec5b15772f88d29a69d4f47f20bf5a13a53c2748ae0ed6db735848d31be5969332a0ea7c5bd141672ddf0ca1fc4651ee1e9e9e4f35baf2d81f9ac8d755e3d69b9df87f57c2f35ede44068d56c8f17e19da7bea78cb604528f5a6b30543422f39a86e1deab101d01ed73a3e26b8d2a4464d676fedf0705163445b6f402308269bc4e1ee5391217f5927d4289daa78082db0c9edcf84bb75eddc46c83f7911e5761957e11a192a9e73bf809b98fa191a98b24cf507cd812165dfa2c59d1b33c84e27f492c31feaf01235dea5d1fb4e7de49764b97509205b79aa3375be93e16e1b31ccfcc36f6d11943aeb4bcf79ae44c2e942fee572fbea6dc26e5993cd55c049ac753b7cf1bc7759854fa6648e32b11bf200db41538e68a797d36194bb904cf8199e4d971a8d0a05d2d04e43337f7aec99639c3f3bbbd403cf2703fec6a56796c056b1995784df525edaa59dc587875ed0fca7a114b5f56b088695eb5a0518e62ae97d6c68ced204cc4177e1076292700ace9f7fbfef27dc5a620c4c9f719447968d7b0971865545e99d1f7f3e9c591afe7f595a3e45d1835f49c8ef6fc25cb57a2a0fca3bc7a3c180c5ef3b45c6600e970b5a3b2c1fd66f09c35256b1fc7f023caa00c2981a80bdff79833a708a31fb06b324769533d508258371a5596a50b89cbea909b22019ba96624a3b32189700a87b9902d6244863396cf673e20a8a959f4d6ae3ba1f5504fbbc04251f693caa06974799a893da1031608c683ede167a0d88054f886641b930289fd8fb699d72a2c6f390638a5c1c395668da7f27c19f03f6c505b06e99e48fef42f8e84490f578a3ff3163b2f5bc04c0658de25d97cdb1ecb7ffc676769804f28f2aa9e658901c5ceed6475837f6d4394b5ad435ca89ebc28053e07c623ba15cfe0febc8cc4cdfa07cbddca477fe96d7ed10da1a24b80cc02f7c192e132557bdf453b0224afa0699d0c375ed7c012eca9debc6f38d383d1d372167893b487c7b5e69e15d579bcbfbb69a9c429d3f85beaec868a6c215a57980af27dce87e0cfc2a111c542f367b7c5fd8b02227ea7fdd046bb950b584568842e0261a580268b0ebc176e9670f0793921915c2df05c0358c2f6add9d6041f1bc1c88a32e84e41e9dd9e5307a894903fbfba80d153a31c1b81c0066dff03839d8e78eda58fa7829fb2c24f70db20243d622ba76c14040e259eaba946c0f246a9e4c858dddd5574822ca777aa079b9d533bc4fb27ba10c01d533c929dc4ba1a9f9d0011231698a5e27413e65c66ec37b5702f2d83a1965e526e36f5bcad475834357aa2753e6c776d82fe29b5419244aaa7bb966efea8bc7f69553203a807c36eb20b0f2f43aa9ebbcd495fde5ef5ceeb8d8b77a45d7d5546b3105153dbc134d99dccfcbd5aff138a160652174db1de7787350fa9ec4aaf24fde711cde9ef4dfd451dfa0f1b059e7d7002bbd21176fdbedb3d0d05c3ef1001761376e4c46fec065655ad09116916b03ccb15f3b45da410afe869029faad415b51925a0ca902eebc2c9c667f688e7a5947fb629d7aebd00d4cb960aed374c21cebd3a99492f14b55f854696db4c09ae2085793b1684cb944299b326674ee0219636c25dd3317a901586f8926e40f06939445df837515de34ac74f838909f5a10b83cd3b58af654c57c49f744b2bf97162566de428082184dd38ef95993f0039b0b2c3e8a2d6308d3eefba4760e2fb4cd48b634562dfb53f64b3eab3c7b2fdf6d50490297e1eb01cc3e02ca58a61da55f5f177f48a5ed51c47f78d7b5da441dff4c6c4a7230f6a933f6eec2aa1ce1500c9389adc971a83592547a4f9042b2f405ecf4e0cfefecd4f7080edd0082795f01b3a4bc56861b796312b8dae1aaf9408d062dada0c64954e33c7e76c35b6053faaf5848bc801f55051082198f0df04f56eb1940cbc87a8931254d9599dadd11b542626105d9c6cd8387fd68dc1d51710b620906ec0c01018a1601be41987bd5c9fb66da4eacfed1939830304ff103f4f1f7b964f0c454599844fb4d07cf0a2ebc06629339d01f6946467fbb2b0bb</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>SA</tag>
      </tags>
  </entry>
  <entry>
    <title>USACO 2021 Dec Plat C HILO</title>
    <url>/2022/01/01/USACO%202021%20Dec%20Plat%20C%20HILO/</url>
    <content><![CDATA[<h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>Alice 手里有一个数 $x+0.5$，其中 $x$ 为 $0$ 至 $n$ 的整数。Bob 需要通过每次给出一个 $i$ 来询问，其中 $i$ 为 $1$ 至 $n$ 的整数。如果 $i&gt;x+0.5$ 则回答 HI，如果 $i&lt;x+0.5$ 则回答 LO。</p>
<p>Bob 生成了一个 $1$ 到 $n$ 的排列，并按照从左往右的顺序给出询问。如果在某次，基于之前的询问结果，可以确定出当前询问 $i$ 的返回结果，则 Bob 会跳过这一个 $i$。现在，给定 $n$ 和 $x$，请求出：对于所有的排列，回答序列中连续的 HILO 总个数。答案对 $10^9+7$ 取模。</p>
<p>范围：$1\le n\le 5000,0\le x\le n$。</p>
<a id="more"></a>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先有一个 $\mathcal O(n^5)$ 的 DP 就不说了。我们参考一下其中的 DP 状态，考虑直接枚举变出 HILO 时的局面，然后累加。</p>
<p>假设当前框定 $x$ 的范围是 $0\le l\le x&lt;r\le n+1$，已经进行了 $i$ 次操作。这 $i$ 次操作里，如果 $0&lt;l$ 则其中有一次问到了 $l$，如果 $r\le n$ 则其中有一次问到了 $r$，且没有问到过 $(l,r]$ 内的数。强制第 $i+1$ 次操作问的是 $j$ 并回答 HI，故有 $x&lt;j\le r$。假设再下一次 LO 问的是 $k$，则有 $l&lt;k\le x$。</p>
<p>我们将截止到第 $i+1$ 次操作时，剩下的数分成三类：$a$ 个在外面的（$[1,l]\cup[j,n]$ 扣除 $i+1$ 个），$b$ 个可以作为 $k$ 的（$(l,x]$），$c$ 个非法的（$(x,j)$）。我们希望接下来，第一个 $b$ 在第一个 $c$ 前面，故先不考虑 $a$，有 $b\cdot (b+c-1)!$ 种，再将 $a$ 插入，即为 $b\cdot (b+c-1)!\cdot \binom {a+b+c}{a}\cdot a!=b\cdot \frac{(a+b+c)!}{b+c}$。</p>
<script type="math/tex; mode=display">
\begin{gather}
a=l+(n+1)-j-(i+1)=l+n-j-i\\
b=x-l\\
c=j-x-1\\
a+b+c=n-i-1\\
所求=(x-l)\cdot \frac {(n-i-1)!}{j-l-1}
\end{gather}</script><p>这里 $j-l-1$ 跑遍一个区间，相当于是逆元的区间和，并且与 $i$ 无关。</p>
<p>此外，还需要算上前 $i​$ 次操作在外面选择数并排列的方案数：</p>
<script type="math/tex; mode=display">
\begin{gather}
ALL=l+(n+1)-r-[l>0]-[r\le n]\\
I=i-[l>0]-[r\le n]\\
所求=\binom {ALL}{I}\cdot i!
\end{gather}</script><p>由于 $l=0$ 或者 $r=n+1$ 的 pair 只有 $\mathcal O(n)$ 个，对于这些我们直接枚举 $i$ 即可。</p>
<p>对于其他正常的 $l,r$，注意到与 $i$ 有关的项为 $\binom {ALL}{i-2}(n-i-1)!i!$，仅与 $ALL$ 有关，因此可以事先预处理，把结果存在 $ALL$ 上即可。</p>
<p>总复杂度为 $\mathcal O(n^2)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wygzgyw</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t&lt;<span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>); <span class="built_in">write</span>(-t); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (t&gt;<span class="number">9</span>) <span class="built_in">write</span>(t/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'0'</span>+t%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">(T t)</span> </span>&#123; <span class="built_in">write</span>(t); <span class="built_in">puts</span>(<span class="string">""</span>); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ull mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5010</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ull &amp;x,ull y)</span> </span>&#123; x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod; &#125;</span><br><span class="line"><span class="keyword">int</span> n,x;</span><br><span class="line">ull jc[maxn],ivjc[maxn],iv[maxn];</span><br><span class="line">ull tmp,ans;</span><br><span class="line"><span class="function">ull <span class="title">C</span><span class="params">(ull x,ull y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;y||y&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> jc[x]*ivjc[y]%mod*ivjc[x-y]%mod;</span><br><span class="line">&#125;</span><br><span class="line">ull pre[maxn],p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(x);</span><br><span class="line">    ivjc[<span class="number">0</span>]=ivjc[<span class="number">1</span>]=jc[<span class="number">0</span>]=jc[<span class="number">1</span>]=iv[<span class="number">0</span>]=iv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        jc[i]=(ll)jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        iv[i]=(ll)(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=(ll)ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    pre[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pre[i]=(pre[i<span class="number">-1</span>]+iv[i])%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> all=<span class="number">0</span>;all&lt;=n;all++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n<span class="number">-2</span>;i++) &#123;</span><br><span class="line">            update(p[all],jc[n-(i+<span class="number">2</span>)<span class="number">-1</span>]*C(all,i)%mod*jc[i+<span class="number">2</span>]%mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l=x;l&gt;=<span class="number">0</span>;--l) <span class="keyword">for</span> (<span class="keyword">int</span> r=x+<span class="number">1</span>;r&lt;=n+<span class="number">1</span>;++r) &#123;</span><br><span class="line">        <span class="keyword">int</span> ALL=l+(n+<span class="number">1</span>)-r;</span><br><span class="line">        <span class="keyword">int</span> L=x-l,R=r-l<span class="number">-2</span>;</span><br><span class="line">        <span class="keyword">if</span> (l&gt;<span class="number">0</span>) ALL--; <span class="keyword">if</span> (r&lt;=n) ALL--; <span class="keyword">if</span> (ALL&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (l==<span class="number">0</span>||r==n+<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> I=i;</span><br><span class="line">                <span class="keyword">if</span> (l&gt;<span class="number">0</span>) I--; <span class="keyword">if</span> (r&lt;=n) I--;</span><br><span class="line">                <span class="keyword">if</span> (I&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                tmp=(pre[R]-(L&gt;<span class="number">0</span>?pre[L<span class="number">-1</span>]:<span class="number">0</span>)+mod)%mod*(x-l)%mod*jc[n-i<span class="number">-1</span>]%mod*C(ALL,I)%mod*jc[i]%mod;</span><br><span class="line">                update(ans,tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp=(pre[R]-(L&gt;<span class="number">0</span>?pre[L<span class="number">-1</span>]:<span class="number">0</span>)+mod)%mod*(x-l)%mod*p[ALL]%mod;</span><br><span class="line">            update(ans,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%llu\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  0. Enough array size? Enough array size? Enough array size? Integer overflow?</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. Think TWICE, Code ONCE!</span></span><br><span class="line"><span class="comment">  Are there any counterexamples to your algo?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  2. Be careful about the BOUNDARIES!</span></span><br><span class="line"><span class="comment">  N=1? P=1? Something about 0?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  3. Do not make STUPID MISTAKES!</span></span><br><span class="line"><span class="comment">  Time complexity? Memory usage? Precision error?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>USACO</category>
      </categories>
      <tags>
        <tag>组合计数</tag>
      </tags>
  </entry>
  <entry>
    <title>LOJ3315 抽卡</title>
    <url>/2021/11/30/LOJ3315%E6%8A%BD%E5%8D%A1/</url>
    <content><![CDATA[<h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>有 $m$ 张不同的卡，编号 $1$ 到 $n$。每次可以等概率随机抽到其中的一张，有可能抽到重复。若得到编号连续的 $k$ 张卡则停下。问期望抽多少次，对 $998244353$ 取模。</p>
<p>范围：$1\le m\le 2\times 10^5,n=2m,2\le k\le m$。保证会结束。</p>
<a id="more"></a>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>设 $P_i$ 表示抽出 $i$ 张不同的牌后仍然没有 $k$ 张连续卡的概率，则答案如下。其中 $\frac m{m-i}$ 表示从 $i$ 张不同的牌 $\rightarrow i+1$ 张本质不同的牌的期望步数。</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{m-1}P_i \frac m{m-i}</script><p>现在的问题是求 $P_i$，由于任何 $i$ 张牌组出现概率相同，我们可以计算出选择 $i$ 张牌满足无 $k$ 张连续的方案数，最后除以 $\binom mi$ 即可。</p>
<p>注意到每个连续段是独立的，因此可以将每个段的结果写成生成函数，最后卷积起来。</p>
<p>那么问题转化为：给定一个长度为 $n$ 的连续段，计算选择其中 $i(0\le i\le n)$ 个位置，使得无 $k$ 个连续的方案数。将这个结果记为 $f_i$。</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{aligned}
f_i&=[x^i](1+x+...x^{k-1})^{n-i+1}\\
&=[x^{n+1}](x+x^2+...+x^k)^{n-i+1}\\
\end{aligned}
\end{equation}</script><p>于是经过 $k+=1,n+=1,$ 序列翻转等操作，可以将现在的问题描述为：</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{aligned}
&=[x^n]\frac {1}{1-\frac {x-x^k}{1-x}t}\\
&=[x^n]\frac {1-x}{1-x-xt+x^kt}\\
&=[x^n]\frac {1-x}{1-x-xt}\cdot \frac 1{1+\frac {x^kt}{1-x-xt}}\\
&=[x^n]\sum_{i\ge 0}(1-x)(-x^kt)^i\frac {1}{(1-x-xt)^{i-1}}\\
\end{aligned}
\end{equation}</script><p>我们可以把 $(1-x)$ 暂时去掉，考虑下面的式子怎么算。最后只要把 $n$ 与 $n-1$ 的结果相减即为所求。</p>
<script type="math/tex; mode=display">
\begin{equation}
\begin{aligned}
\sum_{i\ge 0}&(-t)^i[x^{n-ik}]\frac {1}{(1-x(t+1))^{i-1}}\\
=\sum_{i\ge 0}&(-t)^i(1+t)^{n-ik}\binom {n-(k-1)i}{i}\\
\end{aligned}
\end{equation}</script><p>注意到这里 $i$ 的范围其实是 $0\le i\le n/k$（省略下取整），故整个多项式次数仍然是 $n$，不影响复杂度。</p>
<p>而从 $i+1$ 变化到 $i$ 时，需要乘以 $(1+t)^k$ 除以 $-t$。因此我们设 $F[i]=(1+t)/(-t)$，$F[n/k]=(-t)^{n/k}(1+t)^{n-(n/k)\cdot k}$，再将组合式系数弄上去，就相当于求后缀积的和了。这可以很容易地使用分治 NTT 来完成。此处唯一麻烦的地方是，$F[i]$ 为分式，我们需要记录分母 $(-t)$ 的次幂。但幸运的是，在运算过程中可以保证所有的 $t$ 次幂都是正的 <del>否则就太过于麻烦了</del>。</p>
<p>前缀积不是不能做，就是非常的慢，原因在于分母是 $(1+t)$ 的次幂，不能简单的类似于 $(-t)$ 做平移操作。当然，如果把 $1+t​$ 换元再做前缀积，最后复合回去，也应该是没问题的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wygzgyw</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t&lt;<span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>); <span class="built_in">write</span>(-t); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (t&gt;<span class="number">9</span>) <span class="built_in">write</span>(t/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'0'</span>+t%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">(T t)</span> </span>&#123; <span class="built_in">write</span>(t); <span class="built_in">puts</span>(<span class="string">""</span>); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)x.size())</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint;</span><br><span class="line"><span class="keyword">int</span> m,buc[<span class="number">400010</span>],K;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_len=<span class="number">1</span>&lt;&lt;<span class="number">20</span>,N=max_len+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp1,<span class="keyword">typename</span> _Tp2&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(_Tp1 &amp;a,_Tp2 b)</span></span>&#123;(a+=b)&gt;=mod&amp;&amp;(a-=mod);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp1,<span class="keyword">typename</span> _Tp2&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">(_Tp1 &amp;a,_Tp2 b)</span></span>&#123;(a-=b)&lt;<span class="number">0</span>&amp;&amp;(a+=mod);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;<span class="keyword">inline</span> _Tp _sub(_Tp a,<span class="keyword">const</span> _Tp &amp;b)&#123;(a+=mod-b)&gt;=mod&amp;&amp;(a-=mod);<span class="keyword">return</span> a;&#125;</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll a,ll b=mod<span class="number">-2</span>)</span></span>&#123;ll res=<span class="number">1</span>;<span class="keyword">while</span>(b)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%mod;a=a*a%mod,b&gt;&gt;=<span class="number">1</span>;&#125;<span class="keyword">return</span> res;&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; poly;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> poly &amp;a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it:a) <span class="built_in">printf</span>(<span class="string">"%d "</span>,it);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span> &lt;&lt; (poly a,uint b)&#123;<span class="keyword">return</span> a.insert(a.<span class="built_in">begin</span>(),b,<span class="number">0</span>),a;&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span> &lt;&lt;= (poly &amp;a,uint b)&#123;<span class="keyword">return</span> a.insert(a.<span class="built_in">begin</span>(),b,<span class="number">0</span>),a;&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span> &gt;&gt; (<span class="keyword">const</span> poly &amp;a,uint b)&#123;<span class="keyword">return</span> b&gt;=a.<span class="built_in">size</span>()?poly():poly&#123;a.<span class="built_in">begin</span>()+b,a.<span class="built_in">end</span>()&#125;;&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span> &gt;&gt;= (poly &amp;a,uint b)&#123;<span class="keyword">return</span> a=b&gt;=a.<span class="built_in">size</span>()?poly():poly&#123;a.<span class="built_in">begin</span>()+b,a.<span class="built_in">end</span>()&#125;;&#125;</span><br><span class="line">poly <span class="keyword">operator</span> += (poly &amp;a,<span class="keyword">const</span> poly &amp;b)&#123;</span><br><span class="line">    <span class="keyword">if</span>(b.<span class="built_in">size</span>()&gt;a.<span class="built_in">size</span>())a.resize(b.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;b.<span class="built_in">size</span>();++i)add(a[i],b[i]);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span> + (<span class="keyword">const</span> poly &amp;a,<span class="keyword">const</span> poly &amp;b)&#123;<span class="function">poly <span class="title">tmp</span><span class="params">(a)</span></span>;tmp+=b;<span class="keyword">return</span> tmp;&#125;</span><br><span class="line">poly <span class="keyword">operator</span> -= (poly &amp;a,<span class="keyword">const</span> poly &amp;b)&#123;</span><br><span class="line">    <span class="keyword">if</span>(b.<span class="built_in">size</span>()&gt;a.<span class="built_in">size</span>())a.resize(b.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;b.<span class="built_in">size</span>();++i)sub(a[i],b[i]);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span> - (<span class="keyword">const</span> poly &amp;a,<span class="keyword">const</span> poly &amp;b)&#123;<span class="function">poly <span class="title">tmp</span><span class="params">(a)</span></span>;tmp-=b;<span class="keyword">return</span> tmp;&#125;</span><br><span class="line">ull Omgs[N];</span><br><span class="line"><span class="keyword">int</span> r[N];</span><br><span class="line"><span class="keyword">const</span> ull Omg=ksm(<span class="number">3</span>,(mod<span class="number">-1</span>)/max_len);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getlen</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> limit=<span class="number">1</span>;<span class="keyword">while</span>(limit&lt;len)limit&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    assert(limit&lt;N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)r[i]=(r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|(i&amp;<span class="number">1</span>?limit&gt;&gt;<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> limit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Omgs[max_len&gt;&gt;<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=(max_len&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;i&lt;max_len;++i)Omgs[i]=Omgs[i<span class="number">-1</span>]*Omg%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=(max_len&gt;&gt;<span class="number">1</span>)<span class="number">-1</span>;i&gt;<span class="number">0</span>;--i)Omgs[i]=Omgs[i&lt;&lt;<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dft</span><span class="params">(ull *A,<span class="keyword">int</span> limit)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)<span class="keyword">if</span>(i&lt;r[i])<span class="built_in">std</span>::swap(A[i],A[r[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">1</span>;len&lt;limit;len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)A[i]%=mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;i+=len&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            ull *p=A+i,*q=A+i+len,*w=Omgs+len;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> _=<span class="number">0</span>;_&lt;len;++_,++p,++q,++w)&#123;ull tmp=*q**w%mod;*q=*p+mod-tmp,*p+=tmp;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)A[i]%=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">idft</span><span class="params">(ull *A,<span class="keyword">int</span> limit)</span></span>&#123;</span><br><span class="line">    reverse(A+<span class="number">1</span>,A+limit),dft(A,limit);</span><br><span class="line">    ull inv=mod-(mod<span class="number">-1</span>)/limit;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i) A[i]=inv*A[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line">ull _f[N],_g[N],_tp[N];</span><br><span class="line">poly <span class="keyword">operator</span> * (<span class="keyword">const</span> poly &amp;a,<span class="keyword">const</span> poly &amp;b)&#123;</span><br><span class="line">    uint len=a.<span class="built_in">size</span>()+b.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a.<span class="built_in">size</span>()&lt;=<span class="number">64u</span>||b.<span class="built_in">size</span>()&lt;=<span class="number">64u</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(_tp,<span class="number">0</span>,len&lt;&lt;<span class="number">3</span>);uint r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(uint j=<span class="number">0</span>;j&lt;b.<span class="built_in">size</span>();++j)_tp[i+j]+=<span class="number">1U</span>LL*a[i]*b[j];</span><br><span class="line">            <span class="keyword">if</span>(++r==<span class="number">18</span>)&#123;r=<span class="number">0</span>;<span class="keyword">for</span>(uint j=i<span class="number">-17</span>;j&lt;i+b.<span class="built_in">size</span>();++j)_tp[j]%=mod;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r)<span class="keyword">for</span>(uint j=<span class="number">0</span>;j&lt;len;++j)_tp[j]%=mod;</span><br><span class="line">        <span class="function">poly <span class="title">c</span><span class="params">(len)</span></span>;<span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;len;++i)c[i]=_tp[i];</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> limit=getlen(len);</span><br><span class="line">    <span class="built_in">memset</span>(_f,<span class="number">0</span>,limit&lt;&lt;<span class="number">3</span>);<span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();++i)_f[i]=a[i];</span><br><span class="line">    <span class="built_in">memset</span>(_g,<span class="number">0</span>,limit&lt;&lt;<span class="number">3</span>);<span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;b.<span class="built_in">size</span>();++i)_g[i]=b[i];</span><br><span class="line">    dft(_f,limit),dft(_g,limit);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)_f[i]=<span class="number">1U</span>LL*_f[i]*_g[i]%mod;</span><br><span class="line">    idft(_f,limit);</span><br><span class="line">    <span class="function">poly <span class="title">ans</span><span class="params">(len)</span></span>;<span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;len;++i)ans[i]=_f[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span> *= (poly &amp;a,<span class="keyword">const</span> poly &amp;b)&#123;<span class="keyword">return</span> a=a*b;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;<span class="keyword">inline</span> poly <span class="keyword">operator</span> *= (poly &amp;a,<span class="keyword">const</span> _Tp &amp;b)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;&amp;it:a)it=<span class="number">1U</span>LL*it*b%mod;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;<span class="keyword">inline</span> poly <span class="keyword">operator</span> * (poly a,<span class="keyword">const</span> _Tp &amp;b)&#123;<span class="keyword">return</span> a*=b;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;<span class="keyword">inline</span> poly <span class="keyword">operator</span> * (<span class="keyword">const</span> _Tp &amp;b,poly a)&#123;<span class="keyword">return</span> a*=b;&#125;</span><br><span class="line"><span class="function">poly <span class="title">mul</span><span class="params">(<span class="keyword">const</span> poly &amp;a,<span class="keyword">const</span> poly &amp;b,uint len,<span class="keyword">bool</span> need=<span class="literal">true</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.<span class="built_in">size</span>()&lt;=<span class="number">64u</span>||b.<span class="built_in">size</span>()&lt;=<span class="number">64u</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(_tp,<span class="number">0</span>,len&lt;&lt;<span class="number">3</span>);uint r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(uint j=<span class="number">0</span>;j&lt;b.<span class="built_in">size</span>()&amp;&amp;i+j&lt;len;++j)_tp[i+j]+=<span class="number">1U</span>LL*a[i]*b[j];</span><br><span class="line">            <span class="keyword">if</span>(++r==<span class="number">18</span>)&#123;r=<span class="number">0</span>;<span class="keyword">for</span>(uint j=i<span class="number">-17</span>;j&lt;len&amp;&amp;j&lt;i+b.<span class="built_in">size</span>();++j)_tp[j]%=mod;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r)<span class="keyword">for</span>(uint j=<span class="number">0</span>;j&lt;len;++j)_tp[j]%=mod;</span><br><span class="line">        <span class="function">poly <span class="title">c</span><span class="params">(len)</span></span>;<span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;len;++i)c[i]=_tp[i];</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> limit=getlen(len);</span><br><span class="line">    <span class="built_in">memset</span>(_f,<span class="number">0</span>,limit&lt;&lt;<span class="number">3</span>);<span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();++i)_f[i]=a[i];</span><br><span class="line">    dft(_f,limit);</span><br><span class="line">    <span class="keyword">if</span>(need)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(_g,<span class="number">0</span>,limit&lt;&lt;<span class="number">3</span>);<span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;b.<span class="built_in">size</span>();++i)_g[i]=b[i];</span><br><span class="line">        dft(_g,limit);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;limit;++i)_f[i]=<span class="number">1U</span>LL*_f[i]*_g[i]%mod;</span><br><span class="line">    idft(_f,limit);</span><br><span class="line">    <span class="function">poly <span class="title">ans</span><span class="params">(len)</span></span>;<span class="keyword">for</span>(uint i=<span class="number">0</span>;i&lt;len;++i)ans[i]=_f[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">poly <span class="title">Inv</span><span class="params">(<span class="keyword">const</span> poly &amp;F)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(F.<span class="built_in">size</span>()==<span class="number">1u</span>)<span class="keyword">return</span> &#123;(<span class="keyword">int</span>)ksm(F[<span class="number">0</span>])&#125;;</span><br><span class="line">    uint len=F.<span class="built_in">size</span>(),l=(len+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    poly H(Inv(&#123;F.begin(),F.begin()+l&#125;)),tmp(mul(F,H,len)),ans(H);</span><br><span class="line">    <span class="built_in">memset</span>(tmp.data(),<span class="number">0</span>,l&lt;&lt;<span class="number">2</span>),tmp=mul(tmp,H,len,<span class="literal">false</span>),ans.resize(len);</span><br><span class="line">    <span class="keyword">for</span>(uint i=l;i&lt;len;++i)tmp[i]&amp;&amp;(ans[i]=mod-tmp[i]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line">poly ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;poly&gt; T;</span><br><span class="line"><span class="keyword">int</span> fac[N],inv[N],ifac[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;fac[<span class="number">0</span>]=fac[<span class="number">1</span>]=inv[<span class="number">0</span>]=inv[<span class="number">1</span>]=ifac[<span class="number">0</span>]=ifac[<span class="number">1</span>]=<span class="number">1</span>;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i)fac[i]=(ll)fac[i<span class="number">-1</span>]*i%mod,inv[i]=(ll)inv[mod%i]*(mod-mod/i)%mod,ifac[i]=(ll)ifac[i<span class="number">-1</span>]*inv[i]%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;<span class="keyword">return</span> n&lt;m||m&lt;<span class="number">0</span>?<span class="number">0</span>:(ll)fac[n]*ifac[m]%mod*ifac[n-m]%mod;&#125;</span><br><span class="line">poly mi[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">frac</span> &#123;</span></span><br><span class="line">    poly A; <span class="keyword">int</span> B;</span><br><span class="line">    <span class="function">poly <span class="title">solve</span><span class="params">()</span> </span>&#123; A&gt;&gt;=B; <span class="keyword">if</span> (B&amp;<span class="number">1</span>) A*=mod<span class="number">-1</span>; <span class="keyword">return</span> A; &#125;</span><br><span class="line">    <span class="keyword">friend</span> frac <span class="keyword">operator</span> * (frac t1,frac t2) &#123; t1.A*=t2.A,t1.B+=t2.B; <span class="keyword">return</span> t1; &#125;</span><br><span class="line">    <span class="keyword">friend</span> frac <span class="keyword">operator</span> + (frac t1,frac t2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t1.B&gt;t2.B) swap(t1,t2);</span><br><span class="line">        <span class="keyword">int</span> x=t1.B,y=t2.B;</span><br><span class="line">        t1.A&lt;&lt;=y-x; <span class="keyword">if</span> ((y-x)&amp;<span class="number">1</span>) t1.A*=mod<span class="number">-1</span>;</span><br><span class="line">        t1.A+=t2.A;</span><br><span class="line">        t1.B=y; <span class="keyword">return</span> t1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; F[N];</span><br><span class="line">frac <span class="keyword">operator</span> *= (frac &amp;t1,frac &amp;t2) &#123; t1=t1*t2; <span class="keyword">return</span> t1; &#125;</span><br><span class="line">frac <span class="keyword">operator</span> *= (frac &amp;t1,<span class="keyword">int</span> x) &#123; t1.A*=x; <span class="keyword">return</span> t1; &#125;</span><br><span class="line"><span class="keyword">int</span> coef[N];</span><br><span class="line"><span class="function">poly <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="function">poly <span class="title">res</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) res[i]=C(n,i); <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,frac &amp;sum,frac &amp;ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123; sum=ans=F[l]; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    frac Left,Right,S1;</span><br><span class="line">    dfs(mid+<span class="number">1</span>,r,Right,ans);</span><br><span class="line">    dfs(l,mid,Left,S1);</span><br><span class="line">    sum=Left*Right;</span><br><span class="line">    ans=ans+Right*S1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">poly <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    poly R=init(K),tmp(n/K+<span class="number">1</span>); tmp[n/K]=((n/K)&amp;<span class="number">1</span>)?mod<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">    F[n/K]=&#123;tmp*init(n-(n/K)*K),<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n/K;i++) &#123;</span><br><span class="line">        F[i].A=R;</span><br><span class="line">        F[i].B=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n/K;i++) coef[i]=C(n-(K<span class="number">-1</span>)*i,i); coef[n/K+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n/K;i++) F[i]*=((ll)coef[i]*ksm(coef[i+<span class="number">1</span>])%mod);</span><br><span class="line">    <span class="function">poly <span class="title">res</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    frac rub=&#123;&#123;<span class="number">1</span>&#125;,<span class="number">0</span>&#125;,tot=&#123;&#123;<span class="number">0</span>&#125;,<span class="number">0</span>&#125;;</span><br><span class="line">    dfs(<span class="number">0</span>,n/K,rub,tot);</span><br><span class="line">    res=tot.solve();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">poly <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    poly res=Solve(n+<span class="number">1</span>)-Solve(n);</span><br><span class="line">    <span class="keyword">while</span> (res.<span class="built_in">size</span>()&gt;n+<span class="number">2</span>) res.pop_back();</span><br><span class="line">    reverse(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (res.back()==<span class="number">0</span>&amp;&amp;(<span class="keyword">int</span>)res.<span class="built_in">size</span>()) res.pop_back();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">setup</span>(); init();</span><br><span class="line">    <span class="built_in">read</span>(m),<span class="built_in">read</span>(K); K++; <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(x),buc[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m*<span class="number">2</span>+<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!buc[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (L!=<span class="number">-1</span>) T.push_back(solve(i-L)); L=<span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (L==<span class="number">-1</span>) L=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i+<span class="number">1</span>&lt;T.<span class="built_in">size</span>();i+=<span class="number">2</span>) &#123;</span><br><span class="line">        T.push_back(T[i]*T[i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=T.back();</span><br><span class="line">    res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m&amp;&amp;i&lt;(<span class="keyword">int</span>)ans.<span class="built_in">size</span>();i++) add(res,(ll)ans[i]*m%mod*inv[m-i]%mod*ksm(C(m,i))%mod);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  0. Enough array size? Enough array size? Enough array size? Integer overflow?</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. Think TWICE, Code ONCE!</span></span><br><span class="line"><span class="comment">  Are there any counterexamples to your algo?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  2. Be careful about the BOUNDARIES!</span></span><br><span class="line"><span class="comment">  N=1? P=1? Something about 0?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  3. Do not make STUPID MISTAKES!</span></span><br><span class="line"><span class="comment">  Time complexity? Memory usage? Precision error?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>概率期望</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>这是一道集训队互测题</title>
    <url>/2021/10/11/%E8%BF%99%E6%98%AF%E4%B8%80%E9%81%93%E9%9B%86%E8%AE%AD%E9%98%9F%E8%83%A1%E6%B5%8B%E9%A2%98/</url>
    <content><![CDATA[<h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给出一个 $n\times n$ 的 $01$ 矩阵 $c$，求有多少长度为 $n$ 的 $01$ 序列 $a,b$，满足 $c_{i,j}=a_i$ 或 $c_{i,j}=b_j$，对 $998244353$ 取模。</p>
<a id="more"></a>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先有个暴力，枚举 $a$，然后看 $b$ 的限制，如果没冲突，那么就是数 $b$ 没限制的位置个数，然后 $2$ 的幂。</p>
<p>考虑行 $i$ 和行 $j$ 什么时候可以分别填 $1$ 和 $0$，必须是行 $i$ 和行 $j$ 呈包含关系，即如果不是包含关系，必须 $a$ 相等。这一步可以并查集，直接做就是 $\mathcal O(n^3/w)$ 的，<del>亲测能过</del>。如果要优化，考虑增量，即每次加入一行，那么根据下面提到的 and、or 的单调包含关系，可以二分：找到最长的前缀使得是该行的子集，找到最长的后缀使得是该行的超集。复杂度 $\mathcal O(n^2\log /w)$，<del>但我懒得写了</del>。</p>
<p>并查集完了以后，考虑每个集合的 and 和 or，你发现可以排个序，使得前面 or 是后面 and 的子集。具体排序方法：按照 $($ or 大小，and 大小 $)$ 双关键字排序（我试了其他的都不太行）。当然采用增量法不需要再排序了。</p>
<p>然后，必然是一个前缀的 $a$ 填 $0$，剩下的后缀填 $1$，同一个集合打包填一样的。你枚举分界点在哪里，按照暴力的方法算一下 $b$ 多少位置是没限制的就行。依据性质，这里可以直接取前缀所有对应 $1$ 位置，并上后缀所有 $0$ 位置（这些位置是有限制的，并且这两部分没交，所以用 $n$ 减去 popcount 即可）。</p>
<p>这样有一个问题，就是有一些集合大小仅为 $1$ 的，并且还重复出现。举个例子（假装可以不是方阵）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(11000,01100)</span><br><span class="line">11100</span><br><span class="line">11100</span><br><span class="line">(11110,11101)</span><br></pre></td></tr></table></figure>
<p>就是这两个 <code>11100</code> 对应的 $a$ 可以既有 $0$ 又有 $1$，不需要严格按照刚才的前后缀来算。讨论一下：如果他们同时是 $0$ 或者 $1$，那按刚才的直接算就好（把集合大小是 $1$ 且完全相同的捆绑看）。如果既有 $0$ 又有 $1$，那是可行的，并且 $b$ 的取值唯一确定了。假设 <code>11100</code> 的个数是 $c$，那么贡献就是 $2^c-2$。</p>
<p>复杂度瓶颈还是在最初构建连边的地方（我个人认为强行 2-SAT 跑可达性复杂度也是 $\mathcal O(n^3/w)$，但常数大很多吧）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wygzgyw</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t&lt;<span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">'-'</span>); <span class="built_in">write</span>(-t); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (t&gt;<span class="number">9</span>) <span class="built_in">write</span>(t/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'0'</span>+t%<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeln</span><span class="params">(T t)</span> </span>&#123; <span class="built_in">write</span>(t); <span class="built_in">puts</span>(<span class="string">""</span>); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5010</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">5010</span>][<span class="number">5010</span>],mi[<span class="number">5010</span>],ans,BB[<span class="number">5010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123; x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;(<span class="number">1</span>&lt;&lt;n);t++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) BB[i]=<span class="number">-1</span>; <span class="keyword">int</span> flag=<span class="number">1</span>,cnt=n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n&amp;&amp;flag;i++) <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n&amp;&amp;flag;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[i][j]!=(t&gt;&gt;(i<span class="number">-1</span>)&amp;<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp=(t&gt;&gt;(i<span class="number">-1</span>)&amp;<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (BB[j]==<span class="number">-1</span>) BB[j]=tmp,cnt--;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (BB[j]!=tmp) flag=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            update(ans,mi[cnt]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> *X[<span class="number">310</span>*<span class="number">1010</span>],top;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rem</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; X[++top]=&amp;x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">roll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top;i++) *X[i]=<span class="number">-1</span>; top=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; hang,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lie,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;e1,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;e2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">int</span>)e1.<span class="built_in">size</span>()==<span class="number">0</span>) &#123; update(ans,mi[(<span class="keyword">int</span>)e2.<span class="built_in">size</span>()]); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">int</span>)e2.<span class="built_in">size</span>()==<span class="number">0</span>) &#123; update(ans,mi[(<span class="keyword">int</span>)e1.<span class="built_in">size</span>()]); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (rand()&amp;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=e1[rand()%(<span class="keyword">int</span>)e1.<span class="built_in">size</span>()],flag;</span><br><span class="line">        <span class="keyword">for</span> (hang[x]=<span class="number">0</span>;hang[x]&lt;=<span class="number">1</span>;hang[x]++) &#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            q=<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            q.push(x);</span><br><span class="line">            <span class="keyword">while</span> (flag&amp;&amp;!q.empty()) &#123;</span><br><span class="line">                <span class="keyword">int</span> u=q.front(); q.pop();</span><br><span class="line">                <span class="keyword">if</span> (u&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> v : e2) <span class="keyword">if</span> (c[u][v]!=hang[u]) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lie[v]!=<span class="number">-1</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (lie[v]!=c[u][v]) &#123; flag=<span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            rem(lie[v]);</span><br><span class="line">                            lie[v]=c[u][v];</span><br><span class="line">                            q.push(-v);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> v : e1) <span class="keyword">if</span> (c[v][-u]!=lie[-u]) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (hang[v]!=<span class="number">-1</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hang[v]!=c[v][-u]) &#123; flag=<span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            rem(hang[v]);</span><br><span class="line">                            hang[v]=c[v][-u];</span><br><span class="line">                            q.push(v);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A,B;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i : e1) <span class="keyword">if</span> (hang[i]==<span class="number">-1</span>) A.push_back(i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i : e2) <span class="keyword">if</span> (lie[i]==<span class="number">-1</span>) B.push_back(i);</span><br><span class="line">                dfs(hang,lie,A,B);</span><br><span class="line">            &#125;</span><br><span class="line">            roll();	</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> x=e2[rand()%(<span class="keyword">int</span>)e2.<span class="built_in">size</span>()],flag;</span><br><span class="line">        <span class="keyword">for</span> (lie[x]=<span class="number">0</span>;lie[x]&lt;=<span class="number">1</span>;lie[x]++) &#123;</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            q=<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            q.push(-x);</span><br><span class="line">            <span class="keyword">while</span> (flag&amp;&amp;!q.empty()) &#123;</span><br><span class="line">                <span class="keyword">int</span> u=q.front(); q.pop();</span><br><span class="line">                <span class="keyword">if</span> (u&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> v : e2) <span class="keyword">if</span> (c[u][v]!=hang[u]) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lie[v]!=<span class="number">-1</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (lie[v]!=c[u][v]) &#123; flag=<span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            rem(lie[v]);</span><br><span class="line">                            lie[v]=c[u][v];</span><br><span class="line">                            q.push(-v);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> v : e1) <span class="keyword">if</span> (c[v][-u]!=lie[-u]) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (hang[v]!=<span class="number">-1</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hang[v]!=c[v][-u]) &#123; flag=<span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            rem(hang[v]);</span><br><span class="line">                            hang[v]=c[v][-u];</span><br><span class="line">                            q.push(v);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A,B;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i : e1) <span class="keyword">if</span> (hang[i]==<span class="number">-1</span>) A.push_back(i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i : e2) <span class="keyword">if</span> (lie[i]==<span class="number">-1</span>) B.push_back(i);</span><br><span class="line">                dfs(hang,lie,A,B);</span><br><span class="line">            &#125;</span><br><span class="line">            roll();	</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;int&gt; A(n+1,-1),B(n+1,-1),e1,e2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e1.push_back(i),e2.push_back(i);</span><br><span class="line">    dfs(A,B,e1,e2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fa[maxn],sz[maxn];</span><br><span class="line"><span class="built_in">bitset</span>&lt;5010&gt; A[<span class="number">5010</span>],B[<span class="number">5010</span>],Bing[<span class="number">5010</span>],Jiao[<span class="number">5010</span>],Bing_B[<span class="number">5010</span>];</span><br><span class="line"><span class="built_in">bitset</span>&lt;5010&gt; Pre[<span class="number">5010</span>],Suf[<span class="number">5010</span>],C;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x),y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x==y) <span class="keyword">return</span>;</span><br><span class="line">    fa[x]=y; sz[y]+=sz[x];</span><br><span class="line">    Bing[y]|=Bing[x];</span><br><span class="line">    Jiao[y]&amp;=Jiao[x];</span><br><span class="line">    Bing_B[y]|=Bing_B[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> id[maxn],tot,sz_Bing[maxn],sz_Jiao[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> MP(sz_Bing[x],sz_Jiao[x])&lt;MP(sz_Bing[y],sz_Jiao[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Not</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sz[x]==<span class="number">1</span>&amp;&amp;sz[y]==<span class="number">1</span>&amp;&amp;Bing[x]==Bing[y]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> link[maxn];</span><br><span class="line"><span class="keyword">int</span> F[maxn],SZ[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (F[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> F[x]=Find(F[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x=Find(x),y=Find(y);</span><br><span class="line">    <span class="keyword">if</span> (x==y) <span class="keyword">return</span>;</span><br><span class="line">    F[x]=y; SZ[y]+=SZ[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">bitset</span>&lt;<span class="number">5010</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">printf</span>(<span class="string">"%d"</span>,(<span class="keyword">int</span>)A.test(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ss[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) fa[i]=i,Jiao[i]=Bing[i]=A[i],sz[i]=<span class="number">1</span>,Bing_B[i]=B[i],ss[i]=(<span class="keyword">int</span>)A[i].count();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++) <span class="keyword">if</span> (<span class="built_in">find</span>(i)!=<span class="built_in">find</span>(j)) &#123;</span><br><span class="line">        C=A[i]&amp;A[j];</span><br><span class="line">        <span class="keyword">if</span> (ss[i]&lt;=ss[j]&amp;&amp;C==A[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ss[i]&gt;=ss[j]&amp;&amp;C==A[j]);</span><br><span class="line">        <span class="keyword">else</span> merge(i,j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span> (<span class="built_in">find</span>(i)==i) id[++tot]=i,sz_Bing[i]=Bing[i].count(),sz_Jiao[i]=Jiao[i].count();</span><br><span class="line">    sort(id+<span class="number">1</span>,id+tot+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) Pre[i]=Pre[i<span class="number">-1</span>]|Bing[id[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=tot;i&gt;=<span class="number">1</span>;i--) Suf[i]=Suf[i+<span class="number">1</span>]|Bing_B[id[i]];</span><br><span class="line">    ans=(mi[n-Pre[tot].count()]+mi[n-Suf[<span class="number">1</span>].count()])%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) F[i]=i,SZ[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tot;i++)</span><br><span class="line">        <span class="keyword">if</span> (Not(id[i],id[i+<span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=Pre[i].count()+Suf[i+<span class="number">1</span>].count();</span><br><span class="line">            tmp=n-tmp;</span><br><span class="line">            assert(tmp&gt;=<span class="number">0</span>);</span><br><span class="line">            update(ans,mi[tmp]);</span><br><span class="line">        &#125; <span class="keyword">else</span> Merge(i,i+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) <span class="keyword">if</span> (Find(i)==i&amp;&amp;SZ[i]&gt;<span class="number">1</span>) update(ans,mi[SZ[i]]<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    mi[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) mi[i]=(ll)mi[i<span class="number">-1</span>]*<span class="number">2</span>%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">            c[i][j]=s[j]-<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span> (c[i][j]) A[i<span class="number">-1</span>].<span class="built_in">set</span>(j<span class="number">-1</span>); <span class="keyword">else</span> B[i<span class="number">-1</span>].<span class="built_in">set</span>(j<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*if (n&lt;=20) solve1();</span></span><br><span class="line"><span class="comment">	else if (n&lt;=300) solve2();</span></span><br><span class="line"><span class="comment">	else*/</span> solve3();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>互测</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>bitset</tag>
      </tags>
  </entry>
  <entry>
    <title>ARC 126 F</title>
    <url>/2021/09/21/arc126F/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="3761fab6cbde4110386b15ae84179711f54f9af0943442faa9a0966ef70c4945"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>扫描线</tag>
        <tag>积分</tag>
      </tags>
  </entry>
  <entry>
    <title>WC2021 参赛总结</title>
    <url>/2021/02/07/WC2021%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="3ce997f0e7bd5b2c993636c102e84da8a3dbde61892770ebd6e0dd818c41c6b6"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>游记</category>
        <category>WC</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>CRT</tag>
      </tags>
  </entry>
  <entry>
    <title>Jan Lunchtime 2021 - Random Grouping</title>
    <url>/2021/02/02/EXPGROUP_notes/</url>
    <content><![CDATA[<h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>有 $n$ 个同学，编号从 $1$ 到 $n$ 依次遍历他们，现在需要分组，组数记为 $g$。初始 $g=1$，编号 $1$ 单独一组。接下来每个人会被随机分配：</p>
<ul>
<li>有 $\frac 1{g+1}$ 的概率自成一新的组，$g$ 加一</li>
<li>有 $\frac {g}{g+1}$ 的概率在已有组中随机一组，也就是有 $\frac 1{g+1}$ 的概率随机到某一个组加进去<a id="more"></a>
</li>
</ul>
<p>结束以后，求所有组人数平方和的期望，对 998244353 取模。</p>
<ul>
<li><code>sub1</code>：（10分）$n\le 1000$</li>
<li><code>sub2</code>：（90分）$n\le 10^5$</li>
</ul>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>先考虑 $n\le1000$ 的暴力，我们容易通过 DP 得出 $b[n][g]$ 和 $e[n][g]$，表示 $n$ 个人 $g$ 组的概率和答案期望。</p>
<p>其实只求出 $b[n][g]$ 同样可以算答案，假设当前有 $g$ 组，将如下“从 $n-1$ 到 $n$ 人的增量”累加起来即可。</p>
<script type="math/tex; mode=display">
E(2\cdot \frac {n-1}{g+1}+1)=2(n-1)\cdot E(\frac 1{g+1})+1</script><p>再说正解，我们的目标还是计算 $E(\frac {1}{g+1})$。首先能看出是多项式题，一个切入的思路是考虑每组下标最小的人，设为 $j_1,j_2,…,j_k$（共 $k$ 组），考虑发生这种情况的概率：</p>
<script type="math/tex; mode=display">
\prod_{i=1}^k\frac 1i(\frac {i}{i+1})^{j_{i+1}-j_i-1}\\
令x_i\rightarrow j_{i+1}-j_i-1\\
P(j_1,j_2,...,j_k)=\sum_{i=1}^k\frac 1i(\frac {i}{i+1})^{x_i}\\</script><p>那么最后有 $k$ 个组的概率是：</p>
<script type="math/tex; mode=display">
A_k=\sum_{|j|=k}P(j_1,j_2,...,j_k)</script><p>又因为 $\sum_{i=1}^kx_i=n-k$，所以相当于：</p>
<script type="math/tex; mode=display">
A_k=\sum_{x_1,x_2,...,x_k\\\sum x_i=n-k}\prod_{i=1}^k\frac 1i(\frac i{i+1})^{x_i}</script><p>令 $P_i(x)=\sum_{q=0}^{+\infty}\frac 1i(\frac {i}{i+1})^qx^q$，那么 $P(x)=P_1(x)P_2(x)…P_k(x)$，$A_k=[x^{n-k}]P(x)$</p>
<script type="math/tex; mode=display">
\begin{gather*}
P_i(x)=\frac {1}i\cdot \frac {1}{1-(\frac i{i+1}x)}=\frac 1{i(1-\frac {ix}{i+1})}\\
g_i(x)=\frac 1{P_i(x)}=i(1-\frac {ix}{i+1})\\
A_k=[x^n](x^k\prod_{i=1}^k\frac 1{g_i(x)})\\
\Rightarrow E(\frac 1{g+1})=\sum_{k=1}^n\frac 1{k+1}\cdot [x^n](x^k\prod_{i=1}^k\frac 1{g_i(x)})\\
=[x^n]\sum_{k=1}^n\frac {x^k}{k+1}\prod_{i=1}^k\frac 1{g_i(x)}
\end{gather*}</script><p>因为有一堆 $g_i(x)$ 的逆不太好办，所以我们假设</p>
<script type="math/tex; mode=display">
\begin{gather*}
h(x)=\prod _{i=1}^ng_i(x)\\
h(x)\cdot (\sum_{k=1}^n\frac {x^k}{k+1}\prod_{i=1}^k\frac 1{g_i(x)})=\sum_{k=1}^n\frac {x^k}{k+1}\prod_{i=k+1}^ng_i(x)
\end{gather*}</script><p>最后再乘上 $h(x)$ 的逆就好了，所以现在考虑求 $\sum_{k=1}^n\frac {x^k}{k+1}\prod_{i=k+1}^ng_i(x)$，直接线段树分治 NTT：</p>
<script type="math/tex; mode=display">
\begin{gather*}
A(x)=\prod_{i=l}^rg_i(x)\\
B(x)=\sum_{k=l}^r\frac{x^{k-l+1}}{k+1}\cdot \prod_{i=k+1}^rg_i(x)\\
A_t(x)=A_{2t}(x)\cdot A_{2t+1}(x)\\
B_t(x)=B_{2t}(x)\cdot A_{2t+1}(x)+B_{2t+1}(x)\cdot x^{mid-l+1}
\end{gather*}</script><p>贴代码：</p>
<h6 id="10-分（直接求了期望）"><a href="#10-分（直接求了期望）" class="headerlink" title="10 分（直接求了期望）"></a>10 分（直接求了期望）</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=(ll)res*x%mod;</span><br><span class="line">        x=(ll)x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,dp[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> iv[maxn],jc[maxn],ivjc[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    jc[<span class="number">0</span>]=iv[<span class="number">0</span>]=ivjc[<span class="number">0</span>]=jc[<span class="number">1</span>]=iv[<span class="number">1</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++) &#123;</span><br><span class="line">        jc[i]=(ll)jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        iv[i]=(ll)(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=(ll)ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> g=<span class="number">1</span>;g&lt;=i;g++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==n) &#123; dp[i&amp;<span class="number">1</span>][g]=<span class="number">0</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line">            res=(ll)g*iv[g+<span class="number">1</span>]%mod*(dp[i&amp;<span class="number">1</span>^<span class="number">1</span>][g]+(ll)i*iv[g]*<span class="number">2</span>%mod+<span class="number">1</span>)%mod;</span><br><span class="line">            update(res,(ll)iv[g+<span class="number">1</span>]*(dp[i&amp;<span class="number">1</span>^<span class="number">1</span>][g+<span class="number">1</span>]+<span class="number">1</span>)%mod);</span><br><span class="line">            dp[i&amp;<span class="number">1</span>][g]=res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(dp[<span class="number">1</span>][<span class="number">1</span>]+<span class="number">1</span>)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="100-分（应该常数比较小）"><a href="#100-分（应该常数比较小）" class="headerlink" title="100 分（应该常数比较小）"></a>100 分（应该常数比较小）</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; poly;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e6</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=(ll)res*x%mod;</span><br><span class="line">        x=(ll)x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123; x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod; &#125;</span><br><span class="line"><span class="keyword">int</span> n,ans,w[maxn];</span><br><span class="line"><span class="keyword">int</span> lg,N,rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N=<span class="number">1</span>; lg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (N&lt;=n) N*=<span class="number">2</span>,lg++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(lg<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">int</span> V=ksm(<span class="number">3</span>,(mod&gt;&gt;lg));</span><br><span class="line">    w[N&gt;&gt;<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=(N&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;i&lt;N;i++) w[i]=(ll)w[i<span class="number">-1</span>]*V%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=(N&gt;&gt;<span class="number">1</span>)<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--) w[i]=w[i&lt;&lt;<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> BB[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> len,<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag==<span class="number">-1</span>) reverse(a+<span class="number">1</span>,a+len);</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) BB[i]=a[rev[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j+=(i&lt;&lt;<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">        tmp=BB[i+j+k]*w[i+k]%mod,BB[i+j+k]=BB[j+k]+mod-tmp,BB[j+k]+=tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) a[i]=BB[i]%mod;</span><br><span class="line">    <span class="keyword">if</span> (flag==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> V=mod-(mod<span class="number">-1</span>)/len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) a[i]=(ll)a[i]*V%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(poly A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>();i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,A[i]); <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">poly <span class="keyword">operator</span> * (poly A,poly B) &#123;</span><br><span class="line">    <span class="keyword">int</span> n=(<span class="keyword">int</span>)A.<span class="built_in">size</span>(),m=(<span class="keyword">int</span>)B.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (n+m&lt;=<span class="number">150</span>) &#123;</span><br><span class="line">        <span class="function">poly <span class="title">res</span><span class="params">(n+m<span class="number">-1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) update(res[i+j],(ll)A[i]*B[j]%mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    init(n+m+<span class="number">2</span>);</span><br><span class="line">    A.resize(N,<span class="number">0</span>),B.resize(N,<span class="number">0</span>);</span><br><span class="line">    ntt(A.data(),N,<span class="number">1</span>),ntt(B.data(),N,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) A[i]=(ll)A[i]*B[i]%mod;</span><br><span class="line">    ntt(A.data(),N,<span class="number">-1</span>);</span><br><span class="line">    A.resize(n+m<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> iv[maxn],jc[maxn],ivjc[maxn],c[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">        b[<span class="number">0</span>]=ksm(a[<span class="number">0</span>],mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Inv((n+<span class="number">1</span>)/<span class="number">2</span>,a,b);</span><br><span class="line">    init(n*<span class="number">2</span>);</span><br><span class="line">    copy(a,a+n,c);</span><br><span class="line">    <span class="built_in">fill</span>(c+n,c+N,<span class="number">0</span>);</span><br><span class="line">    ntt(b,N,<span class="number">1</span>); ntt(c,N,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        b[i]=(<span class="number">2</span>-(ll)b[i]*c[i]%mod+mod)*b[i]%mod;</span><br><span class="line">    ntt(b,N,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">fill</span>(b+n,b+N,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,poly &amp;A,poly &amp;B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">        A=&#123;l,(<span class="keyword">int</span>)(mod-(ll)l*l%mod*iv[l+<span class="number">1</span>]%mod)&#125;;</span><br><span class="line">        B=&#123;<span class="number">0</span>,iv[l+<span class="number">1</span>]&#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    poly A1,A2,B1,B2;</span><br><span class="line">    solve(l,mid,A1,B1),solve(mid+<span class="number">1</span>,r,A2,B2);</span><br><span class="line">    A=A1*A2;</span><br><span class="line">    B=B1*A2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B2.<span class="built_in">size</span>();i++) update(B[i+mid-l+<span class="number">1</span>],B2[i]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    jc[<span class="number">0</span>]=iv[<span class="number">0</span>]=ivjc[<span class="number">0</span>]=jc[<span class="number">1</span>]=iv[<span class="number">1</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++) &#123;</span><br><span class="line">        jc[i]=(ll)jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        iv[i]=(ll)(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=(ll)ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    poly A,B,C;</span><br><span class="line">    solve(<span class="number">1</span>,n,A,B);</span><br><span class="line">    init(n*<span class="number">2</span>+<span class="number">10</span>),A.resize(N),C.resize(N);</span><br><span class="line">    Inv(n+<span class="number">1</span>,A.data(),C.data());</span><br><span class="line">    B=B*C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        update(ans,(ll)B[i]*i%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=((ll)ans*<span class="number">2</span>+n)%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>chef</category>
      </categories>
      <tags>
        <tag>概率期望</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>省选模拟 - 分身</title>
    <url>/2020/12/31/%E7%9C%81%E9%80%89%E6%A8%A1%E6%8B%9F%20-%20%E5%88%86%E8%BA%AB/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="abdd6e0a6eecebe2a85578d109b033a726e2ecce9e50549e2a891d48e058867a"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>省选模拟</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>AGC040 Two Pieces</title>
    <url>/2020/12/28/%E4%B8%A4%E4%B8%AA/</url>
    <content><![CDATA[<h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>小明在玩一个游戏，游戏是在数轴上进行，有两个相同的棋子。一开始，两个棋子都在原点（坐标 $0$）。小明可以做以下两种操作：</p>
<p>1、将一个棋子向右移动一格（坐标 +1）</p>
<p>2、将坐标值小的棋子移动到坐标值大的棋子处。如果两个棋子在同一个坐标，这也算一次操作，然而什么也没有发生。</p>
<a id="more"></a>
<p>小明一共要做 $N$ 次操作，目标是将一个棋子移动到坐标 $A$，另一个棋子移动到坐标 $B$。他想知道一共有多少种不同的操作方法，对 $998244353$ 取模。</p>
<p>两个操作方法是不同的，当且仅当至少存在一个 $i（1≤i≤N）$，使得在第 $i$ 次操作后，两个棋子的坐标不完全相同。</p>
<p>范围：$1\le N\le 10^7,0\le A\le B\le N$</p>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>注意到这个判断<strong>两个操作方法不同</strong>的限制有点麻烦，所以我们强制操作 $2$ 只能在距离 $\ge 2$ 时进行。我们用 $(x,d)$ 来描述一个当前状态：$x$ 为坐标的较大值，$d$ 为距离。那么操作可以等价于：</p>
<p>1、$x,d$ 同时加一</p>
<p>2、$d$ 减一，要求 $d\ge 2$</p>
<p>3、$d$ 赋为 $0$</p>
<p>操作 $1$ 执行恰好 $B$ 次，假设操作 $2$ 执行 $k$ 次。如果只考虑操作 $1,2$，那么根据题目条件及定义，必须一直有 $d\ge 1$（一开始除外）。接下来，想办法把 $N-B-k$ 个操作 $3$ 插入到已经固定的操作 $1,2$ 序列中。</p>
<p>还是只考虑操作 $1,2$ 构成的序列，记下每次 $d$ 的值，那么操作 $3$ 只能插入在 “$d$ 之后不会再 $\le $ 自己” 的位置，否则操作 $2$ 就会出现 $d&lt;1$ 的不合法现象了。也就是说，因为最后 $d=B-A$，所以必须有一次操作 $3$ 插入在 $d=A-k$ 的最后一个位置。剩下 $N-B-k-1$ 个可以任意插入在 $0,1,…,A-k$ 最后一次出现的位置。显然可以在一个位置重复插入。</p>
<p>总结一下，枚举 $k$，分别计算操作 $1,2$ 以及 $3$ 的方案数。操作 $1,2$ 方案数的计算类似于卡特兰数走的方格表（把正方形拓展到长方形），操作 $3$ 是一个简单的插板。注意需要特判不存在操作 $3$ 的情况。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">2e7</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,a,b,ans,tmp,jc[maxn],ivjc[maxn],iv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binom</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (ll)jc[x+y]*ivjc[x]%mod*ivjc[y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(a),<span class="built_in">read</span>(b);</span><br><span class="line">    iv[<span class="number">0</span>]=jc[<span class="number">0</span>]=ivjc[<span class="number">0</span>]=iv[<span class="number">1</span>]=jc[<span class="number">1</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++) &#123;</span><br><span class="line">        jc[i]=(ll)jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        iv[i]=(ll)(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=(ll)ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123; <span class="built_in">puts</span>(<span class="string">"1"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="built_in">min</span>(<span class="built_in">min</span>(a,n-b),b<span class="number">-1</span>);k++) &#123;</span><br><span class="line">        tmp=(binom(b<span class="number">-1</span>,k)-binom(b,k<span class="number">-1</span>)+mod)%mod;</span><br><span class="line">        <span class="keyword">if</span> (k+b==n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k==a) update(ans,tmp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            update(ans,(ll)tmp*binom(n-b-k<span class="number">-1</span>,a-k)%mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>组合计数</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈线性规划与对偶问题 - 论文笔记</title>
    <url>/2020/12/22/%E3%80%8A%E6%B5%85%E8%B0%88%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%E4%B8%8E%E5%AF%B9%E5%81%B6%E9%97%AE%E9%A2%98%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="a3bd7daf3bf7964d76ea4e6f522a1daecb7ac8704f09a4c93c038185de19736f"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>线性规划</tag>
      </tags>
  </entry>
  <entry>
    <title>WC2020 笔记</title>
    <url>/2020/12/21/WC2020%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="6a97eb47764cd910fd6da78cca63b92017e5e817a3d2ac965d147ff54c823393"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>WC</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>线段树</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 北大集训 参赛总结</title>
    <url>/2020/12/16/ctt2020_gyr/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="889ec37e753ba2717bdd0d2e16ae4359d24e83be7a466bc98bca118c595b51f8"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>游记</category>
        <category>NOI</category>
      </categories>
  </entry>
  <entry>
    <title>IOI 2020 D1T1 Plants 解题思路</title>
    <url>/2020/09/19/plants-solution/</url>
    <content><![CDATA[<p>前不久刚举行了 IOI Day1，三道题都很值得一做。第二、三题偏向于贪心和构造，现场普遍得分较高。第一题需要猜一些结论，实现起来也有一些细节，代码量超过了另两题之和……目前已经有一些网站能提交了，但通过人数不多，想与各位分享一下我的思考，欢迎留言交流 : )</p>
<a id="more"></a>
<h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>有 $n$ 个人排成一圈，顺时针依次编号为 $0$ 至 $n-1$。每个人计算自己顺时针方向的后 $k-1$ 个人中比自己高的人数 $r_i$，现在已知所有 $r_i$ 但不知道相对身高。$q$ 次在线询问 $(x,y)$，求第 $x$ 个人和第 $y$ 个人谁高。要么 $x$ 一定高（回答 1），要么 $y$ 一定高（回答 -1），要么都有可能（回答 0）。</p>
<p>保证存在满足所有 $r_i$ 的身高情况。</p>
<p>范围：$2\le k\le n\le 2\cdot 10^5，1\le q\le 2\cdot 10^5，0\le r_i\le k-1，0\le x&lt;y\le n-1$</p>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>身高可以用一个 $0$ 到 $n-1$ 的排列来描述，并假设下标是 $\mod n$ 的。一个环上的区间可以被拆成序列上的两个区间。</p>
<p>部分分里有一个是保证答案为 $1$ 或 $-1$，提示我们应该先找出一个合法的排列。事实上，如果只依靠找出的这个排列回答询问而不判 $0$ 的话，也能通过 $2\cdot k&gt;n$ 的子任务。</p>
<h6 id="构造排列"><a href="#构造排列" class="headerlink" title="构造排列"></a>构造排列</h6><p>在所有 $r_i$ 中，$r_i=0$ 是最特殊的，因为最高的人一定在其中。因此我们考虑从 $n-1$ 到 $0$ 填这个排列，已经填过的视为删除（位置不动，人移走）。每一步相当于删去一个可能的全局最高者。</p>
<p>Claim：找 <script type="math/tex">i</script> 满足 <script type="math/tex">r_i=0</script>，且 <script type="math/tex">\forall i-k<j<i</script>， 有 <script type="math/tex">r_j>0</script>，然后把当前要填的身高填在 <script type="math/tex">i</script> 这个位置上。</p>
<p>这样的<script type="math/tex">i</script> 一定存在，因为存在一个合法排列，其中的最高者就满足。再说明 <script type="math/tex">\forall i-k<j<i</script>，有 <script type="math/tex">h_i>h_j</script>：否则，对于其中 <script type="math/tex">h_i<h_j</script> 的 <script type="math/tex">j</script>，因为 <script type="math/tex">r_j>0</script>，一定可以在 <script type="math/tex">(j,i)</script> 中找到 <script type="math/tex">k</script> 使得 <script type="math/tex">h_j<h_k</script> 也就是 <script type="math/tex">h_i<h_k</script>，类似于无穷递降法矛盾。</p>
<p>因此，对 <script type="math/tex">\forall i-k<j<i+k（j\neq i）</script> 有 <script type="math/tex">h_i>h_j</script>。把 <script type="math/tex">i</script> 删除，相当于把 <script type="math/tex">(i-k,i)</script> 中的所有 <script type="math/tex">r</script> 减一。可以看到这样操作下来，每一步的 <script type="math/tex">r</script> 都是基于这些剩余者真实的 <script type="math/tex">r</script> 值。并且对于所有的 <script type="math/tex">|i-j|<k</script>，先被删除者更高，这是确定的。从该排列所反映出相邻 <script type="math/tex">k</script> 个人的相对身高，就能反过来确定 <script type="math/tex">r</script>，进而说明与原问题等价。任意时刻所有 <script type="math/tex">0\le r_i\le k-1</script> 均成立。</p>
<p>具体实现上，我们可以用线段树来维护 $r_i$，删除时就做区间减法。如何找 $i$ 呢？先用全局最小值随便找一个 $r_i=0$ 的位置，如果前面 $k-1$ 个都为正，则直接取这个 $i$；否则找 $(i-k,i)$ 中的 $r_j=0$，继续考虑 $j$ 是否满足。容易发现 $h_i&lt;h_j&lt;…$，这个过程不可能形成环，而且 $i$ 要成为最高者必须等 $j$ 删掉才有可能。</p>
<p>所以把 $i$ 依次放进栈里，每次找栈顶元素判断，如果满足就弹出，如果栈为空就找全局 $r_i=0$ 的位置继续做。由于每个元素至多被放进去一次，栈的复杂度均摊线性。</p>
<h6 id="回答询问"><a href="#回答询问" class="headerlink" title="回答询问"></a>回答询问</h6><p>现在，我们已知所有 $|i-j|&lt;k$ 的 $h_i$、$h_j$ 大小关系，需要对任意 $x,y$ 判断 $h_x$、$h_y$ 大小关系。如果看成 DAG，相当于在询问从 $x$ 到 $y$ 有没有路径。</p>
<p>以从 $x$ 到 $y$ 的一路增大路径为例（即 $&lt;$ 关系）。定义 $f(i)$ 为所有 $j\in (i,i+k)$ 且 $h_j&gt;h_i$ 中 $h_j$ 最小的位置 $j$，下面说明这条路径必须是 $x\rightarrow f(x)\rightarrow f(f(x))…\rightarrow y$：</p>
<p>若不然，假设这条路径是 $x=p_1\rightarrow p_2\rightarrow …\rightarrow p_l=y$，其中 $p_{i+1}\neq f(p_i)$。找到 $j$ 使得 $p_{j-1}&lt;f(p_i)&lt;p_j$，将原路径替换成 $…\rightarrow p_i\rightarrow f(p_i)\rightarrow p_j\rightarrow…$ 容易验证 $p_j-f(p_i)&lt;p_j-p_{j-1}&lt;k$ 及该路径的正确性。第一个不满足 $p_{i+1}=f(p_i)$ 的位置向后移动了（或者不存在），这样的调整最终会结束。</p>
<p>因此询问时直接倍增，从 $x$ 往后跳到最后一个 $&lt;y$ 的位置 $z$，然后比较 $h_z$ 和 $h_y$ 的大小，此时 $f$ 的定义对正确性的保障也得以体现。</p>
<p>方便起见可以将原序列向后复制一份；注意 $&lt;$ 和 $&gt;$、顺时针和逆时针共 $4$ 种都要考虑到。</p>
<p>总复杂度 $\mathcal O(n\log n)$，可以通过。</p>
]]></content>
      <categories>
        <category>IOI</category>
      </categories>
  </entry>
  <entry>
    <title>NOI 2020 参赛总结</title>
    <url>/2020/08/22/NOI2020%E5%8F%82%E8%B5%9B%E6%80%BB%E7%BB%93-%E7%AE%A1%E6%99%8F%E5%A6%82/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="724a2c8dce113230350d57ce0af085aa6abac4318a41306df382d061cc42b76d"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>游记</category>
        <category>NOI</category>
      </categories>
  </entry>
  <entry>
    <title>EJOI2019 集锦</title>
    <url>/2020/07/02/EJOI2019%E9%9B%86%E9%94%A6/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="0be0256f4afd232f746b499b2f48eb3e29579514e0d2130f20aa9473db1af3fb">0b2e701c7f068da4009655abe42c1b8a938c4b2ff8022c4b61e18cdb6bee8d2ec9ff86e4a363055cc30dc6f5273147af9061a1d95de7b012a7f0203b9bb2a5b7f427ea1a049fd16edc0358aaa4237657b49bd2236c7a95aad362ec0a9f3a89e5436f2aa27c6226cdb30bb6ae5eba6f92cf85ddca833894be0a20f2462f33858f59761e08d2d0fc7a115e91b58ace2a7f33790e042ba234311bb3c87e44ac4c8f1b6bc2f493f397928ebe42b935ca58d767eb0cc408a59132fca412e4065a95807259175787cc1984dbff5da355fcb64bd268c7004a3199c006d2fb6a29b29460c27bc71ba363396916ac39244935ab96bc2cc7b992f429d5fe49a8f387b89efe15432c9b38540fcacbdde95ba303f3a08fc100e2d6a508ac191ae77519c3d059626aa459335a996b76fbbe40b24dee6fa4e1df76521c383d9ec46264b70f6c08745ff524faee91d96b4cff1f53ead00814984af87df41f386bb1211e8719ac3c7e400f017fad13ace19614e72a3dfd6b3655cfa1a3bf70a04e48e90d1ce82f74a4391c4d3a21833417d3881c8761122d67c288cf77fd163c4d6d78c5f1ea46e4c0edb2ea8103e2a269f91d6099323b932145e77d85560ee9b894bc64a89c31eb9ca919364da479c040d0d30cf302bde2f12abdc9f95c65f18d9c8cfccbf4772f894cf25fcdc938b05102d8ba9699f0ef791af07ef41741a117014398c471b268dcada88830674eeda60174168808feff4e59f7920e52679c67f1551969b99d1540cabff5239c113daf4bbf42442b0d145dd8dcccad9d9bbd639dd4fff5d24b1794a89575fb976782d76db17a4b9135cf19493de0472bb7b2bf8284251ce81fb2ae40db2984aaf87097292673ee9955012f5235989f0c9cab04ea77279770c63ba98c36768e84bc13e5304b3e5673a917e37b86d77b30cb1b22b66add1d396c891253e8afcf413c6769e7b248527adecdbdbee21a9698d093f1cbf5284bd194a4011456c6c6ec787dd15ea7748d7065bf1a7ac5fe47e5ce049fda833a776854c0ca3bf220301e52d4d85b68019de4377e4acdd21a039cc19ab63eaaa1fd147ca8052168b60cdcfa32cba202d9df793275c6757552f14931a303ce800911197dd9ab80816944c6f02f9283e80d6cd7b88d0d646496eed310e07b7b8437ab3483f3d3afa201a0e70c40136b30df3e9d7b5b502af8a85d0fb7c8c291afddf48fb65ff959054d54ae358d2464b597e2d75df4fbc6d694ca3041fb6119482f39933671767b9eebdc88439321932321dfdf849362d13a702eaaf5460660556f6417929ec2c7c967f436460d71eaf147a5ccce0d1b20bb5cf05df27bdedc862e1f77933211a2e939b1a98df7d8cc0daea955c38f1944a54da96420a5c0d05952e70809750191caa10b0a22a90448c86cc381aa90279d4cffc892843702db5d2c71d2ad5e3adfc6d08347b6c2c980073b39be0ee47e464b569e0a98cf41037fb722a75911c8cce2bbba91e8c42e3a71b8380bb7f765aa9b10be42563da8178656e74e1ca8eb34cb29b447d818e29a80c46073d3dc6b6bb8d4ba72ee24eff2df9c2210454fdcb6883ab374d2f9f25098e73da6b899bda0aada6bcbceef287c94066f424f16ecd48863d219f1662094c732663794c7272f508e22467f92ee20723e6c3e34904e4c9ee67c9093063097650f0b63f52c4d7a1f6abe6537ff8382798feafd587ddea309a6cdfd07f6c046c3e744601472cf6ea52142f614b78414a89a99d9ee5f55352ae466e80b4b701f9ff5ea3efd68e43ac289ecab9e9e5372e062404a8218ac304a80b3d4b57633fd8568750527b59822278bc755e15b6e848bdf1ca78712b24630860b6f87972a57339632fe757e4debaa9b72c635de739206c9dddfe95d3f52cc60f65a41377c8127c19f3c2834d3b00c5cb72078bc4a76f953918e1982606b8f36b66e4532eed286472503cf13c94fb3c10d575e648da1c00c0b7fb3539bcac39b35941182c7c8ecdacfc6ba86b50373a492ea5e0f7ff80987378d90b731101eacedd23a362a79056c8d7ef2ee0628fda4bd56505d91afcf1b2dc3331cac2a2a551347e182f23a544ca7323f7735e9942c59a9b490e8ddeef8059da44c5bd1eca6fdc81c86e6adc54ddc981dedd2c24ec62e193a926d599b14cc43adb5c745571fe4ffa7e50b28feb5ac26e5adfc0dbfe2cd35ccbb481e82461c7fd3a08a293b4f5ba11c38f26e49027255863ab48abaa668028754959e5bc0e617ca185031490f544f88228cfbd92900059855eef4565f2d1d681773a321ff4a1a5584f36a4d38d1e0f38f52873e0633934cb0919bd022c432174ea81a7514c6497cbb6a510c2d3f23e65df16c9271d90585329ea8339083ff9c35e86848d47048910c8ad54806042d21b2f20d27430030eacf3134526eaf0be043eddced04170f32242f5ec1872da43e25b33da83511f0799d2fdd1e6e833209ab5a10e267fe71370071b4d841cc63f9b2e322dd056045c4afa521578408b6a03624e1b08b4819048362f942335cf3632dd3596f9ab96d9592539c0ac75d3881a7abc3a4fb2a4a6cf63686b6017a17dd5177601b5c3db66e60f2882a45f8654a8d273824bcd022a12e299f2a1be58139044ed6c426daf310a31520f848963128675524f65e3d79f19ee8f62a19772e7cc38cdccc07ddcbe6f2bcf521c8964c7313ab0899fc71e51eb0e75401eb2a5fab25e20531c8bc08a40b74344c0398a1fe791b141b71939ae176767d9a6cb3f6d402483a77261c77e435474dd2ff5a8cdc1e4dcc66cc6c45df11d1309182f0d0ce54bad6a7d05cc5eb19ad340f68fa873c6873ddb8cced368db73d3222c25c5860f02fb347505fe092ca4f28e1831bf107ad716fa55657bdaa90a9796b27292ba86aad0ca5b5899a6b413bdb686350e8fc4b9ec0c1db6f34d716b216fcbc4ee5d3c9bf4661d2b239555521e48c9f669346bdd859d7e63a7932ad94a36185d6cdd672c2c01a0d2860b4964211502836de0a1d4c0edc955d0b9cade6cdb0e8e290a7bb60a0a935d040a26bf459d202d7d3434c2554df223f63d50dcec30a63b470e0a3e1b6f024a41623eb11545271181b52fc61bcc7cc92e694e2a17763bdce5eb3c9410210d00a9bcde4e58efb2ef671f80d5f06e5ed0326efa49fa3eebe1218b812c58d05c0a18ef4b8c963617913ec8cdad4ad71257c3dc3e93ef559ca3cf945f68a53c60cea961a7f59b75f04d052b6a85e4a66bba8f1945189c0149f817e22b25f2449009362166428ab34326dcd9077cb42e76758306756ac57a42e22835c4ccb5c3be3408184981178f583bf1a9093e517c0aa73f409421240ed6f4ee968e55d78ef4361c5abed814f17030cabc0773de63c672598f052b9d2acd303a5129d7406cfda0e34923cabfb393595f5cd41d438b384daea0b8d44a2572503bcccaab3f7bd4d23bbd2511f54750e4edf99dfb56ce68d09b3671eeb61a0808066e07ae070de2adf2cacabe502ba90ecbe95c0ff4424c77efc26b121916873f737d066ccf7f391fc051d4d3f86aaf512bed65eeb029201a055b4e4861345fa00f7ffc568e1ed00a5224c62fb39c79188bd44e2d985381a21dac0a0b564c7426eb926b833938784db64acdafed1a60515332cf14b2f449ec41be36a878976ef65524b2986f757fd0b5a9378c43e128e4b09f6d159d540ecf6845389576e013ce18998bde41a38569b5d8f0df6b057fa8c6954738526e0d4ad069c05e6ccffca1ddd34d1e1f85c3ea81c046ad06b4cc36c150ede430c34282152b957c27278198cfb5fa357581ea0df5e8715a6919d2991538c2935e2515c33695c30cae71ec5737ac01e4409ffcf05ec4e4c6eb8569ee3461ee3ebc2da2fd69b0b0ed64fc7dc8d567c23a776c05267ca79ec965e7e9092a304b823c9126bb044559ff9d66fff178b51375870ff292152edf1f9892d3b923bce78d91b62c850e0b7a1d72d9542f91e7365fada350134ed4478ca1f5f762eee7960d21153c99e9eb51a86279ae7aeeef219296187aa2ed936daaa6c5c3a0ef1531ea7f2dbd829dab1ee09f0e80f27365a5675782cd71d1eefdb613db3b90789fbc1698a4e9e11db24e1b7325383e960a052e7ad41d4ebcd44a581b2be374cc2622e93bc976d4a7cafa86ebef1e40ead6ec4c37a3b8430bf271ebe55857c829b951aafef6a08c9939403d24c9d5539cc94d57a237db8a3b283298ad46a3fa42438925b5ef7fd8529de20f6846991e82ba94cc2239c301928c00e448037e9430786d03e2e235a0ee26c125123069a91ae471e462f59b4fddb72d678a45c4779d3a458b6e4abb97e2fc74a08353dc76a0711a750dba31703c4c0c51cdc85f07bf8ec9e3eae4ccb72e88cc97290d15c0f712827392f0f142a317c9f9945d6f5c74659aa8835604e56aa413bc9e8388e56541e640e4a877c01329a6500caaf1fb21fddbf1ccd07f592a79fd4fbfe4f49ffd6e381fb6830d64b298869b7e2564a4094a7dff280a4de091724e1a208b94637286d015d41a25de06a91157c2d694821f8e5aa9018918aba0db98e701c1e814bc365c4f78ff3c248513e9d6a080169ca8fcc4caede9448404e80839779bcd37f70bf3e7ff03236bfb3b501924e638a22ea35deaff019627d8fa91135e15c8107a0de975353ecc25c7a8979b872efa09cf8ea0f78247b05ecd7302606accef7359d1722e2dcae4b707f996b37faebc75d38ad77c0c5b8637885bea34e9654b16627fd36dc27c56da33ace1983e72e521dca0ded70668b370265ca0cf95595f63f497ae3b9d3f960823067ee7683eed5bbf90a0ff26ce295a3b44ccc90ba65c770ab42b5f62fc3ab452497b2638f3d93eb3e21dabe980489c3b30a023cfafd1a33d2f83e52bfb9e9d0c12d2c886a555162555a24cd48395782502cb1bfe44feeee6e5157fa8dc6bc6b3699ea305ff79c2e0895882172952cfc889afa1e95fdf61ae811919e748d887b87bf2dfc32ead74eb7fc346cba9bdba6bbfe85256b63323a8c85a30d132dc95988a4fe49d2c5d89eafaeb932629e08dc628d06cedfe3e242b5ae228a179f7a6345609f2b7d9536111af5de8a58676c7f3dd714db0e1c2e24efcd4db706a9d803edfbec9e56b9ae45aa843a1730f1558b777d1ccd1f69421a96d6dd7bd9d09008e40eb4baa82cb7309daf14bee1bfaa6726d16cde9775121b94a1558d57790a498944a2273752f59d9557f021c7cc163adb6017a774054759ba2b7a1d7ac07e72dc8b51693f15ddc3c4c7f44dbc6abd0fe685b230255dadd6c1256c22dd74b86a1618495e96c497b1936b964651bf58f6fb6bcd0ea2e8c5d91db0a1fc88c32d840ce419611329efa4fd839b4ec1f919f6b8a753c3ef7afc102fd7f5487608d64f2934c015e4941a4048e80df30d85819db23b59bbb75c98ee7abb59c02c453b1f96bac2015026be99a1e74092eeb9028c0a6c36f9f34dd31903ca0d3a3755738604f186c46c238884256ac2763a93c3919e3b35c36412f60c51843f9de145679d63a78378df95710bb3fdf5173cae0bd0cb6dccb8f39d2d89c1b9b042b11d83fc26e175d69015d5fccac73a8ee73a77fb02567409d153ac6bb75e44cce1c6a0856a56ad58063fdc94a77f608e11014a22a2970e3a4594f0fd0592cd3cc00155bd5b5f3a757bb5d1bcedcb087bc948bc9d75e1f6381c906c1c3faaea82ca563edefcb1ffee9702f6377251856b778ec7fdf6e34c3e7f68b166391497607ee6e948768f4417ed69f1a77abf6f0ae7cbba849c0381e05d4669edbade25f9466fbe71c3722f1c7f92a667e1e15d9a95fcd830b295f6e1583a39b6c1355cb4289d0b8fe54e07e0e5476bc644a342273e78703aca0dc62d9569d74051c6f6ee7ccfc68feb9eb984ecb270ad5c413bbbf6abb09fb1977837796ce38f19f836dcb2b6450e9d02bed8787735ebf53280e0f53823b90d43579d909daa6d473cb2c583ffff2ad0b4888bca285ef66dd27efdbf8d7d8082e29b5a81fb7ceb497cf25b23757fd81f498ba35c37375033d126f5ae23679fb240a24af1d4344a99959a4728c36cf6c3371ead42ca1d0c6d328b5ca11de1020b6b0491f518cb9cf7f3abbc47a430fc1ff968aec6f20ebf7b6ee3a6e69745db6b053bafdc0a16e8c2be15f4e789c521d3311517f7181a2db3470a1a8dd8b7c7a9e926bd7786a047ce76818a887b5c2230e5ef21b13e059a4a109b03c4e9cc83c94011dcfeb29ab104f296628a68d8998f743123d8ca111dee732406f60c8f03e8c2d884dd15636fc45d7ec9c046388f8ebce87ae3c02fce4f97b4a0ceea38e2ed57b7cf7b865536c9f0b455aefc4b0a86453e009be291ae5945397b1c7f52b813779b0140b57a9e17c33839c8fa4f0483806cce90f5b3881366846b5bf24dc3ef7a268a5ade6fafd0651eb314a7bd089c05e1626d64249dc9154c8aa6b8ca3c3da692f39093c4af7ee1ed530b64ca17543608ed3ed2b3fbffe850ca51ef63e22f6599ec65da288724ab6e4c324385d90c6abef9b41b98ab66cf3cd6f91019af1964ada77f2f981c99f425d5c9e1e8820cbc1260825262ee9244945b7583655dfb9901953b14949c39c2b7a328f21df59a7bd69ae97553f66b13c9273923cb8558bb7da5bdc0278c423c98f32d450f3a73d658712171d93d9dba55ff82158e911c325544d92bbe93dfba80ab47f3d46993f4feb09679168d8afd470aad354ec43047b70f6d76be69d0a026b67511d693ac9f793e45c8a1e87d6b32e68eee5fe72d67f1ed0f4e4a3b2eae98939f21d90d20162af30a7a4796b6ead11bc7a115739e8f20b145e1922ccc136f84d0c6112f84ff7ae76b9d2a02043ae1efadbb2596e8b6fd5f3cefc50924363d1dcc6801dc34ad587cbe899fad75f38bb44ab0d23bddab61bf592b84ac14f5191b9d575afeaf511ebece938a9d45340cff062391c81d27ca22795e74446b8869fa9425b29123f2ccce37a08f95a0973c66fa6789f085839bfcf724e28bf40cfd5a69f43ca23f958f014d6d4fc4a23d66971e283f37e538f66c83068a4f4f7ac90b6eb59ee8271227029b11016230a93b2fb1eb2d6201b41a4ca5217b6f42cad07723ebf6f645af9fcfe7f382a0e0e977abe648a779073118294a3c08ada8ade2801f3783f01b9cbb733cb920d3abbe0168d91b6df9a270db9f8099fa7b75acae501005bbca28434fb291bf700b5acdee190d737a8657c3508ba7ef2b69dd8230b3480807d2aaeb96ca50d6b85a88ba43683185ed80ac16443dce74cf5298f9f99846054a08c40519873438eb50b7a154c8b36922c9a0f94e801213d9574ce78f2aea2d65b7bef2533b463d0ad54813567296a93431ccd3116e8dbf3027f03e693b51c7da74622baf1d1ce2c8ff7e562fd2d15b55f9c5bdc3ab6c4cb6e6dbe2a2915c4105dbea061834a274c0f08f86afc7548ad9baf08d5afe0d822586e51586d5959cf61d46b284c6b7cfb9d18f4b20017b00fb9f4ff94bbb2416cdc934a78d04ff3954e0d6ba666ec21128981ac390da56b3aa9fcbc01fc5b79ded836ba9bb16d79d03328560f8a6c4f02e7260fd6ec3fb58cfb400758a12e2cfb2170b920aea339931504d0f18190c5f5a72d6324fff35eb9381173acb73e94e999a72d2ba877e1e284116f902e986a3f8b451b83e6d7ac0db553f91906dbec88abe650263aef50a218cafea305ec1db99c58166dc8f29b96e584b5043742e3db12ef423548f4c6168a69bc004a3d690b387b34c472e82391f281a46d121cc7e654a9ebae0acbdb71df2cbadb785595510df73053c3bcd0634cc5abdcc6f7ebbfe5c05737dee2d0ba5c2a063fef99c0d7b43e719f7ba6d10cd787a8b81f820b0d8ad12db669c9cb57a294dc4b1188b7682453b00fdfd28bc7a28d1eec39d82fba6c8f53320dc50a7ecd9c5eaeff6a6f728b7c450d2cdde5a2d7b7dbd2326c8d4242ceb0e8717168a7a802ff88688bbc60f1d691dc9441967675f7f117aa3a87ee319216e07613479aae9ce6bd1d1b2d4de9f82f0f1b52aa73b161bda2a339574c00478c30dc87b49f806f604e2a5303ce185b89669724ea5fd37d1a37b220e5bd5031910c3352c49dcc1550e1edb3a9c3cc79df9f8cb2ed569b5af2ea024fe65838b0f42e02b73057b61db9b175b86c844c118a2d226e4c872359893b8afaaf408167c6d4421d25f7d43f23e009e22a2fcf7966ed38c62e5bbbf9fb9ac86f87cfd79c6e68e476f0a284bafb29b5232680e6e189f23acdb497b5d0c50477ecf5b7681d760bf08307c4d7bd10d672d5fa9f5a6d9ab12b3b8c97dea5ae228d321e436d332abd53efae5a72a026b6f864220a638714eed048296f70b8aa70089f5024813d8c826418f5cfe7f8a00184210640e09e4277abec540c43ab87894defd43c3203745a915deda49a19b82460b9ef707390d00fe7f293b98f699ce522a5ff46d0806429951f5864998c45d7e19a1234449266ae79697fd6732936ce957acd127a6cc2e5ae35ba15cc508352a7d07f19eeaa7f2c37a0337335f96d1e02e77105d1b4345506dfb189f1e4e785ed07b8be602cadc36d5a865a0aeb0fa46d8f0c2ac66bbbb9269eceb68ce092b044ab1ea06d9fb26e7c799bd781411bf1768561eaefe3c9b226335cf938c1b7080c6aa5f4c9623f2b3d1303f430642f3882e016e47d4b04d08c137c2287c0ee6ba500fe8592d0e165f1f5683ebdd4bbec3c48da141e5403dd4ef753563064a0c204696f3363b426a60d8da41e83b1bf109498792583c7b53e802add821dbea6f683bb12fd1724d8081fbcc7d382e9b7de5197c2799176c27c9cd274d5572f411d71a39a7a0f325a3397730be9bf1898c35cca01bbdf4888dcccccc3bb0018d6e56a409847dd32ff6f52662d982659a41b4d15942521acf7235cd6d8d6752e3cbd01f48e790070600a20ada489faf37751c432d95598fbab56168322a16aa131890e01bf6dc192665e68dd87391f4deee06122ba1afc6dbd9ebdc7081a149d3a5ce53616fdbca11b0c88840cdf53b6f635bf4f49893d794fba6b8a50a6b33d926f95c00738624365c4eb443b6c1d1baedeb8a0ad0774b89e5bbfcd27d13321b7f7907bca12e6e715ad4943f8fdc566a2383d9c73dc1f0575601671ea679fd558598af43b5174fdf1d3125428ec671dd4364a28f139616c96fbdfad3fd5d5cc49d6e161ca5f82cce1f5261ded4d08e0b4f3e1ce39c9f85490871546a5c0ddf8c81fd80210b225c23b4f0970457dc1eee8eddf7f9ef2c78a3441b3b099deaccf9f1778815f8a6e4d1d2040d28955979c2f35af5b6ef1f22f836dc0f240a7fec30d57b78146e71083818e12b76229b80e38f0e9ceb4adfe7bc19e1901fa762f630ff9fca4a5001e59c4eee5a2e2ea4729cd3b91b883c10697340a05c8226fe3d05f0c03a403369844b2e92326cc0db07ff881bef0804faa17c1b48c2f1932414448048021436d60333cff1766b834dabb671978a42e41980791ce365e353780db8bd758429b92abe85fafeb74e976d0fcb60238dc96aff84b3452209d347d431953df74899ed2d84c93f793000543232ac1198949014fad34aca7a261e66c853be6468ae43eb91a097cf9a0fe409d68e32d438902ef9f077af95d77fb8d67646f794d8cd7902b345b5b3aa5cb2bbfa36531cf9876a98481e287cf219c223c9a5931169900fb2d636d7e4c37c91995c19290680b0c0f10b048f87be028f2e3dc0c70e15b4085dbe4fae5e38b7014d0ced4901a5725f409c8697bcffca67c2385e2141c8e6c5b70802747a0e63e0c76289f63171cdb2c0e90696fb21f976fe1218ea324d8c88b4e4001ec9cd0a461c9419696353c6e3e942bed5b810483c73cd9d9fdc89e97f21ef94645796a4bf9a9fa167936ea1f005bfe29e3ad6baa4290aa99ca6de12dfbc7271faaa572ac46d0395644dfcb28559a36c68654a845644274ce2635a5f093808a02182f5f52a4b0f9035b6972cc0a5daf868ea4ff2b3acf6e40fbe79d8cfc39b707fbfcb1246dd7791149648d8faadfadf103e6504b849659b5a3576a4005ed6f1baada773efa347d91ad264038f0b5a129836dc8e7185eca49c547d03cc05806b1e07cfa966f6c396091b25e6774f02d30aa7ace1841ee5c27834932ea61ddf7eba5845224f17e1b5ffc33a444d8e6791d6d179ae99923e3e5b5ebc1f98f03cbdfb09ed5414f1ce302088f4359963871e27105e132a0d4d39fb2bb779831d4d3c4053b916941a5e1cda12e87b04e7891ced4b178578451aff0626c13b221fe4b3362944fab85fd6cac8bfa7fab715d0f4d8a3f4c27965d4f2b4cf324b1aed9269c67a215ae7efac219fdda25c923a0fae7ce5fd68d9f01b1a189ccf793b717d3dc605b21f58caa2a9cfa5a5cb9ab8625233ca9d1c90073aa9546926702348fddfbfca13bbff1b76ebd974da06a8e93769b8202b6d0d823c6fbb047f5bd4046ac49576e81ac4d6e92a7051de4a76e754d173ad0f99a3f538a801bebb297105cb2da6889de97f356953852a41e9331f3e66888e4f15bebc5c6fa3d40bcd51df0b6c9826098ddb76b8c3e994d3f97420c080ba019a5be72b46bf9fe82c198cf13215eb73ee46abedf01efa9e11fc4458de0ff2182f9a23a479f9b00aabaf01ae3683d68bcf48835a5cb86aa338eb3f6ffefd5e63bdcd1e863a56fa1e162994dafbd4d40a76442e8afe0b66e7fb6e32a5066e8cfd4d46b905838c267e0033e34a1f5b963f98d82840a13e2e217be4b19d8231e50b553dc1eafb877116a0cb4819d5719e04bca320e97413466fdc21380d494315a91a2242651e2f112756a83e241fa0c6b07a87b30e40088e3922b2d5155efa1c49104f76713340614f9bb1559154412d7cd88b8d62bd21c93cd330a0fd80115c8c1bcca98ad1518ec72f83094f36fae52f47e106d9a703d683763969fc278e7036f3bc3801936e2ff79d31714ee85bda69bf62db9b971d167b8916589809c7c06de2ead56a098e1378ae8f5e4ab3993d3445cbde622bab8f039998a967c614d95741848d3dde710bcfdb74b2b78cf8d4286b337bdad89190d86957dd0b1f3bd09e5fcca849822cb2eeef0cf404b1430cca3c9a6c3c0317782d4d7b2c641ce844676abf7d53ef324e3ea3b444dbc14e6dfa615aa1f5e8e2e97fbbe82a3a6af798a744d81c7dcfa8fa5c73da4c2bd38c8e54c6388d709a484ca357210ca4eb58761e57507fda3ab97a62358e9e33fba7f5d312cea8e3a6029f81542292ddd6fbd947f6b251f3b92bff348244a643d8890ad606c246b4c283a138c062f95257a2fda3837a871513114576fa30cfe0cde6ff2562e3161a0302df34fca5c41d09a84014d9eca9acf8107b94613cf8b3c2c8ea1289bbe8a7fd2ae0bc99bc15f55a3af577d1d4410fa2b078d9d53db4df51569eb94693b51d663fb4bc0d12f4d5f61bb5cf75868d5c28f2c56d44189bd623184ea4311cff9f3a9f30c56c9743aba7b0dae078b7fb8dc9e09388da964b8b99a322fbc61ea57f0148611bdbdee04b632c683e4e0c1ad83e97cd2e7f2c325bdf5ed75b62b75833bf0a2f59b352cce84750a6a414953a5c6397e67c32c8fdbb54a96f022b6cb9d538461b7bc6e15b46df8e5fe7fc118c322e67ffc64088888c5c9cbc8b256b5b46f2e35429f4178f1ed9212ae0f4c77bde4613fc43c660fd57fda70a31b64283e6069e1eb9ae2798942b6046a8c156ac66db951c0cbb3d194f27d3e23bd64f197449237ae376e0f5937e12ef29fc1ccb86964a46b1dec937ec8b7dbd5d1b64d1d37a4e0dcc761f129857d9c869bdc3bb37229980e79b0b7285a3c2f00632c30c32205ba3df4e358e8fee3c21c3e93a34b788c93e82ec9b66e10e38802f473d90593140e098d3fdef7694eafa34671e97a856a422c08a430a1956e3daba9482cd27fd7c3000f2122c7775708ca63f93b7aa2a0968760c585282f716f7324dca7157a204969171013867d55486012761de1af137fc940baed07cfd866fa6f0ecdf118fe310b1b497568d988a7ee4b61eea37b4efa0edd6249825ec268fe5bd1599849417ce859e843731a03692c21ab94a06c535b4355aad947bc5ad7209caae478cee74d29dd963cc1e33ab251cba4ffac88d4c1f14954050b1132d914a22f55f3e1165eb4e05c30dcbeead24408560e5afc80c4268b22b89815f5e4c6335f74de84fddf52616870e7d49bde5f8570ad67cadb5a9bcf1c221290eeb1d9b19171f0b1e62dec23d046a6642d5740ca611986396db8e476e3f5dc4ff0eba32de399ab744d90c2a4f50978f8112c5e3584bcea1c343d5f493bd1e03c8770247cbb928f6f7145a708c8d55b00f970eb0c2fe20d74df265e0d27823359b955e4eccf7e6479cd0fe0fa91d1aaed9e811f83dce16600ad4208ebcbb7ee9ee0c472ee96cf9b2f0b1e534bdea867c57c8da55e6887d700d851d3111b5273dbab31a2da230e9b4c1917b6f2f5af1bbd3a0daa783124dad7f55f64b0dbe9cfef48e6621efb01c8b0fcde0d81e5f780eba9a9b96fc93dfe52da005d859a08d42adb066b9744732ccd7f080d8af7c7f97ac19a004c4b0b57a0fc501fff6e08812cb4a0d7550d08f7ad621c9c249e028d04aa884c5ec4b1925d1bf8964b7c9edf43514413e29ace825826a15813bf1f5159fc4336698a3db40c0004025d38f5252b07bf2570afbb3a00d15395d63405629f8339955eb8a332c492db6ce8a8a5d239049c84b45f86b2e1f648364baa4d43754da27a5cd2066671ee2b037cba49f3fc707730610b3f3e00b1b6e5dab3ecb00e90fd347e3a25e7d813862ecf6fc21af76db651fd9ec4bdf9d73cc0bd03403f8831885a0e4a44abfb13b37b5dc2fa8e5cc75f35b6d48a657210952317809b03fdfecbfd3ae7b7d6266b7e71e8d6f9d0dd2d28c2e82303933949fc6aab98713addfc744ca5738071c52fa43d7a4e18d70837bcf398b7bb25c8900123e2f6db325cba8d65b73c4c77a3a55a865874ab096c26584175bd05a85e36265c075c9636b70452c162235206292fa7bd833dbc8efc2918474580c9867af2bb8decaae49e45ba8cf1864c3d9b5353152214f0941dc60a02862393f5d455f8ff56c70a15766dddbc82d7f89df105752a815d6404bfd512db3bc76331f29f3bba6cea7f670cc99024a21bfb8880c23891d1b2ea3b6c97907eb37114dd47d11cc12f529e33f8a202a89b3fca95ce430ac95cb49bf13130e304a24af9099af14a15f91c580a4505bf3ca8de6da4a47bd9a3a13ab67ff69de52a889356d7810b99aa0cb5223274afa3562f0ef8802a3e42d437e930984208793e3960f4d96dade3009d572bfa6c92ad196a631ce19df49e2cba7b8175e5153245f2472712bd4fa02308982d3c2559d821088fed21ea90c2d4583532222b709d40c7bbc49a47687bc25eb21c5d7ddb4785df3ebcb06b22a11edc1a41f0d59bf05d0076faf478bab502acc8475b111304b48dbdcd277360b57b2d986924faa3a34ef334a96cbf97b50fad5cc3b74fbcbaac4e341f28021acc09dd0169a26c4878dba1312abe4a9a49c9b36727225aeb4625cb07e0ba07f412c396ced0dddc4ffdc258c25c850b692c42dbe4f8b48d1e181f62e8733ad26750d48943195967b02c30f71cd958f26c9e67ff2f611bb2ad128d03be60bea98bed686d73ae113a17346ae252b813f298c9de852637ae1019f20214ee1011e3495e518cdaa75a6a5ab51ed021b280a0315b444b41892fa0bd8817bbf16aa01eb7bb6752f196d41aeb3896c37b3ecadca0f4ba982a1923477b3778111b443122213215fcafe1a1d8125d02d1d2072c9fd52ed8d077abedd5c6b841a9def4cc2872f90ecb5a006bb1fb7d840799a4092b1152218ad2993e8cb20815f6f2695eaea16a37796d687e41fe2eecb1eecfdba59c57549c364c24b9d4482fe66807ae7f2d302c4f6e1bad803d4b585ba4578c623de56b0d57fd874d99acc45701682835fb73c95ca1d685066079e5088ff8b370b17f28dc65b7897f3471a13d0509a70575aa8bb75cc4968c9ce38c2ce147460cc9ea4bd7509b223c498de6ab8ac37225a5b0d6a68edab0064217ccb99d5e200296ae00493ffc025a6395e35678dc38838f2d9285b4d8d70c5d27e609c3e851c435077661e5d91c557b828cb09e95307ee53d76ba72a7001a2d490882acfc4d1b290d30e24cbbe3dba1c1998d5bf0b0983e21fd38af2634a41e02d7cf17091852b6d57a2a00708a32f20c92a8a9dab63e28a49d32eb48cba3ef8bf04114a2ce2cfd5e10837cb82c1720dfec5f2276367704b47c4610503fe90d22b2e91d51a3a32ce69041f0430c80bfe15489d0360005a5037a9d1f0bfaf9a762469a08f7ce0d2ab2ae909510b1f32a85e3b4eeaf8625cb781ff312cea588298c46df1506ff799728bc4f8a5c903a8ca808869a6629539059540ba006777f07d115c22f8c14f767afadad7b7383afcc403dc2b8bb1bf7aaf242cb757a05c633be91180637adc279f9168ef79d336b337116a8e49f596ac80d4081b267557281a22b35824d925fc2e9d6c3916b0d1455db0edc723b3677a8253265bfc9501c34ff79ca77fa220d8dcd3b0682e6f0ec964707920e77b00dbf2760186a18740dad8058d8125e910d5e7ecc19a99a77f21db976da76ee9086108a62c6f877decafc9c909e9b01e99cbd7ae866aff9446acf4ec1d7d2e1b2ccfc74d100bfc934983eca84a097a701d112f0ab88217ac459cf14df503055bfade221b5dc47a4e87d1a44b169780d913b221946b5855a5fefa730333b4fce848e071ee083b8423539261fcd93409690cacaad8dfd2a42ec8d074b43a55340fcba2b2d07f3ca1443c2cabd3f0327dcf7af7b0c03ef0697b77b68894308fa0df3dd002085f9e1bee81422e960874f736f3cf769b07bb5c534748bb2069dec34ea7de8678164f2cae36d101fdd04064c8be1d17449561fbf3ecbea43714d5d4ed0f9b489939f2f3bf4b675fe80bfaa700b15d6a6326dd76e7fd7a6d90e828a6d6d698e0ddb8dee67d7a4860ddd646e4243ceb2d5ead3270202d58b754e6c8a228b575eee337b747bdb0ea2e8b43da30b6a2c74cf3ad76d8c3edc71bd053dcf6269503b17aedc982cc5b1676fd27eb01cec625247a0e4b937c56f39c1cfa425dc772713cbdd98f935f43e71a4778aeddce9b6fd9bac35181b2d21cea6aff39edc3f84612c47c8e10171e03a85e93efecc6d6944132662786ecb7295f31da8a53352a713dece700e3dd7915806a7495702668d931eee0d9f5877c0441b31e13bfd2ceba0b4b3ffa87d76ee9ce06dbc2f48ad724b9012a4b08a8adb8242c7d91d8e528aa1c74bc222dca1f9a59918c82789c2240b29fb733e11272700cfebeb697a2d76c13c4c7a88184b38e271f629be35cccbeb5c4afe79f278936b79797332005e5edb55f6ffd0c2370d5a27b58e7c664c54180d2cfb04b975876b6cec7683a479f68cdcf06b98a1fdc8e4ba52aa3697fcf293273c4021c2bbb25fe59a97ab9948b3fc6ac3fb0104547a152c7bf5c5a69a1d20fa276a83986926f2206b5f602bf3c8f8f8194542b8444684042e29a5352c836ee998a077cf956ff5e87fd83f36c715d93fc109d05fc9b99bc30380066c157e6bfb99b982274ea218a5b4fdd9bf2bf000ac0616d90a69d2f71d308ba6ab7c7f42ab73e1cff6590c90048d144612457525ba13a75cded24bcf6a409424cb86b92f00dc5150569f949bee21da6d74676d202ce4e76bb470925879764f51b9debada8b1cf53ca4a1cf19a6c95078003d7153ee613a1f89f9a4617d2bc9c3bc04cf75fd5915e19ae408ee8381ce782e45c9bd119483dbcd484a0624f977a9506a43b89ea9ec0e4cb80ed8e40a0aa7438dd4d483ffb38d65a587289def7e0adb5aa14497fc032f3de1ae93edc99207ab068a8690cb895a0e319468016066fb7c8918b05039c30b0a100635e04ba914dfd12e58e47eb93ffa4eef8a4afa6f7829db04ff171df504196c5aadfef68fce1b3622fbd537ef648ebd4d902305de825f8e3504144f99c2a6614bd0f2f8170354f7d3d7d02aefa3c1956c85a7d66ae4fe7ff846720b3f6adcc8e299f3ae8632123cf3515f4de909450d8432de7f168aa885b0b4fe457b5419c1325cb9873211d6adedd9d28189c77880796a0ebcc2527523d060d50557e5d07faa6ca100b20cefbd2f11bc1677f4dbf038278fc0e9d0f3ca1ff90a97ab777300163385c9c065dfd4a88988d1a22e55faec5e16be649e0ee6099240726fa1d55ff2fc2b490cbe877ec17b50ae837246381131d3614e8705015bef9197bb46db1c6e16a0483d553c6094fcb5de86be120faddcf09cf5449ad8ee347930026b6272f8452d6e5a1b44ca1c9fdcec98746fc1ffb59ec93f00175e9373811e78c38cdef71773d69ff06fd48482a4303d1966d144bc30c9f338e83d0b8eb6a8c40ace57414801a7510531d35e66c74d1c0906cdd0a26ea86b3da392636d5010a7f7bf45d3b32fd44f49d68c92d99cf0e2a58f8d3707923f317275bdcdd8f094f1999dd9409dccc362bb701200c117262085951c4074cb9f9733b7ddfed64e07b021413d2cd210c2dccfbf48d9fa537bf9d025e670b5968bca1bc0df2f04ab2d34e70b46165248c5b6641fff5b0211b51d92f842d05b763de95852d820cd68c6c746b0f062387c4c560885dc2dbf6f1b89d57bbc158b0e0896d4e287d99ce86550a955e4e286a5186e18e21e5de1ea74997347b78d48952ed7bc89c36b2ca3dc4705ac955a2221f99be75abe854c73526a131f544b48524dec98c3620c1c509998eb0279ea1066c9a5b90ec88d0351f18e7a5428594e9988b4c957a007404f1c0fb7af738fe4b1c7a10f5f3a2173fcdea2b4963e2628be89528f9c1002a76cdf29ad0129a5594889a69e6226871b8ebf048bf964c90cf95f9a3c24fb4049676b320579fb8446e83b610c953fd3b04a40b6329bcb14c6b4922d04bdeba5ca688c31db40799ab8a2b47bf8e458db9e899894d6b6f4b58a84d81f3f5057d2085b61b67a970c942be552b2cfef76b905853a0a611345deaa538ab47ab4d6575248a14109df2f21f8ab45edc6cef36b22af65cc696e58050afe2d77df058f64b45754a21597e6e37e50379715a793e3081933ae5e3aa65f5ade40d04eef5c7ad2130e0033c99b2216af647c6e5a17a2978ddb1bd95d22db536c84dcb3c4f0ec720856ef343bd83478be4719961be811424f8803cd044c3854cf10f33157d8dad8cf4bc490f668208eb9ff731eb1f1b5ef22ee654eb9cd8b1dfe3131a1c5e74faa2d577d2d27ed525583620015db828abec364094b1b912951561b9a8e7ad23f1344bf54a7d8408b78f820f271a0929033912eea695971ca16c109ad91e504f61697a0220cdd0796495888bf902c1b82ae7857f963568b6b722218d3268056d7e3806ff01d9660196f4594f3b4a0b0223662e8610e050dc65c66dee6b4446cb70be2e7b09453de9ab8a97226eb9e4dac6cb53390fd8cb6e42a0953a110d3ddd139b7f40bec92cf426c5b31801fa5f303d8323f4ec81879fc4a46c3317e970f1df9a96edb2c1405c385c01da72629c1719f5bbaafe6a65e0820cf902a7a0d784008de4c5e54e7215a6ca8a36dd34c4f9f8cb14e4499fdcb1f28c94594f9859cc10a3f204879a49e017b46a8e3c1be4ef540397025c0e4647a96ec4b46f9d1cfb460d8ff30cae58e137539af9f280effc27891d5d0226ce1d2298d7da50fd20f1765af66b35dd3775ff335fc3cafdb67986d65b445dbaa47a405961350b3238b6cbfecc1d3928b48ff9167c0a6d00655c077ce0e3f21b71d933e794928cf452d4fe8476dc780344538754b4af0f60b9141e2917a04a1264b48f09f134a0da0083b60a3da6350b4e41169b5db753b6c32f4daa9c8fed05013fc90a73725c870d2f560b32204233901b9541a664551a2bb5bac0f456983f4f1c08673bd6e1d695be992170bca57ca3410453eba6753cc54630e4bb723bb356f5ad8057a9f59f2c4f525b1c1d92613a6b3ca83eefc74c64f3fec40a4f3c05f356aa3d7cebb7c989731858bb04ec29b76ab05c4b11b2d696ec9ec46646a7cc4a83f82ac093a5089475d242deb71068078402a3c29f2f0fef48d36b123d05501357f8cb9b9db7db4560a508a89c6a1d17c4db5eda6b3cd9d18f23c95f3c3b3b9689b367311fd8fe8d0f3c1ec4e5fccd887780b572225c1dde13d6a2082d8b6e01a92b3d2eea0a9be797b5cd86d43d6ae0197508bc0de7932b8c8a797f30837d69822fd14f1420bee4e7b49fdc1787274a204e5bb8ff57a752fab119aa00f8d490a3cf51960120189d08b0a4e51a12ccf0605eb279f56c7d55baf50e8c825c7d545da1f6471ee5974115802cf65db1486a10cfcfe9c3c993e426bf32426be47603cc616c821740297fbe0fb701952b21005477f8dc2541c12bf8c21a650add70d63375c2992748c302db3d6638a7b77488e8052db8216cb835a659e29e7f8d20755bf20b49370e5c8238997af6710dc10c28c913668dff55181cb5926936a2af86ba9c168f3219b1fc3ddf81f759489469df6e3a908f1b44d4fd4ae1f53cffb083896674784caa1513e291a534845955defd3c21ec8c459d153a99cdd637b7021408a27294b8c33309deee3e29b60a485d34e61a09a053c92d63e52024ac33e09315edfb74a02d91a48f00bb63b294d8bc3eb1a62966eed4579c20cd1971d92f81c46f18d72e1d1a0c4c887cd16280d0757a5f08d96fc6f40dde36d79e1744b8fd9eb0691eeaaac83aceb9367c627d37b79b9b9e25e582e5a593ad10a8a78ace54a1cb81cacf9c66b5bf5c89b2dc026ad33d6e04e6acdb8c1525129449ef32646de6d74304afbecb06d1787e62770a0417b55eedebc54ec16a965a349f8f6a074709d58c9aacba1418324ecc1006e26b6ccd8d250c08d397866cda4f0b132a420e4c09fe3e90d07c0fdb04d802cb94a3b2aa11ca6f72d8cec09feff8938d457142c57e5cf010ef2965717ef0ce2d3f88a46b8e7fa22d79f0c99916d018fbb2fa739ec4110051707ef4c198ecd0d2d19c4fa455a5530479213ada94bd7a7589c32f6f4ba56b37ff4720f4537000928396192e9a52b8b74b38016b8da8090baeac76a2f18fa90176e80fa0f0336e435467599768e95d6a044aec0b67cfce10b1b913eeacd507d39f52f869ca0ea1808edc254055ccd9edebe4adaddfeece853f5e244245331a107834d0c2aa11a0894566d142e686541d6e9a20922970b1db3584b7f9b716603572a697e3236821f4f4160e7433d990bc2c60e93788f7f4aac01f29a0417bad670066c8ae8eebfbfb0f79694af8c13f5bb0d8ebb089458fb8eaad647147d004f86ed1bbebfe02d6f871d39eeda8681dcf85184c7f7b9031efea6bd1a1264f10d9cbfc81e13e55e09f16c4d762e802c51b4834c19c735753d72a54721d705786191b9e93518db216aba57296ceeb53b60ed83bf891c3400eb13f2cc2581a38cac014d3650ea9d7176c86853e2c5c0eb1daf856b022f9f0fbc22be131b7e098e79239ae591318ea1e38b1ffe19487057a67bf2d42f8641440ff23c188c4d964e7cd3dc7034f98cd1e6842b4dbd294cbef3bb23d073476f37d9c6641f3c83ea5f50c72da48e164d9c3456bb778cd1dd09aafe2f17f2584b46773e9a0115116d0e92b92d07f2161e5a2d783477b908f1be6d1947099fff1c012ae0337773bceada447bb7646742e6f5716d634a8e8f46e0e73be2cf28ea783d9cbcff0ace21be5af1365417ed5cce841ddb420f9c38b346e0e9e5bc7f899df5daa4e8c27303d51a1d377cdfc22d28e4b8f2c17f3e45b5132a0de193cbc0e817a6f5904e24234406c584b0b951f6e7ebc12e0e1a0f3d515c58f141b19e6a9626e7d60d68b4477a208add92e5f924757a7dd547cbd3123176b4f75b9a60d062f903b531b316cc01212ed32659fd346822f913efb32bbc0c773f265f3fe86a3add9ed9f7caf8cb1110fd967e0b48d6dd8c63c6f6837b65bdd582b47225b8513373dc0e745400fac65afa44e1b227436cc54bf240e758b54ba734effb224e5ffea456be943d5268d7684154ff73a25c3617de311102c9b4a01e07b4eb8a3f03268542264569f38d169df152c59a300a26bef6ce06746b03fb2a8faf627ef26c4837c86365797133f72e1383d9dc28c8e7abec312012e3164d004c2ad33bd42b48fca8e276079a0632763ec78f3849d951e013710562b6214a41229f3e2757e9da911c463a7b93052582ce6a588ff67fa1d767374ef8f7e87c52dbca1e0751dfa01b631d95ede5ba3d1b720c1fbbe11a3b8defab35f0c76746e8f6cbb41f458e67473a73014b0fe8fbcf87b72aba767c92bc9258709b27e4feb6a77c8157c2c5388c19263bd5a2623e7cf964809579eb985656c7867aa69c842359a33278a71848ae8d30fe4f143098e105cf8c839a336a052a73f8571ee508d08dad6ee5061cc3749fe5c64f9645d6bcc3cc031e222c63b2c563bcf6e11e65fd57f7480d659802f7039068df7654ec0ebff5256060c05fe60af31ba926ebd4081c941ba6e58d56213109e38a5cc34c0a7d0ebbc58adf056406afa60d719d60ed127aff991724bac29e6707f4d7514f692ead80027d40f4f6287c57463b9f679e56bde2a6f55bd276d8e7617e7753fa125b0049daa2ad73e77af54a07faebf900f3ccd4cbf24b28e40876b4e1b5e6c2605c41c9864107c79a8cda5b10c7c2b5b6a3a5f8163f71d93b1666beedb8ab026b4ea771956d2b66dfee626a68d422696c354f5942523b9277866cff9e87c553a07bf4ac9065227493fca750b99a71bbeae2c8e7ced6dfae039be91cbbb6350be1f16e639468774b61a220e3033dc39f3a3c5b0999d8895e809f45332e7e281c249748289b9007560ac13542ae2873d685e4a0c453fdeb342c46bc0e515e04ff93a0130a1e0bd47614d380396a3698ef441744214094cb88ad6838a433e32b5cbf79ad903db441a1dd81209a392a65b7532cbd3fba39d70fada086449e662cdda118af372c9eb8d4a1cda6211af78ebe7e20fc58a70d14ac490101f994746d45d8647cce63012ac2af61e04bb3acbf81003b347e462d7438c9a5923d2859fffe4cb6e60b88cc9033143501ea68b3aea78fffff5090d8bdc06ca00fd654741448a775d7cc81898dd3892d67a2e0775b46d08482e623fd698dbeb5670fe2ca313e39d1e1cc5e9297f16e39763208232a1684b98f2a75212d9eef8c6c198a798ccd1f95df4f6349dbf237b04c2cbe1f403f69376a7791ef112784adcf299ef09cc970db5c791672bf7f5921dbec7abbc366bbe82804c31ae7ad64b1d1a95e383d3ede207383144089b3d814176b8e48b0de07e6c63563501cacc9c98e73f5a9f3f1f1a6f399503e825253c9a4a03091332b72e65cd0c422e3410c1aecfebd3210cef0475723220ab2c38cd3def46240e2847bd064b2224b27ad3dfcd0b47e585871e43d0426b21d403a61aea80ce2aed00b4bd1313936ac5b963546227c94cc5b1f6375a56f18c74c16e97920ac5cf614f3526159cf6583a76e78dd782d20c3ec06d0e5b54988e636182bdeed08423c068192c1063ff16c835cebc4a5d86d38e191a86dc0fb1618757493c85b7978abb219808e7b102ea7a6e5af0211f8c4d85b3ac8208db585db9e6153ce331731599bbd748d32279617b24065900744c9b6543008003fba00972a9a2a614d636830ded541569da799e217958d8a8a2b4687a329f4abcd70049d19cb70e5dd8a7369d63db98326647781d56e42fa52096ddbe8114269f8354aa8da726f18a789f14ad5b2b8c810f423bfe20e63931d81acac032a23a83d3f91b3f8983a28b227a6a0a866dbd4b7805da3e9ed53ac86e306d23429fd8b1a8bd43ae1631e825fb674838768b5ccc5376434317726d0c676131482cfe969bcc101ad8f27a03bbe6006fdf4afd2f53870762ae52bd7a1ec69b86a026b562e5a86828ff7d90e1340a5a8c17bb5606c35c58205b694e97a30f03a2ac103b70742bd86ae1d36cfaece62c490c85254dc2a8506ca7bb0953a176dcde3096a5666e7cd957b1756a56b57f523da2a56daaa556ac0ab1b3c01d245489daa5612ce0a38326be981cf831c79f4a99834404275d845e7da24f088e9b25deca9fb0be2936dbd5e7bad9a193fb9fa35b286a4010a5fc3e29802b9d71b6d57a1296303e3b9dbd9a3926b5e701c20aaa218b842ff391113c2f521e2cbb6c09de48ee6f28b3c747d8f61b143064b564799205954d2e321c8886d5fe05a9657dc0a54cda92a3c5280de34182c0fbbce22252514b576ee15d16b3d65639865854f4c648b87734b6e5f663c02967dfa8a1d674d90d2a603f65a849b40040d621cd83a266c5e9fb06573ffb87b1af81d0967c88bb2590f18a78fe38c16bac25a329edb593dfbafb98f3733cf6c33e31c7f70421dbe97b9af76641e023f29a77304d7315054b247c687c8972ec1b07410c3d63ade578c6297fce4b0fc71913f8cf55b1060e7b4230506f4a9211d06cdba1a153d6c3f289a206f921a0b4583b3d57c1336391d1c4f26bcb5c915c65460a59fc6b9c5b056501a495b8a422484980132fdfe4db9bada9142a9cf47382e7835224ce0354992befaf73ea7d6f15ebdc54600f5697992af187ad5d00a154492d7a794914b0bbf21096df04bdc0a8c2e6a47a760595176e3c79ca8b94af4d3bc21d7ec9ab9fdf582bd2e9ebabbe5476bcdc75e6bf643fed5e80d95ac4c3aa506bc33f4149ee2d2409f189ecd34318fed658e7b57c5a57f8382e6808e71f848072a3ac409916c09907cb670d9529cd9245b480d1afa56f02859bcaee637d91f61fce773a464171bad6b62066955d803ce6f4af76e1a70d6dfb42c65d4e05e6694a8a9f3bb5d1e7ab665db16e7eedb38531698d4a9c6cac07a21916859e2609e35ae87e5fec96b65a75bc338009fcd300fe4a8cc0376c4d07334ce9437cc08339a65337123b7d369c0aa0d1e6aeaf988739de281e978af9aa11739d9630fd17da437fa4b92afb1c710c15488801b540c4192c43d994cc769598db1441cc5b66334f0a483f6175a006170cc689d289015240aae0eeb19362395de52d3106270450b06f7566e8cea23619da65c45c7c71044a1da94b9ed93f94412d4bf2795dd8c6da32682ae06532406b7a66654593ba549c466bd7af1ee3395485fd375cf7622b1224e763fda0b6c99445d8b4c2d3d7913b8aa86f4821dbaeaec97ae119b3d59cbcdb9e9beb89c0e9766fe770b628733ba1895bce490de927080a93c88b74eac3c9cfb3359951ebfea339699352566a987ea113dc77679cd6826f0e6107e0bd6b9ad74a0f1dc134fa300bac051b9a45fd05e25c24dabfd9e99de8969f6409b1bb40718338c8d1ed407c48ff108437f4441a8965831e1ff73cca366b2dfd86525235facb73b6bfae4e35b4dcd169bda4bbe425ef40a1ad295fd5c4093a7f29f47c371a89717248ab7ef96555253a15b2bd441e3dd59304c0d8cfe60f6f0e4d9294334cc11a81c84c6b874a6a23b4ec25dd8c828c76bde7e867490186b00351b595bdde00e2b7ef800a7a159e74b151c3c3e80babc42ab6c04468a856ab0a612be80d419dce69cf5fb4b47fd87ccf0e237378780407d7984882a9800ed7a7bfd1ae84a4076337b55bb8b5c82bc089f62ceb37c8ff8c5fda9b18dca7585aa1324e79e02549a43e0fedf1a2cf236ce7ee9af925a204dd1e9d260d257e62eea7ed3b271a8e7743b1762d71b3e78cf07ed571b18ad2935eb4f5f5d483e7874df6551799864bcfe532a0900d7b834c3ca7695e27a5557985f7ad41c0d15d480e0d329410046caa93ed6f60f534a93d297d05355f1c5c939f4b7fa422d643be7f3cfa489d6f51e4b3afbe94ef3ec11f5f39bfbefe15e12772dd0509d4c50ef44cd56937386049bf15dbec4362590c76bf7096e63be4bd80eda27b0616d4ee1110350b90998231b5be3616eb8047c5267e78a42bc6e2267238dcd9a12752e1e093ac82758a13b014da4fbdf5331b54de23823ac13e1105fdd901ee7eecd24ba16890211d2e9d692ae8b88069fec96827f928526108c6ba1d9481d6c9e57d894de67d28ead725850c49b3b75987208f4f30e169172972cc391939c9e2c266a432ed935aa0c3ad2568f991df30410d98a39e0e22fea9edeafb23863de961bf69abc2a822d4fcedec53327dc2fd4bbda7a14dae2064c299b4917569bfbca6ffbcfde3b54f732135f476968b4dc00b66c02a6df15272ee67e50e98c6fe4643650791ba4763da33ebd8e575980fbd00ab1bd4ea04130de23c4d6e1b3a8e0e77afc9d320c2a25aca0fbf4b0059aa498caf7c8abb51cafaee72c772caa6f4b46e32f70fc0a97270577c81fd13020632ff09436cae0283c8319c6fef3034d5e03b8964cf1f43f6cbe0a5b2a8baa2e1b9bee3422817acf5ccc378ffd24c9038a1d63aa61883b335c10931b6ee1aaf18aefb3d1ae2306a8f40a1ca0e0bc2d4977f207904c9fa81ac4542887f2b3d37abf1ca4a763a56afbaac8709dd9bff40604a4efe89e987d9f543a655c3f68932198101bcb72de4057e56c4bf122e3325bf2b5e3390c8b611403e09c43bac5805f48870e2c79914f5b9dc45f3ca65e6182acdbb5c2917572c2cbd2358690931efa7da8fee33b5d784783b7d3c8158e016e1ac00e5bd9f44be025ce7373e96c0a211b7abdd2c9351e5f76207e032cfce8c34ae39cf2b047dd23d56a5e5d2f16cccd7d92d75c2af656f7971c1c3afdc33122d5c9af154f882e519a6e4c46abf590629de7d3d220818cae63bbd6a5999b48c70c815f2fb047c7b9f0f8be7461845f59aaa84adb36b1b7b5c4dd233da7c1c0f703b4e81b9647d0016a6056a6d0b4bc89606e33b43fe899f4268abf8e4a0561308c33dec8177c128d49baf71da32c70c842fda30da566ad55374188418d706a67b2daa8b2ca85b9c330b53697407708680f81731b3e156a61fc60da6deb0542dd9feaed3090b8c9e97220d88a5b70e8bf9d6c1c878c5569d6599f1556e19b1940a1a88b3bdbe45acd9b3472d17711772539ddfe966ea985b339b1e580bfce8962c3b7ca86e7b26726b2599f9963defa765dcd1b7065ae330454cd7a177ea04d3f4accfaa9534c62a2739b7105a7eddac55415f9d3fce48853b565af4a314e7192620a051bdad5bbc58a3f7ee25f5f76e6d45d87660e2aaf283dcaf58b279c4aa4b241c9463d0dbab066a244ec08e856dd66f241aef7181a2389cd94e4a857834be683c45286197380aa4f61450c0ff426761a094349b9b0405c84a0136b9d687059a6b7f033f679499ba1e123729a738ac87b77b2ddb5b96ec2f6b54595addb58ac5cf15245adfb6938901581098424b3bd99924210fc60daaa0922ea99c4f7caadabd1c1f9431ecbd10d413169c3e04b020a680ff2c17481eb701943f44e4d805753108538b877e3592e5d58a3f9f2e9671a685b88df01420feecc918d7e67ddd50692480e0af7002f3ad480d3582ae3244beca76cbd03eaa599b3e0758ff7516bf06a147ac87a1ac62e1092bd48ee34a53da3d2a8d7126520a643c006334e76bd131172f7c16b006fabe4ba34cb246f5c9011af360c7f1e95d76e1af66c43fef7e8c7a203a42379c4dca30d4301a3ce42189fc2f4378a957abafdcf59262b07a1724f0a53dc145b52f240e33a80b9326429e9a349e2d3b9fbc592a0ea48201ba8f115696891bf58aabdd600a0296a46c2addd866ac1dac64e373178bb73f84bf16d5eeb5971429366adde98459025595d5f9acfd09445ce8c518be1199cb2421f57f05acdd3fdc517f276084b079df69dc20a01ed758827501ff85423da5d10b25b0b8d635a75baeacd4801ea28752fdbff05f35c47a9771f7b57e1df8d0af8ab55b0d1d080fbfe54a82ff26caed7605cba0f3a9ab3a241012ee85e7fcfeda78be3d2c8a6bdb69223cb18c7f5e9e5b5e574380d95c2ebf0851bad2acb58bc29f71a2a69a120b414579ca17029de2971dc276296112fe8ff480c5e03cf31851946a768d4bc7e09219fc4b4a78ce1954bd7a766b5facd0c165a7752ac71b4d7ca5b20442ab05af94496476bdde84ed9e542d807537fe3a97c1e31c8a922934972be23888f1181d8ba0354e4607d88f2f34dae9f7c88343adbd37d18cfe03632e380fc8ae456e989fb9c196c5dd151de2c70b962796849af03cf3f8a073dc71e47599d58c735c790a5a75e14af5c967b0835bd4ae0cecd7667a98a0705a8512c36394e49261c12294a05985c8222281571b776287e327fa39f164f771e15de9b327c015623dc0f7ee2b098847e1a64b72003ead7f50f7e39fa2c79b3eff5cc559975d31626a55ed70e2851606e84febf8f41298753ff99dd419d8bbb3460664f8521d04d0eeadc7990ba5cf707d764487b70d7f4d134d4dcb0fe2c979acc3331bcee1c0d93912abe76941baa6434ea2e7a0b6a4bc1f398f1c702b5f8602ce8bce1225bc2f46e8d495523fd0e3cab7a1621e92098520d3162b302a5824917931c02cbbc966b0a191dbab534cc5198deef7d60a89efb6be759f0a9bd2bf2d98288cd747dc0747398c6bdaa23a96e852cd0eabfe5e40cd06703a0ab004f16ab7d744bdec0da7e8505bab98b9292ec626856dafdb8dc98c14098a53c0c91c52be9d0b32001553f42274e8c9d88c76a401097cd252cff4a2bedcf9e91cf422b6d0a298229ad1ae93126f56c3e0c025d4a4a1d4f6239d3cb707eb13b0ee9a7b50f530fe8516ba6ec2fca201018b76ce26e8c56ccf06ff2ab742299f869b2b28fbe54bfb71b8afd1eaa1bf0d4bc072b46d237410cc12692bc6d139c953d32c2915dd25896a0222f552b20883bc9e85af4a5cb73f4d34d1c90401b95eb1fa9e811e3736885fa3a9483ebd20c158122bd740d32981f86110f06d8a361887f2e24f5f80948af269e073d73e263622bc77716ca3bd0677cddb3d49c418590a0b3a11e05f564d317d107b33af1dd83257785bcef37d21c7a249464052363f0fb8cfb3358cb76ac2489a908164fbdf93f9a8447350830647b8e377149b38de1bc38964baa4e880f16be7361f22926320b589df755516b98a20c790c338e83c3cacd76ab3e0d5db7277228d8b774409e2ef82e6020c2992cae81cc127eb62844d8027b411bff1124eea2ba92b3b0e99a5eb779ac2b9cb2fad89ae3db95e841fceb71fb265f79c81da8ef9d5bfa4b930e14fd4288e2f0efc7057c394f846400873a3a37254171ce14289e3e914f327ed01d6190dee58dcae1050e8090c227087aecfdf509025fb48073174d8243aa954119e7be176bf04d482eb5a25b2d2516921fa164584097c1f8f1ea2eb46b67382e38ef10ae3cab15c90ffaeeb4a842324a1c09c3e31ee43ab5ad3c391859eebf5a072173be5ee10a670e43c9d6295986e49e85e4a9316acadbc2eae702322a185de7b329c88ec840894ce4f2456b5a5340011ed52c1447dfa1f5a1c019f911497246af42a5810689c555d24005d0b3b8438977c6398caa8108d394fd11491a7f0f7081d4f949d1b546d74f9b797e20de86d1f276a2e140dcd45ecb100bc5ecb8e04219f1c36bfb5b6a7750427249f6e193aff969b1268be7591122eaae578869efca232af5cf105ea843ca82ccf8b22d2eb85197dff41e1194190dd2eb516cc79f8b9353bf772935c722b4e0c3e27da74c54660f1466ff501673e45cea9d3517232f3203bdf765f2fde78ac9ff177bc5c9d1e30055c71bacedc4f2271d3ef17c6fd565bc36f06e9451f341368b15badba104cbd5f6e36d2500a24872110387ee0118217d7d7d1c9c81684146ed99fa6eb7884013a03bbb9670065c40a85fbc04860c3d8f93f9475b8d0d9888fa6d7d59f5c90ab5ed5d1cba379e3904c3cbfa94c8abdb6a0de826673340bdb25928d02a288fdc3a9db40cc131b0239088d2ac71ee22f32489849953503a67090846b42d1c1c5a39541414789fb3013dc271e8af6b0ee1ff484aad06dfad0c4c988fb294bad942713149ab40fec741b3b1430b57654da6bab7e3aabc2b32d9ac585dd91d6f78a2418453f57383ef43caeead47f16c1faf3c9ce68b41c277f3dfd9707c5b44d4cd38322a88e791b048cda38e81cb569a5efb20f898964286bd0ae4bc743c98022ea2ead58decf7e38129f922d784ea3391c2f9bd302b91b177c49076c99a12bff6670228d1691964b0a16d7f61e083f5211d61e5abdc2ae3d8e16fc96eadeffc86d02e12dd9a37775025bb5cf14c274761a4cdbffef4350b9b675e956f3c56886a717d2294e1929912b8e783aa9b9a43c8c3fff4bf1b5ab38c85376de9b9e37d5c259f36af6a45a32eb9ab45d1570169b2a192ecf8115a31170a7f224f2733552236fb2279d79cc1ec457aceffb0aca951490784f2b65ec0ea78cb329ef1b19d1c898b3dd8b314b1d52a8ff08d555d435b15f3e744364f8c9f993614405a1f138a679c10281bc72532a2167c3adee508b68e0a4e1a166d26d75d2671c30119022b7399e2a97415c026af9a313cfb4d2a0e4f652a7255d4bee6db9f7ed74b65ade41d26d3e3e69eb4e41ff489322afdba4f7eeefd10edc54001091d91552fe83874630945ebb11a5cb5e463ca392b1b92e06d8da2a49f0f63ec31a209238126914d9c017b57c858322a920d530a37b58595ac5543c502641f1492c5a2b7951472762834243c4a8de4ce05cb97edf7db4a5b028393a6ed9e88226158dc58d984a9e3a0c89d695959a89a1f769bad2f241ec37cb568a6df00d2f9578906401d128b6746ef7df3e2ab97267bc052fbf9b0d0aec1131877c13acffa2eff60330c2ce9f2f23a28b095a8c6c9143d1531dc5d47677fb2655411be1d4b2f0e4532f84f552e6792df847d79680e01e36c36ce5087898d41a2f3902f9b082a7dd541538e20b02bc196529a15724ca355fbbe68509de2b58178819d7152b62be420e853b78b6d4b270f3c53078695561ad9c74de855a5c2b3c4042a96a4265510615ca58f847b646e151effc28f9edaeebfb6c93a40c8b31ae9f4c6bad57491707fbdcd02e0c60bb7a3ff76fda810c30889487f32e594173f7fb30e49f61f7aa9ac94c76feb67347f3b53977e9484cd975c48bd6b0726acdcfef8900323017f51d38f77d5fbcd086a2b3ace2f84e5e0d0f54461cd1b10844ad9d0dcf2f5c5ab609021ddff6995f34bb9011879486148687fb5d12b52ea58972f1705ca40583d847b1a749299fb9a6feb112db73be664daa95ac71c1fdfcba8e01fcda9d314989bfae70899814cee94f547e855d7585f7113485420bfee316141c867569a6abd37789586506bf823fa6fb9dc6985fa19866075cadb739bc5208cbe8ea9944ffac3780f16c6b95d22aa03a74cbd8b9d44509ecdd977a865114557711a7e44f56238a04554499e966fc5e08a18dadb7b50d534c970e5ac863d4e4715684fb9920375b2c5c00a9d836460c323b030e7cacfceadf2199d7604abc165fd43c3ba11a43f5855d835547d71d6a268baf528eb89972025e84ff02c5f28c923382c4eea00101fd04c0cc68362fe0d253334a5cfe77ad281f9be42051e0b71421ae6851ff4b1939a276d95fec1b3b6cedf0974a87d048de16981e4527919cf42816e5178706b9966fa7b54320b5836b976debf21fe51ff69ae60b0dea6ff27c20d67976909d0c41290817cc56f83512c43ad2c89dd595371568415b9469cec63f4845c31142d206bb581c9d786176429e24a01b855683ed6aa4a7d9e1995a9cfc562ec3d3b77932fa87f780668319aceeafe27f5abe30143f68119ae49ae7dfc6e6dcac43e0c19e5247dfd2f827eaad77758f27adf1f003222b33efbbba3c56445a76acaf406b0a353e2fe65cc31e306c36aaef8588f406d089d5dcebb26e00dd786a788470171d7d88b137c14c915a2772d4780d46685867dbb76c8d2af3ad2c1b6a477e3a942d54052dc78e92823a4823bd177706e2cddc07615f54a21bde4c71be6189767332e53596514f7fd3ec6b545567b1b18583e6bf2121d937bf62d973d4e41d91cacc0e89aded6449d4f529ca1f4dd5facd44538782a98e3ae61dbdef11c57b23e213d5a9b4702499dd61363684c2df8efe066d49a88ab46937607591b99a4b905db8da34399fa54b05b2653d2c1f89b9ad8dd466e7145bc07403ebcb6d9131a45cb177fa654f03f70c2d5af3b01b69347bc617ce9380cf8e75082bcfe5b2a8bc9f95b62106d880464c6a911a6a343abfaad7baf969c1b5383d3c4070d3540d201fc76dde9da49226347896955ce334962ee7a404712ddf050d0f49bfbcdedcc06f7a0d8f31bbe772437beee87a25edee6d4fc886e0394006d56ca30f02b704f0c3ea401aec3c3584558f7620ab82001a3ed3ad5b98fa154539de9450621e31b6c1b5853b482f401241bac7fd1112f401980b4b7aa3904834660ee571302f9ce4b72580ba370c8ef1c0c5ac4668bd103d1168673ef5f99e87317b9e9090e3ae081831dc7c19b74335b63509215944f0460b24d277bfe4c9f0c421f889ebc735a65edd9cab57a2d05af04c84d53ec7ca172afd548b6abfe733bc6ce19c49a24ff1b366900f6ab6f8b7db8b29917caaa2ef2bf785250ade6c2746d6058eb124c40b797e5210c516e736b09ca3a455701d618c24554961ceba02ecae21561fae45334b270a87200c85b0bfcf5edffed0da5711ffe41205331bfc9069e91dfb6bae18949f5fd8efd60480d5a1a2a625f3f55be188c58648e32f458520d57c108485c15dd04b7ca402c67cb33a940cf6e73cbc41e63989e95f037e154e42e909e36926dda219f57e15c0513d08c44e41b22a76e94412039b2daa9a508ed5b1da4c29d447de06e1d509ca2ce6183f70e7db9a9dfe9869c15abb9a18ba48a962415b3b6e57745a96352ccb02a964f5d964fe2ab2dc65c4ee5874563a24de3acbd5e305b3f045d0c8fb97f92a4d14ccf9a4096b20090e27fe1458f4dc2a56d22eed6797cf1130976261c8dbe74d6edb89fec307790df74fc04092105487f0420aaf26d55331a9e0a6d77446927e3ee37f8859b2a6116a93b3b3815a24efa77d69443403f2706bf1a83272e2f4f3cfbf4369b3b8219851626f58654cfca590ca2cb4d4ac73e8de0de09aac2269e8d2391ac444a9868f1d023e5757b6317338d25b3374aa5625448130fe958534b3bc6ce2e51b95bf42a11f16456d10edd3321483f943af6549e121dade2cfb39c7a0ca9c2be1fef26010042b46bf6af646b55aa1b227cf159364ca7f47d3e6f04fcb397f4c4b8d6742962086ad1324db5950d3dcbf7d90f397a3dcb8ccbce19d55ea60d6af56ffced8c6b5871a21d24939ef31b4fa3c0b84cb2e0ca3ffadda421c24fad3ff3ae95b89fa4078fa7ff7b7f7cc7a6246d836fab9610c0644420da1d33125f5ce0a8ba679d24699e5a319347151908bd03bf6147c9dbadd7b973bab3aa0870700452ee101aa713547a0f4773363bfdf24ce9b3c5131be122053dc616f0a3dead4de35865005437416bd5221b0ba146f7d4f11bd07fbb3b009413f57ec2f89f83881b56165adbaf9a355129496ec898c8863c6815382a7d0ad8372d6cf802902292e7a6bd68b5e34af678c56686b7dbf0ed9e6d77304fc471cea7552e257829d20a6336fd52c67eb44e00480cb9c12f87ab36a0e5b6b96817a85ef3f73cb7679ad7018f5912e577a58d08b0db1e97be5d57779638c5e3cd30480257527538f049084f8b4e81fe910929b4cccdbf2d672aeba791b6c47f9bf5b3bf88208571001c4a0ac6294935798467a459c65f6020223af1bbe0e4eb3db3c20d7a1bf3139a1f0481df8e0e381417b359589519d665f52fb65465027c3b6f1fe3d276d7dbf6ad0b70a82b38b1e70394898795c9ce2dd8bcf887f4f65bca1c09bbd31599b2a6e427218135a606d290454e4a837351e7853217d931d49fd9f227a12def0fc4f0732644cc9de78e01c474cd3be4eedc9476d6f516e4a7331d2ba3e0ad0b21e02fa68dc439ace489095ed870ae4b4c1d0114f0358db3c38b14b6a6ffdaae45161f272c75afa36b18c38d59c5d411037599eae8c96025beac4c59b1ce97af8878b7aa2b08e24180aff7386aec999bba9b9665b75a81f0720a56a7bc830370d2de7d8e7cb66368e7390137ec3488c80121b8651f9957e07da150196f22b6c409acab80efc46808cd8363c4cb0df0fc374ee9cc5db88f0b6e7d07bf2553c9d91931fbb1ffd818d8eafd959f90b8252fd2b1d6a19cf21a9270db0b92278f8dd9042af4c8581ac1d24e7057c45061e4eb52fc77205755bfa7348208e0308780236f6fb1770b55f0d29bd2011bdf56f2f1eee2e66b446cc45ab792eba86a7d071fb65c219b66931802d2cd07d1afaac5aba027d933704fb1726411038de7f64885e4b9a4bf23a35d2750ad370c30ffc55685fb33088debd973cf651fb98e394f42f1dcf09a3f49e1685879db1329cb3559ae949a885a712609253e39692c14f7a1b8a478fa5b986dd2a8287fbd96fbda91f2047a64035c3d0f1ea05685ca2c6f71a99ec210de939f69fb8a6ab08621e0140bc2c2bce9fbb158a8ed4b42b2f5b2658df404755688d88ddb28cc6a32f764b7632009215188635adb7456e8f56cbab77d9d11a16dae899276330fc23695b4cd2c22c1b5466eb85d5cf1822bed511d374e6deaf73ccd3fe58072326970158d44ad90dc3161bb7d16643e55cafb528120aa60846acfa4d57209a9ec18b4f1a25df98d26a634cf30d53144e5b04a233ed0bf586efd1fef1fa9543db2fafd86a523898db40d3758ff74622c11913af853b337fce90fc4ab83f7f0b0c9ae62c72d955496c4daeb8ce1e2c45c9e174c20921e1afd6326c2e5c562f31d82450a8e4678497deaf3077dca2b81e8c96b60bf805bd900f099bfb67a184bde13d6711911d04ce06c65aa12c73b82cce056bb3afc2b410ba7815abba8ad46c10c210288f64061852ef241c2fe40130efe463660ef6847e9f705b72a887623d1bc197f7f8cdd9e7da5ee7059e4ec6c98cf5fdc9fd0a43c8e48394d8aadeaf2c13e3b37d36577efac78f2c7d52dc92d8c01da00ea231387b219fa996facf032a811c539ac7e171bf220747a5f43d1f1aef4b09067513e4e08e7de45824fafe09d204db8904343b60ecb2847da4ee6019f8d2e03da4f5d9c94f065999303525816a3f454cc7a8e7f40eb66534bf6ef085797946720b8f5679d1d056a0478f242cdf2c6104e89832fd2ddc68cbc8f07c53c0a043c776c5f9abc815a62a3668afaa8131386755b32df809fcbd375eb54c575dbbf9de05234bd314145b8af9710bd3d4e0144a6d07531d41aa2b2c1eb55f2c6a4e6b718e04c5a1333cd2475a01bc89e5b313547e336c11c0c8c40a1c25692f4671c9a67cd51041e788b9923c12cbc48c24128c03bf254d66285a59ef8b12cc8fae4f8c2303321739deb52e5cbf4b0a64cfd59286e1ee9ee5d80307be50b4bb64d017edbb22f24bd07d2b4927436d1cb4ec29fcb9274c2662108c7481475e049de02f640a49116fb7b340c3457f78173dd45c83a793ba9aca58ce7582a6c84ea294efeaa34131e48a396648b16560befc01e7e13ff5aa54f5adbca5543b5ee3c85ee91245131fb31f2fc8b7129c4157bc8e93dfc58db526a6ba691e62b030f7aa158d0a6c8c4a0de11d559676c4454949e3354f277023b0517bbceb1075479e5c554d281877791c131a7244370a9d4c82dac81432eb9a0370f6de5eaf9b30d58b6b717d07c90abf4ccdb6b0c3d8fb68faa0a813c318668b574fad89e1fe02d67294c025200ac67040433bfff0dbbe92943493cd3f688e173c15509468ed9aa37500734a79534ee811a3806995f94801ada4710cb200c72a7bb533a35f812fdc9217466a8702735da414208c38e308ed7f164ad8568c15f77f564c7500903d965ffea293027b3f7ade5bf10d3e327d4d14f370a7f6f747cab691448c7f454ead4443f7fd419d940b8625b6f081fafa1c10b9890d2b793e55d0ebbc45cc1820ab0057006c7bd6dac49d284dc8f6ea2e5731cc227cbcb30ad02f14be8ecca7e4f72a9e3f4393ba635fbaab7597f8dd3e5732a948e4085d4e04c0b1af439879f3bbc84032eec43c56ef3d401570f889d493c2cc7470f8cb7c542286da688b28ae5462c12de2922cb40c0dbd9dbb5d4631455ae746497520019426f297bb04b70b594d6c9bfb8f70059422416c2af489b50f4fee0ff888d42fc258298ec6eede93fa873e0d4ebe0eac6823a78b8d4f4df173b83e3f5ae96b0a7635b7d68c3ba2973c58f0ff8fa676e59e6217105667348b4b086c7412be4a5b902f7b5d6692262845b79c9710eba9b62227e1064aa343867b8bb4d7fdb3e7788644762eb00eb04dd8b0470934bcf0b6f32fb767d70bca2d94d1fe42a69aca9702d1dab1ccf3210057917751f3ccafa483a905fffafb4d188398c6a2cc3db9ac7c289e2702179396f85adda2ac3299145f0000a5c988a8875125dfd62df47a813918b6f22a5696e18545b1b5911737228c40dc6833b67aff534e94603608678eb18f61a3261d9f4acd93e37bd0a51c7e7ecc189b67555240aa260922e25419acc50f480d03831cf0605994588b2d29ff4709f6543c349f9d77965a6850232d4bbbda25d5278ebc98b138c3b8efdf8b92c2a66aca3aa1f84af570b840b79199ad8671ace45cad5eae6bbcb0663e724b7a6e761d75c8a916eb2cb79b24efde9beaede03333dd7a4dcafadc4aaa8789268f54d1dcbbd9ba20cc87061c68d393a50db6ae39f43081bcfcd80203289582abfd0c68f2d52f59ebf60b7ed8f28063bab808f30c148ad26786bad8f22c1f787c1f2a0f5e14fead4394135fc776ede8d96549142448e070df3b6199ab5c0da742995e4035f63a67445a8e5ece69f9adda01c00c2b78c5c278eebd48c96bb873096defc93d180adbedbeb48ac014f16f1d4b3322fe937623c9dab7fe21921a502de63a28f8d1845dd43d82d63ed6c818ba2975f2b08f9e08e5c662a875452b2cf24a78aa8d56cb7ece5497c9b4bf4e09b09e5112c1d5732514df3012c59f04d0c9800ea6ee8d000ee49eeb3155bcead37e25762e7d8d89db3603c271790a1d348bf06bf4a1d07f37cd0c29c57de4a915556b7527d1e4ceff6fea18f1d5b0a44e662b36c4efae081789187d856acc06ec86a1fb918b04dc39b5aa64f6ec7fe81605809f2df35f093f0c2d15b7ac44fbb3935d88c3c827b604ab367e48f711439ae5d1125f27a57cbe2d73d4c7556e722e049f3d8032776106342222d2e6325cf89dbb4f6f4fb4069b068eeac055bc5797dbd2d504023b2660aa415a94b461dfb959e7fe94b9c2dcc79d8603b6939699b4fbaf76a84d9a4c0b504b03ba6de130e3a5eb49684dc76cbf9723c3c985beff9f758f6159ddf1d64f507c334315410f9921b8fe95f9a6377cfbdc7cfc59cf3ee31ac26148495e3fb22366ad4561774f5e3dbd1fc9f4bd58e590edd1cbd094978876721787b0afd11a9b9c179d5b81dd16d32d33d558465b1330c60f652efafb38ad565bb717d5c7fb76a70d91383b7dbf27ce11b970b8a8ad7ac4679702d3dbd29729ce3cc917056b567bd29edf1753db0527d2f5373aab24545fda80c2e8cdbefb47e94d3b4854daf9911a03104553905788933814be2a4fd3571732425978bfed2a7bf9291d3a3373fd65d0bd47277b60d655cef01a43dcbc789576654f15425a96b214d88f26e68ab73755041e7cd402a2c9549f770caa3fe9a79efebe0a6a5594bbb92b6f9f1fe2e330c96f3ada8ec75147ea4385340b00beac5888f1e4c2a303d3670702e61d6ec5b8800299cb565a38950bcd618d4dc4d2417692cf0a3f4c6955b0bab547493acea02f68048174b42e67f3c668cddbddbbfbd910349a3bd403703b046e2a1cea8f0c4ef36ac1cbdc0f4a420d1391d09decbaff195e74600e55d95e6f2897e80e52b2a62fa0dd52b5f82afdaa357bef8c9c56345d1c519c59294a5bfb828118b11d139a93b2037e892303119e0c933e43f74221603d7d98b6e1c2beb8de97d0f44bfae2296ba44fb2449595b74d6c34b1ed6fcd09490982b6c976f43be07f4df2dc330b349879aef69926281ce8e92cdb674c5197cab425c73e94b8b5bb69ee13f02ea80863ff3dcc682bfd5226188c2adabf07e124c82b0c3086123d6b660b3a7cb7db6a65448bf86c20d91dc5be35b96148887d50d81f60ce57f5a887a456eebd8ac58efffbb3c8f0e5512da3b2a899c9f25d641fb9b6aaee5e7fb42d1abe1118b00ad179a846c1ac0eb34ecdeac048a0ec327325385e7350865068f9f29758df112fede88a44c3ea148069b0e320a156bc581e23a90713ecd9dda071c90a2b09674bb69d09e2acd6594578b5cf0e041bf97ae50fb656733593116d8fc299e89b39d5aefdff743fa8273527abb5499e07d9bbc267b8843533c7e280fe885995b8ba04d605b57013f1d460f76a71f77b7153d581ce527b0bca71b046eb7641e0253c85233e33893314993d8664342179d7bdcdda784be62ecc4a64367ab28fb768a0461f61b4b1d4947bf24de93da587306592249a82f8a579fd8aabf31d2a3d2347fcabf5621ce24f3c580868802d54ba7c6b18218b308d104ba5fcc1ce2b2302c6a242c2b343aeda6bfd5a8a10ed11a134e53d076f99b8dc32108d6078de7732a748e5c83420029f892293a51ac385808760adbda2164740966a5316d741f64e37c737cb488515edd66989fcfeb53cbef2e2bd2e4712659075b5928715846a57b505075481848ca1e1883337717b508c6806df7a6ab295e864f063da0a46389d6e20ea12fa28fd6198c0aa5ebbf7109319584b44bc4ae71a26f78b6e8025e35df54122191ce108212142afa6af416b44697fa857694b62dc8a4f6191cbb8b64b3cdb9e9dbb02f292e7b0f7c64d6dec5a151b1557edbc7fb63195379c403033c84fd9cef8cae6de3a41acaf28ca3dd7a82815f5037357a832b06defdcfb820361b487593b68d2f6ac2880c95a8b9300f71cbc40bfe2d197c1956df26fc9870d10c01435239de1c31f573d993b99fa5808d1b6123b09fa92df78daf53c32dd4b24e37be5b973bf4b18733e164d6d5b8a5aa1d4563a1e0e32f5aae65cba8ce08a713c6806135cb5ef47cc58a1361714caf52f3643ab6c410f02148b7a2f7ebb3bfa6282978ed9af845e4ec4327cf4a2390c768aef634404be09ac45b019b3d4d5ec6e5359274ac73a32c4dd1ba50d2905e68ca2ea0b62f19076bbccda81dac902e970cfe40d73648f8aedab6d0416045dfa532b3f53a97595f3f18a01ef42404c88721bdba6914253f189c1da697bc787856d4a187381ce8882c13d4bbca37e73231c457fbb314885bd63d152e2a76c4b3ce16a92fe83282485be1978075270079cecba4da456ea98370b51d23b84277d8d873ca2f51271678f5d8f244894c2760af3c73a98779a452541fbebbef93fe949218303905643970932f9297b67953f770861aa4f6443c1bb45f2c8f0f0dcfbcf8be1e8acc67b07ac8704b25d4ec39042a1915b5027965690d1baf321bb09c347e5b5498e17075e61e0ba824c47ec22b3e6a02ae805d294cc62c164e2a7cfccfc316324e44e4fcc3b8cd89e15bf5a1f4794ea39c47e5ecbabc33a439b9ae8dfb247a326041d484556a48853adc4a490b2ff7487055c56188ac65c55b81233390433a736b6ecb73b6bd5e57f21f69298a0d85c6b0d0d4ba61e67233e8825b2b0d64a866123400d8a5e875ed2b4946ce1b7c0f76bb5a1bc832d3bfc48b6f1b600a5ccc3e58373a37ee4b306ae37e5df305601ec0ba8225b472b58f52644de670a296a356dbd03001d8c6afe60df87e4fd744a2a9bd243798f368e7c81aebda11ae06e47133ccaa6e63d4004c2c4d6e554df0a6eb286beab4f5f3c9f8f09f5e036b5871f4b0a097356fca89eeed2451e816aec26d2510b42a952507b5ef2feeaa03adc51ec2d3e4b007792de8a0f6dac77bc44d51dcef096cb1ba923a2ed465bb177e918ba966af541803844ee33df386f7681eacf74a45114ec754329fa487ca9de4caa6df234bd45fa0656e4227dd73e043d29085724d5bf442efab12b8f0d3e2a05d56710d7eb3664d60391d8d039306f2c4e1851c1810a01abd0a9bb4bbfe45e4f9832f4fb73b0d3e4a997f6d0c938a4ac2be93e3089085fc016e720cf8cef1d7deca7410b3b43602320a5b4d18bffcbcfadac6d71dbaba0e2dc3821d3abaa0a69d50b320e2a5bed891b02e027daa229fc8162e1cf740833dd5f44bfd66d7168199d65303cd49f0ca4cdb8de0894df9e0790d4dd519e8a06c29c3b78006004145685aa92fce7cc4841f87be29818b0829458456bec143c1e4b653bf10a0e8052dca2313f05d35c8c793a0bc7c13bd88d479e8d857ea38a5a7a41f1ef9e06a175d7c346cd9fea5451f995c1340e29507d5640f7eb5983322b3d85d15aa5938ca06fb82fca6f9c257cd311f2b5d5592c7034c10ad53496b5461aa8bcdadc51f149abc9279d6818eabaf4a05963943e10a3cbef071d7655c888f291a3f4b6d84be327a2508d241b5bb979c669131da1a65ce97e5f82f7e6d821538495e9c7cadceb08d4c2f49ab4cd9ef6476761eeec7717fb314687513d441c013986ab33b551678b09407ad272350c11e3cd70b56a8839c795b649e2f047261183e7d97e5e59fb0044f47e951697fc43f540cfbf113488d9c0418268917c6d8ddfb583d82ee03c3578a166a5d7f31edd17b5f60da1eadb47a7e090041f9f72c39494a7ced4b5435db560433ab9c7e24f962e00c8e76d187d4c719674f9c2822cf8f17ca819eee25a6954278e0078013462dec4810d1f06013ee0146dd58fe6e8789ca4a68611c1d6ed8ab48539ec934a35652d3c83b4bfcc5b4ed396be7b8e1a16ec5f983c5fb9bfba05ed35e12bc50f1286bb4e57ffc57019e54711f2d89a65859cf86da9c2e34485ea1cf3285702292a507539897c2dcbef987dd8a0d504c1e4e47dcec014c744485f65118a6fe4f79758a7357c4c089ba3c4d993d98fdee0c2b09c75ebd2ba401601ac8fab6c23a992e03b207a72e5de8b82568e36af755a9df18fead56547cb1a7717489e2ea48e1f0812b4237939bbdfeb20bcc3a47770ce6d869f28f185c4e61a8ee88cf17637a89c0479af11e05b1c06168b0bdfc30774d61ff1fab61d71cf170a7316e2d65c47523d6665653314c3e50dfe5a7af107250107f5c3077462fd45e40728eeddb02943785a7b0e4518a4cda69118fa5afd3fca2f430193fd9e3226c50c8f04f61ec7bbaa805072a07747d9eeedaaa3566b9b29106f7782f073ea0c40f824f952efff62fdb30b00382dcfaf5c4ba9a3ad10009215e46f95598dd0fc324bfa3876b8fee5f852eb0ae62b89993923e44e3a527d46e5eda18f5ef7a2fea91f3f9c352d5dcb8646dd0f3120a19819556968d874fd673e2417f75b4934cee209eec48e26e6dec80a55158ee6457621beb4210c88a87697307c4bd0738892aa9d74914a04c177956128d661adb1134e3da92b6c99a33b7d964ea77ec830b2044a1eccc19512836dafb8b60cb90d2a5d4b3a8f4654c0e070c3ecdc64f0f32e6817281f9545ab378203e4c8e79d82026574c96d1576948714aed85354ce21191cb3ea89eeeeba26b2ff09e9594df07aa598974445b4b3cdfee1069ee1478d29143075f2d6f944eb7f7ede312f0c077b93beaff0f29fe46c7d583b738b9795a2a2e7b9832385d18775bf0e36d6d286bd8218b12384d8bc558732aae7ef8336f6cb136dc9fa2debe5e7290c95ba64d8fb86913be44976a641d0d905a73db3d0d90c67441fcb214894dabdc74addcf69e5aed72bc4a758c33e4dea5ae3284d285df35ead7024ff3bdfd31921ea71cff6640263559a472b6fb2c2e31299762325c592d77f319eace47233adef92504160723e8cbf220997cf225f46fb062976a29ce920be713948c54b59d7e5f9f00b78859aef6f9919e4d7711760b4af9831df982b2b79cbb7c9d7031a8d194a8b9e667586b127b8abe038e4263b3009ff2cfb06150fe66b51e63c9558db2784344831daf461e9bc12251d87ebc6f0aaed391af126a33e00e82edf612ec2429270f2d00cac682ad7c2bfd14fd51bf214b7ad6f84d2cdce7f5e9f9165465910e3c11f5baba60ffc007f7b0ef183fe2b5a024cc08fdeb556b9dcb907a02991b7299531a28a4dc851686132bc92788c875bd65f5b76b34000893e08e7dd4eb280a9c31c2e2bb8ecb429baf83fd75929d3dab04b3a07098f0a105d88fac8b4785def0d113e4b1fe87b1fe3ce7d3f28aa7a86d53e15d54f47380b4f7b5ea15f8ff7566ec0689d3ddb06b346c64f70e3993ac21fcd0190e03188ebc4941e64ee0e607259bca513337f3be6cdbad81652a497aea6ae85b71378037983139b13ffa649d220d42a3f6495de55e48b440e5f93ed2661945fe08c06b98da00562b605d7562df6d601cce732be0363777ed76a5b97f9b79c3d66c2f958ecae42dcac7ac29192ee627011fbf3825a104fa0272fdcfaa0cb9516d0a0923e60a1da1d284349854e2e3f52d23fd6496f2a6bc2f107bf9018150637666e5ca5f3ca7f19affa2e313b75dfa0c3134ff02bd6754f4ebaa4706ba513e6ba5f51d9b1c5b0377f7d122673e4a828055963edec23cb5bc7cdc98f103d92f3f4b5f2cd6cf3824da98d4f60b0f9736274f583b4de7c2acf74be594a3f08f9c6ebb4f3ea7c18c8cc2502cefeac7b7133800e2f6e1ca9804e7a0b4e143ef5449dcfd10c2bcce0e263aea605d56e3d9b4f88f5c3f9034df26c4ebf67e0fbe1aa17d91221bfade327f2036e45112c6887d862080403186c614b57fc3560abb2845e52b5b9a6dc846beac1f9816f69efc725b160c8f038f711d4c6502e9744e5619fde754776979b321a45a0e85177357d27461a22ff94983dae2fcd1226f20e406f7969f2473589f6795f81a5d7eaca70c095328be5991fc8d6c755ab9d7d70284a9d1d13e2496b1b2a10ee13716eea803467599b3f0a3204d633d49c7ffb0e64cd46ff36df0210551686da444127100c90d94cbfa9d9a2eaaf54906ffefe0e776fda0f93937abda043b9083d39b2e01906f85a2cc637b7c19fd73fadf7a4805964f883e9991dc263ddc4d25111ce0bc0e17c96900cbc82b52efb1d9864a78f375af1f429f073b3dc76b2b73cbe8af1bd03d3b65b48b1cc46f8905d5ba66636e36db7960873bc2a6bbf5e592ed6c3b8a8e7bc8f53ccacea739ca160241154cb6dcab6d66c0fd22ebbf2af0bb7d018ca2d772d71a109b7ead8139fbbe86bb9157497e0d7213987d61cb00e2766682aca1a0ca05542ef019d18d05fe9d094757f3591b0868a9ee98eb098cb1e1026eb7ae4d00c5afb6ded474a867e29df64ddd332241115cf3051ae7212287f36fdd4c5d0c2ac3a511a7fda477c053d62f42024e1e74151a79992774cdc75a9aadbe57ed44f6411fff8f828d4976e037c4f4ce82cbe9c1a1342f4d7a854dd8718d654244e46ff39caa07d91cd8c5f7200646fa6e239ac77ed913dac81f68f3c46a3bddd7f0ad78fa28e8dd4cf94afc5ed0a6e125322f82fda9d5a46ae7122971bfd0cc03518c251e3b39978b6ac04ebd20df7095696ba9f6e9ff3307d57599dd75485355db09f98ebd510035760954c51c7bf1b5ccc90251d2b72a8aea221208510c6939da621a6d6b099a620c5e16c14eaa92f81f56940f0425b6a45ae6e9abab5edd27907adcf045355408eec0a91136330ea8fc3fb41faea836f73cae31a7e2fb6385eabce05f44b5e8509a11898ff97a17b75935cff1e407828177dc875332d93f73391addabdaa8ce59b7a9d8e11be43a598d1155c467e74c4906e40660c7b7e1475aa03b0ed0381aa160f52aad9a79c8004978f000dbf22f502842bfb7b08521079480fbc4766cd92374461e2b09f7e041882c2d0cf291246e809cc0978f81352ddc7c4bffe9f80e39648b306bc18c6e7ad94159cd88e3eb5572ad021656afe1f0d24a833913b46a21564b1f7edfd55b406b7d1a8c483165823052254a3cfb64b1db63b51b770a25ab45b886fd2720a49fa34443fa85b9db833afe8fac90226eea54549067bc6e183dee9b7223a3d5a87e15016222e56fdd1a5772e64bd46b0719897422cb971dc4e6a6f06d3b8c3457b148d0084e7729f0acc14eee6cb2b80379925c478aa4483a02d1dfa74c13d6b5deafec542bb56c21e7a7070a6b2176eaf8cc9c4919ac367e2e5afa4a8489c018bae2b96aa069e9d712befcd2ac9002dedb979468a2ca1779bd02479c756acf8911653555d64c4f6233d1869de2df37f2499f64cfe16ec2aba640c3a11435bb0d3433b00cce459eb5425d0f44a773a102e876a7d227a7ca84fa5c47e11edb5ab0122cf19dc929859e464a12654474e9c3c04a43c22d2f6ec4d6f7e8e0375faf30b51242da79ba8066599f94abb01b4f5e68f42157e6d5a2e1ca8a497d04b457908723d858fea79d74130b6c143b156c1b2170de127442763d3b120367e009ba821d9bbfebd24bf199098887446d8c5240420f3cc45f74b36a3d60a3285afdccd102e7ef52f4a33571bce87f258890ba88256223df4becceadd32df41996c878274674b32e4a515afc112d08443ea05afe65ea1d5e07808a82de602dff853f82178df91685b1e4aeacc0ba923946b1109462afdb5c86ed7b4cfe7019c034a9634e72c024c98103a093fb4c81fb7eb83121b1e1deab19f20c701498051e729d439e834e048a04909a4bd47ebe30cb9297f313a3647c5a830678bbfe1b70e1beb3a1b72d1600a54f9e4d663b7aa64dacabde00355d34896eb9f6fdf3e3e8e32eba4782bb5b7a9c616afb1676531a34cbf5dfafa57c198795e14c6ce2cd8c4fee9c69fd9864531e600a08bb525f514912d37aa8a98689d2eaa76848a173bcc2a181daa09eca53b4861e2424bf59a1a7738eaccee548f5b03aa447673079ae92a31764e0e423e88255a353aef6409b77496c6f8b73f26a36e45e9dfcf5b4ab34c88086433ecabc920fd7ea9aba51c60c223343a399bb77cbf31eceb025f9c451ebc2e1a9011916e74c3550af77ea2832ef65f45d9ce432db6d66fbe2bbc5a691d0b97e9d9848a2bce7404cb7b5faad71eba4b16963b3abf12c89c2ddb1e18866bf5e9626bb5aa25276373eda5371d2ee2c3f085bd144e887fea18691fe176d1171eabc9ac0944ce71a1342a08c23e28ba5467109227e84fe799c663ab0fd37cc3d238838beadeb8d0304f6c3dbe6b5008a421d6d5427e67bf0b2db1f6bdc54ea39b6ff4d90201620a153e00144ca294dd9726e52369ae7c10ea42a5ddaf7bc1e266f89bc8d266c7679868d78f7d795ecc689992cf443a1e9d1b9b69c54c69725e6154b08591a293b2075343a1c5d49114fa67854c782591071f489e617a20e02b15b8c837bc3c58724b40185ce9f6ac32c39df68c7ea5634f0ebeede47ce27632360444430f60bd014fae52715af62cc6c8971c6a19ac9c49e780d8afd87c059dbae1529156ed9d597a16bdb59dcff05354ef09d1e886faab440074b6d97be98106cb518971e6fdacd6ebfd44ea59042a24a62f22f8b4f342e4c3233abfd1e2dd299c9ef055bcd2087d0a47fc6ca9ef23a09aa790226b57a89aafb4c3ec3e321f5edbf36b29fbbed3d62ff552181e4597e7cd57a9d0fe65617957b69f1fbfa7233988a76694a14011c8d4713b698a0c071f989bad25c2ae554eeec5407b51640574d61afdb0e556f183ff857b9928b9ee67aa8d5f972dbf4797c799b4dec480034e65d3a8a8bac21c946597d0bda57289a49aa84ca1d5033ad9cae8adb62fa3a27a7c613528e032db78fa8dbbdc5d5102d81f34a01cc815196c56749f7be276912a04c14b0c05a74aa131e7349d6e05f139f055a9367459d0efe527892ca228f7ab1efb5469810495b54f587929029987f44f4ecb9a7ac4949866bd22c690571ea8231b093215209e8815446d0b3eeb2096989e007d0a66208ea914a2fe451b08f7097f7c8c36729b38f1ebfb6ad7ecf52fcca411bf80c2a7804d655f92179c891bbcf84c26d596ac0fd2fa111d29d24202589ba02ecd10ff406eee2686068e861542d7e9f1e7c21057dd8a86e468332db357e92f46e2fe209a61d5ec8c61fa2d8aa7f777a8e388251dd49c3034068e36a0d92b68a290b7db5862c366291ef5aa20acf3a80a02d3c833ffcdb583ea41cbf0c3819e58a10b006f3950d5ef87d3380bac677305b6c45b9c75e2bd45fcbb8cbc740b52491e40bd77adba03277684235afdd4803d0344ab44228eb3e0b22fbd6908315db57b443573a8b7f1547e577e8611721e8115a3200f97a9268b081b0d0c4cb60e394c0bd1413edb0ad602891ffa12355024e08dbe9afe2e752c0c5851a35662a7632f4544a859cbace534680db044672bb026a476210a52b0e494adcbb1bf248e8b3614647089656161783472e0c3464a2bc28cea9e9a27afa1edc3b7f70c46136c2a3085283054e0f9375eb3f3ff03dc9778d2463781ef1eb232d5c29edd3b024576dd95dfe4d2ab64d4ae53b02be44f878075a0089fe7c2209304cc52b6a1af5f6dac9711b0476b970abfcb87893945fef665344b968a5165a754b77d79d2f3627886c347ec41ea09cf01df47e258c938f7ad1f554fb99bbffc9eabdfc8a7726abb52a70ca991ca284a6ca282addfde7add07c2481d384d4299a8bbe5bc038cc0611133c7c393770e4464175954d1975c8ad6b7e09c3c60d17b462a3050ec6b9d7615fc607ed39ec71883cd059fe964e2357c805f7a4a4f81ab9c822fef742247db462cbc9b05bc17d874a902b8fc5054da6361e1b9e90eeacd63413ae3d3da9081f2eda4646586a36c135b76eace62ffe7cb777c3a5fc0f4351455f5f37571ee95b3ecea2a4edee9373ad061aa39f27487ccb830af6cae5b94189b417da116ec360d23567340dfe322567f23746826cbbe48aceed8159ac799368ded646dd7de604a0e3a31703c6163ba6bd55b4d5ab21ee5ebfc3044ff954297ff422d34036ca1d4d23eeaa3ac8742108c5f76977a85119f22aacf9926f5d5d5d85e4882af583b98642c735e30c76e1dfac6414a6bebab1f4f5eea074ceb27636aca9c8e530eb484c6bb0abe77990905d09a68f27621a417632522a08e155c12e78c8299ff603f1b56b3875b14fb27d6ed6f4a237091210a5b3d164fbdea9157125cc9d19203f4a594000e5bf6c5a4afd60132b5d01ea494558bf092ec19c147a679d73c67546cf09c2ebb59baf3825c5ffa8c23027136899017525f7f524b5b31969ae23f0fbe30c9026289ebd59ccae6321998040425711a19ebfbcaf9f9d37d3e71dce3488a4682603686fc602c0e656d9e2e61d7f5612a76464e53a543e96a545d5ef3d0664370a03d9fc3dde0a14c5762aac3c0303697adcc363d19aa03b0208f3bd4b91cbaa8a3a90514cf5cd33ec841cc3452a84e27efd911bd9ddff64d02e457c560fa62672bf0f127d1f5eed8b955e3eb01a3b714e579083f0d8b78df5cb2353909a7e2a52e5fdbd79ff94c1438666df70ae57c1f5c78f4bb4a4e6e446f1a55ede16525e3ea89d6cd6cf6197eda38498da980ddb1f07294c18905667185f071a678acaf77c3063eac45d4afb57f8561ea536c504baeec8f3b0481e378d3ef22c957a6a62477447ce76bd82bf9fcad328b62005c3600e0fc526dbf07050681cdad0b4266d567beeeeef85f409fd7786f63760098f64fa6e5c38bca55801dd0bb74a248c4a83dccc6ba147c3d979f463ee6f17c6059b1705347c91628d0a6292c69cbae9db363d1346db18fb17d3fa536d0387d46057b439d3a3d1661a277edc4f1fdddf61cb24ee738c73c4cbe03c23962a0cf2c82c523f0eb94aa98bea9e2ba53a80956ef4dc454284e2d99b7af687ea7ffe469f65790a14595c662269687ed4363facb739c2f27a0426bacac41210a956f905baeef328ddf9f4f28ad314cab179cab6f56afb274b3cd9e89cd42dfad784a66ca2933b0fdbec67563db6dd384a2c3fac6634149888cdb454e707a700e39f3b64bb77df445193b37b55d9d154c1762cacd822b47e427eed94d622d28fcf78fcd6212bb7567aed961de84683cbdf60e7b8d7e7a236d73bf7b7c77a0b49c3157e1ac2866824b3691dc8c8d99338b41d689ab5413b3423c2bf1f4a6b81c2fda5e972e5b8094da3db781b42f8c1a79d1691305d15e340ac16d99a2568737356bbca5c94051fefe58a791b5f24140baf6f0102d634bebc33076f0643de3d53dce983b10f3de1020a9ccd4ad15131830b776fcb7a07d68b58b0e77bcfdf3f58927a53139544dff1aa22b4e7682f808b68bbd323d1d01fc21bcda65514835f96019815d26b99f30f7731d1354fb538fbb70338b3843ccda3d44c44dd1524452ea0c1ebe39ab26d86dcad218186fb300c8d35ce2ee3ea06ad0e766db5da2c5842cae4be4c4cde061622f175831f37b9838e471d1cae3caac55cacf5695ae665908fdc9639ef6a732afc8d76cb816c685508dd62d6e46096e5e5b4f484132995f67a501d32416469e480102ed6e31ff702f536b3c875f9fcad46bc4fe1880d8ebc32e2a5f486b4389de29ebd4f78bcdf6f50d7bbc511196d49d851609cbc990685c13f65abf9331a0c700643c00b02fe42613b51b0b1c613e6a3fa2f2e512c5d8b19f750c4ee2da5ae9bc06ccb15227172cdde8f80b33f43a3e6d2f1cb307f282483c83a653fdf33c45e478a2fd8ece957c186a59ac1896112c5f1753a33d45f52f860acc20a25c16740de30bbd0f0ac2212d1410c52305b89b0ee456067ed575b6e0585fad30a6ba758a0eab8ab98d93e2d7f442037ad073ab1602eaace6701b0580b176d0c1783ad5457dfbf97cbe07013cd77c596b7fdc35941f0ea2359da5c5e464b7842d9c1a2195c3704ea091a44e80cf95c90d33a493cf10b9d197b3f63380a12d578eec2bf5e96bdeb0ce8ad4077c9d2eee448f57c2bbd767bf690b5f219041077dcd6a75dcea7fa453f454d0e73214dd0e4100ba332918532119cf62b4a21fda38984d09cb476abd03f11fe641122aad760db72067c430bbf889003b40360e8872a99430a1de2d7ad0d3d1e4d8b041448e27368a91c0348b19ca8e37ced8e2a0050017e60771ee25676046f0583583927be6b07c4cc24f76f393a1a4b2ac48076883f6c12b4b6030b742434319d42db6557d308ac77d489852c5f43e2de199ad4c29c6d10c2073f6924f9a78618f0b4006e2f8db282ff8c6373e140542f8427c1742d676a93cd04612e2ae7124f156aa1af26c3945c8744138c50f37d44fd405909b16ab8e2a693c1a2ee07e71af8bce5b7545729aa73b9ab2e4cf7daad7f0586c6d18ae587576c454dce90342e1329385a914635b17a7d8cb1cbb806c1e1b9622b5ad66d672f78919f77302767671037d909bd7c76f78ac68b4a7e9897b34bbdec51fb23198ed494d8966ad6402493252d533b1cc3b7329be2d35e6be76f13e81d7796f485ae595f16b0bd92a1a55647908be389484dae483c60ab70e417dd6a7867a5dad723cf66dd52f0f5edba7b232f0d19dc04cdda537e728cd4d8d971f31ce827254ebba0593947a3d26758bc2aee12f7a39fcc3821738f49c5be0cabc05b183ba5e1da2fc00fbff21aba54aed03d542ed3d872b7ce7344fdb29c358f8f026d186f91f0440a68ec00a4b0db5db1b18340770020e57356a327817a073fcd181546b40468b80c3b8ee4dc398645e004f54cdaf6be20389f9173f7b034d8acec690428356d64759c736deb7ccd3f84b60af887eb4b4933e068c364386b6a06ab2f16c24ece675f9f82ef8de0a6c78e04f8775f17321d85dc42f59bcdf193d0d7ae4e6cc90c83a108c8cbaf7eec94b09cee0b4ec69b00bb99346cfbf69e321a4beab98f97cdcd8617878e041a8d31323c5ba15ff0efa91485ec06d9c8e2cc7a1cd1090738d8dacd675056a6dfd1e6e1421f37614a6de7df56166ea5983b96ab5f9163283f89cab6c1ce9d2effd94f0f4d99c832424c88917aa3f8c39bcaa92f34117ce6e40d5f0d27e1e9f4c4aec805ba62379db1c8ca65858b437533e8d621ccb37b334b3e05fc9f6a99c960ca4e00393b8a826ace70d9f892c6d083d9d95c4e6da4b392fb8e8804b329683885be1b58aa52c1985990bc0e44b3c79a429e6a2281fdf145229b490cee3c5081f56c716eae46c322642e63f840c92fb939117ec3d255015cdf493568771bd911616784c2301199350835170b484b3a2fcd07efbb7a9746dd8d8e1cf2d834db0be7d26effbf165fa7bc39d8c1fcb250afe9b060c72c83ce90df47c57359e6e90888f66ff0d1d98fe44b6dde81227b1e79eea1348af99cd9047eb6c0ca1fc706eb6fcc5e0b36c9c5d5140c03df585037414b9345534f68a81286d5d8c6740b3d2498e3775f23f6237c70e15904a749d0879063d507a606d4fd4905968ee23552b844106722e01048475db3c181493ace85d0f883139b9b51a6d4b8273bce91203e85ac1a3732ff1256acc0657f65a06180d3c3376537f28a67b0401067ad1efa752022d5b747d83189ac3b77bfaec7ec9a61a1f14a932411e9305ee2db58465701d479b028ceb43018d398e53afadaf9b0598cc92de689959cf950413f6df493221f0036e19385a14bb3d50656ef16f8e3bf605c60adfba84282345ad7554207a1e65956874a3c65756bbf236a4342ce6771bfeb532c66a8adf7530460e816ecdad0a0c2b6599a65fd9b292a0e4bc622ed9ff6b22653aefb3d9a877c38c0663b70756f6f4827762c88208e7b889a778fb53dae6bd0756b2067ce4da60111d1cdb69e93c52e619ea5daabefa053772fa8f5bba15e008d57ba44b3db3260ffa9abd7a4b8ed69f15bc08aa0fc6181544d36c3e2fc92c843c67dbe451d0c9366a6e0df12636be267bb208fe1c4799f8affa7d1f6ac7839be2fe3d63d61aab4f8eef887c570666cc558e69f9a11e54efcaa97c51f2d1261109dce46f16f564f02e932f8a9215eb0869c47b2e99d5314a923f165c2db850149d83649cd7b1adc06e5aa64019fc43c1af2c2a163a7af53ed37652e4c6228ac1b20e81679f1899a66f774ccca58cc200634c6b6aa3d25db7b9f96144afe6651af3e4c3ec23b10bf2934a1982ef5de1ee1a2c45f6d26d095a8c089f78da85408f0eff1c3d8046e3c239edd10c7cbfddcbea3c091a06d1ccacc52f3fcc01e4f3e2b34acfc92726dd1c67f1f6db83d6beb6076a24fa0eec3bb6dca94e238a26fdbbe0e256d339031772e38c31b732ac714f3c27103df1b2883d44fd2d8b9e0405f0ea736509643d0b269e49f6692951f97e3df0da1ab774ba27be67eec5cab0b5a42fbfb95f6f61e4451f82f51e7c9242183099b39d08b6175efccccda5fe06ab67f435b2008a2f737332d72f71249f355073046be80e2c51732b2485be912628d7fbda6bea2270b32876b51f8f13511f6dfb3fbc87b33c109237d6e590a1337e987199b7509b97073e69fea4366e2dfff58b6df74f537948e8c5bc8c033cc1b2d7c40fc633b2cccb3d8e4d8b0edc8239b3d85bcbf4b02ecb66b70cea877b1cbbb943b86531218bd6585283af739fbb37a4d6d3354a87507693babe0bb7c047b45fe2466764cc13c4d48b3c032a67098a895dbdd4a7370e703a3cda446cbeaff602184477340dbab53de39301e7e1dd5e3a84e5969898822de4bd4b69c7b0cf6d5a4f04ceca9de26005d6ae723f90d26b858f4475cdbf6be4ff7ff697c393509b57ed33d2231fcb1e4759ced297529a41c080115e9d21836ab939eb550681e08965897dcdce32727cfb5fe7ab4ccf722fc8e3e4171e51f463204d8e4c5845c8b7823886279fc56115d352846837b2d8b76972e20cb081ee5085fe26b67b2574c4d1ec1b6cab3d93d8aa9bebfaa3893118a68f388781728b04c6ac8ad4e87e845602c45a08a39fe6f954443ad41d1bfc0d1bcd6f824c080f871cdc8fde856ecaaaa290ad6ab092041fe0908cd6b335123b1a2658b9b39f98f787477ca8b0c1d980acb0f355f47d76813715e2c6edf7ee7c6e59dcbdf87a3e1a42865dc1d8c4896a689cc47191f02a738673de3f28948900718ab9f35696055b85d9134d94cbbb742438ec632fbea2f5e40424a154c101ce20d754812285ef70caef45b291232e0046dbe657050eb3805737672b7e195ff22adae9fb76a787536193731e351d70e972cb310c6ab3aba08b64317b09d448f0e032d14d9ccd49f5cc0fd58650b178d14181b34e0d15c015b8969af8b0cb0823c7e496c3f9f71392833736aa51a5b0c32b497cc3980f3ac9c9a9aefd9807f3c53beb088dda10dad8450d2ad45602554d52f3281b99be2b17266ecb18ea28bcc0c04fa35d41c902351a4bfdf6fccba87fc853a6bbe639373776d9a534a26c0dca89caf907efd590080b038ef500f41e00fe6e70cf38ffbae5c4da0d48b83deba1c1b78d82bdfd9c3bd5bb14692344366f7cd5396f944797811b0e184f66684f398728a613943fc4bf11fd7c73f7c2ef9d44c3201f5b9294773fd751ffec41032f72a8f61a8ccf0e28077df72603440042b4bb52c7beee086e35c9b376d2d0e52c60245d2e57c542e7bf04090c07325cb83bf0474cf97bb013ce8d8657442a1cb87703e64f794da66297792d38a701b5254b460ffa7371ee06771643cc853ee462de7240c2c0c5227553a91601778a3b01ed4e5ecf1f064ba488995ec728cfd0b135b4b71b4278dfab062c131e12592f46bcf4966cd44874538579b5c9c8dd80a7d9a9384b4b8b1f2f003f7cc8ae5b4eeb717da5c0af8f0dd6a7c14a9bd10f7737c5f7215d22649fdbafa0efa7d70bcf6b960dc387c134bd4d3a2601916dc5ec273d7c9dfc050120c2ff1b6ae9b2dfc2d9370f865653e12180f338e226ea948551baa034f49725044b2a6bc4a2e867449431e4a8dd3454ad3fe718b4ae2125a4bd169651b58b2f49da7ed425cfd6faa10590aff9d19f9fb88e7005ba4fd8116f32cf4b9c43afc5e47c8e04c8e7c56f85dfaf0c6740d326620035234b2bd0c0e2b4eaff835faa497819573d106cc21eb875d7b2e847d57e003dc264577c5c61ff8c771d3c2cd022189a8c2f0fce52501beedb9fbd5e0a9f9127cbc354cd806f06036c9b1d58fccfa1e959499424112d480a0fd5ad7b017676e7b124c3665eaf3c437e4332d7f6149cc1b3cf2f6bb59a0fc5b5c3b5ded2980347b4b4b775999c7319cc9663128b4ad27ab0a7b95936368eefbf5cc97cce2328285805ddfeac78d728ab2ee3ea8a71668eff4113326e7f3576283cf0d05d61eba80551f1f533d5fe0308cf9335a544d5cf6f06471cc3c82755f0d14fffe2413c0bd5519778b8ac5f395e60fda56923f635abc22d8b4861507f715cb9c8018bf4b3b31e3c60cd4ba97c5e65b6b41c2dfc25096c332b88859c14b1cc0b8e2f42c2ec723170e69d5af535c07efbee35e9197db46c59b02daf2e46dcf89bb1e00a692efcd1d2e5b3ff10ab7b29cb9acb5ed92536d93567011b1dd9fb3ff8e638574669e475fc84f630aac3e06a2704f034c33d48d42367c66851f49207a6126c3bf69123b24f45d467063864f93d77fafdb3e27e6a72ba19d2a393095e3db5cc5a97d17d3bbe07bf58478bf4c78692ce4d4054d5eb578633bbdc839ff6df01ca6c941c761150ab9653cb09ad3bf25e05dabc72abb4f186ff1f696fd24f36583c9bb61dd798602dad23954a0e278760157ce90527389558462e36704cd4e5a565e0e88763f8edf489e9ab8219bc10ed51ff89e9062dbac7e46b919684c2a18db51ecd3d574836f2e50b01e6a7b5e90042f37f76433fb4f71645405a54be741fb9d874a7b089ac0fe589f108a1c3732d78eed376d7cc4358485ee5711561d133fbb30eeba5c943b1b834ae71b2e25f7867ef3ed704d962fc6721342663cf570b6459546d6e8e3549828fa5e0f2cb192a980bba0dd79344532411880939c8abffb21669e449197661269acc02314bc9ab63000d34527c291acb0aa83573004f3dd6e67c19ae8bc9deea6f8be75f27ebc3b59f37348506a3b009323bdb71eaaa408fc799ab727983e2475fb5a1fdf815f1183af47064a2bf8651ac40f3cc6483466160e8d258d63e3720fbffbf48371861e90dc75381e56c204da80c3f668306f49f1253960daf554066519691310871b05c7d5be792216be9b460cb4075ff8a3db76bcaaa9277c0bdd226717764160b8a00a2a31043fb92849b95a0eb8dcd13e2c881270425fcba0bd97084fe957b1ec07df79865f41582661124a6341e46c8f0849215540ca98b0ad5b307103c6a26ca5bc7682b0cd4f188293422b193e438e8c4f57d099ed890f0ba75f4898ab6e7f2c3c5de8e353dac114e3d01cc6b9f2feca5013a3cf30f1a68735ca0b366cb6a40756ac981923ba4adb0b90e9c2c206f5f9d0060f7bf7605d6e5b93d8053c99cccae4a31b8b1a273117074f002375a95250db621e81ea1ef47fe6e113da6e15cb014bc73ed010e5ce9af5071ed7ecaf958a32710ba312dde1d00022602e8e193cfd172a324188e5c6d66cdbfff1407c30030d56bc67d31de0ebf65851f702c0dc514bbf672335f8bac5ddefb72faae68cd1c6d4861c212b310727784fcb019510732768294da35ed750579897c8c8af7c80330abc72886ee7dc60d69a9338cfaaa78f2a19deed650388061f5a55da4144f35382e49062d3bc1334cf2b58420e7c950b6fb34ac063d54e90f22ea772310d12e5ad09960c392e276859987fc3dd50f53d8d96f24791509342c8906e614b38b817fc38845bad002b7ab5ec3c1bfe6449f2aab2e5f7657e8f8d3e754b9749469e7c494d09db066301874e094d39e80d5730d3495b740f3a3640d2f596015ca7e22ed8ad44fe9a91ec7b6924fee0b1569cadf364cf1add7903d8aa47ec2f747896721b8eacc915d83bcc11b89fb2b509b6ac9962c19bb31bdbe612a0eab1ebe96a5d382609d38ca1b7aca8c532a832827f65cae6a0651a96b097eda0c3559b1092a985916f41c1b5b7802f19b3e41fd4da19c7982deb883cd10530934ebf7cfad0821f564c1d6b0eace3bc857f3b21bfddfc31c4fcde2345ebc5a0befc53e18e19059e92676f2ac504738336fa13169d5e79d2fef9b542e9ed659139cfcf0823489352e787a755525a295ae0388a6e562561853041fc042e14d978ea4a26b74dd100da46bd6e8955d8e537f102e61379561958ab19721d71341fd89b494a9a1c51974b010435a236f90948a2701f999d2fdee43796075541a1f8c01e2cca3f5d88e878ab1497a35ac37db3e6982db3817876ba62dc0ebb20d9012c3abef37f37888ea82e6cc7771dcadaf03d2ecc6c05d600700012f2a80f3e6272d2c75e4a2ba53720f0fcd97727ef5aa0be04d41590e68b08d887d4284ac291d87011bd2cb5c416983582e4af037c325cdab1d99f842e978caeb661dd5f3ef735fc306e359cf5d93bd18588286648a3e01ffd9b5773dcc91a0ea6cc56007650cbaa781dbc57a175fc717bc37a1dd5861ae4034300d4c6fa501652a82f897f42e1960568b7894b8766a74dafc68e5f7f01c048ea64632d21aecc3a5353c80038337c409222e2d0d25d30b2b6255eb82a46e036b0f0cbfcb936b15807d79da3cc23f1ef35543df8428209786fe94387c0075256db1b7ec4d1b37716c7f36c7643883fa931ef6719e55dd7e556196346dbfe087102ee3698165f426fee19448a706882935686bd2d1539e8cac74c61e74c0b398353eebc8935d974a0b91364e1ee6726b5091d8d2e066e5b0e363a989dc02b25e89c7951ac8f3e8b35d4e48db13ee06ed0b7abb1de6c47047a80e56a7ca21e98b0872732af2ced33c9c91bbe13c61f8f6085e6523792c1a1ce7a5ade5308869191480f1dbb7a7e2550405399b3948ec0b9ac2583af29678ec1aa18af62ac3b152d60c2f98c3f06eaf435f6a6844ac5ba3896eb20a0060ec1c49d70f791853bad8751d01783e7805e80eac9d74b52d73e7afd89bdf7e1706753d620001a8ebdce0b2c7f2859fb6a20be1e01c63de9e36ce3b660f37e65b1936a2e390a95eb5ffcc48cfb57e87c3aedd646eaaef22dfd1e330f2a014d07e61cfbaa6ab8b37c306bb7c8c6a7261abea4d5ae4b193d0a583508f46e75c414e67cbbdb511bc2c79233f752a6e995d9840a7e922b7e54f4e7bb373051d7c6bef1eef07bf243bc18a43d5df5e0d42be2c703d14b7ea296bec3340a6cccb937416dee1b5c440eb6f2834a86435457ab61ba556c260dda0642f4bd6fe3d4362da93c5b3122b2dcb407b9d28bb158e918873f4be17f5121d83ddd8228c90c015dfd605d83e0e49ffbf81ac38267d2b87256d9fa46e606e4fb3aad76617e91900000cf30fdd4530730d2ed32ca452ab9d7245c628905395b41c0b186a8fc9509ce3eb28557d35ca74d49cf5dbed17c46bb1094700bc6095b4a0011f7dc543de4cb5679b19567ab3bd843b223fbde3ea0bf6bd45fb303ab746eb245237c69006fbe5c337caffae88914ae76e12fad40543ba28bde69250ac573886f04bb4f9afd6ccb27699388d1fe113ea0c798781b9fab17fad3694f9370ffba76f746b74830321c91b82344eeb3797e0f2030d3763d9af838118527379b7796c722d1e1e6be7dbc96b4229588bc20fd95e6afad1ce3b0cf510b62b5e38a85516ae32f3ea16ead9ad1c2a4933a02e689ecea7a8aeda36e3b0099157bf62e2985a0f5c083e40c53182543b3446966c37e67c1ee38b7dffca724920172e0f1dc22c44ebac32215737a2d08022249a6b1017e512855fb19b6c2750ccb924dbd8e59890bc8262340dd9adafa5188fb29a44b2ceeac298cf4e35f56034ce0b609dc4da15f2c81bdb61d668e5a51f10aa6485e940a9a694b14ecc608cff1c9ab0a9fd02ac64a96fc4b48af36153b31259aeef95f6067b52947aeb3c8a7375c27991764541f287f59744f967b67c9bd4abd2a48ec62822d1441b6a877ecb00a1fd49f213d0a258063ecc348e676da9143ee74faa5b78cfff7f85c17cb9d5e0db291b65240be4d6807e80a758b5d01d3b0d4754e42ad18f72cb5bb2752721f75c0d26b7a71411386ab527261b916dbc78dad797146a98d8a00c12e618b1fd1d24322ae991a925e68f5c9c2e136e3399844047961f90f74adc21e75c4bb4d6c922aa77f59e93868f409d8b06c6b6d666fc29a332878ec00fcd6411147e1b9ee17056bf40ad480f7c09cc7015298bd93d8f72e0ece596d4ba795e93d113acbf0de55ab8d010e38df705f660a77f678dba28407ad8ee3cc21aba3df6c2a660173388b2c9fa1edfea6c5dcc849c08ae01ee3736100f8206521463204b959b6e6853a50ad6660dda69d4c47cba47305c5c294eba3bcfdbbba10072335177730f3bcffedf7fd81a12a37bffbcbccb01fcc3114c1ea5a13a87f9db0bde3ca014a4dbdcf15480f7ceb5652d524c4913bdeb53fee782c563275bec23a571a3ee7fb3452853aa9747d06a5e204cdc7bfd886bcb8b1aa842a6b31a9672c6c1d32e288ba4294b7dfac20e62b4a1c0f71c2a85ca35ccce751bacd7a766ab6c7705b163ca90060631fe81a3dc77a0515560b6962d6b0d97942299ece6649a21f761161715c80403f1ae73b9ba1285b650a644d376fa2bdffd0bebcbdfb01ff7aabd9f0b36660084aa4aba9d0c107e91f7a891a84fc3fcbee87071660d9769a334e104929d85acb8d535494094f7a67c28efa3ed1a8d8efe515ac3fde60c4dc4046bf8c897b3520d6e649acff8a040ab5f902b084f5ba6400b6f69fffa71830d92c79db61cc40732272d5cad04dd2d5a3fcd325207931a30f41f3f794f2821c5ba2d44dcf577e4ffa0086c3e903a53c35ee762bfae6806bb5464b30121576c67b21c7e5d01126ba1c17e1289945e15c13a9f544ab47059bc68bb2032b3bd588df849d1525570cbe6deaff8475364585016ba15151179832e64b9e64b162377797b7dee2c98b5a537252b8fb9f234fd51b787353c541d7e8628f3f8fe3874f02ec00e4d4811f24e5fd4535921db67e340b8bc95ee8c48938f0c822a561e1ef02fff2c898439040af86ca5bfb0c3862bf90b1cc7da109c99cebd86dcfcb4e499c58642ab9a4652f22229bcdb28f484b69ff8499e82f50ea671dcad2eb3500301da896ee70939a36d88d52b21e08440b9f677612f3cc04f2d8a797b75584b6197a9ba01aa9344f807c3e6b25623ce3b80a7a0842db215083047fb597d9ad3192266e24993b2763698871df7b7fb3219c6bd6c4ad2f5268f95db0f89b036fc8e4b2b9cedba31d8b0ccce47edccacee552a71b1194d14ecd4cb9987ba11bf48db233adf8d6915d05fe7ece9a6cb484c40a73b565b88ade839cc37ffa22c9958e279d87543d980ade84d4d7f63be84af4b92d392f2db5b1076d58e2610367e0b6ce7520423659edf4868e7c6110e30e1ebabfc018a71d90f633be09170c2712d7d1e85137b527aa946d868549facf5123ebef7342809a856b91d02ef5a5a712cf37d19cdcfad5458d6acfa7f96790dd5a4a74cd612e8265e4db06aebd54e547d359650d09bbf6b782ee070d5e08e49312a8892b15e1aa8a7d8c508c2afffbdc393ba7f5f8726bcb2e25ee6b6d382cbcacf75e58b26e6afd6152746dbcb544b93e428a7bfaec5607cedc502f3251c2d28cd3abfc83452a7033b4cf0ecb463ac914d36b855c33f98c7d1670cb2ae0ac77e4a812b4943eef74cf2cc02aa08d7fb89da908887fcce099fe24943a366a351b1a076cbe04edd3cd1ddf260148a6412c99a084e1b959befce18e479b50c072447d14e3fb15931edfecf291226a3023e6ba99439939da2da8b7022d5492ddb5cb16ca97dc5fc7c48569479181f2a352c11d99caaa550ab1ed0dc62dc8f9cb551b80caf2fa7dc9dbdb07d188e51a8895216e72fd9c32dc8c29bb55474088bb4c8cf684f9b5c5429e9b7e044e6091d5a481e71acd22f72e7344732a5ccf20d4cbe3fc7f955a5018d95d8a2e35091f1551f4c6852ffc0b9a924cae4c232763230a6d022a6c9bc46e87c27d3bdb47ae982a6187a9757374b2b22776ddb6a0acef5847ae0ac8138c9bc3123ca537d7eb77883fd385e48d54872aa100d1bc8cc3ffa5e7065dca70546a9539a789c38a183089ec31bf92f6e0dfe29fbde2431a4019bbf42772f310d03ba0385910e2def4ccfbde683c58e87d9517efc22b81d3941f3f588851c94d72809c2879c57d7e27bbe9033909e9a5ee4dd5f27b8513c4b65c9934fac4b3a8005be9f19dbfdbfc7fcc8ba516f79975d7b693a0e2f07c6a78c8dfea6f18c52d4a5410e97eb40e338c77b0135e68d23f14d1ae4b1f4ead3ae943a11b8bc6cbd7aa5638dc4f0a29e67aa5aced446f6e2504279e3302e2e97284404ff9f03e1119848d1f4dc2fad4ad1f9f529d2da5cd3baccc76f3745d75cadccf2fb71cb7eebd657b5b40feb7e2ba3f00c7d603134b69c2249334edfb487af11d314f2d200e08f090be991999756e4bd8a5cd2e73626df148fdac3a27285a970615994bc3c9473aab853584611e1723f00b611153cccab1c333070aafd2801785fbd2ca0de02e1dc4be6da82d2b60ea52e0457889f19944854c023add1653bd9c959558d80786127e34ae36ee945cd53f80b38a610bc2bf14061705248633e4f68bdc0fbc63c19dd3932e3e24504d5fc56d552a7c2d5de2b0fa916f24dd7c691100eb94c7866f0b707c184975d005934bc094665a0890292a6ded204424f1cede19d590646c44880f830438775c60a0d3ba9856c466fecfc24f8c50d41bb27f5da9f135470c86a53eb0bbca8f08f2c73fcb861a86407fa3205e0e803678c6f297de7ce0aba83c3d112771a0c14ae9b43ac9da25caffd8e726df810a79f3c2baae072d9ceb3294ab0a1862dae83439fe09a5a70dc9fa1ab408f3a35f561f7b59a33d8fd8ee43209ed00ce55c68be32725c3187bcb070b4b3d48ca644b72a00a9cec0e178789ae841faba29e53ff7c723ec1f8da2cf5ed65930556338079b2b295f872fea9c118d5ecfd4c87fed633c0f11361360a9f9574a4bb68b04c59bfaaf0f693695a87f31dc78c2c2a03c7358aeaba46f1778de74ac0325636b56e5b58b3f9c94b5a5a91749338edad7efd049341e6bbd9341c6273467c3125477d91a45d97f066ad48fce71eb5a1ad6ca8e9bbcd42f35de3daae11b324055a1375584f8b5018202c39bb5d63994e07a05a2939eb600f7203c3a97cd4c6606c91d50427839d08c3a9cb302172931c34de1676cb40cbe2e51f47ea9a66ff728fefed4bbb9bad640812cc984a3d3145d6133980ac04a7300363f8a71214440838c1952ed25305950f0a7a325b92a529855e3b31af7c359e9e9f780fd9952ab36ce5af0cba2bed5b19fb5bbc6bd8145a2c6308f5c76e12ae73f5b26c1868e8eb0bfaf7333b7b70e9b5b2d4988fcb06faeef8a1147ea2550cd8d6aa757ac6ce9b0d8b1a39799721c0c3cb3498fcebc21e3314d7f99497b7d0b18b32cb18349dd3f1c6d22b397ee5dee73ba8f999b4a54d03ca13b4670972297aafb414f36eb8228b6eca3e42ad1b533755bc42f02f946d87058b359f5838f896aaf23bd8f76b9dd078403a2c8db0f4afa1436cea3e3a2ad8a8814e75e1475fc4e8f025f60f6b56ef7fe28c316d290221fe910d22a266effbe548560a63e8b7443b961db071f820a78f70dfd227a5fe02c984acfedbe89b614b4f4e6fd6ad57ad8d9fcea12fdf7593c11c50f8e9292a6365008a7350e0437df9967a8c9be4134501517559d368866dc3bfa81fab050f18220e32023afb21c589f295fa1d3b0114846293c8824ed1d1d0bb1cc532824e8a11a31af54eccfda165582f49b2fd160006426f5ff90599b5aef892ff61e220c49bcedc572180c1ba1987a6626599fc875ff112e923a1c4d72cb16d5b688ee12a38e118b88cb960a816f81014be33226730ebe26d41885d4b7c168a75e6ce6966fbbb86a43a419f9e7de50a12acd35c8b96869b0abf0c9de6e2e15731fdd11ba9073e4327061b32f6ec97b77bc0086ab3cbb3bfc29f6420ced20b3821ad9a8db8f7d35a08d869d421b9094da8c043a41e082a01363925ee5672a4632170f51e43638cac94d8d522bb333a90ff4c38f12cd77a4a76680fc5eb6436909c5408f04da2073e000c457fee368cc6c89e516cf1ca897d962a9e4903dd891869a60bbc26c8f58d072240c11a195ea70bfd2dd25448286170a51b1ec712b0e90330b04274ad003dc0b57ad2b5cd22b482bed2119b809ca7f399e4334ed96a82afc28f3e0c74ff3d3c43f51f9a12132cefda9a5f3ca60c8c2b18430d826c0e904ed1cba0115d286f0da470981915a40b3bc39659dbed0081b4a4bb9d90ec6cea5c0a2ed715e13e5c37378c20e7c7e0083e6eb1bce2ec1dcd95dc799494ed0a2265db1f9699663c746f038acd73eeeb34627ca8f0f79972446816466ea9fa1c7840b3dde0d8c921b1c744004c8d207639a6d80e22f0e8b22f9d8a032ebdb4ad9322ff537a14aac92bf8dce364a0c7dbbf7d129c206f5eb1154053223f86d059379087661e29be29344349412655e778a25fb743100f578c6bfee59b60500b89c245bae13707a0d6a0d4815601374362c92e3ad3ce0b6bed12dfe49aebc4f6b7454d5e0708caf41f1c62254bf42e6f9d573b71ee89926ebf57843147733fbb5b35677d3f2055801b01dccb6e538b5d96c2d6ff66638a3cd97875c7361408f3cf5238186dd6731b0189f7088cf20935f93ce619e4ea0c4b27c078115e374cd8846c075170932839b0eb6c6585d9dca66b9d9aa421a6f5e46eac4a49cae2b9b1947da3259f5ff1a82739f08485c920686a9de38f4188ee8f39ebc6f454aa51cb3002e596d3f5ce2e79f377380d410331967bf1fc415addac2a241c2a75cc4913119065e75f9733395e21732db81eec8cec8eaaccf8d395f887bbe9376ad1edf2f1ba2e4bbb58dad20b97e6d4f40b855bbc62e7c98e3c5c1280e0aec9a77441bffab87e91f6ca44b490c97c64546a4814c17e77871f0043d4cb25fe78b663c696e30519f8c6545865e3c45d1aa114fb875a36fef463eb9a396a456462da644fd5663f9472f7b3bbca474174aa81a4d9f3c815ead2c9f3570ecff3f2bddaacba266d29fabe1c2a3c8bf16a2493a0b9b6664e08b6253a50474ad8f3fb11d9ab6b95894a6cf385069cafed22f88b418482dbb6d84f0b9ab456fe1eb1e8e15545e582e5b54bc9e02cd9e673e74001d5e911586cda88b242d6792dc15f56caae016dec5aa1c19d8f1887492dc9e3bd93385d49537dd0cecce95fed94811917a3a9cc0910b4e8b9c261d6a6191f7f01a1c6469e831abe9161282821015c9aab284d609832e8a7de270564613cb987c97655675c8e1fda1bfc4be312db8ec16c8ce4693b5b2f1fc12aea64d68453ecea79178de506c18590b544b63aa4b716090f8053c3a40b70e007bd3aa18e3513384aad80209c053835889d3310f0c32722833cfa5208e1b0b41daef43e2320ca952d21bf121010b710afeec4326b62fbcf3d81f0cb5d82d8a470fd60dfbcdb7570b94a4e79e8501858eec5c50eeb6bde9dcf691257347a8a8ef3fd8063ea406edde71a2349ad16d6923661540dbe3ec2f69ac2be7bcfd2472fdf2ac8a2c296f90347bab727a40a90a89c24f7974e8a1ea2e8759a218d803d98eb8129444301cddebdf80cfcb5b3fdfb44d747bb42bc430ad06d8add2af284a365a634764cc452d9d0e6dd0b4bc31028e81312ec869c6b33d8159b9518e6710b11b47a5b72de3bd99b794637e2faec92abfb3d3a0524badc79037d0c803baf1de6c500f5033b7add6e914f9430e9b93d4fb9b59eac105be6ec113c6dfa4e9dedb32ab6224de69086d4175b17d9620d45d75e1ca5e22ae00eb453b5cd3d26d1a39c81cc2759a33e58bcc63ae626437b1e26b8cf04d6ea7c009f64ce1c316875510c75d13e838b7f0a0e9807bc2789c36380b7af8197c458fdc5fcabe9f6d47e996f8ecadf2ef32e002c823c01c7060818b47e0bf64cba6c4216ef06d5c1af95b0ad5b192e6c3cc06d007efcdaef189f638626c4113e66d52bf2ee814323ce3b4f355daa415e3a4688c6694eb060d0ebb76fd2b791c36095bc47d3d4233011f63ffb2aeb6628f6c44fd0a6440be99b76f46c80cbcfca709626d26f390c6910063750b52fd12c9bf567123b14f2d0a88d304cdf7323c1977c38620ea138da6bfb8b39024f41d5d9be680a3f5910aa1cc38ad018b74dd3f26fdd4aa23a288f29286120d1d47425d9e94e7072bf8440431f4a0d3ec9c1586532f42500c3699bdd41a31cc2453f5136fc172d8a38af4a320079d0b82a5a7c412dd8e8ae71e6beb843a0449cbf8e97f00a5a1eb42fc3d7be3d2f0be59a5fe28f62933420e6d9595f0fe94179773498c3391fd02aa88ab2f5d9cc8d2a7997e5a80c675dafd3c53b3cc8e895bb852ed49a83c883c84990cea60bce9f0a7b9aa0e8012bce1a0823a9f1025eaa248766b68ce6972e9e691ff0adf0b67c4725d2ee0e7557ee330ce49c6b6dedbdb48bf33242e9982a1253285b031e482035016a473427e8552781fb467a2b527e852633c06bfc550c7253c2fa8d138e02a24928d95cfbc20dfdb748563cc27dfe9522cf72eb2b4ecae1b612be2cc7a5b0bb8c1ae72c40a60ba66e2b1e30eebe708d29ed75880f51e8860e2162b21005d12454bce9a5573d525163d3cf3964edb1941d90831ec01a4ee3788824e0935589046a17fbf5882f3fa231ca08414742a8e9b37c353b84e3f7292e46f0d45b26fcc401f079a4e646a142a593084c4000f58b9763f46d90e06e804557369a62304e8ee1a7f48ef59b0bf780fa4bfca3571b162c9f6ceda031d354321697ba9a800b58cec985e589b7fe19ce388eab41d29637936b906cfc6f4e7e6b342dd2d6bd66d014fca9658e712055edaa4c020ab427ec62e9c914d35d46b792f18dfde2fe76529b644b27afc710c41e2d25cd2d6e5c4c69228d68369a7a80b97d0077aeeb1887e46b0d65a6f7d410cf35987d3a7af37c4cf5fe585162c739d153344ca0f9a10809ac8702c12f6ca775ee6176f2a633d63e48e4e5d3e4d5cbe13f97817948c4ba5972f32d89e367178c05922970ffea9a0cd21ad8f39a1f111734e22890de31f700843868022404ad78758baf926ec83f6abd65704e8bcaccb7fea5a6516e7c670439b726c4ece2afc1dff8bd89130664569e0085956cc60c868e212e70fe01204a7e069db3791ca842fb9c06f4c3517a592963e77c4b0d3866e9b7d660a2afb1f859f5966f7c7ddbf4f0f13525e8c56083909e1d051c40a7b65fe7562b875fe5574ab3a6ede4b3e417815438b3e41e9b6bb2a935f877dfb5baa3dc437c331671402db84654789bcabc512827ad84b3869515d1c1a38a40751dc9261d55a8c7755b772bee00e1442323d1ccccf45f1ad90476597d6411cf0fe61ede37cb36f0e4c9b8b344e440a28b890efba4c3936acbf83275134599408f38c0d95240e7767a6bb0ca4ec18ee5ed63eca4580bddb8a455c42f2ec5dbf41d65f84e20813d113e2acc474534a5ae86117bec13654fa99c4fb1d059f317b5e3f4e6c7f98d77cc5b516a2819d4a3ec9714eb0789da59bf4125b816e2af1d9b98095ca337b9310c140493e4807ddab88e2521ad9a0664bedaa4ce80ed24a8bb3c2d017a51b3e11ceac3b8e3e77b4c9564dc2b0035a2718b1199610244852c7c45a8db3bd3102c8386881e487e8c26d42891d2e40ae23d0aa84e8e69a575844e35ec18526f540a9241f12e405cbe2142ac9c219b6dcab1283fb4426e60554c65729b24146c4448ddae4d6e96ef5dd5e5b07ee7abe409d5445502a8d0d7f0713ba4bf5900eaeffdf1280599a2ccccf652f5673253d16af19ae4a2d91515158a5cb7edd887197d6ee7ebef6d8ee789dd36f1e8bfe0d9a5e4eafca2607838ea71d2741c9c57c4776f32ed1823273006c4c34b74dcf7e5aa9489a73e44a04806215dbbd1e9fc7d9eb8131fd1e14dbddf76011ccb788bfbaaf01f6536ba4af90ad2ae212e308d12388f2cd9c586e560036a20fee0d73a89adaf4908ecf638f3c04bbd9d170541edc8109d58c1c577e6d3b2ace01a2720cd8a5dadffc4a00f85c25ff28f8c46f976b930a750e0b91c0630f6641335481409d6b587f9621f7ca04646132bed6468c12bbd1fbe29de510cdda2d4f07f8df8e8da6cb39fce73683ee38409de8d793058aa9f884d4e196878abf858885ddadc5484e6832cbcf99f7eab4daf01a31e68eecd71be4b59641e0e5805af39ee5dcd786c5b834fc463061d19b0f414978ebdebe7f2517e6ec28ab885a7a237086a2109816a0a5f4b8f0ed8eae022c79f7f6a0e38595d012383a3068410e5ed2c9af999459aba03a3c7e2a17c4223148916a119eade9769f99828bef9e8d5a2a7ac10875826c4a178ebfd38115c814fea5338b909febf520ad2268dbb5e9ff65e6af13433fb7982e4308e3d01096700e52804ef34b63950864a742e4297af6d3e506592d4c29f9fb658ab448c88ac6d41afb84f4f2c0c5db2849539728b66eb6fa8cef17c0587a429bd2a48c0a50913e6ef101b6533fb17c9df33476572cec9bbcce80f47c5ed5286abbbdafdfb45f11ad6af8a07e4c560af0bee8bbccccf542df5d34f606777f60c6e9175dd01fe6eb2c8e08f986daf35acfdb9a1952a72ada8c66bc9551a42e0b41f8239e05c828edd0b9bbf27059374a94b270009c45551d6c74a09e222b9dba97d6daa87f8d8ef6641a04ef466a71472166136b2d72d8a0a8b7d1dae3150e174e3e20d145584d547554e35c798b286eab64b5801b907c92b5f90cbe55bcac3764345b033454656a5b98c3622dc3337f5c23b2a8a87b82cc0ccd60bdb107a921d4e7f3d90f382233308adfb132f0c45935792e845463e9b5dcd3f2238fb601e53d447b45bf06cef2b7102776c7b1c20346dc34047c941eadd1882f59ba9386448ca4128281e6aa46f3ec8611b3e629d79bc9c26564be1e91274400d2c8a0fc727ce05895dd14ec3389d418220245fed51cbb56e7691b4b96c97e533803ed2df362752fb1e242e5c91f761b250dc7c830bcbf6057f4bfe72014c69905169c95e6e6e01b4b3086bce583dae9bd98cdb0d22ea2ebd4f5884e12a6d343942a62a16da359e071c687969037a077233704716ded9146d72b59e27980b3220923674cab6f17cf09c97618407b78559fe28bd1c8d1d4ba540c338393b5dcf690af9fc402dbe83bc7eb6ce854b54bb1edec4c23494f42ab0c9459ed70659c9a9ffb715b4d7a931b000fd7e4add6331fb03359de7ee4100f5078365c29564c037c7794c5774435343ad07ca710f198a6bf7bc3272416a7d96230a0646ce437675abd585a8b5ec83698d0aa5e87b5bff4e4f9927435d02d8d649af168f7221dfafc062b19bf2eefbadce5aa677aa85864b8c7b7793b3d433791ad0648e5531c86e795793660c1f9c87b92bf1b61013cc988882d9e0fa5b3a257b65775a5448f06ad8bf068da3808fb0e0e24197dbbbd854eafc0529af3953075a7929132d08a9131b9dcb4d4f8e782ad2bc1610c4d9c381407cc909644515ed5427a45d4e4e8b05dca0cf1684c85a0eb1a7c2bd12010097a2eb82ab9d759af83af6bee4e047cf4ba6141e8b03d1bdb26f8ffe6274e4306f74af1f064cd1e1ebe7299b493fbd2ded8eb4b7ac690b75b7bb25c67dc6ecfa771a2b7924516e62382de1cf1380e2b852bc837b633425a8fb3c6167c55ca87766c5a03de492b2951b15069ff862c35b6bbe62929a668f960f6f0791374e58ba43cdf5d6655c14aeaa3ec6ba10cd2f92e4c9ddc2bcd58ce872a4160144c7093f862d0478e515bf47ddb67c6a43e33117b59d78fffc768cf742085ff67e16025619c174674534a3869dcfa5d5726da8079e631bddfed6d189fdbc4373cf0bd6aa03b8084eb3f9dd854924e66c883387e28d264b92c85894dcc42ed377940a59f2bf7885d2cc68655c542395eb7e4d58877a6845813272055e9bbd21ca62187a740db7670d5e61e9a41b05c06a327f49cc6c5c892e639bee951f54a1a18763cb149856a13578916e588ea219d41d927d3f255bb201e2c6680245b0a892c7fda91502d63088488fcac6493444aeaebbd2d96792a00df4cb13641fad494720fb371c99aee4d12e159d20190c547357ef062e5799af558afa1427f90c9122920c03f4143b0763a67c83bb61c0153ea142f6e9152ba8d1c6c13098da5f762f2f992f076e11c230bec3325618f71b243f0fbbbe502a57bbd6d62b662614c4f9eae5e34ad181f57c26490ff88f451c747144f459a74395ecf4d3399f40ceb2cd25f7dddcf4ae86fd70de062d5e39e766ccbe3f82ef3a347327c94d3264a9ce02c51ad01c5ec7c0da5c9e7df49a4f5e51e25f38845e51465b85b52c6d46a592bc6baab648958b668d82b534450f25b7328e1c8a62c7d4a732347e1057ba10fc89d76ebcb39bcadcf97e527475f195f9026767894ed917f8c700b75de1dc03dc5dc86661d4b840443f6407c70aa29f4db6e0d96495c41688b001b791079d0645364d65c56c8909c7d9f36ec91fef1abfd6b58be22d5cce87377439824d93d36527b3c5f3f97c231b59c49b18fb38eda131b55031064a938e7a9e47dda23bb4be0007d76642698d1e073877ea2ecf9edb350ecaa3ebbe551cdfc9958fb80048850aa3c37e5f184b008692d2e31fe2e8e52dbdb14d3405d6580e9cd5918782d069ea6c115ae2fe612bc085aeb29fb6ae371fcb386eebba90d861b4d58cd26aa8573379d802813c2ccb03603c78c7b101df5cf4d26cda26a03ac8f8e71d141388686ed1f12be1cb401250f8cc20a51742dce3f8bd82a8ca8d0296d4b4f32206547ef28bba1ae705959fea6f51f0247a122f61e4a9f9e5e847cb4edbb207188d1190213a333246ab778bdc17ca72a6e55c7a20630de5861d1db5fc74a0b337a0952c864cf219b92acfc64a408e416ac9b0f68dffa5412f0947766dd5b36597ecafd689ef7665e6d1a6589f588b9cc31438ba75184dd0a878c531c2f0a76c31641912ae315704e562760eac0260d1c34b633c76dd841cdd52600a3e89d4bd10859cd88bf83a7f1ec556d817dd99bd5972d254cfce21d8470d9a4db1670aed04116ee7c47820d1c5bde1c07831f0743fe6560fd8d835d843f2b687c8cfd7967f4561f72caf894e77d11f9a34a43e604bdfbeb2c5899a65c05a6247ca2ffd347a98c337ef07d9005966121303491eb0648db6c17050cb27fecc12d38ebe5435a0a44f6c23187666457122d6ae435cc1cdd8eb166ed01f42a5cb1481e33300699c4ee087176d307bbfbde2d56e29fe466d0d34ea150f3523432c0d3869f9d0fdb956d884b306416a85c0cfda8cec3e52128943465bdcf441e07648c52fbc1f4bc0dd9b1caad220bce590c2c0c84618f909f53b7a0d6ac479580918b6be1d251b5f502a2337cc20c831ac7dac733ffba006226f5c75db42bcf91a1c493cf899255ec139e0142b8710d90fd62d62c102b84507f920489705e134f75c8b60e3ff4f3ea79ba3caf17bc309f4cf6ce0b518296fa0d0fcabd97b3469f39d0cb5a828fd35d4b8765ed7e92db9a64d46622e34c80e0f8da4d680207e3de1900d8e5a626971edae8083656661e641351c751ab54d1753fbab18d53df6ce3fc6d0d56c448f8e3f5d6072e781a5fdf9f046e99f08ad71f9c5d4be21000520c4e2652d26143824c0d904f7caa0c8667fd8d6e0f1a41233b738f48190a96affd3897b7aae67e75c41472a55132c36017feda7543899aa79bdd3464f0d2bc72a771a1e124a9c5b6801ce0a029542b8861e19d97ac84a9d93cdc456ed1c155dab393e54085770b42454e06e6ec7c89b6423b39a21cc312ef85ea8abb2f4d558571b69cd42cc07bdb09af7656f63a4e48c1a7acd16a56e82a5ebc7aa042fbe023dbcff411e505dd77a24890f5c2673563100574c78e65823ebd4d0fd5c23820e547644407647543bd702b8bbbe9b6621fdca0f091026094814b90c4c6929a4fb9e0c23273dfe6839ab1f3352c6c1267e73bff453ba57cdfddfd89f2bd8475a13dd7744e9f696455b7d0d286519c19edbc1a42a6bcef21ab749d9267b6c3c546c4a82d69ed8da2acea6e490ed1f183e5f61f4738ec8cb402647bf5868e8a3ff0487e78d6d5ca895b5b164ef569df54a5a71ec3f7ea56550c070adb45f5d56cbe4eb5e1340f5737fe01c3debfbd340fa6e0c2446c000d6faf0d347a4b99b8c37208c8e8db0d4268475a34dfcd9de00e93e5ed93c438299e53f94f67be3a8ca46e166966183b9f1abceb41989ca76e4da7964567d2eb2df2f623735987fdb9dc9309f6903d484820a301dad5154b568052228ba81aa0a00b81636f7568494e4954a14a7edb4d2d44f88d7d96604baea9553da6dc5d1d5f90ef50701da7e838941ec2344fc7c3387c1dde4c7dae78806d1ef241b2a98ce11cad671daa7b086a9ad7d6dbcb0bbbfec889b520e0024e499a9cb887171c36e94649504aaf8b10d4e96553f03f380f9f3d03f407a61ff47f3c81e90a45600d5d69cb455828372c356a54b908fbe220f714983ae7be125230c53fb099003f40b37d8383311f9fe0efc2771c808cef6ea9c7f4bfa00fef4e95eb90574550a65e552cc52c2ce5482100922c56fdc78d1dc463fe380df6158e7091628ff51d2f0d44cadf4bf814961ae38f4b2e702fc695411de88df83e8bf5be58dec0bf0d3dd5a6935e480caacb7a38481e2d5fce004c33103b3d4f2df3a1d51ccd8fad3da0b29e7a00425e9487c21ff2e7d69abe2eac2a70f83e7d4716a214c6d5b09e07a2add9c647ddfb3f29a7a84943414193099829621ac6f336c4634132a2510a180502d7ed18be7e86870ef80931119f9d961bb01d1b1c5264176658cbf053780d3947f5684bb87576ecd844f8239843ac997d57fe9238939da7585efe9761845cd27f0dbbbd159221085477ab0c84628667c0e9584a8d2e4980ca9c3f7e61243219c1a8c85f5f50faa40a8b2c4cc195d1d0449caa39a3ca3e12f7c7322d539121105df3e7caaad92366adfa443afb3b67bc9918c4f23722b4960130f9c8b339f92d115163d40d839617bd34fe2b15384b400e77babe708ba5583dce522df9288c66268122508c13c0d59c963fdb977672baeef92a8975f1ff98844ea93ffa5b2411acd16846e170571452038fa1dffed456ab0c8e4b004e1b63f22dcb7c5b595c3ede2bbc534b18384cd1eacba2d7d1d20648803e160f652039e982c8845a01af20ae9fbe150e58c6a8fc9d5102d38c3834aea09d465eb5569a9a51b4434885484afcb4cfdadcf173264944f610301cc2f25d0eb4ad033a588e64bf9e0cace4bf36f5730a33a621c426c62301352b072b22be90bc4a41735fc9933454d9d8925a7c391323ff18a3f719f678820e02e62cd43d257c035e03441789725903e43d652dd2d2f8d212136c714890400467553c929ade5873c19eb2255a579e7d7a622af099ec110a5871a3629a2a09c49cbf174bcdd1293e3a948e1b17debd0f6940babe06c5135a95b171a164ebc352def3230e2896a8385d3234f6778d95b50b0f2683baf8c3d91a29db36ff0cf671bab07f60db9bfe09607d43f3bc72c83965270f1bcb702ca595522aa5588f62a6d93dd296db7a0edd12c2c67a670ee596c67af8324cc790c729096568e3ecbde68ff5894a005957604b3e97e1ecacec3ef6fe5e0c6abb2cd47856f6452b53fe429978ae34e8f1f56890445f8211760bf985c5188affe882e6b2ca617a74c1b7cb67c84fd082649dbbaeebe4aa07861818e73435f4ee6b941bbef53e53e9484f32c30d364383508233a64c7500f1faf9f64db0090770d216563d43ceb4a51ddc0e818aeff7ceca98b04144e559c208a277f01f5d2dbd9ca5a61aaf075a8cd6944c78230896032c56fe0f3d994cee4c321459f95cf46fc0f965d2e3867a57ef4f2da5a2d53cf1facdf3cbbae9c9eedbf31b177faf2b207819b1c3f05b4cc6978bee72b837b7ae8aa724e80a80299fb087472c99973a2fce9e1670f5e5399c1fc2448aee0049b46d7c9864e66faf55da4d05d58ded91a0ad134a4eefa307d349ef7a65da5ebf9091b00519e790a490f92d703946721f794a181037284884e03d69bfbcabcda59001abacbc0aff9c17f2a1e6a68e1e0cb8bf5e64548316dd0810812178fe2e5e059b6e85ba4718a7b402c789c97548840cc6ce56a6552c1d913112e96bf58324885a07eaf4771068060d371cf06badff5fda223f1469ac6a1b1c9e844acadb830c226aeaeb1b3995ce40a0e4c2725d67ed31cc87c1eb0feb8f39c2036ecb39a8983f1eda2af25d2d4214593c547744254e5fbbd444bd9b69daa079788ebd625fe3c365f60e3381c17e42b6eb0739f3f68176f05d19132a5116e3e61821cdbe03bc60021da3a3b4a1780145160b30e91233d949da1165743e952cda6eb4ec075c0817ca726567509906f3988e82a914e6d85b3ddeea30b7f3a58fca6dfd2de2b9f3040e4dfadec315b61dd706c8f1f57025bbac1e04ed04cc0a069ed9972ec4fb795c572f7018fce16c7c51d9c336b90eaa4f4d99df08fda4e1372f81347bf1e5bf5ab1e71528d2b7f1efe8bad6175f2cd008c72ab09c032f5a382471759300ffa1c52968fc8c6e00acb6a01257a154f2d137c7684d6de5e6a6bd9ddffe7bcc936aeecb06b3b25d289467ab839facde84449d1c2ba45982453a462fd58c476208b385219fc704c4b7c27b2fcc01f37758ac60e2a38b50da72e1bee378a7a9a7f394abb188cb0c80f9e5505d305dabcbc99e46ffff16a97bb628c532579aa067b2b1fa0cec629c89d147c88b56c2abd16144f45c1d1a04c32dd6ab56daba8b1d2c90b75e231925225b2df63827eb43af8af31d191ac14fd8f080ead5240596fc44f82f75a50ad84ba313d5f7e92d21143b1d36d1c280f3e15eb14005ce46988567081c1c42755255ac4af98ae919c3cb1905a852aba9f0d1b3dfe603e7a97f3af4cb196bdef06decfc11c53d2e388a155cb4f778c9dc6de5b5bfbd69cc4d0a43a94ad026eb0e4b1693a46565864f4d29fee0196645fabb32092beb682952356a0bfc1cfa633ca001acf3eaf055dd97fd44c486db714ede039ac2215e05083a3e48977064f2e574ab946d931500f8a804a975ad0a9318f48db4e21c0f528559354a39a445c738a7bfa432b7a0148b9644dc38624fa89eadb53dd04b6454fe74f79ffd0b75fe16fb3a72446a30472dd01ab6d800fb555b5b8e265d69c0c9f196751530a9d7c589ae1966d554530a589861dcdb111ddd5b32df74fb329a763acf86ad314db71610289643a5f8853188b13a49fe21c540e35eccdb93e5b7ae09650e4c79042afe04c929cc7bb78480ed42226042dba4c84417b7b8cb2610529e58a97f373ceb76411264462991c94f7a39e63d965ceec23b57f877567f8660b008154fecec8e0ab49cfb3fc263a92f4adb37d958990a0d587abe860088f8baec3c4b66d68a2c368f7df22fa8cd97af35fe52046116f0b494b590e2163bc8e140777951782b0c3d30021ee0d162456d0f3452369a4f61f7fd01d48c75286c96b843b471c4d2ccd4f7f010331db93272f6be112c393545389fbbfd39187c445c45126f350aef8f2841c08ce1b3dee7d46bbce3725e37482dae342b2decc93c19d5350f20e8e1f753646f5f0e02ff5f044ebab01b4c49f5d21c7ec27e9f58a2680bbfb10ca2b8852cae38eb518ac8988b1679d92114604d95b412b762cb9f068b077f9c3782c1aafd8e3f026dd81094a83f4cf4ee96dae29a2bc7bb19df9f3c710e22b28c4dc156010df73125755cd9e505148804a77f950cf0bf525d68413103e4cec8d68f2b19533e1900318580aa1cf2e06ccd07e93814dcb3374de5e8087073c34061abeed45090b87def339929598e3d2762307a391650be1091ad5a84fff85569da090c0f352fee1458b2def90ebaa774e0394c9b0ec5904f9b896bd97c3d156d473afadc617547b1b71ed218dfc6edb11e7bca24e68f97e206fef9e8a84ebbc6528746d49114fe71ff4d1c97b9acf5b7c74f4d8b87696a0f76f734bb6c16d3b02e01d69327d612a98bf7ff6cb1d092314178206bfcf06cb9295253b49ad0cda4e85865770a5eea6ea9352eb4436375eaeafe234ba7ec58b81d329ef4729c99b3731815b3c95934a8213f1e5f25b8a50e78bc5e5e421d59440efa50b0e345cd9cbf71f0cc144ef80272fc5b795589c9c2e78080cdc6d02d7762aa812041ba5d4f40a11b4fe02b8c4b6680dd7be1043ddc66587660cf1adad8ad818fc2cea1608ad287233e771bf335255d8865e93ca3412dd881042218a453694a9b26ef83291b462b65bf0af5c4eaeddf7d5a75ed31176a9613490f51863b8a6d3575356b2a852ecc8c6bdfbdc4cb8a9d395bb241cad33e98a2bd99382cc74d62aa04cb4cbf5468d5cab6cb9b9e7b6a204a0b308443cd6ccedbb0c6a535e361634cf1426d2b0e35c0f6ab1ad384ab3fd21c2e09bcd72c7dccdc83be065ef1c6bcaac78105917e0bb5989329b287cf5426e330cdb16a397243989bed8de9632d533bf8ec34ed23787737d3a6516be6b95bff9b7059e394006ae2804cd5dd9dd12f3989bdc5b7c29186204c3f0ba398778a270cd3438b7056da9281de0f9ba957905d016fab204b2f260a4984fbb62d8ad64aedf2cbcde9879cb254463a37f8e71bb72085de70ed5ac5ca46d2ff994d7151a9687639768f7e62f6d1c188b8be31f93c7c72fbd52d17f9996cd58ee02abe6d5af67ff3790109b06721111681d1398c0afb7df5f69ff35f4899a00b097e498df8d16482f1dcfa5ec7ed139ec67f9a3b346112211d21edcd8777b2a72f0639d206f5568b3974da633750b982516a9f2199615fb74b12e1b22eda6591e1366b33f04a8398112c6b711c2f099b68ec1751b85bbbdf28c75245888deb3bcf7119edff683ab12cc26f981dd688872bf4acb3f98892f45fb7cf0a864be63e5e733677d505489723c6d64038cd885dd5bc77735c87c7807d1fbdaf7911ae8373cd30487ac7a1e0183eb39d1883537b80c7ef3763007a5c686a47991f989522213677079b963c149cf5d65be30748f0e6c1acd238e6a4ef404013d7ba10341d2830c7dc70eb18995f215a6612d41fe40d02a42fa35c38ce6c31b56a55b0a7f9457a2660696fefd6b82263924fd2f229c808e338f87bede8a68a523e56ab37e518e45cb81ed060cefd9649a908d65336c7c33af1c230d198cab67748eb2dddf3c6da456ffe52e503b8146f1cafcb4e983402b088aba6a2a33d50171f39483a458c035a44e989f52f594dd6561fda5fb17ea21ab9bf1972f3832faf4ee19861253462575921d74631f17d2a681a603b6bde3bc8cbdc00d94019489c50ff862782be68a10d00922513c87f714df918817fe543b49c4a1c3178feca11848a64689757e72da067bd23c7f215d4c2f7838beddee265056cd8a10677f8d8dd40c20c56f5341c961b12bd02bcc0bafe009dc800f85399ed911d85aed9f04a8e0a18070a2b83034b60e7b7efab468f272e3408b3aba259bb20ffbf0e49c593321cdb55289ada478da6fb1d473816a68d877ab087b44a9182542349503618aaf717bf05a570a99abc4e2ce4556537e64fce924b5c9b9d0f716e1247ff32ffbe91832c96a1b4836366cff089c19bc5d9ee7c406ce15758cd23f70dade6571355b2a8afb5a9aae5f7257c139e0aef4906a6614081577e764cd992f8df46c5100e20b7213c3aea60226963ab7758be880e004bb5d9a0d6283b4e1c1557b71e4f86981349ba01bf6edcbbe72d616add2850ed56dff13ecfffb7cc61f5cd120759948d00689b05e33768364bded06dcfc0e2c1f2a16ca1b2b5447f12073eb83bb16f11b140f425fdcb867b9a7fff4142f213b7f8086534349e660331bec847842ce3042dc37eb417a2d2ba0495434cfb26c43326ad392a2d0fde5a43d00aa3e78a2f8e35fc96c35f68f2f0f0e54f70d5e8beefb5c92463d2db89840d5344ad1e8301fc3e5417e190990c20203ada1530aa1c4d2ba4211f8c2742707e85f05cb6743313758dd1544acefb16afe5b76b39a34bd437b8c32806c87d319b8dc09fc79007052133f084ecbd5c6a63558ecee52f7a9f890f7aa229016d17e9c32ac24cb2270960d9c6608a56390228392ee61bc1755d40b588370679835a5f79bf5a1aa7f922df9fe8d53a75c2103c3df90991ac0ef00a4e9fab0c6f1a849f10c8fb26982cda15dd160529a518419893a32bf94956153f158b0fdfb8f626097a263180622cdb10e575d2d721a539b6f863d65137e1de4941b49762377138afa2b89289bbd0c9f77f4a0976ec8c8d4b080638313a163808f7dd38b05a13937877160d1262997e1c2fcc0a270d1aee071f048dfa528a82c7b4679d4cec6d002a673106bc7810b58ba8ffd852a4847c0a0da7a1dd84504ef6a3cbf0b9f5dc1cc53799eb51bf54995aaf55c7149253337c68fde0f5d5f9f0eff6fbb1fed173d4739ace4a3d6c6c0b0f986a320f42e84a4e387f526731fea16dba93b13c8ecf416e5adff8f80ab9350df03e9c0a98a9bdb5ff47df1caea9e5f9db85bd117a1023e8ef5f1edb48f26d8c8d08bdb081aeb8393df8b6cc1a4f0c3d72a48f35248c54f643d82187489a747405470ce7d8c95e30805ba6caf920c5dad673f9657a0e18029b8049025954882ee8df85cffaf932adda5a014aef34fe39f9e5c86199e0303ae704efba0a190b7b27621332f42685c3c96bc892460b2670933d5d2a6f1ac70c3289cbf545936816ea259409a9c471a97cada2ba0557f900e8eb7e3ea75b83c6dce95d41f492838cc2699671aa386d00897ad46e57022e30e69ab34291583cbfd8b8672b39d2036277cbe0bd7eefd534640670e987d26337b6263565903f557857bb38ced459d2c79ee7c700befa160d9ca7b6f43d4aa08f916f6c72c6471612a9eb0da625148d680f71e4d83da41809a361b4702a6296d1ec41d2e98b4d33fbb308680d0c519a699afe703aa8fb7f0b6bd23633b0710da649798349007c1a835386aaec4d04aac2a33f1a7df6c7a641f7d0bd2ca3ec7fff3a82ad50829bc2423263a8063c89d21bfac8fd644a3ffa6d74b0d23c2c5d31695d00e0619691fa55f1d46e9082fbaccc330049ec880919c67f7eebe12d1f58ca801e94a8e8ea59c16e154d7f007e148941a34fae8fda457246afff447e3a8e7ca0a458552065fba122ee0eb85289467b108164a05d198286a0e4169da05da3e4a1f4f9278825d32248e290359e3248fea49c911aa20465c922f036a108c8aad4b63bb09bdae38f512306f97aa6f7b83a11320c76f7518f61f2a104638712a9bce7949f8d9bc1a0089f88cccb0e97e192ae017e9d6261a6de3c5c7d08c5518be8b618a1898512d9dc200e3abfe66d6cbd1321f1e7b7fa3d201390f8a3ee3ccb619093d6465c535c9f08cfe642ae45caf53adf6bff98fbbe96a4b032196c01cfd88300ed35db41223dc64fde5a84bd02ecf313a9d075d54324d80745be78db5e0d76a71fc72f21e4bb6813371d540d671d8b51dbc596348733a46e7aa82c88df26b27480efbc27a78c6a7822933f823ab2eb6e71701ace7cf84d9c06edb08f8d32e01cbe75b45cba7d9e514eb5b852c505ce4873749498cab22f3244d8b12d728f479f7fa01b91e695dac1442b661cec4d97f0ef5841fab7a90e3a5077744109988945e8e31efae9406b3ebe07170bfad7c3f7b56a5d9f6fe42fb7f6f19266ccc937049c79f8989da43d81f2ac08d266b01149b6dcbe2ebc564b90432abbaa3eee5098e8496b2ca249cb7e604e1d5ae25114ee63aee3f5b280fef7c56d38a214a418fd416ae0b2785849be0a348ebb94cd536ba611cbad78a32cb1393c373ef81808a24f7ae3ae72a446dcbebdad93e7788bc1e06f0a44c97a0d087e725f858706bf8ee0ec9de26f37b7acca5ac93dd85302970b29f1d05c59b81e795f97fb9cee8bad782c7194bd886f59a6f58b0af728fd327fde532af61a20f00298ab79a0d65e1b07e4228b9748bfaabf6319e31d9fa99b07512e5ffb0f98b2c7936699975d32ee989f87434c7771e2debf1edb667a5f2d1f05a583921582e000dd5aa1e19e84b9ec7d361a113ea7eefffaa5768d2d1b29c598da7eb3e9df208b4583c6de693c24428992f229fe8489e9445a96a6c10b599c397428e6afddf18ec2dd63ffbff53f534876909d2a9b026a331ad11e0c0b3118da62f81f1dfb525d9a33873aa09f4344e205a0fcb403ed6e7a1b567e0fc1b1bf0eb91f59b909986b02d6b9b6f58b74efe22e6e7bba59dafc10ec9dea81ecf11b597d47e7fc4c56e6986ec4767f945e15e113f5bb9bb094ef0f9a536921a6b6f5ec30cc74f5dfdea43064909e0f5f0e0732bde93f271e14bffd78df6d61f53926ba32773e108f1b335fc7f08a89689571d24b2d8b0de95a5551db0e99770388c5eeaab6b271f7dce4c697198f8588881c37ac6c86a46ff09ccdeb17753382bac478922bc7d92ce20edaafc0ac80f74599b851a354fb59f65e4466fe61314ff6b932ae0873c46044eb76350fef92f0672b105baf850edf0ddd7bb6d262c31100270bdb5859b9a1e2f2b1c236ca61753af6e10d3893adfaadc7394fcbab819158d1bd37c24930d0f3a45f8edd124dcc925a18ff57e96731840f5972c288a2ce39128f6974fc9341a35912e423c5b95bfdd0b3a72652ff99e6252365b799c15b1697c7c0d03543316556190c19dcc9ba159038195b021e2fcf285ff03a6c0f87c2887fd0f0e317b5e12f4bff745ed2201d658eae3541320c29bdebb03c244353ae8ccbe4de4c95cc27488f48e366b4d47cd331f377d02fb213d2c14348c3681acfecf8ccee2280e0d9ff5a407147107f35ec8ef69e4f1c14a181aa0623a53d43a899c56fb6b90f30f068e2048169ca8d5f3b052762e96c8e6b55494c6b37dd06af4eb29dc24a831db16ebd176728f858da9fcd2b5832f801c18ec29ac5f61120d96ce54944ef8ae0f85b22b36a71927cb65d9400d7999fe2fb36fda7e1c6003f4139c1421bdb946aa4052e266bff346195ae5a1a81760d6ec374f2b3f6ef124a4cba7d0e5966a50a7c870d5feb992768df0a7b3e75bf6d991214e4e1a5e16780bf754fdb783df8de56c3aaada13de388f677bc41d16f3d1efa5d263ab4fe6d54bc6d0e300f92f3e2b2237a4f2b1cda3d386751cd1c62439541456c14010b4d978aaa2731415426902b9df04dd72a4d23be24f17ff4b968bfca7b0d739b8a3835e460aa98dd655c0d1425daf089f710b60ccf1e193f08acab5f96fc9ebbdb6ea45a5b8fac5f3c4cac9ecf949d025811f56d77a3034faea665f327906cbdf950b57ebaf521b71733b3a0e4ece419d5e305d5cc4266b5faf0c2bfda918a26d820b8f9591d047cc6b17fb4ef88f001c864ebff97e486d18995c748557e1e28b38df6a075e3978d0e642206b41792b6a3694b474b03afec497205dda24e873858ae249e04b75c4174886ef26295bacff964b64d57d633ffd20e5432a0d0cb8440970675b7481fa1521ce6717659756421ecf7dc824312f4a632e8985d3412fa22f6088e1b4eb487c6636376b08b7660109d726819cf3ce6d9d55d9b44100eb70b58fea7e2906ffbb05851260da5ff621ec260ec712a60033c2316d02ea9ec2ad6c2537308f19ae2d4f127999634c60ebde4363663053a43835f86d748ecc3a99e631b8e01c1a47d52da3b6b14ae172457960e38e6ad6ac82cbedcdf45c3806c4f3b4590a54d3b98c30433c428be5c86d4749903b0d1de338572ea15230a861ab6ef0c46d9039060974b00bd1b982b7ded305f1a67eb04c0ef59c3893b5a5bbe3642d2ac782b3609586f2aa1ea3a3d86b165f0ad4673ab66e3fcf3a535d84bc283e0e4edc2e13ffe0b7bdcd78615d3a19bb2495b316397e8c97e35ba211162923e6020b407cc5d036c77a62966d41c9564b568bf386386848288165525deb815e63d448e4234b4a83d4765b2c26774a50a5c773c9b250ecf99435f1f37fe70b80d63ddce9569e96128c70d0c47df282760733b4e668a5bf6d75b875bf3c632b025b3fb0f829e1dba65404302dd91850fb03531f5f322e849f8733a24aa1318c009cc130193cdfa2a71ec2087a5107f5ab60b39944d63b52e09dbdf48103a848ebed243881fd0a5f0b3fa958c50c3ec18f91e428266f82ced9c5e57ae97958a2ca3dcc9713b86653fdc6d34ff28efc82235de5c209ddc094b0022a55d37f8fa9d461dfd37609bfae8dd3c846ffd048a0914a0543e21ea6411e67aa2970664bafe7116f1ffa9c1b4a38b56b564b772eaeb59b9138b7768068dcb0177100e0a63859a61fc54d2cc25801ab627a069bff878561d71f940c6c8cce658349f58eadf2a43d5b0cec55c75d9dc4bf19f95a8bc9ccbbad295372998f2877024e46b9dee2c3e0e75684d1f3d76cda59b310a9d5eb0ddf037459aff96f6a5c2d537ebd09a5afd6646375c7735eadade7db59c88ce0481eb01ad0d91dfa3fd50a33dc4c3cbccb93689a219b75502b6332b572ed25442457a13ec2d8817d08c952120f3e30d908aff54d68292edaf911c3a26bae0a6750597da688e592622c851e856d0348860f1961c3aa4fdcaa7afa4383c65450ab3a599502396cc6a5023fcdf8f3ccccc3eadf498ec99a5541cbaff1ef006bdf3ae8c53a7b5e545880f314f8ac7a2a0cce3d5259bdd68d90c32dce405e1a6db0c44acb336be5d5e11977f059a6fffe12b5e7e1b1f9c73cf453c02866a705cfb81c20739ca6fb4629fc27bee584b621aeb18f12264368ffaa30d9cf6b5e2cc4f0865cb79fec82b43781798475613e8d8ed8c6bb883aeacc5feddfa69babc69ca4128235a9457780fd98ccdba3bcfae19990135900f81ef6ebccb7cd39c00673e18740a9716cae22ea2e6f0f770e77cd5c5ba97e377a00b3070d1f25d2d7fcf7a307aa9335d542d73e3609fe7b48ad14f22d1f0228703579d3d59b96e539e1d118199cc6ae3222a4ccf3cc6df09de92f4d8772a511f4d4270dbe0b60f7bb5a868dd99638f37bccc3513dcab4d35e09faef94bb7f42e2d248e8e4e3c90788ffa3eb712091109da5fa3a8d9457db2470cfb68fab12b808f3e6e5bbfa83a62f1ea4ab56faabc25fa04898b8a39be0c1c1398972eb7645799f9a250e35423a45eafae5ce7f3d0d2d1351b804168b71699261103b4fda4a933583d43c6ee4a52a982574e7f976c1b7ed0748c6c26670e1d489d66bb500536c1d46e04401e909cd5f12fd0c0be31e190610303f1fb49ac0bad8f6d786581c7a9e18d162567c44820643fa69c74d5b479eab972068be3fec0e93eb24c7d2b9133af60d3123606a27d1d4498448a992ced7c272a81da0112f9073ce644cd0ed12ed73ca30da90479c36127f0125d62e14e6d56180b570b934b5970107132832a2616d45b2da6343680b01bdb5adcb3bbbdd2c9b89a68bb9da04ed0486f9bbf2848abf0c71779f39028c9865d9258a909a74e51913c5ad40b493877e4c9cd53a6226aa53dd97edbfdf4fd0fe8be0cd3648a78cf3b2ac9dcec4f73c2df300664a9983876d634c0bbf1d32856c95c63b00d149f0db238ddf8072e45282404918f3bc72556542615ef1c0facb43a9850cc18b1ec601a913c7435b8743b00f2243565af96f83cd2b0491d96217a106bf9788f7695a0fc7dbb06a280e7b2a182b6d8d7817ccb5a4bf62329ccffd0d13d94eaa5e9bd1dff36d0acabe70df72053890744f2d145721235f8c6221ca3bae941cf15f338995c7e573cafebb619fb56e4b74be5c7ae8feb7b677082ef0ddd2c7d32f13610c83f2fd7588b0b7e9eefe3eda34daec3466f28619e1b31948bc46750a650ccd5a91afe393dfbe086dbe154ba9e0b91df2fa13837da6a6aeb75e2a48f4439064255cb72ae98c66024f7626e21d56c6b65d7f4d55fdb9d9c9a6a58a2f42193a9aec7561c36239fd7557eb4b2333a2c873b8d7784cfd0f35458a29fb92c127aaeca52bc8a73a95e457bf4b8c83fd0df7e95e4b3b7e278c9286be06fdfb6c3d1b993d04822618a8c263cfaf762a69b88f1b5de9684aead52c9c9cef6d5ac80ac3ac5f1a68da120792edbdc51a9d51a37349f737c8bcad9d6c5835d3b011c6975478bc28908e5eb6c311bf742798be13493c78fed7142fc6147e0165f2f90ef16e9f798007671d568ca3e87d68e5adf796bf25d9a32f5d58989b594520ebc9a3625c5d2688bcec01d8dbf1b030523063db9d5496fb984a752827d10d03b933790ae7a7f829374fcbf24cf75a51deace9aecf6873d48f0ca6b6c9217e1a07bf46180dcdca7db329d79f6409f29e458f33d19740e14f0401736ffe37202fdd1e6439b6222219615d520f3b88d25d9ac92dfd6d2c358a6854c9e2dfbc1ad38867680d9b526a05942ce9c13f07160fb79f0bf7f758244457d664421d3215dd2ad23ebe6dc8fbde1d01498764ba715ee75b5ef65a363bcf05d7c5cfe5c4388fdf36f1c41416448115c470a09207556b978469a852cbcec9f2d358603d73d097f8a474b6cb052a52605b3f3670be87bbb83ccbe41abb00245422f75a5dc354047fd3798e886853543aaba222df4daa260dcb92dc757829cafd2e9d3fb25e8db6319b4a6727b6109fd176bfd01926ad69f1bea77b7de8f594ac297504353fedc6a11ca903903496d0aef4efba9dfc3925b9834713a17c7692b37e5ef70c2914791e9b709449c956b4b7d87c21824c68b1d9f3c518b2cf58456bf8ff11e41d7241f3ce8d1e9e2ffcab57ae0ddc2005b27598474cecf4d39597fe4090d154c2eedd5d1b24a20522f3e76889a5481ff52e626791a16d7b5d0a09448bae4b9763a0444025edacade027933a438db7e28ffeee8d101f3dd2455bdd4b907621b4b1272f00bee325f0375c599f5c8fc0b4a9a2977d4c5fcc47538267cf6c95aa2784d69faf3d6622773f35b1bd07276780bcb63de9ea18115f0367412f704a6db8dc6262e88fbb4ef8375032789cbfaffa9895027eedbb4ab939af69c19ad65cd4d3b3a956e31925f3954ffc2bf016d18cc413c999fc54cb3d8f0945f8e8cdab3bc4bfed653e1b978a3ec9670f3d4e39be6575e73002a76934e8c2ed9a3a6789a3d0183b9eb4c17f07e2e4c453b3ffeadc3e82d317d3a328b1b7e65878556a2b7e644a32e982b06d230be1b997d6336b9597cc82543baac433210e74cc945e2c1213da1cf2f568f3daf59cea63ab8f6a0f3e111596d8f5dcc23ce4ad1ec5f6824f028faeec46dcd681baa5bdc8bb27ffc7489670bc09df41ec429d6f6ace51c1b1722150cc155265caa7de1442c3d0395951679dacea18f16e7a82fb9cc09aed065eb2464bb6f224441c268b9ccdc4bc66491f8fb746ae36d9460645e75fe91e03cc1d440d88ccbac5052719302451ea0d6f165f91f96739ae14f0157313d9da3ba083710c1c845fed1ddd3bf20c7db27e6a9e63819f928b4a894d94943f05f5ddc4538649bac09b30f3ce070595179b61b8172d8f6e2a43032c92d82d439d3b7bf418f62eed173283ddd0c8ed7db6410aa4b66c9e0ec96f0047e4f45570808c965fdd74261d0910ff9e1401e3ee59f54e8b83da2bac19c4af8ee8490a7fb6d32ce0e83a289b77e270553485f10258dd16a48270f777559908c1122e1cf4d633e96894fcc06337f0acecd5563aa6965793adc8e5b7c95ee8f9fe598ae6f5b44620266a8534e7c11eb6c75bfb3136ae85b7bc4f85157efb90234709b3c93fd794da44215d5ce56e4995715630bf0d7350f6abbf11d590d97aef993a87eb2142909552c16f2818aba6d4ddbca3ffa57a612e098b3d664a0c33b49281876dabe32224943e579cd357c1ffab5aff31a70d5a130057f90dc646fd216454b2d63333ea9ca0bcaf049c3e90720208ea5d22952fa36fc9904910305ea4cef391f1b48910a7d4e8dc03cf62334bb1e97f80eda68f8fe208f8ed7c578822fcc62781704f5fdebf6c9ac4d3b0d119c8dedec09da850d825f9e62cf1a6c648fc45bd8f632197303af3348f9137e9414cc81e12de345abd5b1d1583d74e8115cab243f7f29d567824b63fc17cf7bada8ad145c666fa2e3562412980ecdd11915c1aa608cfc9ac7803c48d20e5347270ab72bf859518649f544a33817febd4d574cf6c08807a87c3403c7eb695a369690869e88183b1bb880f32747a9f0bdd6a0290a8fdd74f00554d30642cdd1aaa2cbaabf842930d46f6bda67fb647f0e590beec962b98a197ace36d0f18b8efde94199f31da840fd8e053d397196efc06a942f37b46e38be384aef9643d6748b26e21f26faf78469f12d099d09792ffc3e8f314135026a078fbe3fdd5ead8ecb2dfd4ffdd295a7e4b546b04778d0e60eec8612ac43ee56df1fb1acb50914db6a0494815e06513941775fcce9f545cdbfa909b80d80cae75315a06f508f2013e7dbdc0ddf02228a9d25376ac333bc9976d9b4262e24a4b448546c7e05016d5f95e213474abffe0112407a81ce44fbdaed8dc7eb578b7e546509a7cb409f91e60d8e0bc4e8eef7943f6348d8cc0f3924448929ccc3a2f1eaa9b608105451e83659064d888991ec45177136376a4db97bf265e914dd9d8749d619fd228e8d06dccb5c656ebf0ef1afd48fdd11f1227a8763b8fc0772659e3c6428f61f17ac9b0f433b9f5220f496bc594461373e750b71ba130201925bc36b429c82d8ba7f00c679b6b4c44708d476cc099eda8e143629919c8ac67fde8bc4e456357d845ced3cd11452df127a5556197f71f23873d62f3d3ad6ad8eadf4277fe16dadb39a8c3b113cc24b8b93ab75a3fa38371eb5040de6f49e773bd09a29688da26c7468a8c7f1a42abc0de770f307cb00b5fc1c1dab060779a08d9e29103b3f0051e5f7858fb6fde79f3857988c69c8f56a1e3159a12c21026af48029985c9ff051e6585cb12d105583bdb075f9641d2012584914d080bb84f3cf65d1c78dc11a720054d6e1351ccac719b0466e8f4f04c4de304a5ed3d9e538039b6f76c159e74714dc6c81e3aa200123f4a7d9ed7cc93150d8cf1a63a81ca2045b9ce55b85800fa1b8ac1e6e4ac6eda67837011331b6f8f251b12ac192532f6975ea05aa0c51ed4040c094a7cfe4e70d73e15cb4d33abc4b67482229310d25afb5d58e18fa036a71a62f23939d8c4b0096a3eea86301f0144069f6bb8c99d6ea01a5913301870e9fe8b5977a68780d98895cbbb0b7cd425405e66cbe39c56efc05d62306f6011a8c0430193f6bd17a9209256dc1015d0c2e463f098704bef2358975fa5355d30650b5de2522eb2bbe55af48de3736b050054dbe50b8cff1b8e4bdceea8c392a70d91bce656cfc7c01ef16fc3c8e05057fe5a4e8bb09f8f4e7f52844e837714fb16f7b65fcd3cd087d46eb2a98716fe202181b6d49faab6422f875c8eef9db31bc70f9c507e8a40f347b1f265ede6d5ad7b9e6eb8a9278c7c96669d35ac83eff448845583a98f7d505b1422606dd2060760babff5fa04865f413f6d26cff94fb33bf8cd3c89efb705ccae454350335fac000d8a7d6668bd0b3a556702a1bf323c77ec4e951fa7e67af0308540645b121c5a5f641f717e6e199399ace10fa778d03c81d1ef86c49de7d91e38e950316b09b84490f064471f8062459781608550188581f9f590394b336c63216565be3f9c638dabbe33acee8c257f4becff4576735bf3ad0eba4725c10e8b176f692de103e2554239744d613a39e5b4e12021c8ea7c448b9b93f98d62b81e6f52353379e774259cc77911df2643a118106b8f51409927b55945a3f05876b59b6e4f40c0015f3e48c9ea0573c4b04d8d437d58a43c183be8a8a9cb5403d69c9a8c9760398b7102ba516b2ce895924454277ac1678775ad9cd14c367c7b2aa303c1120b4eea4efb5a99cba19b50af4c82f8184c68bacc810f574d366d2358989fef0f72223366e140d6a1d47f99d550044a18efd2319860a720afa778a1969e47b0c0c98be968269f9a2cb93a2b197e68a4f0f240569b95aeb0d3e63fe8ae0e1bcf423504d6958a06475ad9806e54a4e9daa1f51296f590229e4741bfd2adcc5eb02f2cfe302ec2ff86c717dbd43b50bebf2f6e5f493dad3012d379cf1e497215fc9fe4e10952ce3f00f8613fb50946ef90f4ff370a51aed82ee02077bcc272ea40cdcfa5dfd5beb467b98baa02d90953c8ecaab28e447d77a79dbf76982cb0342d80bd5baf0f938ec5b9a2841719b4af218871227665dcd439e3d3c97aa26e7331ba808cd95bc3078270965e39c91d107b39a273834502bd2b2cd98e3f956d273d6434308859c5248d0d5185e218a7bdc755ba7a92ea14fa014cefd3f473c45c01dccdf5d10b58f500f5fa636741ce44b4245135e57e0539d89d6a677234f308acd74a6370a7bc0fc354579bee6d56ce35219265ca2e5de3f301f5119e42bb23c50860a008dc2b22843083fb127fdbe6c3545422760d450fda2379b0b586906cec1f72214602127d81e37465b92f7dc4ee3b97293c3d967402cc4a72948ad2ac55c15ca2a45df8241d425792dee1b80f3e509a88d533de2034d749f13a81d0ac3ea1be6a6e68af65331cbe0875159703f6fdddf7aa98b84dab3388ca7821dc4ef64db3fe276c55221c0afc983015c1045e2d3980402bf655b0f772b02a44c39bf7dd7f1237f424a8efe8782540c306374933f0c5e18ce69b04ab2cd56f8848fd4b5e4be1ef18dc38c11cd97d962fad26d838e356233914551910de196eb735af99c19b92a64410b8575f39c39363c92c29855696cc21b9434157f56ccefdfef78e0c979d5ca9dbd78e51e957b26f1f561093f472f49abdfd4a113e0c4cae2a0701ba7484be5fa3f130e62267f7e1638533e59c787f7fd680cb91295962e035aa03b533897ce394a26ce306aa822357d9e9f065faccfe4173e959fdde83aa07f5df7a587030ba58844fc2f0fbdaf3af7d96d3aebaf2357d527e39e227321134f16b0cadc97f7883bd4f29b5cce8c479476c8eda374b79dcfbb988d17a930f8efc86a58b1c3f8c803e7fecc3209ba7dbdb1bd4b66612cc2f8a5d422dffb0c2831e74c65def4b1a912e030fb2d58dcc986605b18702ccbc9e60fd12481c4bf459a7a4c1cb506391be38d41b74be3555842fbaec5aeb6dc8d8d70c9c170e913124b4f85546f561b7f6e59528be9fed6c7b196aaa53277790968076797241cf4f04cc5d8946cb8d47cd549c803e3a4dcc8be58f276aeabc6c6f6e58d86b514fae450f8c5e0156c253b18be154e6f54df94dfdf164dddbff3239036f68c9a3ce03551bf5a2c763c85795af847b86bcd9ef0bdb2d4e966ae03eeefeac1dfc767bcb1936eee305c9c474daacca12933d3a936ee952fc3de7afb664147eaeaf4fd50b119bcf388ed04aed07aa2e7cf541b54d90c35077ab99993a891ae2d34c406205fa4094cdc1d3039c65aa078923c67539cbc5df972f9f39352d8bae644881779e9430833cfba91743fd0767fc9bd419d73034682633d95591cc3cc1c7909f1a07b83cfb90e7ddc6a99438ed1a8c5e94fd5d59e2893d0ba08909adde9de341e1fefae3169ff0cd1b2bcc963d9e4205ec75b5bc9356fe3e79871ac536fba4773d7e11fdd9f689fd822917e1135a4d4dd8cd80da73200e8da991e6fa1f33af76858293603fdcbf69ca1772af32b2937f2db2b2b71d1617cfad48064592da6955cc28ade4257ad076c2213c68d404e9838b841b78c68001612ef83a9a50ede15dcdc35024156d4202e799d129af72b2a6e4a1086b6960580fc020efb92e0ffae9d61f4f8ad6fc045809f11582dd95944186dc51499125acbb58a6ae077e51a9f84ff831bfe1521756e0468e35cda5c0a4fc8b262622be395bc14b5b1ed2a233c1e7056a9f53fc8ec65aa5a56ef7f9665f1c0c6b0ec329fb7d393b719b067b1d945ddc18696fe002726570e6260eceb54044f256e91afd9a9621a05fff60cdd894c8d41c6121376b826bcd3e4ff3878361133a07eb12696c35e0bc7407e1eaf1bd584e7df6511b3c28b4667f330a000c29ba1bb4a6021fbcd91c2e7e5da1c57518b62de83b63d418ccb9b1013dae13e29fad63e6d941bb8f0a9b4c270527cd78d2bef7bd4f8fa6a204d11b7850158babeaaccb423f613a37ef654fceca9e06858a883a5a67989b54144b0d13f3327242b5a8a4e926dc6a78943ea835fcd7010b7b2f7818dce2805996b2afd12062920c01481d535aa41bf701c7ad93f9e3530e3e043213383370827fe62d042692b76ab0533499905c78e8f800650788d19eb898710eae284b3501058b469f61103d33f5b721569dbec1332c947e7eafe9851b0652a76de7876ff8c129f739cac2721581b1043ef461af04aa088457245134dfa31a2ccca5292efe3c9936d58ff5da7f997db7ee6ed5814939659dff86b0ac3f7f1cabd1e3feb3d3ae1b420b6927ab26904ffa2ba3d32c9e2bb3cf808fecd2b4e7ba47ab6a5b51481f19fd7c2e9121c5c0762cf942ae82e76c22ae877de7067603e29f17ec0e82faff6ad4d160c8c21aaebcfbb66cc657375b71f70071da96e48b3a18666fa10469f5f04f995079db11fd6edcd6de4c6b32708e4d7974ca82fd6be649cf14f56082f6e30fdb8a9f431f1136da51ecc0210523946b158d9b887c0516fcf9fea68e38484ffe68434f72d46da6e4ebc117e2051433fa6a0710443a4d3287a897e732912d89448d5c43f50e085d9f2bb3d08f68fa286ee052341e2fbada51984fa74eb0ab29ded02732b93adee5085a4de0cd726d03fd327d831ac307eb77df9b2be4e52284c8b4b5da7b30198829cbafebe7d71d73cb3ad882d9d183ef9806e66cf7d36d8c54aa1a6fe100bfa454ff2cee4063b7a1a46f402e78294adb1d8b0b82164c296b2c03c1cc6701ae914ca4365d8f37b16400dc1787d492f1380ea47b43deab6899c71c6b598cb9f8e890a77b6d11bab12c69359e2fa3b49cbdad1e406cd75d4dfc0d0294f07de1c08d21e8667c185fdb9b20b57545b9c5de9eacab429c01e2e0b8d6039301fcea07e77f91fee43e510d11ccf16ff2ff2d65e0d0d09143f13b61afc95998fd271a557be30597ad6075a1eb60e47bd72737c8270cdea53ab22581c9a8a2794a74bb76e9970c5c65634ac8592637df33afa697473f88ec7161047684772335e91a8307ffb1edfc2a65242ddcee075f678f3b4a19886782e7a5b6b8198d76006508843f4144e02857890a422cd3f1f05d8d14d84b3f6290a131220bca36a6ef9e05dd2fb436df06e93b4e6719ceaa1992d211f448d8fb40bf66b73676494c77bbf5ec6f3ff6839d4e12f3031a06cb3a00718c40f510990ddb6af8e913146cb20e58cb4c0b13e7bd7e83f2d0fdca5110b52cfd22e397924bddd148a9ce14d957e4728c418bfcc7bdf0ee1e817567e520cccc7f838dbc8cdf26144abf9615511639fa35ce43987b2d131ea90e275c789ea2d99e55d5888716eb9bb3fb734f75dddcabb7139c2e78480e1436d56a5b1c26585b359e265f5468d89a43d4f45fcf2a726740373f8ff06ce834344c40cca9fa8304d252f8b903b1385f59c360cc865fae6b1b24142783c5da455a24af837ad4ae0169d55daf53d94483c802b0e3dd98fec71170c93fb4d79f9d109a31084b1df7909f8a562d7b94e896bcc746f70b4b502df25daff51776b04d3700225c17d09217e077a6dd8c352773848ac8f8408d17b33c07fc0eb824bd4e5eb26c5a6dfedb59bbb4af9b47e499d8389a1b46b72775bddb385305d77592e06a72e0189fe04e31bbec1501b26e9e5e23fdac2f61bc0a532708f9a8934823db80acc7d162c1b9b986132d37609622a23fdfa7dbeb526f8157e0f5524f59fdada4fd837e1fd7e3f30c67b9b4e6d8291e9bf29ed7cd88a3b268cfbc1c341a81277218443387af9ac7853d8a5e4a030f7b09809d413edb54451be606e7e4a4ca2ba8950cc2257918c3e4a88f3b84fbbb1ecccca1e6b12e844431a183a1753a740e62586817d4caac67c8dea5156b7c95d5db7af3de0d5d8c7a28cd7c71c3694f75009bc19495930155994a201ddc36f8f3a379dd385bdd61993a016c9b7fdb4a718f6af5c2baf6de08214ea51e8fb5bfb0c7ffddc19f1725ccf748d857d2e2083089bf0f5ea3969b68804d8f81985739c49e6578b22f148dbd98c76495cb04f02dcca842473f58eac1548cd414625e3ca2f698f89b272db35d2a64f5a485855ec25b31d7f1508e17c34521eab2a955b38514a3558a5a48e75b98dba3a12fe80df806c7d5334de03ed06b59105fbbe268ad1c02c2b248b53427d2f0e8726e895185c505f5bf7facc4bc382840e2bae4a10497635322e4437c839acc3cbe8f1eb2de6a1c1568b5ad7cf7291556233f61a2bc321e79f8856db4625ea6074e4899c949f512f1e9fc92eb63180b3a801b92a2b978d8f2faf810f7fdcb4036ef85b501bf32d47e91baca2f5bf3052ac786b34e44685c86f0619b20b89f1e5f6107369178fa4aa28f241fa7cb76ef04af77203c31f4cbe6ec1744b5d35dcd54d0a825a3bb99f41614f85e672dafff7f1a7f50cf4675b37b56c4caafa253688d4cb5349eb8e45384515fecf9083edf9dcac06468cb93fc0fe538c0d9fb029cdd80fc5831c16a8389abc1ff54f4292c96577eec5b34c6268eb130c1a16000ed37097907ef7faf9737176987e7445811a61660e9fbc06d1cce30d17eed8a0913d3297ee52e7a5a1d814a6ae15c039531c873b16d7b03260d0953a5e021433e2882383df602feab15537df50f7b50fad278a4cddc917ea623b81e5a959ec1bf3f33204d06d89c75945b1dd091db773b9b986c70bca2bfa00c8005ae2de30a3e2a42c7b0db5afe9a2a483083a2d41effc2573cc6e482069c0d2bdf38cde075ba371f801ffa130936ebe4516cc5284262783ffe9334324542e7a443ebaf1d05fa770b81762dedbe5eb3cade1da5233c17e92f659b9b742e20505281d90300c799f0c8a0c2507e2e4cdf6f6c021a28a585aecd1ad1d93afd5a663755fed566f8c7037b15f4845af9bfdf363575513a2620c494e3de495a2c936474b71018b8a836e2c56d9dd6c5497b17b59e35fd076a08319fcb30aa992ba2bb3b4526987beb0d2157bc804e4b8d884c287db8efb7a550040ac20057469ef309d7ebc1e4e189cba63e6d7cefc350049ebc5b5192f9a7fc8e7ff900119757225fd2ca4beab2d3e583b1e9e79c5b5b2b562cff966cce6686bcc3b425d512626b8edf6a2e416d552cb73c27b470acf3038b49a47fad3abc3fca5b9956b772dde5e41cc087380e8aa2c07dc2571e9cff62acb6d3ff3c040baf46bf9d1668f50d94f65cbfe1eb18f3c748566979df28acf891f24967801f775201ab04004b2d7f4d411a6b986f9286b8de97958b461d254f6fccc685ae1a1794cdd7393af79aeb8441a1e0cb2e98785bccf04b7dd6ffe9ec1654d548e8d790b925eeda047b9d5a950b0c86444e81682fc43ef8d8bc1fcbc2a18ffe90d71473c70f6d4ece35bd2fa422af73d542c5679705165356edd64f417f37e6e697b16fb29a3a7c9d070dc9c43192c28029cb8022d3fab92a07ff71cb413d6c9202cff401e77adc846ee5c76af83053faa49c24180cdb3fc70a924fbf305c607f21a2c90e1c8c33d650cea0997c3c547475b6c35f93610f2e6ca1d347189f705c5a34e71ef952a8c498b81590d96a8f7895799e30d56715c94c9dd1baef9270d02ab8922672d64a06e542bbd42fd79fed8d9ada5fe3f6f06fc2832d5c7b2b3848737eae44ffe075d5877113a1b2df384b15197ddadb4efe2347f6dbfa82ab2b0f0cee4b78bbcac39021efc29d9332644e97570b10f28a441098e5adbc88402d149089d01ba295f3f44fcaefce4c2d1b6b804ca163ac7d47186d11387d6cc81e5cdf567c35f3de6bdc19a99776a4a9e502b7c85b820f6384cca75d5309064d046f367ef0e561a8aa01898d91c442a5aed79c982056969bedefe5ed3352cbb31012b8fd937cf76aa3846ee83fe6851ddb8231785b8d1651cc98defd455d7cbf892cad25c9eb6266199f55ff1b569453da91f03e61c005e77f7998e87839f65e0b1197d262f2043e55371a34cef9209efe800bab956856c66adea2d54fa57aa900416007dc03dff52aab04cfd55eab6faaf0851e4d19725ff69c8fb71cb0cffbe8156478e11495555ec586692a2265db1bc432d0cb7deaebf5330a1f2fb68315c511998383f52d3e7355ff2c36c20f674faa5e1577f92fa5ca747bbccbc6e6d4c1a933ac65e688fd6dc4a6e37658217505a6889140c363bd6bc2c5e2915fdd4707ec66e1a172c06218571d44f528f43cb4a8a5164eb3a7cac734318b0705ce0bed93254c9110541f556e05ae8fc25c25ed6eecd4debc70a4346f45235cd9cd26a9a3de58901163c5193b36926ecd3656bbfd0e3b6e9cdb227b7525e7c60b48cd7e31a704adbc5153094611f5a5d4b9c5e5941ff81dbcb2c8768af342c5c2afce9fc2797697c2d2e5d2741ec3aabec40dce2dc84912ee60efe8fdc4049b8498f248933234bf66c42f2d39db70b0ccad95a31298748c7562a4e13857e86bb27722080a12b2f7285b980e77bb1b00c1adaf4edefd1f876bbdf85be2aec9b53cf64d3b3c40412dba8489fa1c5e947bd0034d5f90c2232e74cb1ec0ebf90c13f59ef401ff590e223e4c75ca22171f34c630db53c32b3a2a467fa095b314d0c022ff65bb7afd6fc1593a99779730d87adb5d054b3016ec8b39b9f3955c8bf67ef2c322666c6ed0d9b7dc969728258d50df99d87abfb7731afd242020bb0c22c6bf004ec56343ac441ac180f36c47942f53dac24ac5e1e5311212f3025ec7eb99da5df6e4d67e4487452cff1026c5d7f920c0c198308827cde7d02aafb73fc30df7eb82337070acf9a534d31766ef9ef66c9ccc1a71cfae642cbf6b1f06b14b36b3978460a503039908909fa93141365de8394b220e18e93ea5dbce099cd14c61e76008157c94b44603ff3257de13eb22e7820be5bbc012d359f6a3d5c57a63f0d0ec4d7a9de79e546c86ecbc6e6a8b0164957cc0b4ada93753b4e71889c417e1988d9265a8f7ffcb036b832f265f3482cbd0aacb27bc6402af5acb15e52925660063bad4bde40010b8aaf4c19da257abe7ac2b4e08a61231e6142ea58d451df2941444d7ef058a091a37d47cf1d2b97f4eea9efa11db8a9724b1e4b4b7db497bb4d3e489d58d6d764f480b90338cb6fa84fe1e22b4e0c1ed55d509840dadd15510bf3452a45edc2f1416dfc9c149cfa75d57b3e198f781b8a3cd3f0d1d19edd620d18cff34ba9aabf233cf36fc55d8ee4fc1c71df20cc2effcd980447bc52a96984c4010d86806d4283d682fd3b83658b9d51cd8d97dbcfd5a839878a952c39ce4705c108b1b276d8717296d9de9a6c204d6ba1ccda7d8614657220aa174b3c886e01b8dee3599a6e1f3cda68e86975306abbc7cdb7f366e0d3b4cb28b1be9bb5c7ffb37794132489d17780a400b50becc302ffa89d777a2bbdeeffab4573a206957303755e087e96cfbea68f28d50c08dfbbfbc359bbf00f77d956b86b85a02c4aa2ab3df9c63f6b1e0fe72aa48a815b0bc0182f080d763c99083822c733b22479ae78de99c7ca46e5579ef30f283f31e96f281511df26b4d01cce08377ece647f2360b749e8d1a65382a5ac3187debae91d11e2af37988c4d7082afcaf0309b691e95f33c0fe7f626997adb86da05d144e7fb95893b9e78188a74db4f13b5dba2a2895141f4bfbf3623751da1d71cc6a19863fad9f9c15afac870af67e6f466b4571b21eed29e4b176a9d6b14c064700653b5602906fa7f15c29c94b6f2ffd30c668338ab40b466e26a1cca80d416958e1c7875a2e46c03439611099b9870dcebc534abac9d6f2041d5e99b1823eb3b4d092e8aeb3a36e1604b929dd63e33e1682d1b163dac007a0b8fbdb6bd23533f52a652d89421131bef857a1baa1b92d2813d9b948ab4d8827512270b70902d738db8ebe7c9520b482a27d405aaef02dfa4f28f4d91d919ecb5c2661f7afe351fd7e5861a5bf1e3d8ea2235a2b33a50e93a8ef42443e07e19b06265175fea010021c3374480987ff164626b5217f933f11f3788ffce5faa4a7aced2b9cd93286dcc954cd7e5c4f73c5f5dcc36fc4cafffb5371989d67fbc8c1845ee928383d53ca4f6fb1ee0542ba35303d50395d13931e8d615fa5ae915efbd7380eae177f8e60b73fcbf0b9a999f1ee51490309fb50142a7c73daa71b0124f5dc217bf0ccb372ae70bbab8e2d4d6d27b64fc3bbafff33b9810f27a1714baf2165e17d028f5d22dbcaa925b42d149afd122aeb6a97586d533cf377346a175148caa89575bc171d6e865bbda110371cddc10efd4b109219750544e143d7764912816443753532a003ef1362a4af0301c2d43a795fb8e39c9318289ff9fd7e64042def8c666d15bf689ea86e7316e1e0aa2403ecdcf99e250100c2e402374d8cc684d8eb352cd921cf985b88f214a420b40458150e7954294f4695f99cfe7ad6be34da4182a5f0b17e9d3b2252ce5473ba363e97de7c330876990db5d2db27edb4e8f8d4db6f94ed074670eb5d788820561faf3f46847c5195562591f98153b2c2b8b9f885bb733bba09ae44136853ed69e892982e0cac658cb54d6f5cae0b6b9f6c4e182c3c0368e0ac8fe669583393360d19dc3b6e5ac7f36f99263665dc540909fc66604a7da1fc7a1210c4fc587187c7f6f8e85431068f1806d8a28158bdb6bacf36bff63137158ed15f119e9a938fc2a0c5c04e083cfd9f03b64fa08916dd01e30c0ce488858bdd17691e826277534bbb5b9219a0de937ff2fbf167b168728fe61e01f612661eb99fc42dc066416600d2e1ad21f25b1f72b782a7a4e4b712a239c906175ce5b0301ad71cfa34829119a4cc3c6113be07296edfd03ddb139fbd39e7b0a0a460f7ecd3833ca8a45a18a608c9a79cefff5a0eaf7294b264b4295b99498362478a60d93a9a58f541709d98dbe00a45bdb8c99df5fbb9b1345fe909fc88c199c353f00602ead6ab7484a420213cc2bc8bfacedc7a788f7846e3929933d0361a97ecc248c504e6e57595353238d6009ff9f5679c3219db9d3a0d93ad9451ea2e059a05250444fee34e04f32eea19fb8f18be7e23bd6668e80f57f28749315568e4781ea7a425b7daaf133ed2609554f1de04a984bd284e10e206461ba02a754239756d1c6ad54dce78cc14e8516893d8baf395e1fff0d19ccb70ab1b125fe8d917c4ba0ea11241459021617ba94cf9ec7c974884e01df655f123f3bc2bf801aac48906f3262efe42b1f9b93b1d58af2f35106ad3daec4e9260c902f80fb5baddbe4032effe46f0eb67e94525d23eed1cfec21706cc8382a4746bb070a80ad2506fe619c258c748325a5f2671157e0e296d8b648c5ce69a2782c62db3ee0771870b98cea7600e07f35ba499e6fd30263996b0fd9436e6d506478b3d019de1139e82a971071f37a929b45ed18f99cb9c1703bd6ddd6a1d248dc18e9610849d68432b7e7d002b6c9b30ffb79ef01f191184b9e87378443750bde990f368a34ccd435c0cc8d0453de1bf6263d5a248c56ed6f86364232313d605e75eef8c1c2ca756aaf15e9fd803e9fe6003176798b7dd778742884d329b2807cdaafee28e9604f4ec8e9a1f005c5041d39f43fd490f2dd894210d95387b035f6a093b75061c51f5ea94cd1e6fb84cd378f9651c2058a1972684c6cc29026518fc1d2a8ae3c3fe84293633f46f582db4d2216b2c007f773e9efaaccd51b8fca8993d32d4c2dfa88d6b359d7452b7c789435cd632a844c1e133b01c0c74251921683427bf33495451caca7deac6f1b96a025e508598aa10cdf053090923e552827a414425189dd2b09b42613ecdd7cd85d2bb571d28013c5f2bbfcc3dad4ce0ee681a2e92cd1e0bc4a500d1a6482ce5b20a075a8d17a1a3b7421e6f2f60b2e394de8e747b49c6b403d62c28e514266e24da947e7ac048f7674634b89646874a0b7b881d14f6e617f4d17571e4edeb1167bd1c73a80a5a6b48d49071dc71207780dfb825ee836b0fdba59f814c0ed55aa73b0285327782f63bc0696d796889459bc72e777d167224b0cb8330d9c0a5756c2060c7a8bb0863dc8d4b1d2af4e102abd5e6f682d207172c86be7688f492eace79f2eeea6d9e7053c9e6ff5283d7e2c0eb86cbf53b331e82cc14b0ca3a3591e1fd6ad98856db87402ea1d2f3e313409ef16d784854f03412625ffd0352c42322fce66bcae03784b3cacb901d2dbecdae39a53a45e2fc7364e2355dfa9b819c9283189b6bc2336e8ec0d0e8d1ea1994152f4c91662e0dc56b762c0858a93ad66521cbd0bcabfd0aa7f0ecf2b4a38cb774eb35ba45b62e3977790739068e165f7e1166eec75f9e7b216742bafde6566a8f47e182a8c80f5306636f42ef3e5af7bd0da367fd41903044eae0d2bede0f27e259e5a6d03cbe0f6567f1ee0845b56f70d27c120be94237e7150219059d0cb1e42695a375b0e42f928254b5eb43a7f5ce354988b80333f612186859397b49f00a0a3e8962d563b0027afea4264bce62744c0490e91260454012c5ebcfdb1f38cc4488f59bd941b299b6c3aff8430935b8dd87df2f266f5c8162569bfabdece53ccf40b159eea5a1fdd879ce243a76ace1aa18151b310e17ed08a3c473911068d7174920b11b3f4e3f8bd5c0b0825798ff28c432ff8309004172bc50afbf8bdebd224f1ca2d2d62fbacadd85effa79860beda84d507773764f829d984ae52d540365a98204b9f89b6840d09be1d325bde2b61c4c8a2a1c2d0c98b672dc8e6d932d72d0081c91262151e5aa2961b87677be12928f0b4763a3cde5b316843db0c3ad1b19c756b163db10f9aa3009da975dc4b333f3bbeafd8cf160a0c16e94558ff2c05428d0d971cfd8aaa57bb33f806b7d7d3ed3f2bef0462c6b411110b797ad43aafe171e7f934e5099e77b7fd4041b88c11c471754ed3b2d71d340d1a783e9614f77385867e2ae5ec17a8018fe2ba72513a163bca0c4b92a405108a09fa776685be4df08ef34b29b2f8897e67c305aeb6960a0ed848fff0147b19d4a44eb576a3bf2d10f8701fc11efe6d7dfa48473c117228059ba86308506e86ee02a66fd6b9976a49977b565565737a7663d1b75e335956ad7d2cac92a26093381fc0a7968ea17db606af85e4166f6c1f82e43d1be906abe9c7d4a034280aed936b041d9ca59eed4eb4376e18a37dd51494de2b29bdb056b26e732a0a4d4f3eb82ad7885cb84e924ee4a573c2cd2751d91d48f08da17256a93f55540630c15a19ad94033daf38d9b1a15a0ebb1906fd9b670d97c7d2729a8f8b5c077df3eabcf7740a7eff867bfeba3882f907e5bce8a0ccbeab5a020b68a044acc49e8693f286c98452c4b1b53153ff890adc5ad948c7af643bba8d6dcb25b25dbb39b7974f316b4b42650f2e117046f9be8e180d4a8c56e4059b065ff4e3c2cc269ccea3514b02cb62a5ae0575c561328d2bf6b6104246d7e8fe63963dad5572e9d9edf8c866f6a3bc95bacb3ab8711ff53298b3cb813c4d5ea204f47cb30b33b2916c18e7f5091b197a4bb89045c09d391ad2f4c6c9c20a26f1ab101e9d7ec8bb06a00c50919da371a19eba91ff4ba10824b0c3565b234883ab67484dbfb97ff54737bd4522b515a613bb55a4efb98645a7aed68d92c5a0ec4ace529e386f4074e3b47d50676523bcf50e734caa98f59b8dd735855cd14f09b6903dc7dc32c7c1a3ad439db0b2f3d7ae3de0c073e02bcb14e8fbf9f237b6f3b686b2e123cad0bd44c69f04a03f2fb12eb6e9252e9f46bc66d86b103ff07ba09a20113b89c624f354377ef739ecbdd31dccac0f765f62f692610e90485d3cb6b9f079f7c0069fdd037e90c535fa710ad47702a8def9cc1249a3cd8aef6c0761ffe55173f348d785fe3cf27445574e4c5b4d9a45716afdb3838e32abb23a66756fb90aa322cf034af70c98103f21b6ab09bb891fbf8254f6f6d033542962b41e832ffc2e7664e2c577687cf6d8e3ce7033f981fbce6882d1e7b7fea682b26adf4d2a0befaf472967d664a483179c8be7eb7cda1508f6e144c19a43c184381bfe6c1fb7f6bd2b8799e3ea68dd0b9d79570e5c114ac47771bf50689b5218c0c09abf48a5c279e3cbad0e0a8a7eb8a67ede57fdd7d623051efe695ebd8a3862ebb10ac8e37e17d7c4be6345ad89095dc9d23e18f4ca8ca1d1c02984fa9edeba7fa8c0788eba1d52c02b417e3eb66686e8cab24dfcfc1b3aaaad808bfabe7f0a5d9655918326c0f95d2c3dd6c54af13c2f10ab27434dcd92c07f7b50c7a6f90b4da5aa0f4a296b5e88780d02331c50819af08f14c9f502adfb60ae2fc96d15a628341a6b2375e71f7c31222f095b0469292e1034d0ee790f7dfc5a31eacf4778f11fc347d25d338010e9dc7ac79ebb123379ce9b629fc0d8528ffccaff881043f7d07dee26435c24604342a534f3e98c3c2db257fe8249351f0732b9c4893f8f0ad05c9c985314b0e48ae769bba8f2fa6577f6bff7e7869a0b639ede98bb3d9825fe375cb77c73e93d6afe4aeeada185e955326c461970a0af65ae2e567156687d8ae37d5aab800c2fce1acd559f5a9be14435ae3e6a5e1e0d6abf8134c0a971dd3f2445999eaee23886a1515f28d7779da71b2e86da3eabd9469c5f92ec94f816609057303a56f8a6c741a516170b4aec89f75f9a5316046abb6302b01387b4b992c88984b75f40e88a1694a9167fe12dc745ffd8eca7d16eb15e4fb249ed178ee78926997e2ff4cd64418c77bd7917909c0c4503e7255225804e272c526b04f500a7fffa4f747c37eea7b3bd39be82eb6d00d9bab6dfe714da57f06fd1aa946c5048050a939e12a28737beb836f6907fc2db883a5cbfae90daf8755b83e08248ee6ebc841195b606bb8af8563e507daabb4ae2572b60f67ae7bc581998c113240c54ca1e96a6d5199623b78c2dc466c8c678bd4a868990525ac1b35133e3b0c864c6101433575bd69158e716685e07157bba402cb7fb095c8cdbb2e9b63b0f21bd13dafc4e73fc8425da3e7435507935e912cff6477f510a03f327ae553bc665a4994a6afb1afda08cc98f88700595b040eed906f88ecfe8ba560bc1111fd4a55a3839ddf3f48c05b5cd5c4d44a64147306b46a18a3f5d0e5e896cae3d9155ea15b1efd946a2be8abf5792a633d62eb1c54850cd04e96b6305e160bf4169b72806940a3a5f825d6b9115a5be70733a96f09e543519819f3ee604633e894d246dacabd06723587b88953fb558074ca3e4e970ec3953f9152798df019c23f99adfe0aff1156b038c957132b6d6f957afd5a4c03cd131e2abac495a1e455f0ee330958cdce56a672fd921a477d4cf7f22e149ca696efd2248618914c922a56cb110597211bc7d573adf55e5f20ac571ce32ba1bc3ee439a553c9b942fe4bad1c1c3873334297758e7eea317871c771b31d7b3301f1f33152c1b7d0b24c38e6feade375e2dab191efe36b638c57b20065d8b04ed535a5f4eb728834d0fbd76201a263d4e7ffbd3a56ea0dbc14ff2a67f4bb74d3fa1775c856fdfd109ad6948c7168620f5169c43435443b68b4371a9b4c3789b68e8f328253d4e772fd321821fab1bba4aeb7a363cade22df8448df8436ddca264d194568827312d40173f36e75db1acc8ac3c3bdc9741493723c6989b2c56adc6b97917d106f7149bf1e0303a175ab7e265b2679a7072d42573c6b888a2af2f011ec3b0018fa201769d6fcd61268f476f3ff2d69d5d1e45ff07a416d7d8ab9c5e6dcb3c8e9fc3f78026362dc26ca70c237219966e685df62e2e430900f81783638f1e81b90ad45b956390599efe8db405b128c071decd5fcf4668e555ec97a3ca86c35a3f48b584347cf0316512978ce046c54a8305eb13da79307d333def0667d85d2ac842f77671395fe6bd1449b5ca6ca47f31415cb02fd2cc404c0444eae4a09be6d74c830578e8f267f4cb5a2a45e31db4934249e0a4e94e73c338099697106a08c940ea9e2d2088f9a11b76ad0482a325b590e32eb90b53fa65be8a83989db36157173cdbdf720f739a7848bea30a94ae9fabbeab575012f1ecbeb1efde14c8f151fc7f5eba93a5a46a536c40c6a6b2026b422d0c827786b8d06cb9a7330981ad50cc9411f96953459864b3e4f9f4d0c12bcd8ac62f978962ac172158f1e45428536d0fbb998e35e1913bd42ce2e3d515c834f91d8744de1d7adfb5d6365f2e10beb33104c7f108832249137322e35ae4b9b7f5a361d503c1fde9e3ec70012ae53fdfeeb26118497a768640ed53b48d096b3284678aee2a0e88ae1a106a09fd6e7278c87b544dfb909c55feb1a17e0dc4d4d14ef4526afd34b81334f9f498145990779f8ab692552255c281568c7bbec62104b529d723679c10faed741ce0bed09421397a286476f050ba255311cbd84db897cd69a319743c685b83596658de127f4151224aec40e18ac06230f9e1eb10ad99facb6f390501259f2596dcf271d73dc3aef18adb8acc208c65ed1e36304e4df5079281c4ce6eb3c0711a8ea350a7ecfb8d1e8a62d84f18a10a378448d4123f9c2966d9d22557045e3505f0b54ba8145172ff39b00ae96bc8f74ba6dc3390c4a46e25f8d438e7bbd8bdf445d4a24f73fe6dfa31783da27983bc0458d62f1323c4c5536d5e13cb5117014bf97dc9578262dcdbb252d7c6c6bb145d4c4a80841fc9eef89fd6bd44b3282b46446dbdf5ebed2b3ccccb235d02b29d482dfa47d14d2e3ba6b3e7e2f914c4926ee0d722f891b1fc04b8ae962545c551865409fb2e105a2e9d16d566d769225d13b09ee758e7771260af4354faf75bbe58987cd3209cd311e4d44ea7ea8c6d619e980c7d2cc747188b3c09453418ff67a44d701e12a2df339f247fb5399e437cbea6ab4e9cda227f244d9811e00fcfd3be1705af6d957094324f3e956cd613f36552d778472ab0920ca02448a75575367c66a514f1b0f146faa740f3493a6d18e4f150662bfefe8f54ae85aa19fab75c840b51ff87f4c34502ce0d6e38f32bc63a21ad23051e0cf90d576d41bb1d6ec15113b76f89b86dbadc39e9ba48285971f2beb3b3f1c4f0d06e4dc73d3228f58b4c4d406b0250610fa82de8c07a70da7002eef7acaa149d1f8ee567db8272a8dc574c460908611b61e911683ba48283bbcf8f2017e8f0dc022ae43840ca98e3ef2e3af08fab5d0fc77c4af564aac0c0e2c035a05697851d851127aacdf1164d0cbe0057101341226bd4b38d75cd25499d1baf5252648d3a0c9d191f1caa1b204137e6bc2a729b3ef5d9717c6b3da4dea9eaf9ad7bd0c7f0a6c051f5b322611f756db7e732a769b4d1cbb9b7b706e5ee8a2177ca6c70d21f64985eb4b31a018446dbdaf036d99c648a1917c7c6bc51e053956489f0ad88cdcd3c3a174902a0296a6199b0dde4f61b5e3ee25b95636eb6c77a633becae32c3f5ed6ae460be237644b1a9ef9b95570a232b5f4bc8479cde136b5fe65c88e00a252bbfbc25dc1b58b3223f3c05d92f9886ae5ac5f2b24e6e6e44cec159c729b734cf8d15aff1f7e00dc8bd01166464b8d8ff2a26d2e2374fa382c4fe9c9e1ea9384b363eac3692135278ec7e4b781d23e944d76fd1106e150f98ca264c565bf3665832fab436b05f9b3ee3f54baca1e3c3b7ad2a8c4d5dbab1e2ae61571fbb05205bf8ab266aaccd664db8ba1f87894a641ea803586b8a39ade691836846cfcc31e43366c60be5db6b1c93ceecfbb9a8233e23902a46395acca2062849d118a87b9ae184f22326142f22c1c16a238cfa7217d73e9c6929935315d57555480520be82f720507a8af0fbd40220b438fd7dcccb3cf98d1050df6116128a6f9014f39cb2f71dbad3ab9618429b69e5f79d0338559254452cd28b43edf1f25237d7a626f4549bd3d175f8d055d2c5408a7cfb09119c33f08cd9764882ecb86c4bac6f6e1461ad70c5863b4c345cf6982eefb23b349576feee99a6af13a8c1215adb517c49aab816c743e3d5ee372526a385640d4a6aad6b9f99c74d3a883b81a51288927f7017c5a51da357a47a57150d65afe1d92cc948a3794553ffa1fee7c301ce119eec4f1cf9390719c6cb7b3a4c937792d5fe0366e6f28a789d4a22b090a7d0fb4ef79006866c9c7e2a89478f499ccfceae3be2f91a1504b8d368889932960269a52f4f0c22851e47c2b8cf215b68f80157fc27ef5d5b91dcc09b284bf53ef50c71af66758ffcbdf75133bc8b508773041d87420539b3a87e0d8175ef84f7584202c5d7e79038aee457ee9973c2bb4f3b336afb2778dee829b7f3c6f0f255133d556c4b550c8a2055eece9cf77905a055316db778e1e6b5e7dfe2e20b2983fe374a3daa2822571ce0e9dc7aa3905908e8505a28b8a64c1c60179d57daba846bb83f00bc54d2da86b18cd2ed3b194613755071f23767b260e78b8555267f2c99a30bead4a17547ed938dc5e6b9249d4de3aa38f531da7ca2fd01061a0568923251606780148bba1a7350226b262cd1ab090515fa0384ab236a874766b155cb5eae98c94d0a05e4a8528b1ab526cab96ae42369ccb93894e59030cbab60ce7c59c19404abadd9059fba74081a50822876ca83ada1da020d6486f2c3761cfb4c7cbdd410fbf8a3d8d97ea1b7178f0d21ec0d8246bbb64820aa76feb7b1f28ba4fb833a6701c9afdc40fc4434ee982987727512aea171bbb624d7921a66433b6d39f3b84543db0d11f3df021aff4c1bd2c3bda3c80615f04430fc1c9b95fd6b86e716462ca64470b6a22c2974a3eabef58d1a81d6b6d01d919fc5050bcc7bc1bbefdd459b1812e907efe7fd8280ac51cf66d179ec3e035d773728aa2df88880c795b1dd118f3a062e871e03225f10785254f6858985ce671d6cfd96fe805d52ede0879282ada05fb931a452e94d9cbdc67ac836fd8bee8808a2e1ee2a84a3aff0e9dccbe219aaa1fd5a2423c71bcc0616217767c1de1ca74503085d70125c36b7351efc4504b3e5982770b85c5286fc8f25326ea30975b1465459cc099305cf843874b4b4a88f3cae3d4370466f8900a0c623c63e28b8bc4e22f0b1861c7a80bb09b61555f20841c9c69fac76e14c4b034f73b52ec46703be9fe924dd5a4a5d5910ef15ae7bd98ca3026ddab344cd672cfa582a78e058c8b892a86b50a8ce865329d962fbe2e32cbd375274390454b59112797802a95e087e2f23792a47480f1bae29492fe2b635a7e6fcddea30d003079befe34a2a4dbc15fdb1813515f7092d005379bbdd7caff0e2d7f76c912d87b5b40f7e244ad6db0488184fb797217bf954aab298177860b0bc0ae400ac396d711aa3f8f0d9d0c03360cdb22cdaa2571380089c1eef1afe72052b6476d0a2867f57fcbc2488fe1551e1bb510f1400592ad1df635ff3d9eca817778c333a875c5b2f07c67fb01f6a10a0fee9721ba0c8cf23e1977bc28ab2851f86b6ca087ef8a4b8809c09712caa4564f8c969c7ee08d1f3a4b28821561d57f5a76e019b94ac265f1e182f13ce03363f36c1878795049ae1732aca6d30cdbdedec700dbd714a31377cbc07e61fc7c0726730e4fae958e30d2da7feb141f685e123e82db5209711e8d21dbfb45f1d845ff952616b7ddcf3dd9bc08e9ee8edba67d3e5d85e3433ee7b688c97bcc965bfd4cbbe6c36a4ae7b12ecab8b1e2a8c135556d18cb3d46935aba67722e18034c73797f8bc87ca7ba67910699589c74eeda58f25a26c8291f3e296918a250f8eefb6400a1b39b3d8663a205be6c49bf520a4d59c29e332659c250b1e595bc002d79fa9508634b76d81d19c50e4b55e8184f2bab3dceb26b97f527133c444b264ffdecda63c39359e2615c048edc527cd00e34c199a1edf0df4c8da650886638d1392de41696b9c7f6821ced9f741c4efbc888c9c9bc02c3f1b072554b7722766d353ff99409aa1f3c50ce9259e5021be44e23b24bff72ae1461460074392efa57c5612c6900bcf25f8a000e8ab4c2ecd5dab6d3ef49770f45066cea96d24fa5b57684ccdc8bd28ecdf63aca6a6b39829dc6e9c7e336656aa0f1d31a436fee301987d88b88a4da36ab75087f099e2fb4ea63f2f7fab98b422e5f5e504cb81a720c95f6df513a323a4931d83e2d512b202004f30c0c07b2909127a4c28dd4701eae6a080c4fe04ce8a0418243a0622ef146d15c25bdc91d394e012a02a1dfe91f96fbd07a39f49e2d977dce8efd8aa8b162129174148edbef18418e3497ed0b09b0daaff0af5e09435281182a97f7cf34f794d45539fc049c6f602bdff67eb510f608458461cb43dee4e3fcd3d435e7c1b1cfc57aa0b98f5a479109b1c4dec76d18f2c242dbd3341df5809ecc8e6d8a3622e76b1ecc0dee41442e59cf9b417a7e30a9125f9e144b45136c030a0c9b9034e0d12c1b9665bab95e604b25d10b1a83d7720f51268afe1215119f376088aef6b59268bdffb1c46b7bdf5f1ef896ff550b1ea95838682240dfb714e6020a212a2677e8fdb2f2907537d586a84def17cb36f2db1d8e7d6171cf65d9666e69c395de97378e6abfd659929df8dbc32f7388d8dab5c4a8b9c3bc6f17519727eab3209df6f98267814b88748f2e0cfd7d24ebceba0e50944d859a596c1e2bb3331696b5a24ae5fb6694f3c2582a7ae867a000025836ec0362450092e3759fd10a12a7af95efbbe2324b9a347a6e227cc0e114f79a45775e91f087c93c805cd09d5a587c84e6d11c57d46bb396f1726d78064ed9d4858f18e086b5007e4e2ed15e976254b8ecf1dba44afe341e1e848783de9d749d016d023dd26a54641b3a56c66b42fcc76320240b24966431ca01b8fd230adc546daa742a38db93690fd95039dc7e4c38d78d82ac6e9afa1e652487ec1e13c4d5ae7a0f366f3ce765d9d7d23ceb7f82c5b84da216d3b1c1dea11dde6969488f57d37b12cdae569c79ab5b0dd02f64d280a514532eaf477f96c4ee35792579576322b63e4c4358d588b0eaec18b521183a23e7be6c944eca3335de50e94404932696dc52139ad5ecf15a5daa35ec73068b0f69176626c35188e3e6bf62d87443a37121be102382cbec09d20dbbc1b7dcbd6fdd415683d46dd328b5b312b24a55c0255f2f93d7ceb8545196977904bd5a78992d60696d7ddeeaeb1406f4959bdf7ce0348a9d1340871e57cf86f62c53da82106bb9f635c794637ee054788b520a50fbb3a0900dc1ce830ddf0fc27d0cb743b56c99547b8e1a4b9030445b50e8357ab5d37ac3cd32561fc843b2d5f2419f0710446b7aff32b52d37a049a10bc95e72f20b51067c78a255ad5c538745bee82f7756040f5527a664afd8ed5a39f37e6094a3b1ee6c877450e388699d2afd5a65f79316b76eb21904a4ad4679e4ee161e85578c59a745d15345e293871ce3c0b81128a23b9a17ba30d4f7ca08a85b4716e29dd399bd098338e9d8ffc9a1b9d72212ddbee30483115585fed6f6008b23c36db3501a1a492468e45b85591430b52f6558a01e1a75bb90543abe79c93feb0b45f5fee6013247bc92e58c074efd86b47430ab9505e3daf6340ee48be8d4442a338cacd8852ab1817d0185b4e4b2e5e2a79d9de241c4980074babcde27541e032eb96ed2d815c438fff4eee6195fe371b405984c3eab90b4b292d620a35510141728beb3eb8701ca96a49f9fc02eddabe2f6c600d32fe96ebcc89547db4da2302b165438d2c5aa62087c8b445c3ec21d281470dad540ecd8f90729f87953dfd5d6842637258c2ab31c5eaf128f77567e410c58b5e4646c2c798e5dba2bf219084e82a962ded1f24ca26cfee4c7fad2bd5a87b78ff2d5284bc6b44a689c3eb790fe5928a977c039ba91e62d921c521d55788026653dd7b59fc8b43e96e6e981559b2a4f61d4ed2bff2ff86226917e6f953c1b400219bd266af6e1375972650ad5a5d7b42385fb1b4276a652307d3ecf6332aabaed5c6f748ecda4ef28ec1f3a67b3c765ef31d60d0f8486b2b82db90a9a22d22e65870365e5834ca7d291b83c580fbb5b16b1abae47b1e546ce04e03a575868c0d740f19da70077bf159446929a9d987206b34760e2b63cda3c1d68717e786ab1397de60782ea9616033ab30a6da935e2eab72d0b24c04dcefd3c385e0f73df715163fb1e234297983da18f725fb972df0575b96322119b42103efe6e16e54fabc597fb41f6bb9f49b5dfed45c52829afe581ef77c53a89674da840e76bf34c30ca77e388696a0bcea0ea460bf762f7500eb5af9468c0d985d56c4d74bf59ab897db82052768033c3e93756707b94aec5692c504f034be1c0d3b6cc0106e70f8900de5c09900ee9bd68158065d55baca5de7203d094e2fb730e9fc1a91db381b87420a9cc575699ebf1215fd161f6d6785bf7ccc032a233fc9783cc3c770123c79ba440e893509ec5c412006b76a8cdb0f1a41f86d4c23ff4aea6d8b80a2a8afdbfd90e9e355098f791f0114bb307d4ecc98fd438fd8e18ed4422c0818764d0c880cecafbd429aa5aefd8d14ff6807ff4983fb41bde955fa910ee18ecc82e39f1d90d04178ef7c99be29c885ded080ef932cc33e2992b34abd91f668c397990bc44dce41fe39c6400ba0149bca25387cede8d2ed560679f6266f126afee9ace0f9bc622cbddcedf9bd5ca6887c623c4c24e2ba5b11e3af7d08f0b06ca66d1f4c197d83365cc383619fbf3b147914887bb007daa4fbf02380b3b52d890e1daa5e955e03546844d9589d22bc82f6728e21153f5e37130048bb9225002cb5f077d84fa316c9aaabd34968debd4ceb630b8bb7bf4e5821f2e96f7c78f1431a6882156588d32ce160c0aa37498ce4da471632d502c06378391595959bab9e65ada2ad5ccccccac5df27dc3293ebc11c46dec635e7158e213e42c1d8c7f178852274ed6459f272ed731f83e3231c1b7f15643323f865ee35d173d4d7d09ac670736f8adb6b3ad3fcf74ee6dbdb3cc8ed48a3a4f449d3d2e1db1092e394abcf0b57f6df3f7cfbacfe0b8717f0e4572af61dba7653d6d6acefff6d86697c689b94abcdc23a0bfbc011fa5ac2b58d74fa365be60dc49c0092104ac0b5a2c3911c29160756e3d6abf790443259c813e12efcc0967f34f94d2ccfe2e998fed7f52a032bdded7d2eb8da2cac2c3f66d768a6aae92b3d62e299bae94b28a2394cc94ececb231f3b3014ad46124f5c9b7747ce6ee6d9c783944eb0e98ca961316b5f554e5a63b1162f274436537ee429176ff6ae5963d82a76d71d61224e5ce77ec603131c1edc531f0c8010c81614d4348ba3c6c21fbdaf43c7bf6cb5234dd6932f02c48a3f97fc9730cd7accd579a709acc995e05f6e8dc0cec2b022d575b53a33721a3fa84302f5880d7f0b310461259ee5c2a99958678f80a97a26ee63a21be539d410f2361f15fe60bb54ee2dc98868ddea3d1a5e1dae4649457b0ed686301c154769cb4112625e32dc0a89e96f75fae43ed5cc2416715f6ca95bde54b16962d10aa3561b341a9e78d9955ca6c6225275b8a3fc6c7160e494f14849c3f27955d25c7a8568af732d6738e90b7902a5603c93e3f86d61cbd5ecb9cc53a4db23b31a1931c5bdeae266b66616369ca38f393f97ec8031234c6ab7d1c304f0326ff5e30497538cf25a1a19af79184e2d6ed1e2505fdc289fa949b55982a29ed4cfd04c2a55bede8efa002b80854c4f5a9625938d029c8cba48757dd5cac0be2b90f5752a70fd98e617a8186130e475c6a145597d75f29b395cf5ec2e5853b085e04a5c3fe31183bebda941a1430837ce986355f57806b7855489ed80e1ccd1d09d00d1e5af446981a4c0bd26a4da6f66f6dccd6bbcbdd8e1102833e781bb985ba8e304f0c54bb5273950dc26050081e787da32286f6fdf3f6d696b57f0496d23cd69a1b9ffe61acf5a9d39360517abbe4a8565f9e64078c94ed3f797ff1bc4ff5b006c03eb606feb5499d79281f9d7fa8143c0ad7998cc32543c524e0e4c82b654bb3ea8b91d3003db7a2170944890d0f5101edd147e45db2514cd23d3cbd6c0c12026716631843a6cdb307d15009ed9d0ed7d74539ab2b9f4e389882757d3cb1349ce2aa59c54f4f6dd7874204f85bea0cab555877314f15cc6230185777f3ea34d8bf5a4c29cd390cafc878764c1da79560162d7c6e4d79c3233279a596f45dc6c6e8a70e028f9784137d6cf382b3990637a574834f9571f1cc88fc831050fac4e2bd505c71dd024d811ab79af70b69a92ff1054e5ba66512f86c284c0d23133020b985cd3a47a8fc62b9361d62d91dc4370d44e9662b9f3452cd5a52d9aa46fd2ec23cba1767cf4a7e3b915a1a79ae9679477b03d6c3a0c555dc630982886ab931eafb5ac31dfdf56f41bc09e9f07c4bda0f30ccb26f806a93f083d99b0eea5535616a49c04a27487ca821608e67356b338d9e8499c2cfc38fd067e4f28e3dcdcf3485f457422965b1666c6b6e388da3dca22c7748c3acec914bfc0fab9accc4c2832c802b19f3f94bf3c1d6fc23cd32a0a322555e7646d979dad65ed049f9ed8968ec29fd8528f0c1684a765927d73e045aa9f93e2f310df71b0bd42f35a541ab791a26028134fa94a2862cabc1bd2596e815fcf05bbbe19978357c627daa40bfcfcd366702c9f7b0525c4b07bc1ea3e7bf69739acb22d45b09b38420c09e8bef6e6a9a83afdbeefc22f402f8c78ba4373cbd9bf6a2b0efb93b5a1c5d3e9af7667ec62ebe75890dda9b3ac357f372810b7b1c0649d8541cec41c9d87824fbfabf00785b728ba92bf18df38708552975e884147f62f14c8be286f20894c65ca89e87e06e4512a6d3945d321b50b604ef7d86bebe00db9e66ad0a20eaded85f1aeb1696c0b8f3f2a062211e7698d078aab36be8782a83b64a462f97acd75f91a5c26720171b1614c94284fe24d8cabb267072a77c46f571b6d6c7d9f12fb0dcb288f3d73f38efc51d88ac15ae0bda22ea34c258583c15ed7c7d7f058bbb247489d8dca206e73f723c4fde06f9b46593219a6bd4ec7e97f9d6bf50a1308168abb7631c79a71ab16cec41d9e6a1668321fd15500c1b4f9fc674fa05c01d5e9464437d390a343b1571650d75f7bc048267c9be4756c623eb6554b5327ba5553528629b1063744f98828e5ff098b3b45214d8c9ab85c82d58a95819bf246c4fd1aab8c48d74d2eec343deb1aeb6d56ff7998a947979095d6e213c0ef01772930a68456a589a1616c728c907749134858755f2ae69b623c002ac2c49a17b4295b4f1e7b9a2c355eb5be176e0431b8050d21c59af6949e3c2612ac6af261dc93386a9cff444d382fe473dc4da5653a76d712d405d4a58ad353946b4c8a17bf58571defbc4f6fcdcaab865e2b68767026fcc425e3b1b7a674aff371746eef84c2b9543f888e1f492f92c9030087ef90ad2e6f14097d0eb6856fa81477ac41613bcec12934bfef37d4e77447ca12ee97ae204aee7a200ed1b3fd5a369a0a735dce681d90f48bdeae100c319804b80018fcf134240e55822892630fda4539577301bd1d010bce7be869e1bdc6aa071e6d2c2950c2274db4c6e95ce5c372640ce3c8e6491d8da8438b043773dbaa496a7bb3f38679fadda65903f84099218e4143bf7173c923b0d7d0224fb0dfdf34866b59a25a42018c5cf72fc397e22adcd853286258783116c0f6f0c257eaa0f26b8482d9be4501676a008ce65e2fa6ec66123158ae80a39cbceae8792c5ddfb11e5156f30d580afb66b0735feb11a47c030f145dc0b059f715bf0947d531bc59fa6ad6e3e17f3bf417cf3c7795ea13f68bea25e2c29c0676f65037728eb455e281a6d9b0859d68d59f5369d7c93bcc173dcfb5df0dfd79cf7bba7c0f0a9a31fe5dd662391e7960487653d7737a4a6811a3202608270f234040066b190f8de309f65e79b8be8f6d6afafb65caeeafc15d06e40001fe65e78e596b3afab3f6fb1902e735039572ff0f8a5e3c26a27bdb248736421ff3eff0618630bced3ea81c817b03a291cadc0cebe81222ee6ad51694dafe6404e16582c68747653c352a4105e29e8ee75ad0b8e6eaeb251cf6805e2a84e1c64ee78822a00d772067a58be52af437001bbb227551ee099499757205ab2eda9bf7994508f89c6b57e094dda1bf26e90891f1aecaa360bc9e85d62288374c0cff13fa63861e36b87a4143ab16962f9e0642d3314ef04001d93f3f87501b48ef83c1b144967dc1a572d5d0dec506330cbde2cf57375b5347d8d363e20a6077062e0d6db7d4975e4a1b0a382284d75826f62940ee243eadda6397ab55b27d21e4c2aaf9f8e588039a4cd0e3163ac5e761588ada358aa2fcb6754dd75ecdcf864b3868479eb09f499afb9bd1a8c35d3bb936acf73af0b1c48aac76ef3f5b47d8fa944581e4d2c2e725e2373dd7b2d1bb8878cb9f7437d2b3c00896a677f874e40148a3fae44e6374e4c89cec4a88b061018146e8b4498de5baa7807c3006d76e7b76d237cb6ec8464c41106bc965d0e2190aff74f6f85ccc6bf05861001a825a94b83290999ecc290337323cfef63812adbc287160a147b984979463f3ad7e40ab891d3e226dbee98bff77c6d2c427750bd6f4e8dfbada60a1b73b3942c695f3c67645fb7a081b28613d0cea60b34fbd8c39c707e026125fde21f52c5d0256bccf6ad363f07930c58a0487f885b6119187b328b6a1b95d513dba5b044c32a2aaa91cafe8ef52cc9fea663b793e42975b22d4f6407be8405fe7af99d0c8126fda7a722414c0f310f754e6362e06e4c733f077494082502c93b2af6a79e07af379a947aa41d56387f024c405ddc5f4c8cf01d2c822a1bd6ffde50548abe4b313df37dbfc3f047e40d34d1a758c8f5d2b7444e1a3d5ee9470f8ffe661190146933fd428debd4b68b9ad09cfc377a9098829350a7510f6550eb29f8bddda093d18a63d332b4920f8a798b49a22bd6fac73ec818d350cdb7604da7ef8aa1adbc28d907f939f49614d7d55fbc6029217a26ad61ecff0285dc937bda761ae47b09124a54bc5310f109ebe86542c594bade7df8616bfdafb5eb8b766bf908cc8099f0ad65e02c4624daa6c81da1ccc4ff27926ae9504f80ed8b18f24396cd07198ca7142ad4c95667d5cda3b40954b7c63e32963780a78701a60687271c433dc56696cc9ff45ccc554b92de7e048227d15607051f4dbd52ddb817ba1145d14e1f58149a3aa710ce8c00c9965bc3d4fcdb35f924c8d8e6cbc19f66b4d076e64bc261806fdc04105115763ac5a11e2cb149fe6a1bc65eb03a934e2997ccb899cc14ae9aa1d48fa2bf2a3cb08122ea30f79cd3417b18cb3cfac97692957a49baf2693129d06896a62494b20d18adf1a8be8bc7fa341959a52da32c215ba194caca1233a77ef0cc26f0e2865f6f25f5d133f503d394066ed9c4a46ea67b49265c1f978efb772c6fbe2ed1f0ac093538635ff6d325e0c2ad76124eda40e9a38c94a335ca59fcfbae95e3a1e4e114ef3566287df03420685a91e9baeaf9fa7bc974d18f2ec093f5eb81723002ceed034a0805e4f7df146f9ec4db538f9881075af5faff4cee4fe48c4382c79df14d4d324cd146a13b0653e8ab3916f9920d50ceb8f4f9a425cdaf550ae6c1fe2070f0973e908918d0a36a7d76ee1e9fbb6e88c8ed60a97db710f06392b40998f6928a7844c0a79b815362360d5694b0274e09134228613f7a790afcd93ac99f99cc32124fe676c1752a5a9a57800e10ceea5308bab2a69fc2c0c31e11a24206604017e7e2227c88ba793248895f0bf37d07c99c9087ae7a5426198057ba3c6e151bb63bc4f1532b1ea3bc92d6eb1986e9e8ed5b6561eda373c5a1afb862bb5b0b9c95df54b45cf705d65125c54ae8023cc80a7e85dce6886849ff08c11f6c6f610e0adf5b37fd5fc71093ed29dab75f6c1b0bc2b6c21619be59824376a137af3e87428f4644b411d8c616f70474858bda346a0190047dbc036d122ba8edef3e5411d11b54f7086ea97926e3a5b6f985b762e43f37a96534d03840ac06e9f9a183501b5bf95dc53c2517f89c7ef451ae9973a9500ad9996c0311d1d320819d47a162d8c7f926308e5aca8253e7b0d43bd3b796aaa6f2a929962b23024b26cd765e33481818d677c1a22418ecdc925d4e954a509bea944f82e033afc28bb6cb23c9b0069e8cc49c56e32d271bb8672dc91a98225f98e65cb2113b4b87db8cfed8c57f5d03491e7d400ece9c8a8fd1fa282ed09f0964eaac0cd2e134b51abda3c27cc134a946d786b2d07988bc43e269b124926b6d0b680b4005a716a0370ef538514bd6419389807677d7eff76d7e0939f6faeea497f9f1b2b80eb9955548fe830c0f57753b72666408626291fe91cff6236f0d4fa2cbd1c3f94d15c2943dc5d2e5688ff2c4203b64d47004b8f0358a9982f1b4e163c7f27d4a96978e6ef86a2a1b851a29851186a8c57df83978f207e0d725e438d634198b1920edbd6ec5b5e2acc9b37835fdd6f1a9a79c91bab09e18dcdb7a77ef3b060d7b54ef5dd131e6eeaa6259171c169a13079df0578ccc32a05a007e70171b7b7715f3d454b55d95a2cc35ebd35064a3029de3054a1a6406fa65fc9156610b822eb58600622b80b58a23f3a45ddcc0131fea1f6b1cff4ae3101a64b00a2bfd24913211da0754414cb030efe269b15cf6937745478b90f4011b2fa6f8f993eae04854f84b3353531abe625903ec08180cee144220dedd7eacaea9cd2ba7b3f40fe21f21cdca1426701f0f46a6ad365e2467b6da2ebbaf87f48b098f9195cd8edbe7a09750c7a2fcc7fe355f2f63d5982c7c970b68ee5163bea0328e86748a6bf0c1817b0a72b2105e034ac67f304e4679b69bd4a8e4c748fe6d9cb1e0c8ec4897961f187bd36997ee5b9dfd87d8c615c3bdb35d58d4edadf7ed63036b3ab9305cb82ce868c38ccc9528f93866a662b4bba42571c45e769c9b817a2342336ba5537f4f731f703a70262b828c972fd99a9e2dd55c7490febfdae334bcc39176fc30a5b98557f65c0ff6bac0037c973255d58284454b332b81594dcbcb6631c5ac8b14a1d9482072d803c7d892f8b94f9a15c3f5be702ad28432858830ff8af618acaef04b89932dbaefdbdec0f248400bfd0b2644f8f29a5f768b083d8c18c482be186d7bd953152986014585c1df192ddac239948b151fc556493e47aad42ae5bd1a20c921c0742b189aad39cad4cca1db943a4840aab8a0fe9a71ff6eee9b6fe76830b8caa1c6da9f9e2ce35fe8153ab767e7b1191d391dd5f4dc818114fe7ed551bb09de9bafbf4b71e65f34491aec74d18cec9c930ef1e5263c9cd6e01e8ae365310d163fc49cce2576f98cfbb17550cfd8b83ef5623c155318cbf91a288555b5d076ed6acf8fe8a46cb710cb4e5dc4b00c98dcf2b8403bab031398372aa12bfac46e82fc108697ba6e48979f96f453100bf96518be357f89aed31bb8b14bd0bbf12907c4b0c01d00caf72ee69630124b052f52d30524a5854e9093c546bb6b7360e910db427cbbeab4c50f7bea3fcebda37c3a4fefff2941612b5eefc7609d280d00bcf5b9d549c8793f91d87168b2d7da0bbb71686dac7469abadf2adddc89f1a359b47b35febe18ccdc582939202801399b31dd5595e6d768bff9e11b57ba1d012b94b8fb298ecaa4c76e3d9798298c0a938f20dcb644d72bda40b8a48f9d2d745ac555af4b16a4fa839b9c53867de783d6872ba114b0f25d53bdf1ee7e46c8d89c9294216a49a7f7aed0dfe9552187ffe444509f5b416571f09bec7b635c44198051adb0cf43d14f2d49f801c0dd7464f9572744d1ed92f3f6db1b05345c1806d4746c93ce88271ae949881d2bf6423097ac55538cfe3283cd033ac2c0506cc749115afdd7eceec5d7d4f21b704b0998104e8e1ce63d9dbc6cfebbb7b86a6767651132515ebee51623535508f2eb925b7b7a71b5b2eed4d976ecb4d4d9aa637e9311837a419a0db1d43e15e1f9133e50c6999560d0cb5e0c6532d9789bc332394764e147532fb52c2ee2a35f0d43a9fc74b2665bcdfe92993f5b01436852f5122aaf2558eca6574831a89f42a9ea97412d2c510827213c530584118acba0b8c651e9d31b63a5a6768dd91da9751961ffc65f43df4a29cf6d74fd5b6dab4d36f36c2b1285f0dafb05f5b944cbc8316560cf879293ac93e99c5acc8a37ae1730e968ad5361626423498d1c9d8d63262ccbf4d7dac222a715cb8d7e35d2e900205932bf47a2264a544505a806f37709c27f8fafbdde2cf7cc74fb97f9a87175fe559aa4467c603239f2d9df14f38a12bcabb5da2272c5cbc7e237412265a383809494ea21cb88169a136b0186482840fb11c1d51dfbb786bfe8bc7d383c040ee87ead20819c1c478d8fe0455cd9d812a6c1ffa9e6898b8d85baa478e28e5eb9999e91c6334aaf7b4550521f38928b305483ba0c9f7faccbc42e3d23a6fe409086684d28155f51353eb3c2492088675dfa511ab5072a334b37b9c091743bb841031a58482cb8cf607c88da960a0324628b3cc35faca1956674907b69dc4e78fd8de6058be53e1324b9767f106a563c28490d3fd077427016149f42d13e929f02ce17dea8ffd2db55c35b471f7e1dfbee50a92bf9808325df89b2ae5f1c9ca2cde0ac47322f2640d1a2e0a100943956e7b745ef41b5408f9f313934134435c61122510ed1dedc0cd4289cb71b8339021d984d519e7f860ec624280d043f500cccd1ad3f4fc019b488b6e478d771b88030b78e9587c0914f6af578ff7a884a9a5f088d9f82f07285f2a8319ac4835cdb39c513dedcb490dcd5aebbff92d46d2a0e9b673f577cb647112c45ea314fa1c4a4bfd42af085d6853d5950b8ea569362ace345b91e046e6ec8eae98f8bd01387c123f57a7e4c74065ae71a917a9d54faf9a5330e972f2478b7b494938c2f55887701bb2e36c6b67cb0f087ff71530f7a458dc1ca29f955493d6eff87c19be1563a06eeda7855c0ec499dc8d04fce507594668ac61e4a0e76f45da9ded278df5aee5fd1856a05f4506b0a3d228e14ef1acc91bbf48888a08e9b65e333d2d4f9e879569762fa8f0d7b235c901578f8723ca76047e0ba1850a00dfad8a4b5480bffa71db88c42ac2e619cc97c1ae41f27a843ca074024138567b2e44f09d81f02d48f946210a4b6ad1a30ac142f966f4f6b81573a32e4a4dd069749a70ff0de4a4607cc78a529b5bb1882946bc68e6edcb77944664f3ab7fd72cadb61055713bc0661134310d8b2d8b49bbaf96d9f2a49ce685359acd4d320d92e90333996abf29c495bcc2abb76ead06374886b54fbdf691262256061e4743de69022c7e0295103b7bf86fd064beea1f3abbfb85c304e4f80d873d67b49477fc25aeaa2415b49e56d448379f5d23a86510167befc626cfde2d00089bfa1646536ad9fd6ce9aaa4fc375a4fd62619c31f411a0b061d1b9623e64af5bfd6ffef4c4befea7d091a4e5b67a32f9cdf34f6a21eeac8df5d67ec80813cd4d639e9d03ff44243bc847bf24ca3366e2f52f8db7b0c07662a646562795798ea47d270af2c6b201653096f92226a0a799e17cda33b6c6a65c797bf0307e3727eef10b72f2bdbc4e3150152093320d816ad5d4b82e6d8a126e9d358e4b3492542ee757af62904229abd86b2620c35d0c96ca6ed55fd521d7010c0fe57bdaffa37654e345feea2d8be87f32d89d3136e118d76d446aae98046a96961295627ec4b972c18e1e386b4750f99c3d934559451c3777424fc149813f37d23f27672e4598df7558fd9039adff1b566cf746f670b0d96b4af90aa88ac642fcb1b2a89759e67d9d6b2ab0b914a2f672180fa3050efa976094ec3d43c5d3ed4dc225abaa894394306912930667fd65f3e6f06cf69cb5281b8408d6e50fff4bd06b81cd3bcf606d0f2fc42449635b092769f4896a1f52862ea37cb5a938e7b1170d3252a04b44eff1bd9a3943bade893bfa49bae83f424b617e61ee663936d2a65dc4ee1d4caa4c0fdbeed4d0433890abb50ba4ae596626f6a0fbd0ef635edc7853a3beba553ae8ca6c48f6ff389770a4cbb6400cae12081278aff5e8796280c427131cee1008e75b38bf7f5bedae6f3850bcb303cdc73672bd3e1ea9386231d3c580bfa325c4c96e96bd9a7d0bca398da51d1550fd3a526d7dfd85d03a7b064ec5dba053786a289b589cd8d2b08020b462a8d0ddd316a286e725341db5a54a3ed93475af75fef11f105b71cbc80c36c038dee2acc042fbb05ba3521e138d4fa8763db9bcdf846c8b9bc38ee502c71f3d9dbd22bc9c41c66539c15671befb17941fe8d22d4588a033dfc148069f17a96e723710daf515734a42981d985376ee9841603534047fc8e5d9c62561c83d65265c7b21fac9be4953971b596c6b57257d74176200354fc69eb0cefc6490cfe29d01e8b61fce627013c4b2628a4e2b1c8f2ba3190d47afe03fa7335b0f0479341476f3b487187edd3739d3bdf52a3691855a9193ea34b69439f594c388272bab6e768c43802fffb3362059fda9e2ff8e2a2c3a9ea361eba940f1dd3c5f3b2b0246890c5a6f4ea9d3cdd953ecf04db099c8b9ea053fbc816d7c224a31d3a1d76d91030dccd46cafb3aab5d3e8327d7ccce943170f9f3665b2513debd5db2abdcf0a7879caebdb363cf328b781faef61105498c5845d892aa69787d7719b4a183b5ba52d6f73e98c82ed85204dcb8eaa9c7f6f8ec94e64f881bc3d352b886a32802d69d3124bb70b2c8870fdefb917715a38f1e2462592a82eb7c7289c1c1d02663104069bbc8be817d7b51fd5b11472da6d965c3344a23247ebf4d04896275812d5641ef9ef313c576a3eb37f840f8217f70e109cde318aba99d3f867550f6cdc1fb892b87a6aab5e24616ff03622391f025af165a87a33cc94f24f0b83a53bd73cf0008757f59eba01428934dc2b377bbe97c16adc3edd15d0b8bc0694fd700e8a98c08bb1b2608d7017a3bce855c8006a551dd4962b075e4ed447fcf46850c56b9d186fc5951d61aec6193b945b0b7780c1a154b0de127c55f7046e131f931d391a2fdcede3f9cafda31065f97dc961ec2ac7011deb22e0ca182b4874e160751ec3ff24daccd42db57df960e067767a58a63f66566558e5b5e561a7c07d051e5357e75cbd5cb0b047deafef968ba5037f0b74729572493d53d36a58c2aee84acb18d51b8d7672a444bcf1363ddf09f96f3be3313394a7f4a97d4299cb7ea5a468cc7b5712e4e5fe288a3b682076a9232993f29b49ca236ab273936e86d1c946bd9fb3093b7d035db3be8d27f9a681f900d0e66a54db7af8382064d76c8a4719d6636385034f46404c59ca5d611866c3845f09ade38f98c55c44a8562fc8064dc65365590c0793aab8ac6a6d53966d4b1d0fc16111183951b41902c3d208652a31ae4857fe975b6740b5131795248119d1075aa067e17be62ce92032e7e55619f85ee7975e014ff01932f29bb6b8568a1c6cdd9462a630c959e2109737b0142589892db08af476598858282a5848ee5a6da1ce103f184eb728d6e11c694d0e67fa6bc09dd0c9eed3a358d9d88cbac631d3c931d3b614d4ccf63e98dd13f02de4bd75b9b44afe2612084157f94408786cb3fde19c3e5255e47a675aa23613bcb084d7e507c71931b942395bdd548a8f405d6963980a97849a6ab9cabf82eb8f3b1f34fe5f86793bfb80820b24df87c4a7fd993f544732c456febfe684f18a84026c04394a9edacba3102a544a43bb5a16f7a247fb9942ae3a3ef26a2f31c00a779e1d81b9d8442d3e5160b838abb8f7f9ee920a105a8e6a871751c2a234ba03139b63bfe3a046d6590bce47675a542022b74692e060fe2bbaa364a37b582306c565c38151d87d5ef485e28d213eeea7b2119e435a908b8198a22ca0837ecf0435ac3e2db39aee4eddb1ff46d764e202f9dfb4948bcaab36da6f4efea6775e3a5c81b207a1fce526ecc46c9a91fc7cf6eaf7a3443a0b8080c09c2146de6fa17b6eb2821e3d5f49a240444b86a081df3ac194b4d3cd88917a4b20164a9ab0aa812b52a2dca5c278af277d737031d55fd390611b0008e0c7333f073fd49f60da52d0f0ea7574b54e674354d634841ef010d376e690f40df78cd3d5e25496ea68906d7a50d2023b3974a4be5d237858ae405975960a61d6da18f8496d69eda55a048077f7fb3b1d468b23bb41dbe7511bfe5b516236caaae306f626d8fff0cca844112f52840a4ec57749e051f7829dddc5873dc73d9e5d12553672e755cec7565af96297c2519d156f639d466b151a8c569d80252e885193e7983a24f1f45baecb623e2136d433be8050d54e7b7138b6a0ddd8731ae9e0b269a5a8f4060a4780ed87b5369834f62e269c49aac6eb592e4de8ed13dfea9bae3e1d74c440d90dffd0b575c18bb9c21d37bc8f9b3cdeaa2d2054552bd4fd6b69b8e6badc7734a44889710a53f335d66ceadff878a16a941286c14dac334ce8aaf931c8089e9f225b8e66729de15aa9b9f2cdc53cc19996f962f203a7ae52c93219bb926acef03418b93633bd4630c058071b7fcd68db0aba3c44dd19d0f57c169cf89a5b5a5ab4aee992fa056c38c9a251a1a7efad842520f99783be67d857754d9eb0a40c97b1822cfd800faee9701a5da246f642a1d7ed0e74033bb3b9e3d318ca6455c52dad19bc91a9e3fb3f998e01b2143a17d29f82fe783e7b858c6398a8a06f17aeb7fb76441c886b5c59308b93a4888e5952918b9ea1c3821a66216e0bea3a834abeb10a884f5d7d63415ac88c8876b9ca3aff99b5fdb732e463e549d3c6778fe9ef1a7f107cc9c4c8734c1409207dd2090bc308d02bc83e19ed53556862fcd6b4e2e9867871c3484ab5912ba02e4682a8d6af3da4f42630f9574020b69866c1cdae8f6f465826273da279cb7c6193dabcffcbb52bed9d99fb61c948e68b4bb34370514599be44984fadd9bbc8be49b8008cd0415b878b704784e087b8722a6688581f6aba46aced559f323d8e4ed18c333ea036b74f74f7d2dbd82c0f09cc7a186c0d05487df51ca08f80709d7088ec478137e5f65274dd89c753ce7c47859364dec1871a01d49ce671e7f1966d66941cf00afe94e87903786759483aef17260ce7b7313d173d33d8c758965d14b7bb98511de7f7a57dd1d2bc71f4f980d364633465c32d01892f6d6a11c7fb1a4db672156e4e4b80010d24d7d53a82a8ff009eea369bdc958344be6657ef8e1edf75e20391330eed97e93e97f219413575603ef0f272b7ec816b7b0c54ff0832d1892bbf1ea3a06972a86173539806ca5127c4655fb7d507003c2ae7cb45cd1f4fdebaae01d27b5f155e183e86d2c7a7bafdfe9670782133b7c4b0ccfdf844dab2b08d8c28518bb11054cc5665003bde66e7e1af0df5a6164128e7623dbf64596b96b233fc7b1aaba44c5bf755034246759dca26c99d8444118ad10f3dc18734398eac9370136bdbf48f0e9d8214d9174a3f205ae921ef556499c90e20aafab9d5c87bc5229dc93572186e41a0ca576e2c5d6b0b03841fba3ab27cc3da5b4ba8067efef4b485d9daab9c0d601557aa68fa8639d53416afb2fd29722dd02c02142b468d8d5d8021bd3c93b8b2d3bab24dec56588ab67e07eed56b768ceb7e16eca0c61f372e9c2026ebf6ea784a5238c339f7ff9cc2bb753d0cd448b0221263ac19b5e03d565079accecaf0db869743c21c3975596e29dca2dc51577965f51b721b1cab21785f6e48e7fd910d274e7663dc16c6d75e84f4b15fb688a75dac586a63257445f0a48196b51cd86cb2526a438b12281e94aa0f5715b874711fa96d6a76996606cb6ebf696bbf590bdac589dc57b09ab6c9f4f98bdb85a18bf76726b0856e9ca692d763da0e4a5eb615e352f1b758278d8cc06df5651dccf281c28fb1716bcb2498546e0b7eddbe0fc9d3644b162d83526d011478206607c65292fae430de9c372a774552163f14a75b24b0100211e08d8f5924cbdd44bf00c4c89082db304a0638c3ee208647c6ec4383cbe34c33600213a96f6cee67ee1af35677ebc1ef8306b4027de7bdb0686b5bfaed5324d1c11cc43b16ee76a1d55c06303eefe4b7eb46b10651af0c5bca4bf58dc15e9fda9e669f6fae23e6edef462aca8f158316c01a27e76abc1f487b34c32137a75ce7810ac00ce099691fb17a330400d9cc0fcedc53d6da6c88417de61759b23a1a47f40e5ebaf46a87351f698a9419503da9569ac6dcf29595211fefab8339911a784e51ef488913cd4aca2cc723485a8bad33b166bcaa96506c67d1a4c8d4e04c62a11dbf1ec56395d74ad19488e16e140d77cdca1393620e21f09e928851566da4c513b83b224f19d5406807351cfebc953ace7ba6cabdfbfa2d406f5a1ca53c6b6bd21d149f1e68743dfcfb7cc363a89ce723160f0c9f840d3dddad198b94b03b00ab50153553926db3e238e812a5bcc583e1df0e8cacbddb0ea3e412493fae63e9da60c22ce61d7a54a5f6b7353a4ddcd8a6542d4be2d70c444d66fc6b5b70fb03f8ff30f35026d2e6246365067c433b50de1abedf89debb310f534a75ff257b4f22acc9a7dd3a8dff2d6f570d8e4ee1ec29c922128a77169643269f19d893bbebd903959bc7c06c71cef354f9d7404b26e688ee7d7a274cae5e16ad4d69fb6da6fce787c9baa843214523f1bfe3af37262803077452a7a890aecd6be3d18b14d084c5cc75a08954f3466deb3284497d1885aabc08e1a73d4a5377a4b983f18a65ac0dc1154b373b6cad9704400ced2364b9138bb532aeec0c06bf64ab44340f7910e2a0145f22747c3501b413c8bae2e8c4214639ec298f6822266e2b0618e6558a6e90bb7e411c2dfbddb39ce4532e652c1b9351597fa90ab2803f5ac2f71c6012e8e59ed80154b7b856bec733b2bb03356c811427d2013bd84917bb1953ba8c7e599362bd898252b1a00dc7955f38913610743ce57fe712106d7165ae560996112a25a422fded46c74b2a514b9405b1ec98281a2477a3740afe105749d8b48161ce3233a281be73afa91ece2ae97869122a79f99e5fee793148f477173d4e203647053196239fb38e3146ae2591ea40053d2f92b13472a1148b9ac77f37ad8abc0a3076f7367e8a7ebcce2dcd216989ee3387654ab8529ced594777ef80718192922b31ee0bc671c340e46bd4fff5ee78577553814737405743f5f580d8012c531f57fc73f3eb1acf772e37bd511c4d5f9b6f86d89d641c455f3bff72df6ddff6dd75da7d573972fbe12ac7ff4f142a90eb6d4f4d883901daba2026bf60ea2bef3b302b70a5eebdc3cdd0132086f2e7ae8943905d1a5f9afe6b9181b330085082ee68dbb1420b78e7bac0d2698cae2b57582f07b8fb883fc96a20456829f79ee7baf6f2e433521a1ce7d92aa557e5b06bf965b3f3b89a4f5b0ca0149eaf8bc5817f60135d480bb216927ba2b50008fda699cb73a7ec94aa03396c689d95572f2c6b4b24734ebae9b3ce8fa32a6abb3ea10d0e61cd26dff14b440cf94f28aa6aa75cf235909c3700da74ac1bb37554803798b1625ebd0f7f6bd6e9b1da2f40f60e55f26f3e2da9679e89fb0fed3c4d3e56ef5c885754150a833239267569fea86d854d51675fa268eca8c93ef56ab299eb28fb1499a32c5c8c0c1832390e9d3fd9102907c3cdb0d84043d1a1485f10aada91f6e273b17a500e6b6d45b2ba29abe277c0ffb50acb32c35a6fd921f1803bcee38e0d78a3c85fceb8ed3391e191364ae2921b6d136428758a091c38810ae4f7fb3474546e5b43e77e067a6548f08f35726815372e652a9351fbd587cbce67bc674f63272e63eb08a6ec1f6fe46aef3dd0785e7fe4c884b5c56a76ee6394abd86923ac9ce01b50c87d43c2c67b9a2fdafc8cc7c22be9527e67e67f9b55f8f9a6cfc7dc327e2fc1c5bd7f27d643ea875e8a69a4941ace3ea1a457261a5ef9032338fb01a1992a60324127dc0e505b1ec1daaf20613436711d54ccf3106a992aa7c0f946b38a1ca45f25a83953cafed06d998e99a4512fa8065ab6f970a3e189444803abd9a8adc7a73494bbc014d14ef9ad6d6c87a4fa2eca2776ad56cc0102ea7b589dd2fce894f659efe08bcac2fe6760c0caa84270ae39ffd6289a2af1820fccff8d4a04755a2e107c031ca4758018242fe4116c75d5ab7bdc975128fcf7ecc31b031de238c7e55effbbd5e8804dbfde71325dd8238320749796a697d1617ee9f5f9b060e1d5410ff417e6fc6d53bf99944f24a507737c60c4d745d5fc8032a094841f3fcccfbda1b90682c8066dd8a61d9c1cae0c737878d46efff9427b2290d099cbac24651a2c4bbc835a6a543485cbce1257cec2a026079b353291d9f126a674a303f6807fbead198ac1a70718f67a1e3879ab30936fc45fda8059f76035a9c5d44c7333320e03a1ca872b6572d2297bf33a12cf8001719a7aea19b7cccd56b772fc25a07e2c0f01fc561c682dd3b799fcb950acdc3261cdb6e1bdab3c3bc8ba2a55af97cfd41fc98b6660b9f50f21763655ff4f062dd7b56e6ea12cf46fa51f00a688c928cc170c3dc0f8d18fb83ea04f251aa8550834fe53b8a4096ae9271ff153a10d8e221f97f7ec8c10614d2971aeb81ef58eac3213bcf4deaa7ba4cc9c23a99b1e6d717ec019f59488b43f6620798326c8927c0e54d04ee9fb75a39cc903cb42f9a2bbd146df6aff137699901d620a48c5dc6ddb7a23e1152b4388f11a6c4553dd31469899b36fd5abd0709efd2873dd51307ccade63a75a1059b50bae2bdf47f54b89ff50b8998ea256f3472444076464438e5d18a87e510022707bfce18eb36fb916df113f4bf2a95050d6cdf55a6617af4ef9c7c9b1f844881dbac8b1b00babea6060cc6fe9a6cbceb18c68fc480280c18f90ac63730937ece4da9076b5e27e2a82aba15c9ae6bf2ea139494268f19b3709f6897b6fdd83bbe9a0ed892d8d06dc317f38374391abf5cdb348253201df923a1d103d324bf01a83f3d63bfac8ab52548a2cc310e617bc43ad9d45e149f5d592fdb9013f626e256a9dce4c76e869ba9eaf922ecad193e89692de7ec1752ed5e8a02fec71b51fce94789f703d97ca99844f08c7cf7af92ad0f798eb636abd45d5e170402ee592cb2377160add1f2197ac7ae3bb1d6e8ba8dba38a4800c1ba556cca7dc9493edc9b424174b81790929d1220bcfa2122c2124ba047a02d9b9f8c1bfd148b4c0d556483d7b2cb426617427d73d4f131b52a69e5994de4a3bb80f05c55c292d792c4d975ec34b1ee19c811f42705d955d5f4d848555f03a1295df93bc749f5c63f4d6cd116b9d5d10c66b23b9dee16868f735cfd82ef771ffb3f213486c38598b8efc433db4fa7047a84c9367711f4a9a699e509feb63bb3dfe9ff01a3b8aec5c6ef0be3cdd13dcf83b47e6ed288f20bf852b82addcc97527342ee13d02bfdf8c638ab392a0bb2283ff59124ae9bb769f490e57c0284619901c94f02075f2fdf626255488bdf1bc14ac0180650fbf1e0b2b7c07866ebaf2c0ef7a80fc48ac806a0cef248b30c6458fd60959947151d73ad6743d7c90e21355a8ec7ec5c4fe819e0a51ae505bcb89e9bee16b153fba764a010da271deff835936b595a4e0e5164221c85ba25f551896ad248c2d66529571c660df9fcc55059409da54102bdc74e1e42c8d716672bfb25d38bc233d8744eb0bc3d134e7c9b594a72a7ff3423f451228d50928601141327533e08d7461b550f65f83c1155966acdff5e3495e855d2708699c4eecb50887780e1ed62d2331d9cdc640f0319d4b85b7273b3997e2f4ce345a7f3bffe11725a23aa79c3b200181ba8986f85db97a4942bc6fbfd5d293d880da8523a57a133de2232044375c807035ac4c8506e2aa333d18105626874580330fbee516281a1bba91d09ce4dee835956d2ccd6b5424bd116940d0756a6332cb4de0b96e3f0f66b385af992edc396a739f3e5b1b92662a289ef277e307b46440cc4081a36708ab2fb14a9cf0502cf4e2c4f9d2ddb5491a4f7a5080d76582dc40edb809c3b01f122043f13cf30ab3b35ef7e95d0bdb1e06797a280eee66108465ae111df696e30f0b0cf0bca44cca90ff5fe0aae53e2edd798a758e348f7a220efa310576cf66e36dc840a0a91b659011cf699ec6d3b6c60c779e16bdc8c629be2a3d31a245de9523dee79786a366d94fee3a2b25256e641e70d9b8b73101c265979a80ef823cec779441c55b9f93c004c192e919ef4ab7709735e0c2bdfa00b7671898798591b702d17ace902ad803f5841b20c87f5858f220c327441dbda61369ce3641673e2587a108ae1b582a88d87a002760e48e344b69da45e09fbffc8259a864107664c0c370d86174e20759c0d458c6eb14086e09bff7daffd74a94d568d914efc51d442a9c83ea9cece22da8d0b066cad1f8b56cc4dc13c84352bcd1d48b0d3c4b1f128eb58873ee196b72dc44e6ba87129be3784769ecf7cbfb8e5a6e078b9c8a1e65115636cd0637affb0df236150683d78a6333abf0c6f74f4dd1147c810359949a330c04c68bc666400115e14e51f5c2d8149b78aa520526220b15166a96d041a47ac4afcee1590910fb60c03c3ce9227385b98ba3e4b1b320e31f48a4b782ba6d65739c810fc861f845ab21e7037f963eab5e2b7d7637ef584b0fc9c45051c9d15b4de359ba47032c1ca73b9130a8be7e40e17e541a318e806f66ae8adbb0598910fe9c339e5a85a656fef29789fba5f0829d68e39b84f2ae46a61032d44de43758c6d5154ba7e953363b8cc6e1ebddf866bc69d9194c3c7dec971009ee6781b8d15e081dae52e9e5b5c95229b9bcda80edc1292e653636b62fa42bd85cca9474bced5c5f4a589e9cd029af751f324faf00897d89e11afd6289dcf9e4dad709e8132cb8e6fc10be1205345400063b8d2d3241f175cfa03eda52ba56e9be699b8fddbdb5263a4e46518698c1ea6ee9729a69cf1d6ee342da2974cbbd3196197b58d0d8304136558e2b568b94740e0202dd4a16a720c4d37ef976c3a22c713e6f74d0f29ac34d290b0ef9e4ce9052a2a050fefbb4b6e716db5de41f08ad2240f98f74e2703946c46ff3eed1705fe2ff4e50d8380d93b12b59e40c9567aab7d88d09ee6c7c91ed45b4ac6ce76e2981e517c4e2c791144a2299b29859efb2f48b43d6c466894349c275eed52ec9b8fc5d3ae6dcd6bf6078121223f2c42aabb9150aa3ee3f3d14f7d6e1aacb9f624b38541762cdaacc1981dfb9fcc1dc34192306b139d22ead0dfaee356c6965d48d43054d1575674a72bd2edc246f4e7778dc88011192bcfa69cbb7cb09cff44d52342e3dbb05cabb022808cc95341a73e37cede010765a34da13992cfb338ef4d84a93e04f0f9773e6a36c780abb04d0e8ba4781dacedb24c54da6bb83f9265f00eab94c5e333a0cccbbe4c15de20433ef752155b9edcde8249c6a5471910224e2b1e5794b1203b7d337ec8a47df982322f78fabe59afdd114172ea27cfc6cc617fafebb5780c3375a6b2b6eceb8dd875a435ff34ebb44c0b053810c59796bc7525c6dea8f005c1d9eaf21de77c6237e0de292d81ceed2c407f34f2e1420a2360dd5f7d472e8338b5420f202f1a628aa99c55e6a5940aa8ce11f69845b9b220938cf5e87a89d82074a84222afd5f6916f3f8f41c5c67122fef70acd0b6918420ae44bf906de0e8b9f1682e7f9339f76baf80828f1dd78f17b01ccb62a448203aff0fb9135ea1a5a95c0a257bdd331c2d10fbefacf0c46df28a7c851dd9ee40c4d1025215fcfa035faf95f6c9198804d6192c7c8d2242f25bd07afd354d35d00627671c67d3e74bc8441bf1e5ce094fdac33c4a203d9211c0aee22c6e43a16c00aebcb04d47d0ae7a431cf354102e85ce84f7f2c7b2ad71c4c76eae1b9555ed3f38c12feb5d2f368d078740fb3502cdc70064efcbc9e434cd1a14df95dcbcc09aab50b7330b8e3f37e057348d7309513faf2e117552c5955091d96deda89cdbe5e62cb1dbb957409401c25a1649c45061d852d69bd96e42c41ac97776121c11df261e43da013355cf2afac6e1325e330b3b8ba3724116a6899c3824009bb7c878d7ea53dbfef1b2eeb4711fa6aaf8fd420805a266b95e41f9e0be2f362997ca6c5c9c05f5aaed075a925afb593eb3c9dcf6a47788ca09d821870fab5c7f5d9cdf8a9097b538a6914b4821f0bbc3b5fa2dd6c53356ce40fe4c280c894f53939d25422c2ede08ca13bcbdfe5b15d18373b5cc4834b16d12aadfe72ebef12bcf3163c1b1e100ae70faa6ff1ee2bb582e9080046a6e258ba320d5ff1d08107aba606b0d6738542f89731c0e71713fa3b72eac51a5946d4bb76a19259f6567a382f74bfc1dfee6e5b0446cf2367f8c47ec2fbc7166db21781e6ec5caf80f0f7659e5597cc408a6ffbfd49bb63cbe7bbbdc215511480fa2cb198d4b178f7177087ffca5f3ae39b9d8d9abbc2945804cb2c945b41ae6a9d4eb1a3be87fef7761a827941182043230eb6d710ae50888fc12924c70a5f77cd3a5a4760ab46b4e289051e301eac3fc9af67df50e76f390a77723dfd6e5ca5302cef5cc6d761d413d49be31e8d9acd5ae4c3d25cd6d00dee2b4e656b7fde143fea3df7d71f876403022cbd07d2938981018d36b3762028a0a1f9c1ec2e30852bae53d54f6ec782b6d4180df4916393118e6b691208d60c70742bb3c5341afd3323c4677afe7cde074fbb47ebe7197e7e3f99d4526e35f8d31e1f01acb0f4e5893f9d9de453ad9b964c692aa8fe1ab242ba9d89d5e37a81cdee43be5c1ded33f18f8e8c354aefd458374aa81c136fb6537714c54560472d3d553000d37bfd10a1244cbaad6fca502f8459a3b3a1076ab6062f03b898ff2cecbe70690c940e1341d423af8f57effabf757b976690d1375f94410cc6358333d9b5e83da1b65b481cb4f90c79cf37dece538af2aecd754581a40221bbb94d40bb3643fe2f9d62151a26f0b581c42c3f7c1c698b668096db66cb5d2401507874f8f0f4358158c62019de9dbf241a4280b07986912e9fdba941f39e7e22dd06f8592798aba43c6cfd15f1f0f6a8c80d6d2d8bad1f280d6f02f45f335e5e1a51307c601f584c56bafce51c8e2c95eb346be5bd4f2daed34db86536b296efbe2847081d583c2ed65014c4e9653e3c7e0da087b21e000107e9e9211052ee4160e0d6a9da098cd1e8e53344e7bb3be88682d42db45dbd5c282c7a793bfa8fce3084ae5c657a38d821589b30cbd21fc15ae5115df57f88517d54a4cd03c60804d38b1d61a28bf4df2c57bd1f198ceb952d56f4805f21808f5e6129ae1197ee6c8c49f6d6bd232a184506683119ac31f2381b8e347b6264fd9509c157af3929a46f0e14ed3fae82a78360dcf1705564714d0aae6ad7ac2b9bbef247e5e43ae306c5a292caac7bb13fdf5736538feaf3c34477d902263f7fa4a5e2f07d8aebda5c0f1a7d9d18cc3924c0faf000d16791cde1b013797279e5f5f72044b0c8083f0089d076a073ec23994777f8c409bfc54393ffa1731a782c420edf58b06c6a7bca6221cba719440f0d1cd36225d34e84409a67fbcb16325f04114d1d5d9b18ea3ac54648ceff0c088ab9b675fc389dd179369965ad6e67d495ac5d61ae647b6aa9fbe8bbc5ea6f4a2989a274b8e59d1838f6ac6254bb6b7e38ba0b966ba2ba24b4d73404ec89bb9d582d40b1e211b6feb9f7a37a935b0371e29d7769db7e150016771ee18eb4569ec204f32a1e6b2c623d563dd653b8b46cbeedb589e7bed7bb45b35d52ac0864040c02eb01618630b5ead6a9d2af35e6989ed1aeba12f35d8bb776e1490e1aa897ad83db9b7d77708500a765d1f3c15a2720667b549e4ba8a8d9193f635329d7d33cf0b58a2815bc4704a6d61bf9bb5ed73a915c0210757170ae48992e9f8208fe4d3d0d6747b9f5d4f6c7b679f57abb5e934b579386438517afcc40c1377300548d08e5ac9424a6b1891f686bcbbfa9a07c0a03a3d9db070293395aaff7592ff5bfa9050aa2d2487d837b87dd632a2eb323cba36d40dd4eca34b1bb7ab0bc72aa1bd4981a38c7d1573f7b657462dff243b21423c54f4f77ae0828d6ce2318c4c6baa4b6e5ad4ca392a11c833a1549903f9f6ed1e9a62274480319b8c60fdfd2d9615d246531d0a43f955581c8e07bf79184114133de71116bddef65a26258d71745e8fb13e7951f3a6b4f2d6af750eb720536f8089166ac36251ba2dbc18bd97fb07dc7b9ab5af32a67e0390738eb9a38453daf731addfa921b7a7e0849bdedf2c29bf0d730c6139c58d775e28686606d3e11aa7438c5a902e28c23ffdaf13a11ff96acad0c0fac4608e8dc9029c905457a4f11c3bf7c1bac116c0276d3ccb06330194593fabd48b94e23155fbf475f300f18006f985bdd4316e81e655c37818a51910130cde8d53a771b65dcfa65b3988d2029728bd73940520f9b87342ebb09e681f27fbe939a5fc1f01a1e3743e03b458b4787496ca05ce5e89bc742da927971ddf525dc7a897d1d3ce524dff7e55647ace34e4714b7d8b60a927b4a6ae9a8797f6b538c0e24fd34067e240e3c72470d9ad1256af398e0ab62cd1ed5468f50dd2dac0b9d7dae42a17f2d675efc811b2e88b5847114d0ade349d3ece5a7c6d451ef73dc12113334da42c8f89272a7203e8cc8e627bbdf34a33e944a123258b376ccad10f19975435fa74444362691e36ccff3eb040530d59d6afe47e7b68a5cfbd180d770af3c393562354bebddacdb6c796f3d6fc44b9b6673ca3db13291f326f4eb1e66197939645384ec468be3c3c1e29078c0208642993d9a817b0d667518ca3ca3aa4b79173d668c869a233a284c1d0f07579091ded30f6ccd01d014768a6969e18c761446a3125989671f79c9abbb309094cd9840479f957384366c738084eea28a59b618721dd1c7f1ca1603486d2d0d6ce389d2146c762a6de32fe58507c68f06b86dd851a2e85f4d770599119e39cc3f5b5a73c78aed525b23e09d48088095d3c785697804d588dc0901e14ea166b13deafee5e5c1516d5d87e6fa1897f4a38dce8e87ddd0414b37bceeee26d008f8b0add08a4ebd3e73f7f6097682680cf4eeea27283dfa9db175332ccf75b1018d5de1fbaec9a0a3159f09376f5c2650ade93cbc34e572ef601f397884a7755460418864842d6b6387f4104ec8072af2af3390a6438dce178dcc593d8e780ddacb256b935974c00e0c109592a188f6f471ce81a0412594d69d619d791cf898c1d6f091a906bdbdf956c3e10108cd1459d549d7bc5f1f50004b205668cdb0bb0fc7996074a0ad7256cb8c6cc0313d0ad440bcb2132a0729c93723a23a940cef000f4af8039879302e0572faea12ff7d80db33b74ad277882202e7abd0ae13da46bcdd02a682e62a19e25ea9c7c883ae99f2737e1955af086df79b7eaa01ae6fe8c7f71dd805bf5e00302b477de04c0c65b0aba7f4b827fb2b3f5f8ad17e59929d72c9eb83411225e84bf40dcd2f8929a2fb48376e4110666a9041b52b210c08714957a9d2b384934c40f9180196e07d544e199f84d364356519ee94157c09962afe5584431632fef74ec35ed3d69cb76a328e3ae804bdff77956e9db73edf45ee7995679d13bbe57d797b4cea0f685</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>图论</tag>
        <tag>线段树</tag>
        <tag>Dijkstra</tag>
        <tag>异或</tag>
        <tag>二进制</tag>
        <tag>PARITY</tag>
      </tags>
  </entry>
  <entry>
    <title>SHOI2020 游记&amp;题解</title>
    <url>/2020/06/23/SHOI2020%E6%B8%B8%E8%AE%B0&amp;%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>6/27~28，联合省选 A 卷，每场 4.5 小时。代码里包含了一些考场做法，所以真的很长，但正确性都没问题。题目难度与顺序无关，只有 D1T2 和 D1T3 开了 O2，具体题面&amp;数据 LOJ 上都有。</p>
<a id="more"></a>
<h4 id="D1T1-冰火战士"><a href="#D1T1-冰火战士" class="headerlink" title="D1T1 冰火战士"></a>D1T1 冰火战士</h4><h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>有若干名冰战士和火战士，属性有温度和权值，要求支持插入和删除（共 $n$ 次操作）。每次找温度 $t$，使得冰战士中温度 $\le t$ 的权值和，与火战士中温度 $\ge t$ 的权值和，二者较小值最大，再取相同中的 $t$ 最大值。</p>
<p>在每次操作后，输出这个最大值 $\times 2$ 以及 $t$ 的值，如果最大值为 $0$ 则输出 Peace。</p>
<p>范围：$n\le 2\cdot 10^6$，$t\le 2\cdot 10^9$，所有权值和 $\le 2\cdot 10^9$，保证不存在属性和冰/火完全相同的战士</p>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>原题面描述了一个对战的游戏，简化之后的答案就是上述较小值 $\times 2$</p>
<p>首先将操作离线，温度离散化</p>
<p>一个自然的想法是三分答案，但测了大样例发现有很多相等的地方，很不好办</p>
<p>实际上可以二分答案，就是按温度从小到大排好，找到冰战士最短前缀权值和 $\ge mid$，火战士最短后缀权值和 $\le mid$，如果冰战士前缀位置 $\le $ 火战士后缀位置，就说明可以。套线段树上二分，时间复杂度 $\mathcal O(n\log^2n)$，可以获得 60 分。</p>
<p>另一个观察是，答案一定在冰前缀与火后缀比较接近时取到。先假设冰前缀 $&lt;$ 火后缀，二分找到这个位置的最大值，然后再 $+1$ 看是否更优。如果是，因为温度要求最大，就再二分找到火后缀保持权值和相同的最大温度位置。套树状数组上二分即可，时间复杂度 $\mathcal O(n\log n)$。</p>
<p>注意冰前缀 $&lt;$ 火后缀，需要换成冰前缀 + 火前缀 $&lt;$ 火和，然后火前缀的下标 $-1$。</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">1</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">2e6</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,N2,N,dy[maxn],mxx;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span> <span class="keyword">int</span> op,t,x,y; &#125; d[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LSH</span> &#123;</span> <span class="keyword">int</span> x,y; &#125; a[maxn]; <span class="comment">// Li San Hua</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(LSH A,LSH B)</span> </span>&#123; <span class="keyword">return</span> A.x&lt;B.x; &#125;</span><br><span class="line"><span class="keyword">namespace</span> BF &#123;</span><br><span class="line">    <span class="keyword">bool</span> alive[<span class="number">110</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> op,t,x,y,a,b,ans=<span class="number">0</span>,pos;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> I=<span class="number">1</span>;I&lt;=n;I++) &#123;</span><br><span class="line">            op=d[I].op,x=d[I].x;</span><br><span class="line">            <span class="keyword">if</span> (op==<span class="number">2</span>) alive[x]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> alive[I]=<span class="number">1</span>;</span><br><span class="line">            ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;=<span class="number">1000</span>;t++) &#123;</span><br><span class="line">                a=b=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=I;i++) <span class="keyword">if</span> (alive[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (d[i].t==<span class="number">0</span>&amp;&amp;d[i].x&lt;=t) a+=d[i].y;</span><br><span class="line">                    <span class="keyword">if</span> (d[i].t==<span class="number">1</span>&amp;&amp;d[i].x&gt;=t) b+=d[i].y;</span><br><span class="line">                &#125;</span><br><span class="line">                a=<span class="built_in">min</span>(a,b);</span><br><span class="line">                <span class="keyword">if</span> (ans&lt;=a) ans=a,pos=t;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!ans) <span class="built_in">printf</span>(<span class="string">"Peace\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>,pos,(ll)ans*<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 0 : ice</span></span><br><span class="line"><span class="comment">// 1 : fire</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> tr[maxn*<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l==r) &#123; tr[root]+=delta; <span class="keyword">return</span>; &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x&lt;=mid) add(x,l,mid,root&lt;&lt;<span class="number">1</span>,delta);</span><br><span class="line">        <span class="keyword">else</span> add(x,mid+<span class="number">1</span>,r,root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,delta);</span><br><span class="line">        tr[root]=(tr[root&lt;&lt;<span class="number">1</span>]+tr[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query1</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span> (l==r) <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (tr[root&lt;&lt;<span class="number">1</span>]&gt;=delta) <span class="keyword">return</span> query1(l,mid,root&lt;&lt;<span class="number">1</span>,delta);</span><br><span class="line">        <span class="keyword">return</span> query1(mid+<span class="number">1</span>,r,root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,delta-tr[root&lt;&lt;<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query2</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span> (l==r) <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (tr[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;=delta) <span class="keyword">return</span> query2(mid+<span class="number">1</span>,r,root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,delta);</span><br><span class="line">        <span class="keyword">return</span> query2(l,mid,root&lt;&lt;<span class="number">1</span>,delta-tr[root&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t0,t1;</span><br><span class="line"><span class="keyword">namespace</span> AC &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> mid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=t0.query1(<span class="number">1</span>,N,<span class="number">1</span>,mid);</span><br><span class="line">        <span class="keyword">int</span> b=t1.query2(<span class="number">1</span>,N,<span class="number">1</span>,mid);</span><br><span class="line">        <span class="keyword">if</span> (a&lt;=b) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x,l,r,mid,res,ans,a=<span class="number">0</span>,b=<span class="number">0</span>,lst=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[i].op==<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[i].t==<span class="number">0</span>) t0.add(d[i].x,<span class="number">1</span>,N,<span class="number">1</span>,d[i].y),a+=d[i].y;</span><br><span class="line">                <span class="keyword">else</span> t1.add(d[i].x,<span class="number">1</span>,N,<span class="number">1</span>,d[i].y),b+=d[i].y;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                x=d[i].x;</span><br><span class="line">                <span class="keyword">if</span> (d[x].t==<span class="number">0</span>) t0.add(d[x].x,<span class="number">1</span>,N,<span class="number">1</span>,-d[x].y),a-=d[x].y;</span><br><span class="line">                <span class="keyword">else</span> t1.add(d[x].x,<span class="number">1</span>,N,<span class="number">1</span>,-d[x].y),b-=d[x].y;</span><br><span class="line">            &#125;</span><br><span class="line">            l=<span class="number">1</span>; r=<span class="built_in">min</span>(a,b); res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">                mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (calc(mid)) res=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!res) <span class="built_in">printf</span>(<span class="string">"Peace\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>,dy[calc(res)],(ll)res*<span class="number">2</span>),lst=res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;		</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> FST &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> tr[maxn],sum;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">            sum+=delta;</span><br><span class="line">            <span class="keyword">for</span> (;x&lt;=N+<span class="number">1</span>;x+=x&amp;(-x)) tr[x]+=delta;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (x&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (;x;x-=x&amp;(-x)) res+=tr[x];</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; T[<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fsum,pos,ans,tmp,t2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[i].op==<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[i].t==<span class="number">0</span>) T[<span class="number">0</span>].add(d[i].x,d[i].y);</span><br><span class="line">                <span class="keyword">else</span> T[<span class="number">1</span>].add(d[i].x+<span class="number">1</span>,d[i].y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> x=d[i].x;</span><br><span class="line">                <span class="keyword">if</span> (d[x].t==<span class="number">0</span>) T[<span class="number">0</span>].add(d[x].x,-d[x].y);</span><br><span class="line">                <span class="keyword">else</span> T[<span class="number">1</span>].add(d[x].x+<span class="number">1</span>,-d[x].y);</span><br><span class="line">            &#125;</span><br><span class="line">            fsum=-T[<span class="number">1</span>].sum;</span><br><span class="line">            pos=ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">20</span>;j&gt;=<span class="number">0</span>;j--) <span class="keyword">if</span> (pos+(<span class="number">1</span>&lt;&lt;j)&lt;=N) &#123;</span><br><span class="line">                tmp=T[<span class="number">0</span>].tr[pos+(<span class="number">1</span>&lt;&lt;j)]+T[<span class="number">1</span>].tr[pos+(<span class="number">1</span>&lt;&lt;j)]+fsum;</span><br><span class="line">                <span class="keyword">if</span> (tmp&lt;<span class="number">0</span>) fsum=tmp,pos+=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">            &#125;</span><br><span class="line">            ans=<span class="number">2</span>*T[<span class="number">0</span>].query(pos);</span><br><span class="line">            <span class="keyword">if</span> (pos&lt;N) &#123;</span><br><span class="line">                tmp=<span class="number">2</span>*(T[<span class="number">1</span>].sum-T[<span class="number">1</span>].query(pos+<span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (tmp&gt;=ans) &#123;</span><br><span class="line">                    ans=tmp;</span><br><span class="line">                    tmp=T[<span class="number">1</span>].query(pos+<span class="number">1</span>);</span><br><span class="line">                    pos=<span class="number">0</span>; fsum=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">20</span>;j&gt;=<span class="number">0</span>;j--) <span class="keyword">if</span> (pos+(<span class="number">1</span>&lt;&lt;j)&lt;=N) &#123;</span><br><span class="line">                        t2=fsum+T[<span class="number">1</span>].tr[pos+(<span class="number">1</span>&lt;&lt;j)];</span><br><span class="line">                        <span class="keyword">if</span> (t2&lt;=tmp) fsum=t2,pos+=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!ans) <span class="built_in">printf</span>(<span class="string">"Peace\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,dy[pos],ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(d[i].op);</span><br><span class="line">        <span class="keyword">if</span> (d[i].op==<span class="number">2</span>) <span class="built_in">read</span>(d[i].x);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">read</span>(d[i].t),<span class="built_in">read</span>(d[i].x),<span class="built_in">read</span>(d[i].y);</span><br><span class="line">            a[++N2]=(LSH)&#123;d[i].x,i&#125;;</span><br><span class="line">            mxx=<span class="built_in">max</span>(mxx,d[i].x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">100</span>&amp;&amp;mxx&lt;=<span class="number">1000</span>) BF::solve();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        sort(a+<span class="number">1</span>,a+N2+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N2;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">1</span>||a[i].x!=a[i<span class="number">-1</span>].x) N++,dy[N]=a[i].x;</span><br><span class="line">            d[a[i].y].x=N;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;=<span class="number">200000</span>) AC::solve();</span><br><span class="line">        <span class="keyword">else</span> FST::solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="D1T2-组合数问题"><a href="#D1T2-组合数问题" class="headerlink" title="D1T2 组合数问题"></a>D1T2 组合数问题</h4><h5 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h5><p>给定整数 $n,x,p$ 和 $m$ 次整系多项式 $f(k)=a_0+a_1k+…+a_mk^m$，计算：</p>
<script type="math/tex; mode=display">
\sum_{k=0}^n f(k)\cdot x^k\cdot \binom nk</script><p>在$\mod p$ 意义下的值</p>
<p>范围：$1\le n,x,p\le 10^9，0\le a_i\le 10^9，0\le m\le \min(n,1000)$</p>
<h5 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h5><p>考场上写了 $n,m\le 1000$ 的暴力和 $m=0$ 的部分分，获得 40 分。容易观察到将 $f(k)$ 中每一项拿出来求和，变成固定 $i\in [0,m]$，计算 $a_i\sum_{k=0}^n k^ix^k\binom nk$ 的值。手推最多解决 $i\le 3$，还可能要求 $p$ 是质数。</p>
<p>考虑组合意义，就是在 $n$ 个人中选 $k$ 个人出来，每选出一个人就乘上 $x$，再在选出来的人中随便打  $i$ 次。这是有顺序的，相当于一个 $i$ 维向量，每维在 $[1,k]$ 中。</p>
<p>设 $dp[i][j]$ 表示在 $i$ 个人里，已经打了 $j$ 次的方案数，则 $dp[i][j]=\sum_{k=0}^j dp[i-1][j-k]\cdot x\cdot \binom jk+dp[i-1][j]$（不好意思重复用了 $i$ 和 $k$）</p>
<p>这其实是个 EGF 卷积，如果写成 $dp[i][j]=\sum_{k=0}^j dp[i-1][j-k]\cdot x\cdot \frac {j!}{k!(j-k)!}+dp[i-1][j]$ 就更好理解了。</p>
<p>$dp[1]$ 的初值是显然的，我们要算 $dp[n]$，直接快速幂即可，预处理组合数+暴力卷积。时间复杂度 $\mathcal O(m^2\log n)$，这也是下面代码的写法。</p>
<h5 id="第二类斯特林数"><a href="#第二类斯特林数" class="headerlink" title="第二类斯特林数"></a>第二类斯特林数</h5><p>当然也可以转下降幂来做，先复习一下：</p>
<script type="math/tex; mode=display">
\begin{align*}
S(0,0)&=1\\
S(n,k)&=S(n-1,k-1)+kS(n-1,k)\\
x^n&=\sum_{k=1}^n S(n,k)x^{\underline k}
\end{align*}</script><p>然后推式子即可，时间复杂度 $\mathcal O(m^2)$，不预处理就是 $\mathcal O(m^2\log n)$</p>
<script type="math/tex; mode=display">
\begin{align*}
&=\sum_{k=0}^n k^ix^k\binom nk\\
&=\sum_{k=0}^n\sum_{j=1}^iS(i,j)k^{\underline j}x^k\binom nk\\
&=\sum_{k=0}^n\sum_{j=1}^iS(i,j)x^k\frac {n^{\underline k}}{(k-j)!}\\
&=\sum_{k=0}^n\sum_{j=1}^iS(i,j)x^jn^{\underline j}x^{k-j}\binom {n-j}{k-j}\\
&=\sum_{j=1}^iS(i,j)n^{\underline j}(x+1)^{n-j}
\end{align*}</script><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">1</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) t=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,x,mod,m,a[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> C[<span class="number">1010</span>][<span class="number">1010</span>],ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>; x%=mod;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=(ll)res*x%mod;</span><br><span class="line">        x=(ll)x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++) C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%mod;	</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">1</span>,tmp,mi;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        tmp=<span class="number">0</span>; mi=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++) &#123;</span><br><span class="line">            update(tmp,(ll)mi*a[j]%mod);</span><br><span class="line">            mi=(ll)mi*i%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        update(ans,(ll)t*C[n][i]%mod*tmp%mod);</span><br><span class="line">        t=(ll)t*x%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ll)a[<span class="number">0</span>]*ksm(x+<span class="number">1</span>,n)%mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Poly</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">1010</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) d[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Poly <span class="keyword">operator</span> * (Poly t1,Poly t2) &#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        res.init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;i+j&lt;=m;j++)</span><br><span class="line">            update(res.d[i+j],(ll)t1.d[i]*t2.d[j]%mod*C[i+j][j]%mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; A,B;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++) C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%mod;	</span><br><span class="line">    &#125;</span><br><span class="line">    A.d[<span class="number">0</span>]=(x+<span class="number">1</span>)%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) A.d[i]=x%mod;</span><br><span class="line">    B.d[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n&amp;<span class="number">1</span>) B=B*A;</span><br><span class="line">        A=A*A; n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) update(ans,(ll)a[i]*B.d[i]%mod);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(x); <span class="built_in">read</span>(mod); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">1000</span>&amp;&amp;m&lt;=<span class="number">1000</span>) solve1();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m==<span class="number">0</span>) solve2();</span><br><span class="line">    <span class="keyword">else</span> solve3();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="D1T3-魔法商店"><a href="#D1T3-魔法商店" class="headerlink" title="D1T3 魔法商店"></a>D1T3 魔法商店</h4><h5 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h5><p>有 $n$ 件物品，属性用 $(v_i,c_i)$ 表示，现在想取出一些物品，使得不存在子集的 $c_i$ 异或和为 $0$，且物品数量最多</p>
<p>给定两个符合上述条件的集合 $A$ 和 $B$，设 $m=|A|=|B|$</p>
<p>你可以调整所有物品的 $v_i$，若调整为 $v_i’$，则代价为 $\sum (v’_i-v_i)^2$</p>
<p>如果要使得 $A$ 是所有符合条件的集合中 $v_i$ 之和最小的，$B$ 是 $v_i$ 之和最大的，求代价最小值</p>
<p>范围：$1\le n\le 1000，1\le m\le 64，1\le c&lt;2^{64}，0\le v_i\le 10^6$</p>
<h5 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h5><p>不知道复杂度比较稳的纯暴力怎么写，考场上随便写拿了 10 分</p>
<p>由于线性无关组的某些性质，$m\le 64$ 是肯定的，但我很好奇这数据怎么造（给定 $A$ 和 $B$ 其实很强）</p>
<p>又由于某些性质，$A-\{x\}+\{y\}$（如果是基）的 $v_i$ 之和必须大于等于 $A$ 的，同理 $B-\{x\}+\{y\}$ （如果是基）的 $v_i$ 之和必须小于等于 $B$ 的（证明还没研究，但容易说服自己这是对的）</p>
<p>一个集合是不是基很好判断，直接线性基，先预处理 $A-\{x\}$ 和 $B-\{x\}$，再枚举 $y\in [1,n]$，我们就得出了若干 $v_x\le v_y$ 的限定条件，用一条 $x\rightarrow y$ 的有向边表示（这与原问题都是等价的）</p>
<p>所以这就变成了保序回归问题了，具体证明在 2018 集训队论文里有，做法还是很好理解的：</p>
<p>对 $v_i’$ 整体二分，假设当前点集为 $V$，权值范围为 $[l,r]$</p>
<p>设 $mid=(l+r)/2$，我们强制 $V$ 中 $v_i’$ 为 $mid$ 或 $mid+1$，先设为 $mid$ 再挑一部分改成 $mid+1$，容易计算出变化量</p>
<p>由限定条件，$mid+1$ 的点最终构成一张闭合子图（即选中点的所有后继也被选中）</p>
<p>本来要求的是最小值，把变化量取相反数就变成<strong>最大权闭合子图</strong>了，跑最小割即可</p>
<blockquote>
<p>源点 $\rightarrow$ 权值为正的点，容量为权值</p>
<p>权值为负的点 $\rightarrow$ 汇点，容量为权值的相反数</p>
<p>其他有向边正常连，容量无穷大</p>
<p>最后选出的点是：源点一侧未割的点 + 汇点一侧割的点</p>
<p>所以从源点出发，走有容量剩余的边，可以到达的所有点构成最大权闭合子图</p>
</blockquote>
<p>最大权闭合子图中的点赋值 $mid+1$，其余 $mid$</p>
<p>则赋值 $mid$ 的最终权值在 $[l,mid]$ 中，赋值 $mid+1$ 的最终权值在 $[mid+1,r]$ 中，递归处理</p>
<p>LOJ 不到 200ms，不想分析复杂度了，感性理解吧，感觉 idea 还挺好的</p>
<h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><p>关于 $0\le v_i\le 1$ 的部分分：只要跑一次网络流，但没见过保序回归就有点难想了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> ll INF=<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,t,cur[<span class="number">1010</span>],val[<span class="number">1010</span>],v2[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> level[<span class="number">1010</span>],tot;</span><br><span class="line">ll ans,flow[<span class="number">1000000</span>];</span><br><span class="line">ull c[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">1010</span>],nxt[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">int</span> to[<span class="number">1000000</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; V;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V.<span class="built_in">size</span>();i++) head[V[i]]=<span class="number">0</span>;</span><br><span class="line">    tot=<span class="number">1</span>;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_edge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,ll c)</span> </span>&#123;</span><br><span class="line">    tot++; nxt[tot]=head[a];</span><br><span class="line">    head[a]=tot; to[tot]=b; flow[tot]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,ll c)</span> </span>&#123;</span><br><span class="line">    Add_edge(a,b,c);</span><br><span class="line">    Add_edge(b,a,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    q=<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V.<span class="built_in">size</span>();i++) cur[V[i]]=head[V[i]],level[V[i]]=<span class="number">-1</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    level[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> a=q.front(),b; q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=head[a];i;i=nxt[i]) &#123;</span><br><span class="line">            b=to[i];</span><br><span class="line">            <span class="keyword">if</span> (flow[i]&gt;<span class="number">0</span>&amp;&amp;level[b]==<span class="number">-1</span>) &#123;</span><br><span class="line">                level[b]=level[a]+<span class="number">1</span>;</span><br><span class="line">                q.push(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> level[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,ll rest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x==t) <span class="keyword">return</span> rest;</span><br><span class="line">    ll used=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=cur[x];i;i=nxt[i]) &#123;</span><br><span class="line">        cur[x]=i;</span><br><span class="line">        <span class="keyword">int</span> y=to[i];</span><br><span class="line">        <span class="keyword">if</span> (flow[i]&gt;<span class="number">0</span>&amp;&amp;level[y]==level[x]+<span class="number">1</span>) &#123;</span><br><span class="line">            ll tflow=dfs(y,<span class="built_in">min</span>(flow[i],rest-used));</span><br><span class="line">            used+=tflow;</span><br><span class="line">            flow[i]-=tflow;</span><br><span class="line">            flow[i^<span class="number">1</span>]+=tflow;</span><br><span class="line">            <span class="keyword">if</span> (rest-used==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!used) level[x]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> used;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (bfs()) dfs(s,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]) <span class="keyword">return</span>;</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[x],y;i;i=nxt[i]) &#123;</span><br><span class="line">        y=to[i];</span><br><span class="line">        <span class="keyword">if</span> (flow[i]) dfs(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sqr</span><span class="params">(ll x)</span> </span>&#123; <span class="keyword">return</span> x*x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; e,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>();i++)</span><br><span class="line">            v2[v[i]]=l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    s=n+<span class="number">1</span>,t=n+<span class="number">2</span>;</span><br><span class="line">    V=v; V.push_back(s); V.push_back(t);</span><br><span class="line">    init();</span><br><span class="line">    ll tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        tmp=sqr(val[v[i]]-mid)-sqr(val[v[i]]-(mid+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (tmp&gt;<span class="number">0</span>) add_edge(s,v[i],tmp);</span><br><span class="line">        <span class="keyword">else</span> add_edge(v[i],t,-tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e.<span class="built_in">size</span>();i++) add_edge(e[i].first,e[i].second,INF);</span><br><span class="line">    </span><br><span class="line">    Dinic();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V.<span class="built_in">size</span>();i++) vis[V[i]]=<span class="number">0</span>;</span><br><span class="line">    dfs(s);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v0,v1; v0.<span class="built_in">clear</span>(); v1.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; e0,e1; e0.<span class="built_in">clear</span>(); e1.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>();i++)</span><br><span class="line">        <span class="keyword">if</span> (!vis[v[i]]) v0.push_back(v[i]);</span><br><span class="line">        <span class="keyword">else</span> v1.push_back(v[i]);</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        x=e[i].first,y=e[i].second;</span><br><span class="line">        <span class="keyword">if</span> (vis[x]==vis[y]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[x]) e0.push_back(e[i]);</span><br><span class="line">            <span class="keyword">else</span> e1.push_back(e[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    solve(v0,e0,l,mid);</span><br><span class="line">    solve(v1,e1,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Base</span> &#123;</span></span><br><span class="line">    ull b[<span class="number">65</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ull x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">64</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            <span class="keyword">if</span> (x&amp;((ull)(<span class="number">1</span>)&lt;&lt;i)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!b[i]) &#123; b[i]=x; <span class="keyword">break</span>; &#125;</span><br><span class="line">                x^=b[i];</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ull x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">64</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            <span class="keyword">if</span> (x&amp;((ull)(<span class="number">1</span>)&lt;&lt;i)) x^=b[i];</span><br><span class="line">        <span class="keyword">return</span> x&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; t1[<span class="number">65</span>],t2[<span class="number">65</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">65</span>],b[<span class="number">65</span>];</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; d[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; E;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(c[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(val[i]),mx=<span class="built_in">max</span>(mx,val[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(b[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        <span class="keyword">if</span> (i!=j) &#123;</span><br><span class="line">            t1[i].add(c[a[j]]);</span><br><span class="line">            t2[i].add(c[b[j]]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j!=a[i]&amp;&amp;t1[i].check(c[j])) d[++N]=make_pair(a[i],j);</span><br><span class="line">        <span class="keyword">if</span> (j!=b[i]&amp;&amp;t2[i].check(c[j])) d[++N]=make_pair(j,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(d+<span class="number">1</span>,d+N+<span class="number">1</span>);</span><br><span class="line">    N=unique(d+<span class="number">1</span>,d+N+<span class="number">1</span>)-d<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) E.push_back(d[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) tmp.push_back(i);</span><br><span class="line">    solve(tmp,E,<span class="number">0</span>,mx);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans+=sqr(v2[i]-val[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="D2T1-信号传递"><a href="#D2T1-信号传递" class="headerlink" title="D2T1 信号传递"></a>D2T1 信号传递</h4><h5 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h5><p>一条路上有 $m$ 个信号站，依次相隔 1 个单位长度，在最左侧有一个控制塔，距离最左边的信号站 1 个单位长度。当信号从 $a$ 传到 $b$ 时，如果向右，则 1 单位长度代价为 1；如果向左，则必须先传到控制塔，再由控制塔传到 $b$，其中 1 单位长度代价为 $k$。</p>
<p>现在有一个长度为 $n$ 的传递序列 $\{S_n\}$，每一次都将信号从 $S_{i}$ 传到 $S_{i+1}$，当 $S_i=S_{i+1}$ 时无需传递。你可以任意排列这 $m$ 个信号站，求代价和最小值。</p>
<p>范围：$m\le 23，n\le 10^5$</p>
<h5 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h5><p>由于暴力没判 $S_i=S_{i+1}$，30 分就没有了</p>
<p>注意到 $n$ 是没用的，只要记 $d[i][j]$ 表示 ${S_n}$ 中出现相邻 $i,j$ 的个数（$i$ 在 $j$ 前面）</p>
<p>一个显然的想法是状压 DP，但代价必须分开来计算</p>
<p>设 $dp[S]$ 表示当前排列已经选好 $S$ 中信号塔的最小代价和，相当于从左到右依次确定这个排列。这样设计的好处是：左右关系也确定了。</p>
<p>记 $pos=|S|$，这可以 $O(2^m)$ 预处理，然后枚举第 $pos+1$ 个位置填的数 $i$，再枚举 $j$，通过 $j$ 是否在 $S$ 中（即 $j$ 是否在 $i$ 左边）来统计额外的代价，并更新到 $dp[S+\{i\}]$ 上。这是我考场上的想法，时间复杂度 $\mathcal O(n+2^mm^2)$，可以获得 60 分。</p>
<p>如此转移不够好，而且枚举 $i\notin S$ 在实现上也不好办，大概只能从 $1$ 枚举到 $m$（枚举 $i\in S$ 可以用 $lowbit$）</p>
<p>所以我们换个方向做 DP：</p>
<script type="math/tex; mode=display">
dp[S]=\min_{i\in S}dp[S-\{i\}]+\sum_{j\in S} (d[i][j]\cdot k+d[j][i])\cdot pos+\sum_{j\notin S} (d[j][i]\cdot k-d[i][j])\cdot pos</script><p>预处理 $a[i][j]=d[i][j]\cdot k+d[j][i]，b[i][j]=d[j][i]\cdot k-d[i][j]$</p>
<p>那么对于 $S$ 和 $i$ 来说，需要维护 $c[i]=\sum_{j\in S} a[i][j]+\sum_{j\notin S} b[i][j]$</p>
<p>而 $S$ 是从 $1$ 枚举到 $2^m-1$ 的，当 $S-1$ 变化到 $S$ 时，如果记 $i$ 为 $lowbit(S)$ 的位置，则第 $1$ 至 $i-1$ 位从 $1$ 变 $0$，第 $i$ 位从 $0$ 变 $1$，这会给 $c$ 带来一些 $b-a$ 或者 $a-b$ 的变化量：</p>
<p>对于所有 $j\in [1,m]$，$c[j]$ 的变化量就是 $a[j][i]-b[j][i]+\sum_{l=1}^{i-1}(b[j][l]-a[j][l])$，后面的求和用前缀和预处理</p>
<p>时间复杂度 $\mathcal O(n+2^mm)$，实现时稍微注意一下常数就可以通过本题了。</p>
<p>顺便说一下 DP 最优子结构的问题，虽然这系数有正有负，但影响系数的只有前面放了哪些，而顺序无关。所以前面随便交换，后面都不影响，就没问题了。考场上过了对拍还以为会错，于是拿了 $60-30=30$ 分。</p>
<h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><p>本机样例 $m=23$ 都要 1.6s，但 LOJ 只要 400ms</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">1</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=(<span class="number">1e12</span>);</span><br><span class="line"><span class="keyword">int</span> n,m,k,N,a[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">30</span>][<span class="number">30</span>],pos;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">1</span>&lt;&lt;<span class="number">23</span>];</span><br><span class="line">ll dp[<span class="number">1</span>&lt;&lt;<span class="number">23</span>],tmp,ans;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">namespace</span> BF &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) p[i]=i;</span><br><span class="line">        ans=INF;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            tmp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">                x=a[i],y=a[i+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (x==y) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (p[x]&lt;=p[y]) tmp+=p[y]-p[x];</span><br><span class="line">                <span class="keyword">else</span> tmp+=k*(p[x]+p[y]);</span><br><span class="line">            &#125;</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,tmp);</span><br><span class="line">        &#125; <span class="keyword">while</span> (next_permutation(p+<span class="number">1</span>,p+m+<span class="number">1</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll &amp;x,ll y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;y) x=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> FST &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> t=<span class="number">0</span>;t&lt;N<span class="number">-1</span>;++t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[t]==INF) <span class="keyword">continue</span>;</span><br><span class="line">            pos=cnt[t]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t&amp;(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))) <span class="keyword">continue</span>;</span><br><span class="line">                tmp=dp[t];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (d[i][j]) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (t&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))) tmp+=(ll)d[i][j]*k*pos;</span><br><span class="line">                        <span class="keyword">else</span> tmp-=(ll)d[i][j]*pos;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (d[j][i]) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (t&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))) tmp+=(ll)d[j][i]*pos;</span><br><span class="line">                        <span class="keyword">else</span> tmp+=(ll)d[j][i]*k*pos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                update(dp[t+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))],tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[N<span class="number">-1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> AC &#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">35</span>][<span class="number">35</span>],b[<span class="number">35</span>][<span class="number">35</span>],c[<span class="number">35</span>];</span><br><span class="line">    ll s[<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line">    <span class="keyword">int</span> lowbit[<span class="number">1</span>&lt;&lt;<span class="number">23</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) &#123;</span><br><span class="line">                a[i][j]=d[i][j]*k+d[j][i],b[i][j]=d[j][i]*k-d[i][j];</span><br><span class="line">                c[i]+=b[i][j];</span><br><span class="line">                s[i][j]=s[i][j<span class="number">-1</span>]+b[i][j]-a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">1</span>,i;s&lt;N;s++) &#123;</span><br><span class="line">            i=(s&amp;(-s));</span><br><span class="line">            <span class="keyword">while</span> (i) i&gt;&gt;=<span class="number">1</span>,lowbit[s]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">1</span>,i;t&lt;N;t++) &#123;</span><br><span class="line">            pos=cnt[t];</span><br><span class="line">            i=lowbit[t];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) &#123;</span><br><span class="line">                c[j]+=a[j][i]-b[j][i]+s[j][i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s=t;s;s-=s&amp;(-s)) &#123;</span><br><span class="line">                i=lowbit[s];</span><br><span class="line">                update(dp[t],dp[t-(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))]+(ll)c[i]*pos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[N<span class="number">-1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m); <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">if</span> (m&lt;=<span class="number">8</span>&amp;&amp;n&lt;=<span class="number">100</span>) BF::solve();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i]!=a[i+<span class="number">1</span>]) d[a[i]][a[i+<span class="number">1</span>]]++;</span><br><span class="line">    N=(<span class="number">1</span>&lt;&lt;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;N;t++) cnt[t]=cnt[t-(t&amp;(-t))]+<span class="number">1</span>,dp[t]=INF;</span><br><span class="line">    <span class="keyword">if</span> (m&lt;=<span class="number">20</span>) FST::solve();</span><br><span class="line">    AC::solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="D2T2-树"><a href="#D2T2-树" class="headerlink" title="D2T2 树"></a>D2T2 树</h4><h5 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h5><p>给定一棵 $n$ 个节点的树，根是 $1$，每个节点有权值 $val[u]$，记 $dep[u]$ 表示深度</p>
<p>定义 $f(u)$ 是 $u$ 子树内所有节点（包括 $u$）的 $val[v]+dep[v]-dep[u]$ 的异或和，求 $\sum_{u=1}^n f(u)$</p>
<p>范围：$1\le n,val[u]\le 525010$</p>
<h5 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h5><p>写完暴力以后，想到将答案<strong>按位统计</strong>，否则可以让我们输出每个 $f(u)$，虽然现在想想要求也是可以的</p>
<p>枚举 $j$，对于 $u$ 计算满足 $val[v]+dep[v]-dep[u]$ 第 $j$ 位是 $1$ 的 $v$ 个数，想到 <strong>CF 1322 B</strong> 的处理方法：</p>
<blockquote>
<p>把这些数先模 $2^{j+1}$，即只看末 $j$ 位，然后相当于满足 $2^{j}\le a+b&lt;2^{j+1}$</p>
</blockquote>
<p>因为本题有个减法，所以不妨把 $dep[u]$ 变成 $2^{22}-dep[u]$，再统统对 $2^{j+1}$ 取模</p>
<p>所以对于 $u$ 来说，符合条件的 $val[v]+dep[v]$ 一定在一段区间内，因为不等式算出来可能有负的，所以需要加上 $2^{j+1}$ 再判一下，可以看成是两个区间（不对拍可能查不出来）</p>
<p>因为 $v$ 必须在 $u$ 子树内，一个直接的想法是：线段树合并，时间复杂度 $\mathcal O(n\log ^2n)$。测试一下只有 40 分，因为怕 MLE 考场数组大小从 $10^7$ 调整到 $8\times 10^6$，后面直接挂掉（当然大概率也是 TLE 的）</p>
<p>针对链，直接树状数组就可以了，于是一共 60 分。</p>
<h5 id="优化：树上差分"><a href="#优化：树上差分" class="headerlink" title="优化：树上差分"></a>优化：树上差分</h5><p>在进入 $u$ 的任何儿子之前，先询问一下 $val[v]+dep[v]$ 所在区间的 $v$ 个数；在访问完整个子树后，再询问一下，所得差即为子树内满足条件的了。</p>
<p>用树状数组维护，虽然复杂度不变，但显然快很多很多了，足以通过本题。</p>
<h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><p>依次是暴力、线段树合并、链、正解（FST=faster！）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">1</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=(<span class="number">1e7</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">530000</span>;</span><br><span class="line"><span class="keyword">int</span> n,val[maxn],fa[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn],nxt[maxn*<span class="number">2</span>],to[maxn*<span class="number">2</span>],tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    tot++; nxt[tot]=head[x];</span><br><span class="line">    head[x]=tot; to[tot]=y;</span><br><span class="line">&#125;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">namespace</span> BF &#123;</span><br><span class="line">    ll tmp;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p,<span class="keyword">int</span> dep)</span> </span>&#123;</span><br><span class="line">        tmp^=(dep+val[u]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">            v=to[i];</span><br><span class="line">            <span class="keyword">if</span> (v!=p) dfs(v,u,dep+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            tmp=<span class="number">0</span>;</span><br><span class="line">            dfs(i,fa[i],<span class="number">0</span>);</span><br><span class="line">            ans+=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> AC &#123;</span><br><span class="line">    <span class="keyword">int</span> dep[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">            v=to[i];</span><br><span class="line">            <span class="keyword">if</span> (v!=fa[u]) &#123;</span><br><span class="line">                dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">                dfs1(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tot,tr[maxm],ls[maxm],rs[maxm],rt[maxn];</span><br><span class="line">    ll tmp;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        tr[x]=tr[ls[x]]+tr[rs[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">        <span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">            tr[x]+=tr[y];</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        ls[x]=merge(ls[x],ls[y],l,mid);</span><br><span class="line">        rs[x]=merge(rs[x],rs[y],mid+<span class="number">1</span>,r);</span><br><span class="line">        pushup(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) root=++tot,tr[root]=ls[root]=rs[root]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">            tr[root]++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x&lt;=mid) update(x,l,mid,ls[root]);</span><br><span class="line">        <span class="keyword">else</span> update(x,mid+<span class="number">1</span>,r,rs[root]);</span><br><span class="line">        pushup(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L&gt;R||!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> tr[root];</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (L&lt;=mid) res=query(L,R,l,mid,ls[root]);</span><br><span class="line">        <span class="keyword">if</span> (mid&lt;R) res+=query(L,R,mid+<span class="number">1</span>,r,rs[root]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j,mx;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        rt[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">            v=to[i];</span><br><span class="line">            <span class="keyword">if</span> (v==fa[u]) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(v);</span><br><span class="line">            rt[u]=merge(rt[u],rt[v],<span class="number">0</span>,<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        update(val[u]%(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>),<span class="number">0</span>,(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>),rt[u]);</span><br><span class="line">        <span class="keyword">int</span> l=(<span class="number">1</span>&lt;&lt;j)-dep[u]%(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>),r=(<span class="number">1</span>&lt;&lt;(j+<span class="number">1</span>))-dep[u]%(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>)<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> x=l+(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>),y=r+(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>);</span><br><span class="line">        r=<span class="built_in">min</span>(r,<span class="number">1</span>&lt;&lt;(j+<span class="number">1</span>)); l=<span class="built_in">max</span>(l,<span class="number">0</span>);</span><br><span class="line">        y=<span class="built_in">min</span>(y,<span class="number">1</span>&lt;&lt;(j+<span class="number">1</span>)); x=<span class="built_in">max</span>(x,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> cnt=query(l,r,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>,rt[u])+query(x,y,<span class="number">0</span>,<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>,rt[u]);</span><br><span class="line">        <span class="keyword">if</span> (cnt%<span class="number">2</span>==<span class="number">1</span>) tmp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dfs1(<span class="number">1</span>);</span><br><span class="line">        mx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) val[i]+=dep[i],mx=<span class="built_in">max</span>(mx,val[i]),dep[i]=(<span class="number">1</span>&lt;&lt;<span class="number">22</span>)-dep[i];</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=mx;j++) &#123;</span><br><span class="line">            tot=<span class="number">0</span>;</span><br><span class="line">            tmp=<span class="number">0</span>;</span><br><span class="line">            dfs(<span class="number">1</span>);</span><br><span class="line">            ans+=tmp*(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> Lian &#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span> (fa[i]!=i<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> dep[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">            v=to[i];</span><br><span class="line">            <span class="keyword">if</span> (v!=fa[u]) &#123;</span><br><span class="line">                dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">                dfs1(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> j,mx;</span><br><span class="line">    ll tmp;</span><br><span class="line">    <span class="keyword">int</span> tr[maxm];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        x++;</span><br><span class="line">        <span class="keyword">for</span> (;x&lt;=(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>)+<span class="number">1</span>;x+=x&amp;(-x)) tr[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;x;x-=x&amp;(-x)) res+=tr[x];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res=query(r+<span class="number">1</span>)-query(l);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">            v=to[i];</span><br><span class="line">            <span class="keyword">if</span> (v==fa[u]) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">        add(val[u]%(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">int</span> l=(<span class="number">1</span>&lt;&lt;j)-dep[u]%(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>),r=(<span class="number">1</span>&lt;&lt;(j+<span class="number">1</span>))-dep[u]%(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>)<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> x=l+(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>),y=r+(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>);</span><br><span class="line">        r=<span class="built_in">min</span>(r,(<span class="number">1</span>&lt;&lt;(j+<span class="number">1</span>))); l=<span class="built_in">max</span>(l,<span class="number">0</span>);</span><br><span class="line">        y=<span class="built_in">min</span>(y,(<span class="number">1</span>&lt;&lt;(j+<span class="number">1</span>))); x=<span class="built_in">max</span>(x,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> cnt=query(l,r)+query(x,y);</span><br><span class="line">        <span class="keyword">if</span> (cnt%<span class="number">2</span>==<span class="number">1</span>) tmp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dfs1(<span class="number">1</span>);</span><br><span class="line">        mx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) val[i]+=dep[i],mx=<span class="built_in">max</span>(mx,val[i]),dep[i]=(<span class="number">1</span>&lt;&lt;<span class="number">22</span>)-dep[i];</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=mx;j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>);i++) tr[i]=<span class="number">0</span>;</span><br><span class="line">            tmp=<span class="number">0</span>;</span><br><span class="line">            dfs(<span class="number">1</span>);</span><br><span class="line">            ans+=tmp*(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">namespace</span> FST &#123;</span><br><span class="line">    <span class="keyword">int</span> dep[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">            v=to[i];</span><br><span class="line">            <span class="keyword">if</span> (v!=fa[u]) &#123;</span><br><span class="line">                dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">                dfs1(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll tmp;</span><br><span class="line">    <span class="keyword">int</span> j,mx;</span><br><span class="line">    <span class="keyword">int</span> tr[maxm];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        x++;</span><br><span class="line">        <span class="keyword">for</span> (;x&lt;=(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>)+<span class="number">1</span>;x+=x&amp;(-x)) tr[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;x;x-=x&amp;(-x)) res+=tr[x];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> query(r+<span class="number">1</span>)-query(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=(<span class="number">1</span>&lt;&lt;j)-dep[u]%(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>),r=(<span class="number">1</span>&lt;&lt;(j+<span class="number">1</span>))-dep[u]%(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>)<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> x=l+(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>),y=r+(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>);</span><br><span class="line">        r=<span class="built_in">min</span>(r,(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>)<span class="number">-1</span>); l=<span class="built_in">max</span>(l,<span class="number">0</span>);</span><br><span class="line">        y=<span class="built_in">min</span>(y,(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>)<span class="number">-1</span>); x=<span class="built_in">max</span>(x,<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> cnt=query(l,r)+query(x,y);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">            v=to[i];</span><br><span class="line">            <span class="keyword">if</span> (v==fa[u]) <span class="keyword">continue</span>;</span><br><span class="line">            dfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">        update(val[u]%(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>));</span><br><span class="line">        cnt-=query(l,r)+query(x,y);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(cnt)%<span class="number">2</span>==<span class="number">1</span>) tmp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dfs1(<span class="number">1</span>);</span><br><span class="line">        mx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) val[i]+=dep[i],mx=<span class="built_in">max</span>(mx,val[i]),dep[i]=(<span class="number">1</span>&lt;&lt;<span class="number">22</span>)-dep[i];</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=mx;j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=(<span class="number">1</span>&lt;&lt;j+<span class="number">1</span>);i++) tr[i]=<span class="number">0</span>;</span><br><span class="line">            tmp=<span class="number">0</span>;</span><br><span class="line">            dfs(<span class="number">1</span>);</span><br><span class="line">            ans+=tmp*(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(val[i]);</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) <span class="built_in">read</span>(x),fa[i]=x,add(x,i);</span><br><span class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">3000</span>) BF::solve();</span><br><span class="line">    <span class="keyword">if</span> (Lian::check()) Lian::solve();</span><br><span class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">152501</span>) AC::solve();</span><br><span class="line">    FST::solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="D2T3-作业题"><a href="#D2T3-作业题" class="headerlink" title="D2T3 作业题"></a>D2T3 作业题</h4><h5 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h5><p>给定一张 $n$ 个点 $m$ 条边的带权无向图 $G$，无重边无自环，对于一棵生成树 $T$，假设每条边的边权为 $w_1,w_2,…,w_{n-1}$，则定义权值为 $(\sum_{i=1}^{n-1}w_i)\cdot \gcd(w_1,w_2,…,w_{n-1})$</p>
<p>求所有生成树的权值之和，对 998244353 取模。</p>
<p>范围：$1\le n\le 30，1\le m\le \frac 12n(n-1)，1\le w_i\le152501$</p>
<h5 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h5><p>暴力 $2^m$ 随便做，$m\le n$（树+环套树）很好写，$w_i$ 全相同相当于求生成树个数（Matrix-Tree），$w_i$ 都是质数就把相同的一起算，跑好几次 Matrix-Tree 即可。在实现这一部分的过程中，容易发现，我们需要快速计算出 <strong>所有生成树的边权之和</strong>。</p>
<p>一般的 Matrix-Tree 支持重边，所以算出来是所有生成树边权乘积之和，就不行了。</p>
<p>而我考场的想法仅限于枚举每条边，跑 Matrix-Tree 看贡献，这样针对一张图算一次的复杂度是 $\mathcal O(n^4)$。<del>结果算完 Matrix-Tree 没有乘上去，质数部分直接挂掉</del></p>
<p>如果优化到 $\mathcal O(n^3)$，那么只要枚举 $\gcd$，跑个容斥就好了，复杂度可以接受。目前为止的思路都挺显然的。</p>
<p>事实上，Matrix-Tree 最厉害的地方在于，不一定要是数，多项式也可以。</p>
<p>相当于若干个 $w_ix+1$ 在做高斯消元，正常的乘积后求和，最后关心的是一次项系数。</p>
<p>所以运算都可在模 $x^2$ 意义下进行，矩阵中每个元素相当于 $ax+b$</p>
<p>逆元也很好办，只要 $(ax+b)(cx+d)\equiv 1$，等价于 $bd\equiv 1，ad+bc\equiv 0$，式子敲进去即可</p>
<p>这就做完了。好像不大符合 D2T3 的形象啊……下面请欣赏 6.5KB 代码。</p>
<h5 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">1</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">160000</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">    <span class="keyword">return</span> gcd(y,x%y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> <span class="keyword">int</span> x,y,z; &#125; e[<span class="number">10000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">    <span class="keyword">bool</span> vis[<span class="number">35</span>],flag;</span><br><span class="line">    <span class="keyword">int</span> head[<span class="number">35</span>],to[<span class="number">10000</span>],nxt[<span class="number">10000</span>],tot,tmp,g;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) head[i]=<span class="number">0</span>;</span><br><span class="line">        tot=<span class="number">0</span>; tmp=<span class="number">0</span>; g=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (ll)tmp*g%mod; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">return</span>;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u];i;i=nxt[i]) dfs(to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        tot++; nxt[tot]=head[x];</span><br><span class="line">        head[x]=tot; to[tot]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(edge A)</span> </span>&#123;</span><br><span class="line">        tmp+=A.z;</span><br><span class="line">        g=gcd(g,A.z);</span><br><span class="line">        add(A.x,A.y);</span><br><span class="line">        add(A.y,A.x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">        dfs(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span> (!vis[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; G; <span class="comment">// end Graph</span></span><br><span class="line"><span class="keyword">namespace</span> BF &#123;</span><br><span class="line">    <span class="keyword">int</span> ans,cnt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;(<span class="number">1</span>&lt;&lt;m);t++) &#123;</span><br><span class="line">            cnt=<span class="number">0</span>;</span><br><span class="line">            G.init();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">                <span class="keyword">if</span> (t&amp;(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    G.insert(e[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt!=n<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (G.check()) &#123;</span><br><span class="line">                update(ans,G.query());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="comment">// end BF</span></span><br><span class="line"><span class="keyword">namespace</span> Tree &#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        G.init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) G.insert(e[i]);</span><br><span class="line">        <span class="keyword">if</span> (G.check()) ans=G.query();</span><br><span class="line">        <span class="keyword">else</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans); <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="comment">// end Tree</span></span><br><span class="line"><span class="keyword">namespace</span> Cyc &#123;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            G.init();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">                <span class="keyword">if</span> (i!=j) G.insert(e[j]);</span><br><span class="line">            <span class="keyword">if</span> (G.check()) update(ans,G.query());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans); <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="comment">// end Cyc</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gauss</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d[<span class="number">35</span>][<span class="number">35</span>],N;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; N=n<span class="number">-1</span>,<span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d)); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; d[x][y]--; d[x][x]++; d[y][x]--; d[y][y]++; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;j++) d[i][j]=(d[i][j]+mod)%mod;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="number">0</span>; <span class="keyword">int</span> a,b,c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=N;j++) &#123;</span><br><span class="line">            a=d[i][i]; b=d[j][i];</span><br><span class="line">            <span class="keyword">while</span> (b) &#123;</span><br><span class="line">                c=a/b; a%=b; swap(a,b); flag^=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=i;k&lt;=N;k++)</span><br><span class="line">                    d[i][k]-=(ll)c*d[j][k]%mod,</span><br><span class="line">                    d[i][k]=(d[i][k]+mod)%mod;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=i;k&lt;=N;k++) swap(d[i][k],d[j][k]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!d[i][i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">            res=(ll)res*d[i][i]%mod;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="keyword">return</span> mod-res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T; <span class="comment">// end Gauss</span></span><br><span class="line"><span class="keyword">namespace</span> MT_cnt &#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123; <span class="comment">// All z the same</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++) <span class="keyword">if</span> (e[i].z!=e[<span class="number">1</span>].z) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,z;</span><br><span class="line">        T.init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            x=e[i].x,y=e[i].y;</span><br><span class="line">            T.add(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        n--; z=e[<span class="number">1</span>].z;</span><br><span class="line">        ans=T.query();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(ll)ans*z%mod*z%mod*n%mod);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="comment">// end MT_cnt</span></span><br><span class="line"><span class="keyword">namespace</span> Prime &#123;</span><br><span class="line">    <span class="keyword">int</span> tot,prime[maxn],tmp,ans;</span><br><span class="line">    <span class="keyword">bool</span> vis[maxn];</span><br><span class="line">    <span class="keyword">int</span> sum,delta;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) prime[++tot]=i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) &#123;</span><br><span class="line">                tmp=prime[j]*i;</span><br><span class="line">                <span class="keyword">if</span> (tmp&gt;=maxn) <span class="keyword">break</span>;</span><br><span class="line">                vis[tmp]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">            <span class="keyword">if</span> (vis[e[i].z]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge A,edge B)</span> </span>&#123; <span class="keyword">return</span> A.z&lt;B.z; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tot=ans=tmp=<span class="number">0</span>;</span><br><span class="line">        T.init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) T.add(e[i].x,e[i].y);</span><br><span class="line">        tot=T.query();</span><br><span class="line">        sort(e+<span class="number">1</span>,e+m+<span class="number">1</span>,cmp);</span><br><span class="line">        sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            T.init();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) <span class="keyword">if</span> (i!=j) T.add(e[j].x,e[j].y);</span><br><span class="line">            tmp=((ll)tot-T.query()+mod)%mod;</span><br><span class="line">            update(sum,(ll)tmp*e[i].z%mod);</span><br><span class="line">        &#125;</span><br><span class="line">        delta=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j;i&lt;=m;i=j+<span class="number">1</span>) &#123;</span><br><span class="line">            j=i;</span><br><span class="line">            <span class="keyword">while</span> (j&lt;m&amp;&amp;e[j+<span class="number">1</span>].z==e[i].z) j++;</span><br><span class="line">            <span class="keyword">if</span> (j-i+<span class="number">1</span>&gt;=n<span class="number">-1</span>) &#123;</span><br><span class="line">                T.init();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=i;k&lt;=j;k++) T.add(e[k].x,e[k].y);</span><br><span class="line">                tmp=T.query();</span><br><span class="line">                <span class="keyword">int</span> z=e[i].z;</span><br><span class="line">                tmp=((ll)z*(n<span class="number">-1</span>)%mod*z%mod-(ll)z*(n<span class="number">-1</span>)%mod+mod)%mod*tmp%mod;</span><br><span class="line">                update(delta,tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=(sum+delta)%mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="comment">// end Prime</span></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> AC &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Poly</span> &#123;</span> <span class="comment">// ax+b</span></span><br><span class="line">        ll a,b;</span><br><span class="line">        <span class="keyword">friend</span> Poly <span class="keyword">operator</span> * (Poly t1,Poly t2) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Poly)&#123;((ll)t1.a*t2.b%mod+(ll)t1.b*t2.a%mod)%mod,(ll)t1.b*t2.b%mod&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">friend</span> Poly <span class="keyword">operator</span> - (Poly t1,Poly t2) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Poly)&#123;(t1.a-t2.a+mod)%mod,(t1.b-t2.b+mod)%mod&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">friend</span> Poly <span class="keyword">operator</span> + (Poly t1,Poly t2) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Poly)&#123;(t1.a+t2.a)%mod,(t1.b+t2.b)%mod&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; d[<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">zero</span><span class="params">(Poly x)</span> </span>&#123; <span class="keyword">return</span> x.a==<span class="number">0</span>&amp;&amp;x.b==<span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">inv</span><span class="params">(Poly A)</span> </span>&#123;</span><br><span class="line">        ll a=A.a,b=A.b;</span><br><span class="line">        ll d=ksm(b,mod<span class="number">-2</span>);</span><br><span class="line">        ll c=(mod-a*d%mod)*d%mod;</span><br><span class="line">        <span class="keyword">return</span> (Poly)&#123;c,d&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fac[maxn],ex[maxn];</span><br><span class="line">    <span class="keyword">int</span> ans[maxn],res;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Guass_Poly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Poly iv,t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (zero(d[i][i])) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">                    <span class="keyword">if</span> (!zero(d[j][i])) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k=i;k&lt;n;k++) swap(d[i][k],d[j][k]);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            iv=inv(d[i][i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">                <span class="keyword">if</span> (!zero(d[i][j])) &#123;</span><br><span class="line">                    t=d[i][j]*iv;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;n;k++)</span><br><span class="line">                        d[k][j]=d[k][j]-t*d[k][i];</span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        Poly res; res.a=<span class="number">0</span>,res.b=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">            res=res*d[i][i];</span><br><span class="line">        <span class="keyword">return</span> res.a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;maxn;j+=i) fac[j].push_back(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;fac[e[i].z].<span class="built_in">size</span>();j++)</span><br><span class="line">                ex[fac[e[i].z][j]].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x,y; Poly A;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++) <span class="keyword">if</span> (ex[i].<span class="built_in">size</span>()&gt;=n<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++) d[j][k]=(Poly)&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ex[i].<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">                x=e[ex[i][j]].x,y=e[ex[i][j]].y;</span><br><span class="line">                A=(Poly)&#123;e[ex[i][j]].z,<span class="number">1</span>&#125;;</span><br><span class="line">                d[x][y]=d[x][y]-A;</span><br><span class="line">                d[y][x]=d[y][x]-A;</span><br><span class="line">                d[x][x]=d[x][x]+A;</span><br><span class="line">                d[y][y]=d[y][y]+A;</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i]=Guass_Poly();</span><br><span class="line">        &#125;</span><br><span class="line">        res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=maxn<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i+i;j&lt;maxn;j+=i) ans[i]=(ans[i]-ans[j]+mod)%mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++) update(res,(ll)ans[i]*i%mod);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">if</span> (m&lt;n<span class="number">-1</span>) &#123; <span class="built_in">printf</span>(<span class="string">"0\n"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(e[i].x),<span class="built_in">read</span>(e[i].y),<span class="built_in">read</span>(e[i].z);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (m&lt;=<span class="number">15</span>) BF::solve();</span><br><span class="line">    <span class="keyword">if</span> (m==n<span class="number">-1</span>) Tree::solve();</span><br><span class="line">    <span class="keyword">if</span> (m==n) Cyc::solve();</span><br><span class="line">    <span class="keyword">if</span> (MT_cnt::check()) MT_cnt::solve();</span><br><span class="line">    <span class="keyword">if</span> (Prime::check()) Prime::solve();</span><br><span class="line">    </span><br><span class="line">    AC::solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游记</category>
        <category>省选</category>
      </categories>
      <tags>
        <tag>斯特林数</tag>
        <tag>树上差分</tag>
        <tag>Matrix-Tree</tag>
        <tag>状压 DP</tag>
        <tag>树状数组</tag>
        <tag>保序回归</tag>
        <tag>最大权闭合子图</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>6月月赛 - F</title>
    <url>/2020/06/12/6%E6%9C%88%E6%9C%88%E8%B5%9B%20F/</url>
    <content><![CDATA[<h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>对于一个值域为 $[1,K]$ 的正整数序列，定义它是有魅力的，当且仅当其中存在一个子区间恰好是 $[1,K]$ 的排列。</p>
<p>现给定一个长度为 $m$ 的正整数序列 $\{a_m\}$，在所有长度为 $n$ 且有魅力的序列中，统计 $\{a_m\}$ 作为子区间出现的总次数，顺序也要求一致。答案对 $10^9+7$ 取模。</p>
<p>范围：$1\le m\le n\le 25000，1\le K\le 400，1\le a_i\le K$</p>
<a id="more"></a>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>首先，如果不考虑一个序列是否有魅力，那么 $\{a_m\}$ 的总出现次数为 $(n-m+1)\cdot K^{n-m}$，这是因为子区间共有 $n-m+1$ 个位置可放，剩余 $n-m$ 个数各有 $K$ 种取值。</p>
<p>所以我们只要计算<strong>没有魅力的序列里，$\{a_m\}$ 的总出现次数</strong>，最后减一下即可。有魅力的序列要求存在一个子区间是 $[1,K]$ 的排列，而没有魅力的序列要求任何连续 $K$ 个数都有相同的，即连续互不相同的数 $&lt;K$ 个。这样容斥会更划算一些。</p>
<p>① 如果 $\{a_m\}$ 中存在两数相同，那么往左右两边延伸的时候，起始的 <strong>最长连续互不相同长度</strong> 已经确定了，记这个值为 $x$（也就是说，如果向左延伸，$\exists 1\le i\le x，a_{x+1}=a_i$，而且 $a_1$ 到 $a_x$ 互不相同）</p>
<p>假设 $dp[i][j]$ 表示延伸长度 $i$，最长连续互不相同长度为 $j$（含 $i$，所以 $j$ 与 $i$ 的大小关系没有限制，但 $j&lt;K$）的方案数。只需考虑延伸出来的部分，而在 $\{a_m\}$ 内的 $x$ 个数互不相同，具体值已经不重要了。</p>
<p>考虑下一个数填什么，转移：$dp[i][j]\cdot (K-j) \rightarrow dp[i+1][j+1]，dp[i][j]\rightarrow dp[i+1][j’]（j’\le j）$</p>
<p>后者可以用后缀和优化，时间复杂度 $\mathcal O(nK)$</p>
<p>向左向右延伸，要做 $2$ 遍 DP，再枚举 $\{a_m\}$ 出现的位置，统计一下就好了。</p>
<p>② 如果 $\{a_m\}$ 本身是有魅力的，那么没有魅力的序列里 $\{a_m\}$ 的总出现次数为 $0$，即直接输出 $(n-m+1)\cdot K^{n-m}$</p>
<p>做完以上两种，你已经可以获得可观的 <del>隐藏</del> 部分分了。剩余部分我觉得挺巧妙的。</p>
<p>③ 如果 $\{a_m\}$ 中所有数两两不同，那具体是什么数已经不重要了，我们只关心 $n,m,K$ 的值。所有的 $\{a_m\}$ 地位相同，一共有 $K(K-1)…(K-m+1)$ 种 $\{a_m\}$，只要计算 <strong>所有没有魅力的序列里，长度为 $m$、内部数都互不相同的子区间总个数</strong>，再除以 $K(K-1)…(K-m+1)$ 即可。</p>
<p>做法和之前的 DP 差不多，额外记录 $f[i][j]$ 表示 $i,j$ 条件相同时，符合上述条件的子区间总个数。这里只考虑前 $i$ 位，后面的 $n-i$ 位产生的方案数不考虑在内（这里和有些数位 DP 写法不同，因为后 $n-i$ 位方案数难以计算）</p>
<p>$f$ 与 $dp$ 有相同的转移方程，所以还要算后缀和。另外，当 $j\le m$ 时，$dp[i][j]\rightarrow f[i][j]$</p>
<p>最后的 $\sum f[n][j]$ 即为所求，其实后缀和已经帮我们算好了。</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>三种情况 + DP 都分开写了，感觉比较清楚，供大家参考：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">25010</span>;</span><br><span class="line"><span class="keyword">int</span> n,K,m,a[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][maxn][<span class="number">410</span>],s[<span class="number">2</span>][maxn][<span class="number">410</span>],ans,sum,tmp,s2;</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">410</span>],fs[maxn][<span class="number">410</span>];</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">410</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> op,<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp[op],<span class="number">0</span>,<span class="keyword">sizeof</span>(dp[op])); <span class="built_in">memset</span>(s[op],<span class="number">0</span>,<span class="keyword">sizeof</span>(s[op]));</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f)); <span class="built_in">memset</span>(fs,<span class="number">0</span>,<span class="keyword">sizeof</span>(fs));</span><br><span class="line">    dp[op][<span class="number">0</span>][len]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=len;i&gt;=<span class="number">0</span>;i--) s[op][<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;K;j++) &#123;</span><br><span class="line">            dp[op][i][j]=(ll)dp[op][i<span class="number">-1</span>][j<span class="number">-1</span>]*(K-j+<span class="number">1</span>)%mod;</span><br><span class="line">            update(dp[op][i][j],s[op][i<span class="number">-1</span>][j]);</span><br><span class="line">            </span><br><span class="line">            f[i][j]=(ll)f[i<span class="number">-1</span>][j<span class="number">-1</span>]*(K-j+<span class="number">1</span>)%mod;</span><br><span class="line">            update(f[i][j],fs[i<span class="number">-1</span>][j]);</span><br><span class="line">            <span class="keyword">if</span> (j&gt;=m) update(f[i][j],dp[op][i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=K;j&gt;=<span class="number">1</span>;j--) &#123;</span><br><span class="line">            s[op][i][j]=(s[op][i][j+<span class="number">1</span>]+dp[op][i][j])%mod;</span><br><span class="line">            fs[i][j]=(fs[i][j+<span class="number">1</span>]+f[i][j])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"f.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"f.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">bool</span> flag,ok=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(K); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i+K<span class="number">-1</span>&lt;=m;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=K;j++) vis[j]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;=i+K<span class="number">-1</span>;j++) vis[a[j]]=<span class="number">1</span>;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=K;j++) <span class="keyword">if</span> (!vis[j]) &#123; flag=<span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123; ok=<span class="number">1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sum=ksm(K,n-m)*(n-m+<span class="number">1</span>)%mod;</span><br><span class="line">    <span class="keyword">if</span> (ok) &#123; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">    ok=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[a[i]]) &#123; ok=<span class="number">1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">        vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[a[i]]) &#123; x=i<span class="number">-1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">            vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++) vis[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=m;i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[a[i]]) &#123; y=m-i; <span class="keyword">break</span>; &#125;</span><br><span class="line">            vis[a[i]]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        solve(<span class="number">0</span>,x),solve(<span class="number">1</span>,y);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i+m&lt;=n;i++) &#123;</span><br><span class="line">            tmp=(ll)s[<span class="number">0</span>][i][<span class="number">1</span>]*s[<span class="number">1</span>][n-i-m][<span class="number">1</span>]%mod;</span><br><span class="line">            update(ans,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        solve(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        tmp=fs[n][<span class="number">1</span>];</span><br><span class="line">        s2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=K;i&gt;=K-m+<span class="number">1</span>;i--)</span><br><span class="line">            s2=(ll)s2*i%mod;</span><br><span class="line">        s2=ksm(s2,mod<span class="number">-2</span>);</span><br><span class="line">        ans=(ll)tmp*s2%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    update(sum,mod-ans);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小明OJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>组合计数</tag>
      </tags>
  </entry>
  <entry>
    <title>ISIJ Trial Tour - 4. Sweets</title>
    <url>/2020/06/12/ISIJ%E6%B5%8B%E8%AF%95%E8%B5%9B4.Sweets/</url>
    <content><![CDATA[<h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>给定 $N,a,b,c$，要求 $ia+jb+kc\le N$，求 $ijk$ 最大值</p>
<p>范围：$1\le N,a,b,c\le 10^9$</p>
<a id="more"></a>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>真是充分体现多次提交的欢乐之处啊……</p>
<p>猜测 $ia,jb,kc$ 比较接近，令 $i$ 在 $\frac {n}{3a}$ 左右，再令 $j$ 在 $\frac {n-ia}{2b}$ 左右，那 $k$ 就直接解出来了。不妨写个暴力吧，就有 80 分左右了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,a,b,c;</span><br><span class="line">ll A,B,C;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(a); <span class="built_in">read</span>(b); <span class="built_in">read</span>(c);</span><br><span class="line">    <span class="keyword">for</span> (ll i=<span class="built_in">max</span>(<span class="number">0L</span>L,(n/<span class="number">3</span>/a)<span class="number">-1000</span>);i&lt;=n/<span class="number">3</span>/a+<span class="number">1000</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n-i*a&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll j=<span class="built_in">max</span>(<span class="number">0L</span>L,(n-i*a)/<span class="number">2</span>/b<span class="number">-1000</span>);j&lt;=(n-i*a)/<span class="number">2</span>/b+<span class="number">1000</span>;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n-i*a-j*b&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            ll k=n-i*a-j*b; k/=c;</span><br><span class="line">            <span class="keyword">if</span> (ans&lt;i*j*k)</span><br><span class="line">                ans=i*j*k,A=i*a,B=j*b,C=k*c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld %lld\n"</span>,A,B,C);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但有个问题：$a,b,c$ 大小顺序未定。交换 $a,b$ 再跑一遍，把枚举范围从 1000 改到 3000，效果最佳可达 96 分。</p>
<p>极端情况下，答案会超过 long long，改 long double 精度原因还会导致分数降低。不想写高精度就改 __int128 吧，Yandex 也支持。最后再把 $a,b,c$ 的几种排列都试一下，就有可能在历经千辛万苦之后获得 100 分了。如果 $6$ 种都试，存在 TLE 的风险。</p>
<p>2019 年测试赛最高（我）玩到 88 分，几天之后大家一起订正才通过的，而当时没有写题解。不知道官方做法是什么，感觉有点好玩，所以想特意分享这段经历。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,a,b,c;</span><br><span class="line">ll A,B,C;</span><br><span class="line">__int128 ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll i=<span class="built_in">max</span>(<span class="number">0L</span>L,(n/<span class="number">3</span>/a)<span class="number">-2005</span>);i&lt;=n/<span class="number">3</span>/a+<span class="number">2005</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n-i*a&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll j=<span class="built_in">max</span>(<span class="number">0L</span>L,(n-i*a)/<span class="number">2</span>/b<span class="number">-2005</span>);j&lt;=(n-i*a)/<span class="number">2</span>/b+<span class="number">2005</span>;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n-i*a-j*b&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            ll k=n-i*a-j*b; k/=c;</span><br><span class="line">        	__int128 newans=i*j;</span><br><span class="line">        	newans*=k;</span><br><span class="line">            <span class="keyword">if</span> (newans&gt;ans) &#123;</span><br><span class="line">                ans=newans,A=i*a,B=j*b,C=k*c;</span><br><span class="line">                <span class="keyword">if</span> (flag==<span class="number">1</span>) swap(A,B);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">2</span>) swap(B,C);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">3</span>) swap(A,C);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (flag==<span class="number">4</span>) swap(A,B),swap(A,C);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(a); <span class="built_in">read</span>(b); <span class="built_in">read</span>(c);</span><br><span class="line">    solve(<span class="number">0</span>);</span><br><span class="line">    swap(a,b);</span><br><span class="line">    solve(<span class="number">1</span>);</span><br><span class="line">    swap(a,b);</span><br><span class="line">    </span><br><span class="line">    swap(b,c);</span><br><span class="line">    solve(<span class="number">2</span>);</span><br><span class="line">    swap(b,c);</span><br><span class="line">    </span><br><span class="line">    swap(a,c);</span><br><span class="line">    solve(<span class="number">3</span>);</span><br><span class="line">    swap(a,c);</span><br><span class="line">    </span><br><span class="line">    swap(a,b);</span><br><span class="line">    swap(a,c);</span><br><span class="line">    solve(<span class="number">4</span>);</span><br><span class="line">    swap(a,b);</span><br><span class="line">    swap(a,c);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld %lld\n"</span>,A,B,C);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ISIJ</category>
      </categories>
  </entry>
  <entry>
    <title>省选模拟 - 拟赛</title>
    <url>/2020/06/11/%E5%A4%9A%E6%A0%A1%E7%9C%81%E9%80%89%E6%A8%A1%E6%8B%9F%20-%20%E6%8B%9F%E8%B5%9B/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="a9c46bc06dc1dabc6632dd4da8225489decf4635bccae18e9114482a31529b02"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>省选模拟</category>
      </categories>
      <tags>
        <tag>分块</tag>
        <tag>基数排序</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>5月月赛进阶组 A 蜗牛爬井</title>
    <url>/2020/05/30/5%E6%9C%88%E6%9C%88%E8%B5%9B%E8%BF%9B%E9%98%B6%E7%BB%84%20A%20%E8%9C%97%E7%89%9B%E7%88%AC%E4%BA%95/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="4f9e5f3e8310a26b3747ff56d519dffb9347b7fbb6b15731e256600ce1818e83"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>小明OJ</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>ISIJ 2019 D1T4 Antimatter</title>
    <url>/2020/05/13/ISIJ%202019%20D1T4%20Antimatter/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="573d4983d810f38333c85dd4804ee32f78ceb83a51731dceab2f37cc3240e1be"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>DP</tag>
        <tag>单调栈</tag>
        <tag>并查集</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>WQS二分 - 论文学习</title>
    <url>/2020/05/02/wqs%E4%BA%8C%E5%88%86-%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="d57b1a5584747666532a94d7abe6bc1340475d3a408b98cc4cea9ea34c4f4b73"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
      </tags>
  </entry>
  <entry>
    <title>2019 高联 四川预赛 第11题</title>
    <url>/2020/05/01/2019%20%E9%AB%98%E8%81%94%20%E5%9B%9B%E5%B7%9D%E9%A2%84%E8%B5%9B%20%E7%AC%AC11%E9%A2%98/</url>
    <content><![CDATA[<h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>已知函数 $f(x)=x\ln x-ax^2(a\in \mathcal R)$</p>
<p>(1) 证明：当 <script type="math/tex">1<x<3</script> 时， <script type="math/tex">\frac{f(x)+ax^2-x+2}{(3-x)e^x}>\frac{1}{e^2}</script></p>
<p>(2) 若函数 $F(x)=|f(x)|(x\in(1,e))$ 有极小值，求 $a$ 的取值范围</p>
<a id="more"></a>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>(1) 即证：</p>
<script type="math/tex; mode=display">
\frac{x\ln x-x+2}{(3-x)e^{x-2}}>1</script><p>先看分子，求导 $\ln x=0$，即在 $x=1$ 时取最小值 $1$，所以分子最小值 $&gt;1$</p>
<p>再看分母，求导 $(2-x)e^{x-2}=0$，即在 $x=2$ 时取到 $1$，而由于分母一定 $&gt;0$ 且连续变化，所以 $0&lt;$ 分母 $&lt;1$。</p>
<p>虽然取等条件不同，但已经得证了。</p>
<p>(2) 如果 $f(x)$ 可以取到 $0$，那直接满足条件，也就是需要 $x\ln x=ax^2$ 在 $x\in (1,e)$ 有解</p>
<p>用介值+单调性考虑，显然必须 $a&gt;0$。把 $x=1$ 和 $x=e$ 代入：<script type="math/tex">0<a，1>a\times e</script>，因此 <script type="math/tex">0<a< \frac{1}{e}</script></p>
<p>如果 $f(x)$ 取不到 $0$，即恒正或恒负，需要存在最大值或最小值。也就是求导 $\ln x+1=2ax$ 在 $x\in (0,e)$ 有解。</p>
<p>还是介值，要么 $1<2a，2>2a\cdot e$（但 $a&lt;\frac 1e$ 已经讨论过了），要么 $1&gt;2a，2<2a\cdot e$（$e>2$，可行）。所以 $\frac 1e&lt;a&lt;\frac 12$，注意边界都不能取到。</p>
<p>综上，$0&lt;a&lt;\frac {1}{e}$ 或 $\frac {1}{e} &lt;a &lt;\frac {1}{2}$。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>省选模拟 - 裂变链接</title>
    <url>/2020/04/24/%E8%A3%82%E5%8F%98%E9%93%BE%E6%8E%A5ShatteredConnexion/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9f31384d556d2143f0a7115edce353514e67af7d707bc3ffe580c225b893cc8f">c1b056b9a4e2ce3a54a899bc27e6cffdebb9fdf8a9165a80a461779cb8b5b5784d988c6de111dc2be6ae45ae5fc0d943a1d52491f779bc667acae9f6cfe365db85830d5ec58ebe20ee33aa4e7cf4e3e148e15fff6a05e3608966d0a1618fe4aaa9e40510dc80f33799f6a160cc5181e7900d244cf721cfd71ba73ad85474aa4c43dbe8332d386587c25fb7e6ea4a17ca57e458e1f973afe598618e29106a5ba74274b4f0c92a212703a6b9559c30df5861a18d855a01a61a79978088eca7e61336e9f437d38e963423bb24e971a585057697879db46048dc792c7ff86a1af12c770526348209b57158e86513905e932bd489c9220e721646ee68453bb687bd736b79083c3dd9f505304f7eca3ed683079784cd983241893b332f24d38517c7ead454dc8f9372918daf620972d50f59a026d1d31a16a68844df4f1ff615d80f13f3be3b152b1267681be4891607e0dc9372dbf3bb6fd2d4c06bbb45ffa7a923dbb1e82579c882dd97baf8b5d34b3543f3a14a6146f3db6452630a36afd48ec9ccae3322525f0af151ec031b3ce890c80891dd742165aca1e7cd3c25529cac3161cb1a10e1f6b6b97623f0785dc25fa044e22dbac66f3890de4ec152ebbc73085b27331e45eafe87db014fbce7c99870883821a2067037328fd988d7ced830d0910c3d62ca8ef71c2e1f44721c7ac039df13c441fa147c0fedc0e50c370afaae7d69bfd2fcfaceb4ff6fe140eca6bffd1b45b3d8d0e67c85077fd38aad08e1837669e77a70a76db9226f484b7cf89b9eff680c7e50bb54484d3f1207cddfb521ab26e312d110fb7c22a1043083fa4b903129b2029505558ff44f638576f48b30211191cc8c7214e2a7c3232cfc5702208eab4d8a6645842b76daa9de842abd5f42b2d8c8afa383604de9eef995642e7b38258c65f63648a65d146d4904388fcf52c3a4a1617887f0c37e84b239d85f63c2de1c1890d2940f82a9edfae6eaf6c4fa774d220e562f321ec8d1dcb38e79a7b6662fdb957162514fca8a4b8787f2f53480846c6ee0234fbc809a7ee7273745b3269fddbe8c0b45b8b8ec427ac8614dd5de8a04e47181ebf3f1fa9f8c4df8e3fc81001c4d089801d86653df1f54340306ade514c978c29990a36a9dacbb7c5df1d7a5606317695b9f42a0d05633f43a4316dbcc347fdf22db47b272e881f7d50aa1ef0f544fc911f7becaffe2d396494405020629d54c8d982fe36692c983159de27d1e4d5464d87ad51d29e8d8d00a4e150b636d0c66b7ca5852d38aaa4b8090801df991239aa6efa70fd5627ce9710cc3f533c60f045bf37d9c55f51224ebbc73a8a6b67167132ce1ca7a614ae82779acc57349bfa6dc57b6e0fd694119c70dbe105790430fb705570985a0164ce9e1b275dcb2c9a7e64387f76d2c1480b8caa88e1a538515c85f124ed3648b4411599cceee84ee4ecf8c16255229fdca512bcbfa61ec6deb19425bcbd3cc7d724270d64e212876d3ef08fe83fdb510dd4b1f938d6ed3623e7b7a77f5c7b25209e56bc84aba5158a60f49a9f102bfa4c66bd0456281e61083d2233a5ff6eb6e091ba3e97b81189d109463487a232e9406ed23bab9044a0e98b025f39b035375c2297be9038ce4168a9004047f682d91bf932294354901f7a64025eb0b35172c675ed5ba0359a9264a8940f5384a156c4b932dea52141ad1e79d450b7fea2a6109c1c0b18e9539f78a947a40355351dd98063220bdaba84d2b0008f158b6978e5794d5c677e85dbc6a0d36ef2e4ed27539e7cdb915e6902487a7c4a88d0387e5935e7a4c56c7472407dc4f3b9fb0e69521148ce6146b8557e7438b0b68b016ca060a1d5287812f7fc20a61e273551b56cee497ede3097dcf7db331faa61f7fae1c477d506c4d1dc521edb2f4dcb119d79938395ac6fbf7d560036d9e3f23e4a279b46fd585e6972fe541976a56fc0de1aaa3e446358e606398da62440dc54c9beac335cf20665baab3e8c773eadfaa547a707fd0773a98999940ca26fa5f9d8fd2c84748cc2ced0197aa6f94d803d570cd4d52e244595dcc75e11bf16f3834c70698dfe9694c43abd0d6e6684d46c7396a591617e95f9165df43d996e3acf4de5bba3ed67836cad8079a199de76af506adc76cdc5b011e3c43b1174ba4c21aba3fcfd6e0bb682f6de904d900c1e68f89c6c0109e30d5291e04136da06c31ca6aeaee1df2e5b3ebd9c595df82ae1c224989c391d112daa49c1ca73e269929a24f6c404e23e65a47cc98e1e5c6ac34061992d66dc1bac190625091d302c68f00d0ef741577e1054e7838df9e6fd0191a3aa14d0893d1d6a59bd7a1d315d2bb0c7d1efda50d3c934e81c7ac62cac27953d99c6ffa9bd925308e10e1f34afdcf204c4d7c8162c058c2ce60c75f0e1d33dae977eec7fc84844e78f23655b9269f264e30dea85fb99550dd3f6a5922a2512ba68e456bf73503169fa49bae254f93ca034f6233da5481860f4e440d6537f4f425e57e99ff3e1848931b04b9f0669dbead425e5df2fb8f616c4d73ccd4c7b76f0fb85ad8831da2a572bcebc1b3004d044b7ad8682f5f385d58f17f4c8eaeff2afedccdc60fbe65aef312aaf418813aa30daed980f955b9a7360ac635c6900884bf676c1a2569bdd2659bb6f4d06da2ff45289f5952b46d92545ccc924ec558455132002896cb21bfecce66f7d47ba692a8cb420290be184a632407f3a25ef4862eddffc998550c0001ea13c4e1d4f3f002e60fe25c3a9ad24d683bf4a0863a85c16f07678a90deae0b8b7b66f2114997b373e7083079ca9190ea30c8b957b97ae9d77e4a8c259bec7c1ef27e7f1c56e9c99297e20af977fd26cd31a4eef016e3bad15441c4c736064474e620559c0616595d0ed9086849118f858032a965d4fe2c954626cf056f014d3d64fd8ebcad438e23ea582b0226ab3d1cc2ce6581830a1201c641a45f05fb2bb0448a07ae8ae48c75526426127a9d4eb972082eb382d5e7e0d6e445394007937d1cfca0d23f8daf990179e3906157e205c4a8b918308b0ea0de00137258127eb60f37858e124efca74dc9c571d4d2876b42371866736dc9f61d2080277d63029f5277d59f6aa85c3e48ee0c697cb1d2dfb595a1c2830acbfd19413a624de15a304a77f43df95c6664cc063f28f745d3af71a469e5c99972d201201a0827a9d36057a6ea5d9ee26d2557db9f50d4abfe2a160a29e63ad16badf1cff2f3bdaa7a8d2c1984e8b7a37e4d9594d2a0d5a8b00ed0e14dbc727e8de9f6680f8be6201b34d2cd2d240ece81582ff1e1a3f28f8485ffd8e05d4156da0c3e6125d585f74f079d3b03244dd86ae676e4e1df93ece059eca2578065d0d004326a8653b93e3bf769e5d012bfb0887e3c82e587afa42b2384e3d9e87159b45f2d0851f51a81a2e7dca0b0a16b6485fa59d9c4d6e81db83ba444ca88fd714d435efc85155b85be703e21c0ecb805f38cde24bda08665be3e4eb463ae9ef44e1a1e51373d83033c273e424e522aacfab1a9ac6593abed3f6abcc25de8ce2a67703787675d09e9138a1d99fc48dafae5f2b8ef19c3f083597dded66ca62e46e5dad3cf885a119b07e4ccd829fcdd57eef8217dab20aff52fcbdc025347ad533ed4d9352795a5972bded6240a3a70e3774b2e1243eb19d4413f87a9e6129dd1a1d133b980e4c54be502cec269833cafd94864d6141fce9fe0d60ab97a2d82161b1cb0bb6da280cd3cb27937e3a0a9bdbd9512c6dc1758cadb0d0e7e59a15a50d2712413f75d55a3d5f2c48828086e65127df73b75fe94c9d772d4eddcea2b3dba8fb4f109f6239915f2fb90909181a3a110d8574c8a726689ce2e3c19da42be0e1515209984b6c449d41787e89fd3254fe120b9433d7c4b1fe6b94ae32bd8d20d00ccfb640b57b8ff24750cfbca7c8b205157a88b48a8ee9f58450bc4ae70411756678034a89a3ac3824276aa5cb54ba36aaf09d0c22063688bb0a64c8bfe807d973a801aa773859f9d09bd77ae66f0170ed2ef1a705845141b1b9cdb3a8a683936f5d2691d1741cd08e05be7b6ecb85b5286076191dbb98a0f9a4ed051c1f061dfa1de9a90ff9bcb77eb3e0802e840efdc5934495f2ae65d1ec647ceae9f6e7ee64750fe19c3c3269840dfc410cd566da0479c5ace806266a9d62f4932fb74de4addaa75fb1700e7f230a3905bdb98b526f7d267a1483d6e44c8a0174b9c58a8d11021cee23631b97d6ec12e2e8098fa2db424969d3f019181e5a3c6dbcb6dff2b866547505d90046f25b4f5ca8385b9ec6d8e50f09dc3ffeb7eff4b9decc1234469f15fa5034cf5f1c9cc6cde23ae4cd09d05394389000ba026d3bed16e890cbb34a98d38e847ac1d52e9541ac3f8ac9ddcd43931dda7cba45f29096ab9928a68ca9ffeb11a32287200496f16239cc259ceb8b2044993405941eef500a292db5f13e811b35dfe5cc430b0379c443b6f4d7a2a48832f02f59ca9dfcde76e94f73af2e18566be254bb54558e999a203b9b5fd2ab61db0a99697fa5a039727fca98ea364ae6f1525b28e3bc902210252b299beb82e3e7a30cd9e8fc9f6ef05443addfc2531fad19e17991957c7d007fc6388efb2a01be22cfc9728021a08b7dd9d0b9975cbbb7686af86b42f0b4c8e9be34de61d225999d884a475d53a99f24171334af605af61210a8748a41145143bd5f1ca9d242187e7783994d93723dcbc8332d8bc2ed108efff4512c7faa3dd382081c15fbc817b187ea8a9dd518223a95a9bea1c06d5fc35141670da0aba828fdcbf3a0052479b92430260e6547004db92760905605b45f34886f228c7da1499d48cbdb5ea277abcb9bb2b94c971885a82d812e3b1196db9fd15fda5148bda4373f4ab34bc04e4c46bd7b0d1a12d675023eda2e5e0b9da3ad50641625dc1f05ac001e3142514410cb6bed71ec4f69ea312a98bf6eea70fecc81533f779a462175345e8cbbb3f00e3ad9a3b00da1a2fc16d92f72970aa009af97b0ed2ffe51059aec83107074fe65518be9b8694f7f72b21a18958945145df600ddde95daf775dd429839594494d330c3b29208b407b554bb7f1d2b4e876d8bdb362ebc832c4ebf3fed5ceaca8932fca0eb06d657c51d0b70262d06f2ab53dc7fe628d1be436f75df15b9f81999edce7690051f95e9e89702d7b29dd0ee26ac499860bf40a90a5411d9a9c06c671c11250184c05574d573ab97051ef8d7849b61658808740abf140dc672ab395d94755a1807e4a12cad8595ae268dfbbfbdeaceed1892ff5b0e7efb4f8d125e73e181d87cdcc72e487e02f0e7729551bf7158fd86f90b100a20641167de3ddbcd3ab770795d6f65545950f27639d2881278da377e3e1cb08771b9f82a67813045befbb3d22edb415f0a617ee8b5eec51defd50d622514a1b982efac7619c2622f97d30b4bfc61ce667d30b69682e7883812ba67463a4c1684f8a2aabc33a3d051a30cef6f326f56469327a3e1d2961e0ce134ffd2a1b18472309968eaef84778d197e9396f79a1c642a46c8b1300605542da4ad3314454e6ff80cfa9e5564fe0223885aa36fd0ea17524f8014ca9886de90964caf9210e07fda6627c5e537799a4a5c228c28de9dea5e9f805b9cb6dbee72b45b6285170597a642895f52aaae4e22adfc9cb6b4e8e048aa51476b148d6f35d234a1f45deb515fc36ac0d0c399f77a567ab5a9d5035d5be86e81d61af712c9192413465eb32b884a6b83089526d09b9c20c66c6c100d5120b37ce26b2012ad43c2e62a07d9b6091a75637d25a084cac0877ae5735c408c9efb93de9d6c92e1e4037e6380f0099f45d64ab7f4f40286396c517689075c1ee48a5d7ceae81b7b9e11e2f1c33dd42854fb630677b56198a5df5654809ea17311695a69345fa30f9772faacac1805cf3597f3c4f53eaed0afa16cc12cfb2892018133458be18c1096b3e98bf486c4b7cc0723f6c4a60475ca3097402e99879f7af01395f6e31be4a602696400b4ebc6f67ee57655dc359e8e8025b6258580571c69d52d24365b115aed50616c204eb675cb1615ced071efa7b3792f891049305df73ca6b3ef437e91c5773b4c276f294d1f0d2f1becaece47e079afe28c096110b57a15ac2531a57e62e7e5e02d884be898a0c99735003bdca31488d74856e2890703eb90973b382060df1a74efaf5801eeaf4798c1f7f568f1c29c820d54e5503d84c529e07e2a818ef134fba3401b3aa00b761ceb59392a4a6f49c9f80386fa3c8aaddd21b0db6b97700439ffacb9d9543723bbb3542255227044e5c09c04363ee3f4f10a47186edc25d91ae33486d9bcb251c40fd91c1dad32f4f7a37f801559c55bd9c359d6c716373d22bc7298975bcc0c256070813432ebbe2f19232025962b60e3687f4b1546275004730e35cf4b29dd16bcc10a3a37a6db5f557e77e0936e0a248c57ac374a652b4ee7ced0663a85bccc51dda140d8a7994a29ea75a3b5e2512eb01607569511bbb23906fb0168f5bf19b9ed0f2252f80239744923d0b8ead4265b0f56027431ea9da8f5c98f0b8471559df6d190d36153a28da424293db3ce6c77cc1c003e87eaffec5458886407f3e9b5ece30e1452310c989f3b5e9eb446160c53bea60b541a0f60d7899eef2b1370da27b793ea8fd81a813b0d4996b1b8f80f62f5aceb1c6354e443be5c76645bb92667cd2874053f86c61056a9ee5516e1012cabc27c87472401310aa5dbc19e3947e1b0e82ec90c7da03e77d028d482fd3e2ed2e2cf6dd4596e2a7960213dca7057faf6b4d5e2c1e28765c81f299acb196704663961ed0111387631455945b8a76ab42f6f2b64c715488b3606c9892a73c1f5b6d2519ae1f050ebe54eb629917585259da782faee5df3a34dc82b3446d874f1cc709d2552ff625bcd069a8740e537c0767840064e2e0fa5d2550d466e2f6d16d036fcffb78aac54d0cdd52a75a52aabf9d04200c54172243e6de616605ba05326ec0fdac97dfd0fc252a63168be433aec67c516395256ddb02ecc919a02e8cd6f928cde82445741699a535f6512880abe1fe34b01aaadd6259e0701f7e7b14464813bf05959dc897ea4fbff647ad27195999668c519022ce1aac3139750357943974cb52b8276f99da3a345e9c5838b7677a35f832259d291f8bc8e9eab953be172bb2e44107f1f9e0f118452ebed8fc7bc7e920615e195b33633022206f99d8ab9e4c79f0e5deaf3e444971dceaad167d15dcd215114f6472a7ee69e623115e77e972333da55037589c5bcfa1327b7b233f58ac8221fbacb35514e17c4b2111b1a2be30d5c71b5a8b4dc7b9e76bf46638c822b41518346987ca106afe19214bf61aa4f58fcd3d268555075c5554d03828d97bad20ff839c2924c75dd582be581bb7a2b3d1ae2325fa3e0c6a7bb9537c8a90aead143da398c9f78e1d4555ee73ccd2b7451e49dc89edede25ff51ab7a31dac66c00a9724f9f826a33e541d27b7d576bc97af09d43e4bb28b949fb5c0a795f5717cad1285a28919ddf8b0f85435241eb08aac7c398670e7d581bb508535f68022aa2fc2a2379984570657ba1f925d3913f88fc422f58c3c105c8d9527f15077c13aeca2a54e5b9643761fff3173dbc66e01cbfccdcbe125eca3c3500b6b633d8db57d4b28fce7ca09f65332394bf11df1d25d129a622a573b3387b9613c3f7821976995ca4fbdec729f0ad7d05988c5a938b1975ce3e0e146ad3bc71a2b516869986b3c4a46712cb005d0d1f3b5f1f077c292a9dfeecc4c64d9a989905449007aa79affc918f6a2400bc4ad6328d7b7733dc7b108b6c9069503442b54d7a85ebcc669e09819ccc8befef69ce74c882766b844324e615440d4b6f494454ae410e2d3278cfa607d4d081c395d6739fef52ee01654445ef24525022c910152bbbf4b594151c38357caeeb97ae0d2655a75adb409ac5ffa176d9074aca9a5fe0c56e1354136a50cc0a2279e290d7ada42e3eeab4e40974d8a5b3942eaa2d669879961b2c25ae62476e574a6d8e5d0489c4475efa4a05308b953bba5286603b56099e74b5a2fc4f5567492539e8056239fe3b7ef01afb1f3dc01ded35635ecb32257db89c56225a3356e8f1ea0414e545c48a958a53db26fa20d02e7a754697716e6e603ae7d44661337269decfe9294266555e7476d80a4d1f534f85e7d95edad6eb4e0b9fc3ef0f59ed10c7be4600584808f9d64f9ce852c2fe23cdc7a5e24d58370e1d854c679821e2fd562da696aa4a6de3fe938ad03d96797546fabf5b711f59b9e6c390eae997ebef0e4cff9406fb8b2b7080212ca77a97832d71756f907ea888f1c59bcf457ed06af1b7bdbe489d0ba96e605d6cf1d2fd4d11bd5c353840fb2d6efa0d89ac627f3c54579bac352dba217091614110b211f9357816a4a1e9f1a8150b354fb2be2a03ab76ed98f48a258e8a2642b17ed8d79007651deb11a8cce58739dbfab466d8742147e769e71195fec9624aee1ed8882045d0c27c5d6c112229099a0efd992537368324a2426c3b254a9d025f6f9cb5a4b28a8e5833958e7100e53bbafedea8134b503ab3a0866eddb2a0ab0232493e35b095d7ea6c50cbcc6cd51917785043e558b18e80827f11f417131857119c2b0c23b2adffa5fc10e14ae740366452b7d944931c29856a984f96fa5f56a385c6eb3b3c9979b76bac9e31c707779b2031ad60ef8a6ccffcb9de49f3b3c4f24b2a6604d5724bb44f46c2617b1c3ce2854a93b8679c79ddc05c9ea5a50c14381584556bc47bacbcd2950504c06b9240cabfb41da36448235d8f6cd0f81ac5b6f335a143f16f317ce50733b7b2a508163faabb07a1d23e0ca67c65827d76e3f186a9614b0828f2a21b4b9e0eae9f0238fc93357fc74afcb3cec8a8e7eaa0f735d74449edd041c62b21f57ef0442d4a931518cad33e93de835e17f2b5e3f13cdc0efaba88b98edfe2deb7d931afa7c0dd9ba9eb4df9cdeb972fd4716fbd0e36771fe47e91b2db3277f75c32792cb5c74ef42b21a68739f3f489ff7899db875545d482c5ba54e527a89bb1ddafedc22d0767139774381e9aa1d4ff0b537274db19c1905913bb8f8bd82e05935c62afaaeb1a2b42f4e557e3025df419a9c6d7e2f43ccbb5249d4a0b3accdc859b65817e43669ae196ad1fa257cda3263442f68897647576bfed5d787fe605defdf5b42b151bcc58ffb28bbf4e6ae612c6840fd46512033701dac9e04656c1c8b908a96a0db2f18a8648b927152f987b2402ac6ba33677c53df3c79313b4a2838277e1327502e59df153f7b39eae159d8c1024857fa494d5baaaab4b17eeb2b69ca54c81cd836dc177cc4cb0a8e2e34c4739705bbf6c1fb35ae2d345d5b6e68c888684685d67646f3c281a2bc83e498c9e34a7432f83ded7811688e5c6a5d38668312f89cb3536150eb9faed05736366ceea2418da4ae3b506ef15fa875f331fd3c535363d0e815f4684aabe7acd0b5ba1a241a84e41d54a7682dec4d27e334907f4cfb8454ed494243127d985d09f7f171601d25111049279397dfdd4cd6791e9d3c2392dec3d986c3bcf269382f8d80cfc5568322e4186557ecfdecc22004d61a9204526fc1de79c486523a032eeaa9e17b94f5830c62c05dbbd186ea4710406db6836e2945f4012369bfc23fcf17959b2f1ff63b3917c5585b6cbac826ea20d7c61ced581d0ed13e661c77247c74d349730142d322fcbea32f242bbbd78c60f83db52f68291358f4970d776c33e2ae7b80880462438e5d0535d0611e0dbb99f06b96e0a45ff07eb75b02d1c894ba0484cd91e25210800e8613de067cb19dee104b6b6fa5b524454233fe4272977c1b46b763a09ec24870b0be45c168bcf0910bca6d3dc58e6b58a5b7d9f28d9cbf20aefb28ebe0b7d246b52ba77a27c461af9973d1c8d8627c7ddfe5f8c83c6ab12922ad9e8e7ac8150f274bbf72074d2f9697f7a55241bbc90ad1933ec338cb60ba4a4eb43898c4a201d827c8a3f472ebbf12217a314d2c0fc769bab28ed544f6648df0f3e6a05eeb7050606f773322b9b2a17605a441ac2ab7b499f4a6c349d60194141b4a020d5901948d32d0c6d67a6edb3c4060fe8501bf68273089698b7945c8a587ce2f9f3417bd2598842f829c59f742c67017881df473aedbbba3800fa2ef1a6e7b558d3770f4a3693373150743b3a6d20359d4e93a55aed9e03fdfaf864836f0692f23e003fc3245779fe935e1e66864ebf77f50e590cfbc2356d3129a1e9d57d7717cbed9dcaccd60dc5c2ffef87f0d681f0ea07e07ec9d5a3b45f08a72d777bc29ee9666a298a54c79b091ec0742e087865908895cdd5d4aa292004f0b0bbe135b0924770ad3712f144b1278a2ce768339339f79560bc4b4c6fc9a63b1cda9c61c97a9f685f2a1391e05e2a4f806628f737bb1258a837275aca0021f451a70dce5b4fca95e7be0c88888e7a4e79315e7aa74c1d243da3abdf06272c3b5863f6f3dde7137bcde68c1bafe8b8f2860ee523a3100cc53b3cf512d1a4a5d8c4aa8df4841cdd2b149305003418f2496bfe6b3fa84ec91cd5a3af6e81a6a47965514df8d795d498caac8673bd7ff076736ab1ce250c22c8a3dbe47053c9451889639b92e4fe40f3767be8f9d75c7d5eb1bed6791194eba529ada9a9177887aa96a70858a44bb52b0214dae3cc12913c295afc5bfd202751c8b2fbe43075bf0c995406f181045eca5623fb64317675df50f0dcf2e0d3fbb7aedc241a3cb970323ed4d9b0d721f89accc40baea004912d43411009ca3cb4263e35527a53aadfe748e4966faeb73dfae48e0fe1459aa303a0b0b032ca010d6df9f097c113d80c992834a17391fafcde335cceb245e0495cf29f85db5a238adffff86dd405b2d907902c50513ef1cd5b04719900eaf8982748b6083314641a60180c1a2c973ecb7e99c5af5e3a9fb582773f6a354a073e97074cf952f68926b492100ad42ead5342858cb0853eae8468f80e5c315570d73a2ce2498e62b98a9a389ec4c9eb355e0dfa6a6fbb36a93f432e586615a3a1b2e5034ea9e5c4cd884261270dc8c272a66b90c6c8adeda2d1629c007a1cecaf922f62b8f0705904fb40dd9ea0742c54052fd93f9f439cf8737079e47a3a6b00a4debe726093bb07d66eef4f9819895ab8a96fc245335343203875245165fe130705908db3ded4f8a67a8520ae728622cbecfe20ea5dcf9c9a09cf8c4e5a1cb16653c0617303348fad41824f96142791f6e29541c50fb3b95fd78a0e1f0e1db969ef00ea3c7e1a5c85367ef3e4131f213d616005818788922c7db81de854caee516b66d0b95218ce0ccf9306bc43fa21ec8b2cbd361543a1024bba8128289faa65780c5f7afba305d2045c183baf29ca375fc4455dc1d4557ff95f073835a9cd6fe977f62dd5f4f038afc2b171dfc349fd475bce43c936e1a756e4268092901138c80e455fe185a72bfd59bed83cc6e0dfe4aada3b48d6d3e53432c08d20947fe4292108f5f5e09698e25847b126731c427e9b876a012d3fc38ec4e9027728837cb9a9d38cb8dd3f5274cefc7ba474499165181fc345796b2decbe54d945f8d98c528a0a4267925856c0c0b27f153085b48fbeb6b17afc7059ebe0b0646fc8e826a043e20f5de62061ef897d838f6e91270caa0720bc911f37f70d59fa86535da0ea17286b5354ba90f11281d61f8b792925fbdc7e75168faf67e80c562c5023789cdeac87a470f4e82eaad55274eecf608e5147589490969c7f30c4731520b3693c94ba7e56eb7960d398236b29df9509bcdcfe0bf24fd13503a2a7679f77109c3f99ead8dcc7facf2ccdf477a3f7e32246bbf94c660c96be0f5aa8ad610893d047b5eaade5f8b5820e0839d360df75389ca6fa960b3b0cdcf66927e8f1f928638ad730e2c65a19d626e34bbc1203b45ecfb8c1613a0634b46b5a58223f7a6e01c693dff8a74d361748d8d72f7d27f60095864a81d00146f14fe66d6499f7e200ad71e3284ced4c7221291b53006287495d618c64ac33346e6b9c1b9df43e7c7474793684c36557882a1a5f01e72363a8595aabaf866ec4be32ff08d2b15dc1d606baef6a2f520dca3b4eddba462ea52f73af16091b24e09e2ffeb015c0272668189caba36e4d7a727fdb460abd72b3aff56e13b9a67b6ffc6f1a6693ef221c97eeb26efae59715801afc2d627878246875329d8580d17bbf9075230316b4ff90a8fc49ebc2022166519622ba99bc80d6f756060a323c605cded9f71be6a68e9f9abe40cf19dd1f9681c388608da7eb5ec6a7789285f45cd9b0daef33d26d33e690635098b7a5123ca4748c95ac3d0a6a5e0e9c6a5b6938a4c101ba74b29475255e94a51a0797100cfe95230ea3a94f1469ed22afc676f100b2e96803fecafdf889010e6b3252720dff7a846d37c91868fcc66a15c8dc47db2558b02e79038b72661f2b692a1cc293453753701bd7103dd452d7237c4cc850456b0081c15a4f77bab7245b2f9fc31df5b84be7bd98067c16b326e4444c0d4876d58e518d7c3bfd04e97af0293e7bafc2bdd559372f63e2d24a88ea9d61ae331fcc2a5ec8d6fb54c6819fe89f9925c8f687d1f5413aad43a9b41e43ce2c147ed46728eabc5486e1e9e1c5549865d29392428aef1735a3b638c9c6ffdd96ad02d84ddf8f9fd095e7a1ee69b5da33824bf9b33e24a6efd6523a3a28d6c86100e9d82a1bae7e5fcd8318bd7e9898d1b77b422a070064a4b5eadd9465b2ae4d1a8aa6a47dc3493f4d9b31693f2b737975f7784077b9aa908ecbee79bd122824827fc11d75d02233522b27333fa19ef9261dc5d8f5f3d1d62c9533a798520b9fb370671a3fbe806edf340ba048d78db887df0a7e968804ff6d8fb7ef755491d07332170979fe85f58e2a8a66f0edf850b6537dbf19fddd9d8977c9613f8543b873d4a1e83081ddee766f6851f06adaeaeaa2178d57d215df4242b52f9f45e0a9c718d11bfdb1b9ddd6e6cf7735d192e24ca8263431b53c32734be6b4fc952f6c9951c268d7b5c9486847ed41604d1208390fd1168aaf576ed41dfde5903163c1aad8b5f4f36331f8a4cc94c61ec49eb210621bdf1c0171c96d2623614106b66216c9377a92ebf26bd05a7a015affbfa1f1295325e15319df2e268ad5c0782616468ab8e027fe5ea5a14bb930c7e140d8f7a5223e3af108de76c77532500fc88551d109fb7926b824a7285870d09205a4af2c621890df41375eab5e76671f21ca425a08a2fb478cadd94111e18457a8ba89d9c10b033ccbecb85c19a4de4224041b8c857920bba44250832d6f38e3fabd09fdeaca4f51a108ac467c67d0e177a4bfcbbe6a93c8307e1e3e174e0809c564bfba4b0ccca7d6dd27f1de5befe3db19fae047b0d3c9814ee6bb9cfb85d582a00d434bcdd877091bfc63890dd4ee4cf04d976d9dc0fb71e433e4c5add1e914c107f424dd39fde725b199807ec4eb584b0826eda6a8e69f8a6499fada3939a8c589fac85dc983ac1fe501545b28c030cfd78702751a8d0de37f795b3cffe04d4aef189cd4e792a45853d8e967994977e9fa230c6dcd6d9a1e64112e876553ab4f219ba7f444a45081b1d80869586b9c1b09c93e422911ce7aa2c258511ff031d788a1d6816a5442cc8580736fbca52eeb14f0f6151adf15d1808ec091b11dc7a5a5297d313bc905ec4d74549837a5cbdb01500003e1a9030e2533357ff7f609e9968123b8b2e348563e3292e9bd0332b40a282d3ff2f9e9a27477aa01913fd2213d7e25ca8ae7e6fc511b12f5e5c40fa2c63854142efed5839f2c6dfff94aa222f34eb5e49d6e8ff4411ec3227d13b89dc5acb9764db83694f0d9062c27cc7e8cc50534c8abb783c49fc06940933f278b32505c9fa58e8f4f0171980c3bb9ea4954c480045dc9c2aa6491303e74c34c607dff7c5b11390c4e800869aa06588d755830c9abe20e2957a9e16c8ede900757d178d74d1df5b2984b73122647f451ce96ce4ec508fa36ddd3b4db8befc1261675025d1910f8461211bb75a7786200228f71161101df3fa38813f2815a8106d1db1c910db4d14e7d06490fc51411310f86079b10357d1f92870242c8dd9afad5da961c01776ba172152e0f96d71a49b49ba9592516d1dd57d7fa6c3ecf4e81f7817a2f5dd6281e1debea5b8514810a05642927862b9cb005277507b478ad2db0646539b952b2705104009bba20c619d65af65c264c470800cf708910f7edc5c492196c7f6f9d46ba162cbceac7771ff690ab6407c5d97bc269311c2ffa48a7df9a5e9b920dd33752da71664fd93abf8577813b1426829c0e4225ae679c565066935db14252d8d3fdbbd6d92660122fd6b2dc62e22702ee12278b1a40dcd750c8e57c45c5aede6d3bb78dd78d48b08005689b36618fcb7237791e6d096d98a8bd751a4a7f2b6f1c3e457e909d49d3e6f1a22662499df595fd865d1646779433701e3a5bd507937d8f9564f0fc94851eb626d2eb9a11aa5172fda013400d6a5f448dff379517696ca8cda190b0ccd91cfe82497c8f050ac1878af2d74635fd23952d2f7421d8fefaf6e7a31e58e4bb017be9c7a937c7611d93325eb68d9d55d4b041f2346e37ee90239a0e8efc89ab3878173d4490b5bf9d1e40bd33f4886ce2eb11ef4f02426a87bf73e93c6d299e32e4d51e04e56989bcbd391e7cc42227c5a7afd9e8ee45925574afdf09a9d9e0ac9e3ed41b2a4ca1b066d3d94ba4e9f9ad3610fb9b1878379a79b4346a08396a0ae86cb35142959fccfd3fcd22eed48c6585495e7d6f0df7e784a0abfd01d54a6ede451ff3e8c1b1e9298a16b37e28b7de777abfa0757ed4d727e7cfa299d6f0824ce87fc98cbe64a12f3af0b7d1fb6ca0e14d4f353c1631e40fdde4b2dae6bac86d5145ffaa75af233345262e567e208a2795e3ee36b82f70c5072ff3c9a56ca98b139223c3daf32bf913da7aa02dd8d4fe05f3d8c45aef1f0f158b17afbba24317ea099f2c1df8dbcee6651efe1dbdc70b4d77f36d71af133a84db281febeac947fdd012466d97d814473b90d18bf198d7b8ff34112fa58d8c358ad2838ace4cf71fb4e490640c67dec2c1fcdcaede820d5fdc204a18169dd6adb6fae6165aa7d3bcde3c6282ab34a61e370a939f3da416b93b8c53be5576e2841ee01568a5527658a9119dee589f2678f3e23229819f44e2953021f3ba27322102b117c2397f31cb41cdf059b06222a68a2cb6309376b052db29f842a14e355aa69959b1cbc9b28812c749e92b1f096489a01efb179f9b2aa64827219a5d634a38425f69f309569661a86e6a210fef4486f1dcc681d690bff371bcd38ca3ad8b96102b1cab59730f6531f6de6a909544c4c05c9c1b25f4762015bfc65273bebdc85816952b769d4fb780e006ed6e1577d670c4e18a92cd8bc4955d67073a32626f7c528259b1939c6500d6195bccb5d0f83d3052e263c8b1c18c6b98707666681a39dd28042bc2f4b1f2f805655168133a1b6fcd62c53462ab9429deea9d89099eb665f8ba3354b6a575f81d48945bde83d0baaf3280c9769d9894a3f73d0fca54346e6a2cc240c2b438481279c3d1018acccf54443764746d0b64aefbca3fc3158e1effecbd1f36bb585afbf2afdded2bb8166db89550db479fd16b236fd22c3cfcef6cfe3b9100525c490f4cf6607dfda142d11f4177e690919f635f2dd7f226f3d3c3a297739af136b37f78b450d70ee8052f086efd91f75f0c2910db95607ab377154741d817f662d1233fb216350c77a258d4fd3c4ceb6d01239b8cebc7fa1880a7a2da749c141ae3d519ded6b9b1f75c03c9441dd78498fb00e998cf841914218aaccc2a24ff4e99ece042ce81df6479c0bb6e1b948f5d4898f0add2cd32f219069df955819cefa1964195c870e1c1cfa680866276f46881dc27fcc4307d0ac72d89ac74aba1bcbea8b058315b72b6ec7ef02b3247f54e417c6059a3fcd14667d29afce516960a74b760176309fceb2683a9c590d7931477283e13878da29b07dbd45314cef85ef873a3baa39b0237dc801d858d6e37e13376ef945b7176a4b4f6824301b391642b96be821709fffc6a415811bfc5bce119ff6eaaa203255924c8a2eb501347735b013f3ea40b1e79a87e0a849b2e826a8e9a61dee86a8b5d4cb0acc55be58dcb9528d45e70ff4c82fca5f570e449e6a9b813684348242a8425c8c899375cec14c00aaea57e64cd24f42d473ccbc36df00f2a3edf1818787224abda279b1d6626e079503a5cd8a32d2ba14bf9c0bbd01a89776a0f7f60af75255ece20a099117f71920777f930faf25fd01e31843eb62d52544d6d531d2c4a6a7b6bff0db2b82bef3bf4adc6003a882a3b3dfd10fb347e21c2163a635c5a1aabd04ec67e577d2c07bf613f56e505a107f27823ad23bf6b0e14f9c1020f25e03277703dafabcf83b27dabcaf3e3c7d33a2fc90299444f1fe8263a9ae89b7f21a0069bea2fa80c939285b7597b77ccf8d83659b23d69486e19bc63a22e858040635758e42d11d8151ce8bbe54a34ea8733f74c5bfe6002426523572c7fbb6c93037ec0f8cdebdac3fd71ed6cfbf26f69c316bc9b36dd9902d9705b83119e0a4355e61f610cc0bf7a04da0036a8a3bfce612feccf42e923f98ac49d4e79b0cf8afd32e43f37e359f21c03c14e6978252dc7f331a61a88f78452befa0c016098cafab100df5400c5bceba11ddef6d5f0498e0f0f63a31eb6e2017024496b0fc92824945dff604f0935557cd8acccaed93eab61bc292afe9f44ed7e68aaa1252a199a64e82e215be2fa199d4acb544674a91ca29ac946a71af4c49f36ee2f4b8dc93392ef7330144f7535d8dfe642f4e405e7aafbd1d189877ef97c65ed9ca372ce224abbf2f38d86d2a77100e1b8e43308112715e10090a5c0deda999d9db567cb0e1044d679a6a18063e21cbf1331ca6db63dcae3dbf2b8f616b914128857d387f1ac79a6df16a1f4c2697ed16c70a4296553e2591f2aaf1993c7d0da522310b37dbf52b5b1bab6715599c492a0d7449d782e6c6eeb714bd9fc644903c8197eef705fb8af805df656ae0d4793f777e48ca265dccaae21fd03319f2e763baab9d255055c50cf80920ba33ce9b99b2eeb6f1441072c989e789862e751773bc7345d5724e71fb3541b23ffadedd32b5008c44e0e406a18caaab87c809035088f2cc227cd10aef18e2b095d9de18d088a0bc466b2eeb0f0bd1f54ffd24461d1cd12c1874af257906187df80bde15ade855481569701b0b1e059ac63ead2171bfcc71e5a9d391e1c0c37e812f63189fdb8becc4c119374ffd3d98e02bc51797cd33ea4226276349cc4078b891b3e5bc977d1175dc205f372183674a0e4468927486f62f6cebc426ba4a9a0d15611839d24bb18d302eca1fd2c1825001ccc5f0c06cc8ee69d6d3871cc25cb00634a1eecd17ff48242b15706e6b29cdb473e18fa3a9e147f972fb93ca91340a3cf09ee18d0cdc9bbd9d0aaf34adeea6b7720d615455db8cfde04bef4e9c9db789d81bd709b624aa8171523bb5c78d6a9998384f600d5341b4d1895450697df7f084ceb674810bf0adefd03f9a03a96b56041f7d93c2f3eaa746beffca5a8bd15c9e278521c8bd45c2398e23fa731c428e8dc75b5044a1d59f2cb3cea6abe1dbb7cec565ad070f0f9e20cf564603b593a99670b87a37668a2eafc9609ec72086b6d50d4c6a641a6cbb299c09159e0f06373f90dfe0f54bee49e7eeeba8ea1d57009368d1e2f248575ee3fdf06c4fe906e51ae355a0b658116f2eaa8349eb7014ebcfe0df117b5c4f6425964654a347e92079d6bf72934ccbb3b97a9ad3be62d1101d765285d7b95bc6cc55eb9291deb13e3726db159cd21794e08d1828d05394dac12d4f1d70d0910fdf23662b64797b1548fd03abaf91376d7b7820357b211c4a09adc3175f64db2f7b7cb5c0281c5145baea69667b55a3f7d8c0699590a13038aaea2367733691a57a4f7f41aef38a5d046bcc150f5c19143139709dea29b73d3ed8a2fa936ebe459801ff62876370b6ae8fd59235a16fb1f244ce251a7f81d38f964035aff5083e443ba6b4f7728bd0f89dcb61287a58efa0a23e71de031cb02e342a3bfb9215be729f76f1e3cf8f407224c9c2c7893f23bb1869e6cbfc9046f88c6133426d54a9b0ff148aa8fb341f8de6989868cb999f4ddc7dca8032df112ddff840f79e91d715d1cd4abf809e98c22a27f4a12677ab684a6558b3af4c2fad2989cc2af3337d3c7127bc94f9b3632973fbcf20607b964518baf4ef60fdecee88d21c2c37d1551560082b54afe2b8ddccc3f04bcac5a5ea05ba2785935a89d6cba7f3448f36440d4d208d5a17050a30f980a315b83083233e66aabbe632e00523b5a7166119fd34be0256874679569a5b5115177201214ec26b355409527fe64750c39976e032def062c1a2d15094e3e6475a7e7d791395835ea78b1a30871b68ea702b211a40b249573e576ed83d962596fbac2e06fc93c451ca110282a1c6923f4fb77d48e0f9d33adfca3f4f1d52f9066aae116064997845e5d576fd3810fdf00a38b39a11c5c59185494b8aa67e0f284edcc1f73b86dce5c1e20a23ecad562b0a61fef9fe34635ebcb847a3fa28982b3f3e85a7f1a1c3c11444502c78616cdab49add4a4005c00e8c9d51a30e4ed11c8c6f5dc1c4f1cc3cf107abe843ca2bdffe17c87f8fde587a3b075d5dbf19373bb7fb33334890971a41289c9c076f9ece71bd7744251c758bf2b462e6b1003086878359383a23f69acb21e2a71925e312fa5a4a811a61fd39e7d3f0c463cc616e02fdf7e2a90380548a9d2620442f19183c7a61cfaf7fe1b9e8132f315841b32839453947c243c3621fbd3c56175a343613057f4019695e44bea36c7e2035335cc0cf0593140cb3c2fb7ea2eccfc2be1e6fba74e206d1ee379d7bbfead816abe027aae7233a539e18aff17cc055bd9a9952c66830f92c28abff40025ebdf84080dead0f348299260bc38185ad5ef6e1566e1455126be78f6fb2eb335f531f544f8babbc3135e5c91489dabc93be3837cdf50afba99ba511d3a5da6e2acbff77c1b3a8663fb3cd9d641421dbe8873d084105e054bd6d745eb36b58764e4d9dd300384607f21cb662546bc9eb9b964f08bcd8f83a1578e39abe34a1ce2dc96fe42013e41afbced02c5c46b6948e807daaced6bc31812d3edfb0ee196e50500c19a376b0a2d66b8cb2fafd1c068afb9631c9af41c355a12e0adfea519e0049fc7b40807f9971d1ad916a18eb6700f84df45386078afacab98b157a0fa4d3f7c4380044056b340c001d9f77c55c261bae653061b3b56a84afb360fea1244acb80cf17eb928f5e45635c35288e4b8c134ee4a068fb2efcd404bafbe4990e78e432d2a8cd3879675aaf4617e37c6963e5dc2bf00a737a6fd7d28bc38b817ffb698dcc9936f7fe700c18d7acb4a3a08c72715d22b2df266e4b89212b2618c98037380d25fc4c0e166ff1cfb6fca06712610230d7655a2c71011dafa41c539601b340968a31b8774b1cab0213abd3cb92c84c1ccd96bf99f06a8d64491075407ed55734d33a65187a30c75c88d460306fdbec2e0731aa646d0ec05e1c1b2ffdc6ef053f8bc26b6af641ab4066c224b58c1e9ea846c617b18db19c3be28c25e808d52915cb1b46c9495da4d65ea36130cc8c299487b5e0f26ef8c1e196c72f23ae11a82d5a64346cd1c570ee97da7921a06305da64ec472a1a64b70406b8616046dd634978e2352f0c3a5c318f00a11388ffe773eabb1591d12f4630dba604312843b346a917adbf87a51f46f3c03835cf0414ee49c669c7c59fc4377ef0ac8d72133e0775fa96eacb559950754356f21abdd6a718c6fe683e8b9db7c85d1a45fe97b0dab9038e6fea705bc087706e37758705fd0a5e15d07a3828e3d44d6650ad60cd8f39a2ac5f476468fc5570ce34dc2aff7475e50351f667c62673787fba4ec1ceee4dd42a9e85d5a01a8573ed610dc170c167841c34d3159fdd459be3c2ddc98b8114ba2b107d6da255d74e3c874485a8e54e09057b5882c290644f4705c277542663ff3ffbad735ee51a41a662e4c37e0b15ccd3ba42085b7f9c20a8fb06ade14ebb8aee4ec9cda01dffca3f31ad11a6c1275be5a4751934aa556f0723b4d644a6b168e70115d2eeb3330d0a2b0a2fa1d44d1a2cce8c6c0164ad538162a8eb40c13b51433698d41c562920b1da93d6886d49b5199428cd24e28f5d7d271eeade63c752fc2b8ed673c7a51e855f0105979746763c6f4f8c0f53e44eb812efe28996e15c8a8b98edcfd6d0fd28291705d3276a7d7b528de3d9416054cc004b77ae8c848b24c32c71db1f6acd4169e3ce63638e86d1f1c9a705718a659d851d106d002dab6f43d35ce633ae18e4447425530afd08385c17ce50b3ac42990b4946dd04b63806a1728693e9fabc1238dad705f7e5d7481f8415b8faecb949c795cb8c9b85af20e32bda50b923e1aad3f898fb02febbabceb7be10824735462805a56d29decf653b56265e21352429eebc2a324bb79b9d0d88d8d69e442a5a1a0ff58c679c3f432846a6083e0808ef1c71d7b431b70a9cc091c8785ebdd8263cc8079c7854840bbf82591275d6ca1119459c16bb61cba1ca269d2a5cc84842a84038e7bccd0e683135665546c6ad101dce88746c5a42340a1f2a701f2871e5a661ce18ba3ff810f770069a929df8a9b1d14e539259b626d5b6eef0dec0e69326f3cfb8a0dea4f822b2cb21cc27354c0f55aec2ca8c5dc10aa89007a13c2bfc7032848687be658f7d3a1cef6619ea7e485980536fcb0067fbc78e8726738bb089528235cec01492f476bf50455ac5760ddbed8353c5cf3eb8b19b1e0af8bf9c4314af295caa0b73585b71163dcad0567e5aafbb245570b46a6197e24cbdf063706a60a8ae6f2eccb51d10e8dad58600536b645e12a3c74b04d06b77ac1e6adbfc206c192103df3a2df44726c364fc304db6a9cc8ba07555e272506f76112af9f73daf8f31663111220ae03f4cb22ed4e2b1044a638ffd238382e830a3e99e8fa97ea9f966d91a31d49fd02cfd8df8faab56b25de5496d7fab514db857e42f79ba10c5fef728e40cf3a7bcf8f8240ed6aa6fcc888dfc1c14e0ea40112872023954b3c9dbe850ca1214f11a693aa9003dca3b96f964f9466eeff98fb1b8bb37954d6d9cfaf803f606598cb7495a9f63bc474d478591fe7bce370328e0f2a8d01fdd64cd02927af68db10cf4481b2c6c54415cb22c4d80659aae70e6b1593f8a225d69d733c7019bece4501329be54436ea1ea3501170be92be446437025e76ec5b6609f115f93eff1116ea13a49cc5f1af6bd9c5572497ca4856cd2cf1221a673d9dc3ec4063a4b705d8138bb7016829c946a3cb7fdeb34a90e185889717e96d68643d8f5140ab0b3531afa3aefe2a76e2f5764fc89835b04feda94a94519c0e96ac903868b7fea3a6ebd7183bdbb8f51cf777b4c840e51a49a4cb4dbe3b08ea6f8de8083a0bdef2aa8f8fb3c02f421148a4f61f1a820e00c44c452d2ca74e630a5c93030dfbc40c8de2f6effd8b0608bfbd1da9099c517734c8e407e1f8b0461b18774d7d10a43549dfc5f6a76de9c200814117222f833e9853e53c9fb80d8f4a3313096df9bd0d0eebd0767583dc367dece7644cce185b7e00116ae7bc10684d2f7079ad970d58971b3fe5da914881d6579f709ff69d453b78349c002229ca7b724db53c17ec50efcdd0f219482534da854c693bf3992e052c4dae8b524fad0a65f206ae8fe940aedef98e9197c356168085ba75b97fdd3867db173bd281947c51b17a3731d1503b34d7ffd10be4cfb0d10fb5396532804f744c00b35e38e0647ab1f183b77bb7272089b5cfdba6d98eab18919aaef6a0707be5465f29336a2d0afd22c6e6eb3c1d86f38f53fd713336befce9cb797787403f806a2ecfad5ab951e623f3dfd664154357f7f2a66da9e64e89f03f0e3fbfe49c4288e5a14a2ef8b3c1fc683d217d658c76fff0e066bf75bd829195bc84309a8a9e4d5536c0e26c6659e4f0774e23471dada6815657d0496f36e1fc532c5fbaabbfc7e298610159092778554f29a29442e7a8822058b6f66c4e22329b6d4bb330ea79a332189776e24cead60e6fc07968b524dad8f0fd455ae0b1059f1d1566168f2974fa7267c31ab2fab79cd1639e35163f09a11988ad8256acedc388dd581cbe7b53cd81c5a8f909a0f368f2cfa8fa85ce4dd9b4ebaf2f72ea7f8fcf6e5bfe972ae3f11d6684894f01049460fe7b4a4fc4976db93f6d85287d9dd2c07ee5a94982d404d743e4e0a0a6646921e7df63451cf68f502e454a034b90da92e4d1d276a21e4cebd3933cb58dc3a0962b45f6ddd67e854197eae5a3a96d5667053f37e47fb513f75ffff1492d30a2861ae3651a841c789dcad9d80992e21edae0a3975956ba7fc68d9d46b9fc394c49182e507987dbb1d1ebbdc8a01e223cdf010ff000d83c4280ae4035ff307e69eabf02843948ec53ac2748e8143ff394cbd688b707fe5259ff11c9e7fecfb8b718d3c6a67c0cd0944a06fbf958ddba779b73bd371f97caf8719efb60c84be3deae49bb3dcc4a6c557b1139fe323fab86492da4480ffa3493f2d4c8e7ecc39b72d5f76efdf8d529c4259ae4ab9c78df200f24554c6e5d2f9eef6b3676be87a7e8538bb36318c2478abb234cd476785a95e4f2d7f49d3b769313a9519143beb7d3ad8f8b296feec07476269f7277e7245fa170ddd5457ffddf595f0f9795fa79d68c391c161c4882b4458f2912799d233d913414eca7032b2080f03194d6066112ff3588f3e57a787b6f4033de3835b0dba6bf406ff6f8211077d7014e83ceee0b34c9249d53e6e58896b300e06423f016419d8a58fd3877dc4dea2d87fbf3ea175e4a961d69ec6fe3a9b04a90cd9d4fcc639eabd77c6abfd337d3515ac55031ed7e771a0ab59ac3a4a6dbecc57154bd8df94672014edad63d8ac723a5dbee6705e27c66c9e4007e41add74060237f2ee55b40f1a4ea44db033e7bf204ff7047356b309dee579080d346fbdf547be9c738b8d29f7cf05be1d5d71392be8bbe24da090a53b8502ceaba0d1685d7631e85dafd5b071f6f9481926902a556d57dc31f155bde309ae05770523e12d67c311cf4ae37c16ce858c0e873e1c77c559058c378d18cbca734e2db4903cf68d678cb4021e9ac17c7656a51c215b8993f235628e51a6f236474017b00f2f2f7847b91e149d339720082a7b7bccdb5f0292b9c15f53a8e9937d6ca6c42fc4ba4556387bc84ad55d8f2e82f1fb636186a1715f000f1ee858065715fb293504b9a987966007946eedae4d26c318a34bd931491380cecb383718e16ce5b32a624981462f0421f33f875f423d2dba792fdfd6d6c9900644b7d49df927947721c86fa1df6d4680bc64afbaa8bb87449e1257c7df3497ee8a556087b480dd516baa9d5be9ada9b51133cbb1a04827a596b0875bbd667ad8e4607cadbc7df8c3d6fc3a4efb25a93a4beba5cdec63e462048dac73598e241b55fe133bdd93ad3d32b99600af27c341bce5796da572e5cabeb81e4dbf772ce5f0a0bf6fafb875144dac137d4a9cbbf74a5f01a445ebf792db44c0364f940a22c2304f2f8867a245e23419294f815ccedaee3c135f55cf0189b7afd5ff0d26650c84bb96c18053884678a0fca9f0f5845ea88c6ef7202766db44e2618712dde0c6ffc840e3e36c8462841ea2c8a86962e47620230d7b8fd36d0a5502aead71cd9d835222a5a2b80e3f502af3d43e228c27076159b934b95bf3244e7050a9bf934244e9f52da74512762d2e75cd3e6aaf66fb57783a872a5ac5712c2732f8eaadf37fdf32ceafa8b8e4fba8fb994c371cbd4ba950964c0dca4a067ccf3d15a560d42c3f71fb3e1a4b3a90962a9e73b279506d661352e008eabd8cc2ffe6cb23712dae488dc13e86dc0f448c858873b44bf8e820685245dc6b1df430634a0762de4951a9f357df969fd0e9be2df62dae11e46024c4aedcbd64cef2213ff0417f3c571c5852788b47a2088b8f03191a3951eaf0ad863988afab6a2e98be5815380dc058cfc3f35f976a9a338a1ceea47b956f33fa7750aa1cc70e000f1a94fcf470023a6e9b24564b8d387cb083e6d58364dec7a55d95045394c10c88ab5369d55e555451d88be8fb5d450dd14470eb1b519ce65fbe730c40b54ffe30cd39c9143a06d41b2e0ecbb5422853975ba68f5536081475eb17e5688f17a6608a0d75b647c725961b78f42ab345db29233191b81d518658f70251d27accaf6fa4822b4a0a210a350871d8af830ff0bb60b9a430364cd0776cd739829bd05dd5043b52e7c0af4d79dd2dea27ebea97304d69e0c353f325fe322da45e3c981587baabd8f5c9144f7ee457b048b66abc0bc3eaa84b64289ec361aaa22838e0f26cd2273c3720076e7f539de9d6934cb6516ba751cc93cd0bcaeede22cd0133ffd02d3e294988f0d77517e529abcb696ec94c2128daeb19c03a5248e75701ec04da0e72195ede7db03165e35ca6636c88138b75a6181cffed5113e73d80a249e407adfa6cbe6308cb5edd5d49cbadbb349c55f0e6817169b424881022ce36be7957d5017b879252d47c17c551a63074f08ade324bbc9a8f3f86bcb1c04d987484eaa041628f8640b90babaf9c228d6d52b779561dfcb0c1a31fafa265e4fa699a241b0adf287a06ff732881b5999c5b08401aa38fcf22f88b84772bb9b7c131db8bef333a3a3e3dd06f5ce83c0439c76307effa9304e009a3371a301933d09375ae8c0db94ad5da8a448b4d1876e29b77b59b68ce3bb5e3c574245da354943fb592199df5e3f7389f21ae407abd667daf931b308d47e96bf27bd8f1c353e765876eefa42ef3b36b489e9fe9ad291ab08c9dd3a4789e6db64ff52b29d2bdc6e9c48ea3c2ef58dec33d473f3120aec1c813b78340b9a3876247f0ccface3622fdabaaf42cf89b9a8809a24ed65bdd72665ceb8a14e3edd046be36d7e18e77675fda5f8ee06806978060d153d0475a57b8c72f1208e91d9d5f248798eeb783eb7903d363e46c21cdae9575d0eca7c3fb73352a1dac6e2e8bf49ee1c73ef17b1fee603678b7a490f662ca77bf1dcb0631aa4e6fe752c67ff96b9cd788fa0bd6bcffc890ba9c93088636e95a35d808ca4e3e9afd7f4ed70ac2ae7e553e8c97098f7e4e8acbbc7823536867a37be7834e4c1ac0291488cbefc0c91ea1efbbe06b8cf5de04e32f302f1c0edccff8f9af934f80ab42071e3037f8753b03c2fa458c19d0c04086e3714ef5a7581be93b964feebe387b4e91aa17b2bde0afde143f698da6b85e865a0a0b9b911b116cae547fcbf27f667f487c5f182b70088613428ee6e07f5d0d05dcc56ed70c882146acf9893e88c981d01e10f57249db5d56bebfe77cd21bbb5fb587e8e3b8104ccd44b5add251739fa2d61d05f68044300bc4313efc7ee1672277d19be6721672a7a1f1619cb16857eb802e631e98e40b33a5443a6147262b43194ebe6c337ecddd01c133bd8595564dc8a9a7a2f13e133a05ddc8367b6161bfeb67235c0eb7b88c53e3621b7f23fe67155d6cee21b740d1afa60297a66f23c1b2e6a5b2b7e3d6a16da85260e3aa17611664eef8ddeaed9829ef520038fe0ed8bfec85f4cf52c936c39e3c2bbc98c24ed2b65fbb4dbd0993e2e285c1edc7b4056a148b757e7fdaa929f229f47d93b9c1096f9341228ef2d63b69a996e8c210b1b2f2703ee13535f1c3cafcdae70a412a0994d5aa0dcded22f2b59204873b0e1cdb50f4305f10ac4808078c3375af4344d4bcacdb637266f315453e890704ffd6a992b7aed09e5aa92b92ec6a917eb985c40a07eebd68ab45e53adff9ec904d834b99e13c53ab31db3ec292ba42e26e55c6a8dc876e9136c4a9147a93d67677f4b110e2eb6c8eea7a1c7f750bec8471d22e8f447980db5e5a84437abd4e4db864d0f5d9632e272a9ba7d8b3989c13ff790c6fceb51d27d804b2d5d06bd461ab3a8caf7e546177b68716ac4c8a2a4161d91840e4420231d939e7d0e8b42cc0ab59b1b5aa8849bb5e8c7c6162e3c047dfde3b86ed1899292e53121067e9c575ee782794454a13e790c09fecf1abac94e728a99c4abfb54036c94c7ea04752449221043727001939339ec288a482e2d1c146f17a29b5ed2326c10ccdfb5a46d6fc5a6142c1388c34b16f3b58a60fc20c7ba72a8dcb4a96977dd729a8ba93df8b0d1c8ffcf160398e166ab13e610a8bec54fc5e834c1bcb2c8b4b4adc9f41e10e504d8f0d5471566cf005138261d03fb6b6df68dd2414908b4740567fc7791b52be73204a54ea63311dd9ddc52eba6a0ba95dd45741f1329f8c46b8941cac3621ec74ddc3d233a82309e5db04a862cbe43d92e68508fe76b6a8837fa07ec576413f01575b1d84fcae1c985c8be79d3a0d0cea87327a82e63dcd72fd3aac923045dbee7ac15771fffeb9dee48cba794d3a8e2076601835215b07e38c8fdf03d17f4d79670e9e049ae2350cc3ee73cafebdde1cdf1252ec92186abf2ca9bbc58c98c4fc43c8c23d196d72a3994532938f381ed5d165c6638ffe2dc2e237e0051481dab82cdbdc34df344ee99329b4b7ca09eee2e9907e3c332de361a5fa2daf09d6f997e22fb9a90dfaa4868ebb83ace6f82a03cc8152b3d35f27ae2efcc4e3db26f7008f2a5e75844b576d3c01fba67f0fd0d40119389803731e20093247e9a35e13b2f07b03579c0fd7139cc9cd101f6b614081b643b7242209a6195ee2b244145742c9337e83b94d140324b1440dae8789bbc5667db5c7d3f64a3dbf13febef822523ae55dada35bc90e3d1aa33f9bdf7abc7e277d51f6429959b462de3e94e5477b2f11126d3d5d32420d90a02a7c137012570a6fd81897ce49965872e547882716926b1149696acc20cdf103c23eecfaa6d6ef13b84fc3bb9aba162d80a953e1b3901f9055508afcb8bb24c74db3fc4cff51310da25da874f3e36be3a63c69d4b0a16aa0a0404d5a6bda7890800d8d416911be7821544c9111f59d968ac3b2bf52c1662c3c13b695887cc950343f174a1d3cb1cf9f10d6ee768979053b76e2dcccec5cefc4eb48e108bf3c664257c0c1a4c6d1d25c50b1544205938729991409fcf11a5981e04c1d5f7e32a8a65d41ebb8ddf3838f1b36e75f7f1a2f1e2b2c82af7a5afa01778a16a5d697fe1a9ede3ef80fae73e1cf6e38b86fa845081ffd0b192fdbec15c88dee810437e7ae404087282ead0facbb9662935de94cc34770483381ea057e47ed9da5e28f58dfcfbc4340c12dca41b30372a5c1e094944ce2b4892d18279e451109a67e3bdb8be9174b8af19d510cd3424c8b076a5e94b15023309932b482c8a4cdbdc35c3a0ca685e317210c0c5b959cad670580178843c9bfd7c17e283d6622250548d5c7e0e64002c8c4daf84c18102eb9f53ca46198839f53460f7457e2c004cd405f85a9235d168cf33c527fb56e29edd0e19ea76e2705ab99ef8639c859e5633688e9efcd1363f68ac341f6d97a350564376ddc8e771e47511653063e915726ed74be81e75967609582a78c681ba89549729259a86967c67c6465beafa5d2b3188f4647368dbc01eb95bc5c2e770723efb565a474763a771eb28b9b71cf12282adcb66cfe93a452ff41593be3e06851e26f49ab89582bafc8a48685164d54f68da39ab447d8ddd0aec9726d278d5a8eb972a7e3e42777799e8cf96a826fb346e93c3c2f27da74e46a231511d40c885b29b8c57fe74bca3c8434f8ba89774ad2a8c69e80d105929fb1913ccb9f11e3e84459713ba816cbf472fc05a55eb30b20eea56d8b2ee6425ddcac808e5d183e98be2611a36f7a8c408a9617756dd7cf871e898c59763e9c6298807840e473fb3ea0f2a62306c3ed0fee73a77f79914a330388cf146715920ac5b5bf6bf9e301a1d8b1991e4723b2b91b669d975faa56e59e733039db062de590d2c262ff64a6203a8a55acd44bce5b305e923b9ba6427383cde92537119ba59f14d719fbb9de1583bfb0ee49f9d6bad876a9fb76031a0b28b085ba36761aa181c826f1ca0411189408e87c996129642a5efb94f406e821bbaa4346de93e49240d56a95054cac58fcfdbe2178ae4bf31a5d8263d9ac73d8ca3830cec976243f81c893c8b3c5f3658c68e9c2217b716b99d2a58c59030c3ce12e3e4f3b33cc21e4cc1124628bda04f70b613b131bfd6dfd87087f770c5515d32c83234cabb33a0544352ad9cdb82964faefbf4b8260b89a43c53ae9e8a1ef685b1409bbce3d92550194f04ef5cea7a979ea342839da53f199fb0d2a6f24c0b98ccf989998efc52ad8e70c5475769fa63c1aba63839a26a1f7647383a84d8612cb993261686a189fb73d2108421f17218b47f8089b8060fb528dbdee5c32d32325dce208710b8e7599b308a40457f3e4efa3f9cd6582bf04d3edc36dbad373f8136cca1a26bf022588e4c9bb7c6a452a336eff980c4d84fc772c3f48bdf19bee01cf0fd4abca496ad327334cf701d65da7b2202ba8ad8462e07e4cb4afa9c39f0a582c5a105d583dc5d8b4b879786568bd74e363d68e384c24868fdc8773cbdb67c0a6e796386a364a11f666c4909a42e573f500e716a5227f835e3632ff4b17728a5bfb09f9a9461be2db7f116a6f0fe61b608deea023de709b10215e251feff6a3e2b92566da187d1baca212ccce9364095bf1cdba69355a603697f8fb550d2d06c8978c8588b274e85136835035b5b0825839428c6c6f9793f450544257a8d58236faa1e32698c4d6649dee8aa9df5cb06c8796d50b0f60072e758a291923aaa5d2d7251b14dc9c7e161b454961c07b37e4fed370d96691f94ce9fe15903749fe452dec8d4fa095be0d063b22500342e24b38663036408cde91fb0f452816dd996c90c0a8edda9359e7829070d8f15fe88b1da39fff5062e210e27b1b302dc5978ca490fbf6f437d2c2123332cd26c777e352d3f0ce78e30e0385fa55b7c0bce4f1ce36e8edad9dddd0128a09f08f9aaa9070edd49adba8cfd7f1366024dfbbbb2896563a2b3d41f2d80e802796e5250601b7272872103aa8c13ef0681a4dbc9387a8e998180611345e9af29abd7895fd8af9df5ecfeaede8396f9d3d54496c9efe842be264c43f3a1a7e7524a2903d001b57796864324f2ebfc3fc10c5585a44f88a1c0c6bb52031dad0b46b6b7a049a569ca4a549a3d6dd69bc3f5376d88a8ce44b25eb466e055f6c6343d2a80fb7fb733520aaeebc4c39011d7766350a63b832e9e471d201d019c601f02eaf9fd4083b739580398a8ffc2527187af3d59d2a60ffb5e9f1fa512132f68fea233f42a6c3fcb809df52a933dff28a772374daa4179e43d2d1200300b4baf342bd18b9139995b4bd803c5d57d2ddb74d452327d7f0ee90788a4884d7d15ffd7936313ba810f8014b4a884b5999014c69480401984a9c2b960b0846bd558b579186338be305231c3f493e09e0a714d9e1aaffe237f840e3a27de30311c4f1e61a452a7ac52bb0b47d8651e114fe6398aebd3465734ca451a756a461b2a40f2b5c289a48895c0bcf3f73ce992aedc9a64522d669adfeebe5c7a11bf7d1b4c401051f9b1194ce84c8da3fbb7c11699a3e02a432f27795da6dd8331db5d47157be4fc954fd601ac5252a2147296b4ce0d50050aacc2fd090625e8f3e4fa45e4228c7819ca3641b067cd152ec37e314e21d64849fb989300108498aca5e39a7741a1a0107477951aae557972deb468c23f8400d70f5b7e8d462804d02fdd527870f146bb7ba64a3b11fdb7104cbcb24ee640909b70f344d1f587214c8c60c3890618cbd5d69e2a1115075f7dc03a2f3b109123b2fedc356c9d0f86e1f2429480498f78677121476eb5887cd913f75537d481fa20553721edba97f96529f673b1f0c2085d6afa62a569ae6966545bd8afc6586f9de8b2c80feae9beaff4f349b9857c3cce36d688d7bf5f2d5fbc5cfe5fd4732e38e76d901d19df149d2214e7f73c88b5e7bb4b216aeb91af8575207863c48b48034734cb7ddb7e71da68c475c6d3bb7c4455a8467b979a5ce71a1b49bcdfc38a67591481155410e224ee84c888c3ff3398169885674adc7bc0ffb082996ad54e6a71b140b89f0a7319adc24baef9bf940715931672b3c4607f8f81bc680c86d948154b7f99dfc50e688fb455327762fd1cd1240d8d0c58fa418a2ff2853270a187d18ce0750bc4a84c8f7d9bac06b484430053a65bc5c6c135a62a95fd33894c43d8de747df5bf797eb4ed653e19c91fb238f103d9fc88af193fb0da243db6311b22906e7d0fb16689c85f28fb65a083e08ba0fd9b43848f683c343ae6fd4452f63c813541abf4129a1acafe2d09d8651bf7654762079c2063c7aec25c43fe56cdaddfe597a6c92850fd386e8ddc0e837c64cb58e02343caef68efd754296e046a085d2121aed1bd25e39e74d9a24f74779fae04aa471fa1ad313b236a7d4506eb9fce15cfd437c1a064de58f7c41d32ed625581b1282cec895bd83b369b8178cbe6afd7ed3bb7562049a105a1aa0a94fb7ac3599d0e05e3015a70fe4cb11e8be360ca38aa44fdc1c78f9002def60eb1910bf8f85baba9642cfa76b605b13c84fe917a17bd471ac0915e3d98bccc5fde9aeda965097049c03d12a36dbb7b1125cfa3abe349b0691d752d7e91641b2e114fc835f65cb792c40590db7184d50fc6e9ded0ae8f0c8faeaa658fc8604c79ca53569a9586d72466b908c70412bc9cdee0feb74ecf180d20f99010335cff63511ea77f73ae3b31963da5cba6107cd6d1099569d199732e139f6ac05426bd9c7d6b76c543ce68b4070ecf1135e2d7c59ae0b557789c85e31c0a28293b8bfb011ab9c98a1b5489933027ad6dbc8eac5d9ddb1e2ad9bda893dd9977882f42dd0a5b3791030c5450955fb8684888c893911edb0e584bddc8b2e9ed4daca2885de924a844a53043239a76d93f2de0b939e300ed7792a0609358d5e646e39684bf846c1b4171388fba3c4d17ae8354a5b2508790db9ae6e3654063a0f7c660b775ff46df802d70072a5d6e146a478e782616523072c42a8984b08e8397954f243db7afcd4f2b10404879131c9ec7b7548771befc32aec480e7a9df8e243e9fb0771679cceaa59e1f918bd6d653860833a95d48647973be5ae3d7b31aefa80f7c442600307605bcdca512fe0cba13ff3c4c946ead0121a6d1f08a9cd9e2dda810cb24e2dd376581e9408ce11ad4134add4b80e3669519b823bc18169b591d6acc70d069d5a7692ce4def220b0a8518529afa8f8675e5aa73379107b00f3c9dd776c6c63c4634b4b8aed0aa9550a77b105a46c05d832669c07740294fe173ca96fd94cd1f3065a14100da645babca80c102b0278ee91d970404f936e12523ccb66e0ce4f220969e2597bad61ac3fc1dc22b99260afeff3291ad6d218b92d646b879d21c51aa69ad7fbf7dd3b906f29c2c1f3f8741fbf4a0eadb9c6794fccb53ee897d945c7e082e4b2b3a724af5bbefcf0a187946bccb63d704c99b3ca05cf1e5d1d3467490a8424a3bf0120d42b91e0a0204955a1f65a47070cd80ce7de6ac282f4a1fb38946c3a7597b4ede8482acb49ac022b9d9c5d1a4b9df2d116d9ced5224f84460ebb32fecbaeec67afab852e732419518edb93a8849267ccb2f881cccd464c029d36de42d890e9ef38fcf07cc214990f61a4b0a83ed718ee1a1379494c86dc47fc59a210981daf84520a3d9e5420bebda6709d418a6753ea61f514532f0b56c35d3048750f36e93888ec42bff02bb48df48a355e61eba17ce2815ab2e53666acbf253144c069a90023e066da770626dbfa0d1b054f2a26758ccf266324a800b7450575cb82634e0a096214e549890751d80252fb445e5f35cdc8cefe3895e234d02bd63dd9f97f7f35d7e8c9b1f0f524bc5b7d981ffdeb5a4ba05d0fa5abc564dfa546b80419fb42eea39f8fa9dd9523b7866acc6af2038aa10e858c064bc3abbdf909d0661b51c79b8c4ff009c9d686fd903a9291f611d179d4836c4f1dabc472ca08ee894500033ac4a5b9b79dc42034b95648116d00069d38cdb6b90684e6faf50bc5874b9f5425440a0a3ce4a27294c4184de0df9b9c416499a021c5dd74306bc396ecddb97de612a7494431ec00358eea07d7db4d760cf0049baf24447a6e4195193228e9ef63abfb42c830210f17dcf9d16b93f7cd50e52a218ac514bd00c59cf9bf1d9c4cdad5bbc2d843f2b2b8cc090ee0c63b187a072ee4ae2e900e03afaf66808d5d956c71521d897d668565147bc162107971385f943e1648393190d92b18e7cf9adc99f780a70972b06b236eb33e14c590f818c0b06fd6177053c076c26a0d8ec5dff30a1b4445ca7f9caa3d68f967f5f0fd8bab1b6bc406ec8b599b57fcdca41a08bf97133d267d426b68e2dbbe49c1254b4304e927519b0d18b16b5233e5768982f9e175a14219a455947707666525b00e3563edd486901ef0096f23d159dda5309a0e63e6421164c8cbc2dfbe2d0874cef2d3e5e21ca7c1b9d102ec793f83745235d0de770aed4841beff793b50f96d7d66c45b5f56f49b99f394578ed1b8d42e4237fee1fdc48ac88828cd400d0624e6f9f06d6e094b509efb21ed1b559523166288ef5fb701dcd520bcbbd1cc9cc56a452b5bb83213fab507bffcdf5cacd2380495f41a9a8084759d7ef5f56506e8b93e71e4792c88aac73a2c4a2e5ce4644e69ee2650b515b69eb140176a9f5fc50843a7972bafc22c3eedecd362e911090561d018390af79cfba1953593faf2e305244f8881741d1d8502d43a8d4d157c4502d96af1effa1933bbc5f9605338866deda7ffd2091dc4309eff5b04bc3de3183d49459a42ae10bad0fc950b0836b183cbc7d0ed668075a79d11da91d00314c34ec06fdf32ea27729ad67548d9846bfe20ee31b430c5da6d1f574d642a11ace935df23f3fea98286745f025e5f268b6556f86c45f6690677c641986ce40aa0a92ae22e1dcfe49f30d4f11c1dc77d08819f28443b05455673059c1d317250d7537559d2ae88be5b95e3708b927a7deb87bc55eea81a45958c28f3ae0c8e70260173e8ded69b73659a05dd42641e02b63013a4161745964e634d93662493a1a17f2fb1976c6be4920256eca2b47df9b83be9334020fc3b18f3888893dbb2766463961869d29e8a43dcb059898aafa224fc23758aed692055b13ab847308ae2a25580771ba89b482f0c49c06de6c6bf32253b4d2c651b6b6ae9ba030b48f9653f2c17a194a52e5925324b5967e3a986641a208bf6ae9a3dc4cbc6e639ebd960a31ba5b03426cc248f83e648f82a21febd1f09e8633c6e281de1ce33b26743da07742276e09f0dfa6e50be5b5950b1b9f7b42f983ce9cf9694f0df469aa08bb40583f9a2763c15227eb517c49a351c7d627d8215d2063be8f41f8e56928cd69c8ce4f4d3251253de95a194e7b290bab34c2152385b2baf14fe16d41ba8f08be54d956fe00d3eb782911d6fe1b70c52e9230d56123ffcc9a492f5cf6711364f089c0</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>省选模拟</tag>
        <tag>斯特林数</tag>
        <tag>NTT</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>UOJ#19 B 通用测评号</title>
    <url>/2020/04/21/UOJ19%20B%20%E9%80%9A%E7%94%A8%E6%B5%8B%E8%AF%84%E5%8F%B7/</url>
    <content><![CDATA[<p>链接：</p>
<ul>
<li><a href="http://uoj.ac/contest/51/problem/514" target="_blank" rel="noopener">http://uoj.ac/contest/51/problem/514</a></li>
<li><a href="http://peehs-moorhsum.blog.uoj.ac/blog/5486" target="_blank" rel="noopener">http://peehs-moorhsum.blog.uoj.ac/blog/5486</a></li>
</ul>
<h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>往 $n$ 个框里放球，一个框达到 $b$ 个球则称为半满，达到 $a$ 个球则称为满。每次在所有不满的框里随机一个，放入 $1$ 个球，如果所有框都半满则结束。求最后满的框个数期望，对 998244353 取模。</p>
<a id="more"></a>
<p>范围：$1\le n,a,b\le 250，b\le a$</p>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><blockquote>
<p>题解算法二不是很懂；算法三写得比较简略，这里补充一些细节。</p>
</blockquote>
<p>一个框满了接着放，还是满的，可以认为是每次随机选择一个框放球，而忽略掉只选择没放满的框子的限制。</p>
<p>计算$1$号框在全部半满之前满的概率，最终答案只要乘以$n$即可。</p>
<p>考虑在$1$号框满之前没有半满的集合$S\neq \emptyset$</p>
<p>定义方案：放的球个数，以及每一步的球放在哪个框。</p>
<p>如果放的球数 $j$ 已经确定，再确定每个框内的球数 $a_1,a_2,…,a_n$，要求$\sum_{i=1}^n a_i=j$</p>
<p>那么方案数为：</p>
<script type="math/tex; mode=display">
\frac {j!}{a_1!a_2!...a_n!}</script><p>设 $f[i][j]$ 表示考虑当前 $|S|=i$ 且共放 $j$ 个球的方案数，初值 $f[0][a-1]=\frac {1}{(a-1)!}$</p>
<p>转移：$f[i+1][j+k]\leftarrow f[i][j]\cdot \frac {1}{k!}$，真实值需要乘上 $j!$</p>
<p>由于 $i \in[0,n-1]，j\in [0,i\cdot (b-1)+a]，k\in[0,b-1]$，暴力是 $\mathcal O(n^4)$ 的，所以每次 $i\rightarrow i+1$ 都要 NTT 卷积优化，这样复杂度 $\mathcal O(n^3 \log n)$。</p>
<p>所以当 $|S|=i$ 时概率为 $\sum \frac {f[i][j]}{(i+1)^{j+1}}$，意思是这 $j+1$ 个球都完美无误地放在了我们所要的框里。</p>
<p>因为 $S$ 存在包含关系，所以最后还要容斥一下，乘上 $\binom {n-1}i$ 计入答案。</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>先贴个暴力 $20$ 分的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">3e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,a,b,tot;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; M;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d,t[maxn];</span><br><span class="line"><span class="keyword">int</span> id[maxn],sum[maxn];</span><br><span class="line">ll iv[maxn],dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum[x]&gt;sum[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;n) &#123;</span><br><span class="line">        M[d]=++tot;</span><br><span class="line">        t[tot]=d;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) sum[tot]+=d[i];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> L=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;<span class="number">1</span>) L=d[x<span class="number">-2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=L;i&lt;=a;i++)</span><br><span class="line">        d[x<span class="number">-1</span>]=i,dfs(x+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    iv[<span class="number">0</span>]=iv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)</span><br><span class="line">        iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">read</span>(a); <span class="built_in">read</span>(b);</span><br><span class="line">    d.resize(n);</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> x,y,cnt,mn;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) id[i]=i;</span><br><span class="line">    sort(id+<span class="number">1</span>,id+tot+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> I=<span class="number">1</span>;I&lt;=tot;I++) &#123;</span><br><span class="line">        x=id[I];</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        mn=a+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[x][i]&lt;a) cnt++;</span><br><span class="line">            mn=<span class="built_in">min</span>(mn,t[x][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mn&gt;=b) &#123;</span><br><span class="line">            dp[x]=n-cnt;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[x][i]==a) <span class="keyword">continue</span>;</span><br><span class="line">            d=t[x];</span><br><span class="line">            d[i]++;</span><br><span class="line">            sort(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>());</span><br><span class="line">            y=M[d];</span><br><span class="line">            dp[x]+=dp[y]*iv[cnt]%mod;</span><br><span class="line">            dp[x]%=mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是正解，没过 hack 数据，听说有 $\mathcal O(n^3)$ 做法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">260</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">1.5e5</span>;</span><br><span class="line"><span class="keyword">int</span> n,a,b,NN,rev[maxm];</span><br><span class="line">ll iv[maxm],ivjc[maxm],jc[maxm],f[<span class="number">2</span>][maxm];</span><br><span class="line">ll B[maxm],IV,ans,sum[maxn],tmp;</span><br><span class="line"><span class="keyword">int</span> mi[maxn][maxm];</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">ll ycl[maxm],ycr[maxm];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    NN=<span class="number">1</span>; <span class="keyword">int</span> lg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (NN&lt;=n) NN*=<span class="number">2</span>,lg++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=NN;i++) &#123;</span><br><span class="line">        rev[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>,ii=i;j&lt;=lg;j++,ii/=<span class="number">2</span>)</span><br><span class="line">            rev[i]=rev[i]*<span class="number">2</span>+(ii%<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    IV=ksm(NN,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">1</span>;<span class="built_in">step</span>&lt;NN;<span class="built_in">step</span>*=<span class="number">2</span>) &#123;</span><br><span class="line">        ycl[<span class="built_in">step</span>]=ksm(<span class="number">3</span>,(mod<span class="number">-1</span>)/(<span class="built_in">step</span>*<span class="number">2</span>));</span><br><span class="line">        ycr[<span class="built_in">step</span>]=ksm(ycl[<span class="built_in">step</span>],mod<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(ll *a,<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[maxm];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NN;i++) &#123;</span><br><span class="line">        tmp[rev[i]]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">1</span>;<span class="built_in">step</span>&lt;NN;<span class="built_in">step</span>*=<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">//ll wn=ksm(3,(mod-1)/(step*2));</span></span><br><span class="line">        ll wn=ycl[<span class="built_in">step</span>];</span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="number">-1</span>) wn=ycr[<span class="built_in">step</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NN;i+=<span class="built_in">step</span>*<span class="number">2</span>) &#123;</span><br><span class="line">            ll w=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=i;k&lt;i+<span class="built_in">step</span>;k++) &#123;</span><br><span class="line">                ll u=tmp[k],v=tmp[k+<span class="built_in">step</span>]*w%mod;</span><br><span class="line">                tmp[k]=(u+v)%mod; tmp[k+<span class="built_in">step</span>]=(u-v+mod)%mod;</span><br><span class="line">                w=w*wn%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NN;i++) a[i]=tmp[i];</span><br><span class="line">    <span class="keyword">if</span> (flag==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NN;i++)</span><br><span class="line">            a[i]=a[i]*IV%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;y||y&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> jc[x]*ivjc[y]%mod*ivjc[x-y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll &amp;x,ll y)</span> </span>&#123; x=(x+y)%mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    iv[<span class="number">0</span>]=iv[<span class="number">1</span>]=jc[<span class="number">0</span>]=jc[<span class="number">1</span>]=ivjc[<span class="number">0</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxm;i++) &#123;</span><br><span class="line">        jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++) &#123;</span><br><span class="line">        mi[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;maxm;j++)</span><br><span class="line">            mi[i][j]=(ll)mi[i][j<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(a); <span class="built_in">read</span>(b);</span><br><span class="line">    f[<span class="number">0</span>][a<span class="number">-1</span>]=ivjc[a<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        init(i*b+a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b;j++) B[j]=ivjc[j];</span><br><span class="line">        fft(f[i&amp;<span class="number">1</span>^<span class="number">1</span>],<span class="number">1</span>); fft(B,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;NN;j++) f[i&amp;<span class="number">1</span>][j]=f[i&amp;<span class="number">1</span>^<span class="number">1</span>][j]*B[j]%mod,B[j]=<span class="number">0</span>;</span><br><span class="line">        fft(f[i&amp;<span class="number">1</span>],<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=a<span class="number">-1</span>;j&lt;=i*(b<span class="number">-1</span>)+a;j++) &#123;</span><br><span class="line">            update(sum[i],f[i&amp;<span class="number">1</span>][j]*jc[j]%mod*mi[i+<span class="number">1</span>][j+<span class="number">1</span>]%mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        tmp=sum[i]*C(n<span class="number">-1</span>,i)%mod;</span><br><span class="line">        <span class="keyword">if</span> (i&amp;<span class="number">1</span>^<span class="number">1</span>) tmp=mod-tmp;</span><br><span class="line">        update(ans,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans*n%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>UOJ</category>
      </categories>
      <tags>
        <tag>组合计数</tag>
        <tag>概率期望</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1332E Height All the Same</title>
    <url>/2020/04/12/CF1332E%20Height%20All%20the%20Same/</url>
    <content><![CDATA[<p>链接：<a href="https://codeforces.com/contest/1332/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/1332/problem/E</a></p>
<h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>一个 $n\times m$ 的矩阵 $a_{i,j}$，每次可以选择一个格子$+2$，或两个相邻格子同时$+1$。现在要求通过有限次操作能使所有 $a_{i,j}$ 都相等，在 $L\le a_{i,j}\le R$ 的限制下，求这样的矩阵个数，对 998244353 取模。</p>
<a id="more"></a>
<p>范围：$1\le n,m,L,R\le 10^9，L\le R，n\times m \ge 2$</p>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>第一个观察是和奇偶性有关，因为我们只要让所有$a_{i,j}$都是奇数或偶数就好了。而将$2$个相邻格子同时$+1$，意味着可以同时修改任$2$个格子的奇偶性，只要沿着路径翻转即可。因此，记 $x$ 为 $[L,R]$ 的偶数个数，$y$ 为 $[L,R]$ 的奇数个数。</p>
<p>第二个观察是和 $n,m$ 无关，和 $N=n\times m$ 有关。<strong>当 $N$ 为奇数时</strong>，矩阵中偶数的个数为偶，或奇数的个数为偶。相应地，把所有偶数配对改成奇数，或把所有奇数配对改成偶数。这样所有数奇偶性全相同了，任何初始矩阵皆可。注意：此时不能用总和做，因为总和的奇偶性取决于最终全局的奇偶性，可以调整。</p>
<p><strong>当 $N​$ 为偶数时</strong>，奇数可能有偶数个，也可能有奇数个。若有<strong>偶数个奇数</strong>，同上可以；若有奇数个奇数，总和始终为奇，显然不行。强制奇数的个数为偶，再套二项式定理即可。</p>
<script type="math/tex; mode=display">
\begin{gather*}
ANS=\sum_{i=0,2\mid (N-i)}^N \binom Nix^iy^{N-i} \\
(x+y)^N=\sum_{i=0}^N\binom Ni x^i y^{N-i} \\
(x-y)^N=\sum_{i=0,2\mid (N-i)}^N\binom Ni x^i y^{N-i}-\sum_{i=0,2\nmid(N-i)}^N\binom Nix^iy^{N-i} \\
\Rightarrow ANS=\frac 12((x+y)^N+(x-y)^N)
\end{gather*}</script><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>直接输出答案的 E 题——有点不爽</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;<span class="number">0</span>) x+=mod;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">ll n,m,N,L,R,ans,x,y;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m); <span class="built_in">read</span>(L); <span class="built_in">read</span>(R); N=n*m;</span><br><span class="line">    x=R/<span class="number">2</span>-(L<span class="number">-1</span>)/<span class="number">2</span>; y=R-L+<span class="number">1</span>-x;</span><br><span class="line">    <span class="keyword">if</span> (N%<span class="number">2</span>==<span class="number">1</span>) ans=ksm(x+y,N);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ans=ksm(x+y,N)+ksm(x-y,N);</span><br><span class="line">        ans%=mod;</span><br><span class="line">        <span class="keyword">if</span> (N%<span class="number">2</span>==<span class="number">0</span>) ans=ans*ksm(<span class="number">2</span>,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>组合计数</tag>
        <tag>奇偶性</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1334F Strange Function</title>
    <url>/2020/04/12/CF1334F%20Strange%20Function/</url>
    <content><![CDATA[<p>链接：<a href="https://codeforces.com/contest/1334/problem/F" target="_blank" rel="noopener">https://codeforces.com/contest/1334/problem/F</a></p>
<h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>$a$ 是个长度为 $n$ 的序列，定义返回值也为序列的函数 $f(a)$：将 $i$ 从 $1$ 循环到 $n$，如果  $a_i&gt;\max_{1\le j&lt;i} a_j$，则把 $a_i$ 插入到 $f(a)$ 末尾。例如：当 $a=[1,3,1,2,6,8,7,7,4,11,10]$ 时，$f(a)=[1,3,6,8,11]$。</p>
<a id="more"></a>
<p>现在，给定两个序列 $\{a_n\}$ 和 $\{b_m\}$，以及对于 $\forall 1\le i \le n$ 删除 $a_i$ 所需代价 $c_i$，求使得 $f(a)=b$ 的最小代价和。若无解输出 NO，注意代价可以为负。</p>
<p>范围：$1\le m \le n\le 5\cdot 10^5，1\le a_i,b_i\le n，|c_i|\le 10^9，b_i&lt;b_{i+1}$</p>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>First Observation：无解很好判；$f(a)$ 说白了和单调栈长得差不多；可以 $\mathcal O(n^2)$ 的二维 DP。</p>
<p>Second Observation：只有在 $b$ 中出现过的 $a_i$ 才有用，可设 $dp[i]$ 表示仅考虑 $a_1…a_i$， $f(a)$ 以 $a_i$ 结尾的最小代价。DP 顺序是根据 $a_i$ 从小到大，即从 $b_1$ 到 $b_m$，具体实现额外定义 $b_0$ 和 $b_{m+1}$ 分别位于 $a_0$ 和 $a_{n+1}$。</p>
<p>转移：$dp[j]+s[i-1]-s[j]\Rightarrow dp[i]$，这里 $s[i]$ 表示前 $i$ 个数中钦定要删除的代价 + $c_i$ 为负“留下更优”的前缀和。钦定要删除的：$a_k&gt;a_i$ 的 $c_k$，注意严格大小关系，所以 $s_i$ 可以随便维护。</p>
<p>记 $pos(x)$ 表示 $b_{pos(x)}=x$，那么还要求 $pos(a_j)+1=pos(a_i)$，从而 $pos(a_j)$ 为定值，可以暴力找出来（而不用数据结构）。扫描线+维护$dp[j]-s[j]$最小值。</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>你问我为什么用线段树？别问，问就是忘了可以树状数组。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=(<span class="number">1e16</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">5e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn],m,b[maxn],c[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; h[maxn];</span><br><span class="line">ll dp[maxn],d[maxn],tmp;</span><br><span class="line"><span class="keyword">int</span> st[maxn],tot;</span><br><span class="line"><span class="keyword">bool</span> mk[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTree</span> &#123;</span></span><br><span class="line">    ll tr[maxn*<span class="number">4</span>],lazy[maxn*<span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!lazy[root]) <span class="keyword">return</span>;</span><br><span class="line">        tr[root*<span class="number">2</span>]+=lazy[root];</span><br><span class="line">        tr[root*<span class="number">2</span>+<span class="number">1</span>]+=lazy[root];</span><br><span class="line">        lazy[root*<span class="number">2</span>]+=lazy[root];</span><br><span class="line">        lazy[root*<span class="number">2</span>+<span class="number">1</span>]+=lazy[root];</span><br><span class="line">        lazy[root]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,ll delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class="line">            tr[root]+=delta;</span><br><span class="line">            lazy[root]+=delta;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        pushdown(root);</span><br><span class="line">        <span class="keyword">if</span> (L&lt;=mid) add(L,R,l,mid,root*<span class="number">2</span>,delta);</span><br><span class="line">        <span class="keyword">if</span> (mid&lt;R) add(L,R,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">        tr[root]=<span class="built_in">max</span>(tr[root*<span class="number">2</span>],tr[root*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x&gt;n) x=n;</span><br><span class="line">        <span class="keyword">if</span> (l==r) <span class="keyword">return</span> tr[root];</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        pushdown(root);</span><br><span class="line">        <span class="keyword">if</span> (x&lt;=mid) <span class="keyword">return</span> query(x,l,mid,root*<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> query(x,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; T1;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]),h[a[i]].push_back(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(c[i]);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(b[i]);</span><br><span class="line">    <span class="keyword">int</span> x,pos;</span><br><span class="line">    ll mn;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        x=lower_bound(b+<span class="number">1</span>,b+m+<span class="number">1</span>,a[i])-b;</span><br><span class="line">        <span class="keyword">if</span> (b[x]==a[i]) g[x].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        T1.add(i,n,<span class="number">1</span>,n,<span class="number">1</span>,c[i]);</span><br><span class="line">    g[<span class="number">0</span>].push_back(<span class="number">0</span>);</span><br><span class="line">    g[m+<span class="number">1</span>].push_back(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++) dp[i]=INF;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m+<span class="number">1</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=p+<span class="number">1</span>;k&lt;=b[i<span class="number">-1</span>];k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;h[k].<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">            x=h[k][j];</span><br><span class="line">            <span class="keyword">if</span> (!x) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (c[x]&gt;<span class="number">0</span>) T1.add(x,n,<span class="number">1</span>,n,<span class="number">1</span>,-c[x]);</span><br><span class="line">            <span class="keyword">else</span> mk[x]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p=b[i<span class="number">-1</span>];</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;g[i<span class="number">-1</span>].<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">            x=g[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (dp[x]==INF) <span class="keyword">continue</span>;</span><br><span class="line">            st[++tot]=x;</span><br><span class="line">            d[tot]=dp[x]-T1.query(x,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pos=<span class="number">0</span>;</span><br><span class="line">        mn=INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;g[i].<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">            x=g[i][j];</span><br><span class="line">            <span class="keyword">while</span> (pos&lt;tot&amp;&amp;st[pos+<span class="number">1</span>]&lt;=x) &#123;</span><br><span class="line">                mn=<span class="built_in">min</span>(mn,d[pos+<span class="number">1</span>]),pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mn!=INF) &#123;</span><br><span class="line">                tmp=mn-c[x];</span><br><span class="line">                dp[x]=<span class="built_in">min</span>(dp[x],tmp+T1.query(x,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mn=dp[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (mn==INF) <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"YES\n%lld\n"</span>,mn);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1334G Substring Search</title>
    <url>/2020/04/12/CF1334G%20Substring%20Search/</url>
    <content><![CDATA[<p>链接：<a href="https://codeforces.com/contest/1334/problem/G" target="_blank" rel="noopener">https://codeforces.com/contest/1334/problem/G</a></p>
<h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>给定下标为全体小写字母的排列 $p$，字符串 $s$ 和 $t$。定义 $t$ 的子串 $t’$ 和 $s$ 相同，当且仅当 $|s|=|t’|$，且对 $\forall 1\le i\le |s|$ 满足至少一条：</p>
<ul>
<li>$s_i=t’_i$</li>
<li>$p_{s_i}=t_i’$</li>
</ul>
<a id="more"></a>
<p>求每个 $t’$ 是否和 $s$ 相同，输出这个 $01$ 序列。范围：$2\le |s|\le |t| \le 2\cdot 10^5$。</p>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>出题人大概没想让跑 $52$ 次 FFT 的你通过本题——但正解是基于这个想法的。</p>
<p>排列会构成环，我们把每个环拆来开考虑，用 $f(c)$ 表示替换字符 $c$ 的复数。记 $c$ 所在环长为 $k$，它在上面排在第 $i$ 个。若这是字符串 $s$，定义 $f(c)=\exp(\frac {2\pi i}{k})$；若这是字符串 $t$，定义 $f(c)=\exp(\frac {\pi-2\pi i}{k})$。那么，当 $s_i$ 与 $t_j$ 匹配时，$f(s_i)\cdot f(t_j)$ 的辐角主值为 $\frac {\pi}{k}$ 或 $-\frac {\pi}k$，实部都是 $\cos(\frac {\pi} k)$。</p>
<p>这样，把 $s$ 翻转+套FFT，再将实部与 $\sum \cos{\frac {\pi}k}$ 进行比较，就能判断 $t$ 的这一子串是否匹配上了。若有至少一位不对，那差距将会很大，也不需要担心精度误差了。</p>
<p>唯一的问题是，处于不同环的字符所对应 $i$ 和 $k$ 可能撞车，而好不容易搞定的复数构造又很难再改。于是，我们将 $s$ 和 $t$ 分别替换成字符所在环（给环编个号），用 <del>KMP或者</del> 哈希跑个正常的匹配。把这 $2$ 种方法的答案 AND 起来即可，这也是充要的。</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p><img src="\graph\6.png" alt="img" style="zoom:40%;" /></p>
<p>先是一开始卡常失败的版本，留个纪念：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PIE=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e6</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=(<span class="number">2e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,N,cnt[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">30</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> re,im;</span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">    node (<span class="keyword">double</span> a,<span class="keyword">double</span> b) : re(a),im(b) &#123;&#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) &#123; re=t; im=<span class="number">0</span>; &#125;</span><br><span class="line">    node <span class="keyword">operator</span> + (<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re+t.re,im+t.im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re+t,im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> - (<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re-t.re,im-t.im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re-t,im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> * (<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re*t.re-im*t.im,re*t.im+im*t.re); &#125;</span><br><span class="line">&#125; A[maxn],B[maxn],w[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> nn)</span> </span>&#123;</span><br><span class="line">    N=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (N&lt;=nn) N&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(N&gt;&gt;<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(node *a,<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">if</span> (rev[i]&lt;i) swap(a[i],a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">1</span>,l=N/<span class="number">2</span>;<span class="built_in">step</span>&lt;N;<span class="built_in">step</span>&lt;&lt;=<span class="number">1</span>,l&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i+=<span class="built_in">step</span>&lt;&lt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=i,d=<span class="number">0</span>;k&lt;i+<span class="built_in">step</span>;k++,d+=l) &#123;</span><br><span class="line">                node u=a[k],v=a[k+<span class="built_in">step</span>]*w[flag][d];</span><br><span class="line">                a[k]=u+v; a[k+<span class="built_in">step</span>]=u-v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">            a[i].re/=(<span class="keyword">double</span>)N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d[maxn],e[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c1,c2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) A[i]=<span class="number">0</span>,B[i]=<span class="number">0</span>;</span><br><span class="line">        c1=c2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span> (s[i]-<span class="string">'a'</span>==k) A[n-i+<span class="number">1</span>]=<span class="number">1</span>,c1++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">            <span class="keyword">if</span> (t[i]-<span class="string">'a'</span>==k) B[i]=<span class="number">1</span>,c2++;</span><br><span class="line">        <span class="keyword">if</span> (!c1||!c2) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (c1&lt;INF/c2) &#123;</span><br><span class="line">            c1=c2=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                <span class="keyword">if</span> (s[i]-<span class="string">'a'</span>==k) d[++c1]=n-i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">                <span class="keyword">if</span> (t[j]-<span class="string">'a'</span>==k) e[++c2]=j;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c1;i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c2;j++)</span><br><span class="line">                cnt[d[i]+e[j]-n]++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fft(A,<span class="number">0</span>); fft(B,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) A[i]=A[i]*B[i];</span><br><span class="line">        fft(A,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=m+n;i++)</span><br><span class="line">            cnt[i-n]+=(<span class="keyword">int</span>)(A[i].re+<span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) <span class="built_in">read</span>(p[i]),p[i]--;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    m=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">    init(n+m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> theta=PIE*<span class="number">2</span>*i/N;</span><br><span class="line">        w[<span class="number">0</span>][i]=node(<span class="built_in">cos</span>(theta),<span class="built_in">sin</span>(theta));</span><br><span class="line">        w[<span class="number">1</span>][i]=node(<span class="built_in">cos</span>(-theta),<span class="built_in">sin</span>(-theta));</span><br><span class="line">    &#125;</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        x=s[i]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (p[x]==x) s[i]=<span class="string">'z'</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> s[i]=p[x]+<span class="string">'a'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m-n+<span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">if</span> (cnt[i]==n) <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是跑的飞快的标算，篇幅原因把哈希放到最后了：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PIE=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e6</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,N,ans1[maxn],ans2[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">30</span>],d[<span class="number">30</span>],idx[<span class="number">30</span>],cnt,a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">double</span> tmp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> re,im;</span><br><span class="line">    node() &#123;&#125;</span><br><span class="line">    node (<span class="keyword">double</span> a,<span class="keyword">double</span> b) : re(a),im(b) &#123;&#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) &#123; re=t; im=<span class="number">0</span>; &#125;</span><br><span class="line">    node <span class="keyword">operator</span> + (<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re+t.re,im+t.im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re+t,im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> - (<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re-t.re,im-t.im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">double</span> &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re-t,im); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> * (<span class="keyword">const</span> node &amp;t) <span class="keyword">const</span> &#123; <span class="keyword">return</span> node(re*t.re-im*t.im,re*t.im+im*t.re); &#125;</span><br><span class="line">&#125; A[maxn],B[maxn],C[maxn],D[maxn],w[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> nn)</span> </span>&#123;</span><br><span class="line">    N=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (N&lt;=nn) N&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)*(N&gt;&gt;<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(node *a,<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">if</span> (rev[i]&lt;i) swap(a[i],a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">1</span>,l=N/<span class="number">2</span>;<span class="built_in">step</span>&lt;N;<span class="built_in">step</span>&lt;&lt;=<span class="number">1</span>,l&gt;&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i+=<span class="built_in">step</span>&lt;&lt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=i,d=<span class="number">0</span>;k&lt;i+<span class="built_in">step</span>;k++,d+=l) &#123;</span><br><span class="line">                node u=a[k],v=a[k+<span class="built_in">step</span>]*w[flag][d];</span><br><span class="line">                a[k]=u+v; a[k+<span class="built_in">step</span>]=u-v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">            a[i].re/=(<span class="keyword">double</span>)N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">exP</span><span class="params">(<span class="keyword">double</span> theta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node(<span class="built_in">cos</span>(theta),<span class="built_in">sin</span>(theta));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">bool</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) A[i]=<span class="number">0</span>,B[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> I=<span class="number">0</span>;I&lt;<span class="number">26</span>;I++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[I]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">memset</span>(idx,<span class="number">0</span>,<span class="keyword">sizeof</span>(idx));</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        x=I;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            vis[x]=<span class="number">1</span>;</span><br><span class="line">            d[++cnt]=x;</span><br><span class="line">            idx[x]=cnt;</span><br><span class="line">            x=p[x];</span><br><span class="line">            <span class="keyword">if</span> (x==I) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            x=idx[s[i]-<span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">if</span> (!x) <span class="keyword">continue</span>;</span><br><span class="line">            A[n-i+<span class="number">1</span>]=exP(PIE*<span class="number">2</span>*x/cnt);</span><br><span class="line">            tmp+=<span class="built_in">cos</span>(PIE/cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            x=idx[t[i]-<span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">if</span> (!x) <span class="keyword">continue</span>;</span><br><span class="line">            B[i]=exP((PIE-PIE*<span class="number">2</span>*x)/cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fft(A,<span class="number">0</span>); fft(B,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) D[i]=A[i]*B[i];</span><br><span class="line">    fft(D,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) <span class="built_in">read</span>(p[i]),p[i]--;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    m=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">    init(n+m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) &#123;</span><br><span class="line">        <span class="keyword">double</span> theta=PIE*<span class="number">2</span>*i/N;</span><br><span class="line">        w[<span class="number">0</span>][i]=exP(theta);</span><br><span class="line">        w[<span class="number">1</span>][i]=exP(-theta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        cnt++;</span><br><span class="line">        x=i;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            vis[x]=<span class="number">1</span>;</span><br><span class="line">            idx[x]=cnt;</span><br><span class="line">            x=p[x];</span><br><span class="line">            <span class="keyword">if</span> (x==i) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=idx[s[i]-<span class="string">'a'</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) b[i]=idx[t[i]-<span class="string">'a'</span>];</span><br><span class="line">    solve();</span><br><span class="line">    solve(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=m+n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(tmp-D[i].re)&lt;eps) ans2[i-n]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> ans2[i-n]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m-n+<span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">if</span> (ans1[i]&amp;&amp;ans2[i]) <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll M=<span class="number">998244353</span>;</span><br><span class="line">ll s1[maxn],s2[maxn],mi[maxn],t1,t2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mi[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) mi[i]=mi[i<span class="number">-1</span>]*M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        s1[i]=s1[i<span class="number">-1</span>]+a[i]*mi[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        s2[i]=s2[i<span class="number">-1</span>]+b[i]*mi[i];</span><br><span class="line">    t1=s1[n]*mi[m-n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m-n+<span class="number">1</span>;i++) &#123;</span><br><span class="line">        t2=(s2[i+n<span class="number">-1</span>]-s2[i<span class="number">-1</span>])*mi[m-(i+n<span class="number">-1</span>)];</span><br><span class="line">        <span class="keyword">if</span> (t1==t2) ans1[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> ans1[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>回文树及其应用 - 论文学习</title>
    <url>/2020/04/09/%E5%9B%9E%E6%96%87%E6%A0%91%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="7dd86f4b85a5d6ef45d7442a11285521141da278889990e68d3df5349bc5e1fc"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>回文树</tag>
        <tag>最长反链</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>USACO 2020 Open Platinum T2 Exercise</title>
    <url>/2020/04/06/USACO%202020%20Open%20Platinum%20T2/</url>
    <content><![CDATA[<p>先来看题目名称和背景相同的 Gold T3（这次 Gold 似乎没有防 AK 题？）</p>
<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=1043" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=1043</a></p>
<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>众所周知，permutation 会构成若干个环。在 $1$ 到 $n$ 上各站 $1$ 个人，同时开始沿着各自的环走，每次走一步。记 $K$ 为所有人都回到各自起点的最小步数，求所有可能的 $K$ 之和，对 $M$ 取模。</p>
<a id="more"></a>
<p>范围：$1 \le n \le 10^4，10^8 \le M \le 10^9+7$</p>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>显然 $K$ 是所有环长的 LCM，那什么样的 $K$ 是可能的？先分解质因数：$K=\prod_{i=1}^m p_i^{\alpha_i}$，我们希望找到合适的构造。只要环长之和最小可能值 $\le n$，不足的用 $1$ 补上，即要求 $\sum_{i=1}^m p_i^{\alpha_i}\le n$。</p>
<p>预处理出 $1…n$ 的所有质数，大约 1000 个左右，而 $\alpha_i$ 的最大可能值随着 $p_i$ 的增长迅速下降，这说明直接 DP 复杂度没问题。设 $dp[j][s]$ 表示考虑前 $j$ 个质数，$\sum_{i=1}^j p_i^{\alpha_i}=s$ 的方案数。转移时枚举 $\alpha_j$ 即可，注意 $\alpha_j=0$ 时不计入 $s$（因为根本没出现）也可以通过调试样例发现这一点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> n,tmp,dp[<span class="number">1510</span>][maxn],ans;</span><br><span class="line">ll mod;</span><br><span class="line"><span class="keyword">int</span> prime[maxn],tot,b[maxn],mi[maxn][<span class="number">50</span>],t;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"exercise.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"exercise.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(mod);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            prime[++tot]=i;</span><br><span class="line">            tmp=i; b[tot]=<span class="number">1</span>;</span><br><span class="line">            mi[tot][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            mi[tot][<span class="number">1</span>]=i;</span><br><span class="line">            <span class="keyword">while</span> (tmp&lt;=n/i) tmp*=i,b[tot]++,mi[tot][b[tot]]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) &#123;</span><br><span class="line">            tmp=prime[j]*i;</span><br><span class="line">            <span class="keyword">if</span> (tmp&gt;n) <span class="keyword">break</span>;</span><br><span class="line">            vis[tmp]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;=n;s++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dp[i][s]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=b[i+<span class="number">1</span>];j++) &#123;</span><br><span class="line">            t=s+mi[i+<span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (!j) t--;</span><br><span class="line">            <span class="keyword">if</span> (t&gt;n) <span class="keyword">break</span>;</span><br><span class="line">            update(dp[i+<span class="number">1</span>][t],(ll)dp[i][s]*mi[i+<span class="number">1</span>][j]%mod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s=<span class="number">0</span>;s&lt;=n;s++) update(ans,dp[tot][s]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  0. Enough array size? Enough array size? Enough array size? Interger overflow?</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. Think TWICE, Code ONCE!</span></span><br><span class="line"><span class="comment">  Are there any counterexamples to your algo?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  2. Be careful about the BOUNDARIES!</span></span><br><span class="line"><span class="comment">  N=1? P=1? Something about 0?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  3. Do not make STUPID MISTAKES!</span></span><br><span class="line"><span class="comment">  Time complexity? Memory usage? Precision error?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=1045" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=1045</a></p>
<h6 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h6><p>进阶版：求 $n!$ 个 permutation 对应 $K$ 的乘积，对 $M$ 取模，$1\le n \le 7500$。</p>
<h6 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h6><p>不是所有可能的 $K$ 之积，而是所有 permutation 的 $K$ 之积。我们需要从固定环长、计算 permutation 个数的角度考虑。</p>
<p>第一步转化：枚举 $p_i$，计算 $\sum \alpha_i \pmod {M-1}$，也可以模 $\varphi(M)$。这是样例解释给我们的提示。</p>
<p>如果再枚举 $\alpha_i$，会发现并不好控制 $\nu_{p_i}(K)=\alpha_i$，可能会超过。这启示我们用容斥，强制 $t$ 个环长是 $p_i^{\alpha_i}$ 的倍数，再乘上 $(-1)^{t+1}$ 计入贡献。</p>
<p>设 $dp[i]$ 表示当前强制环长之和为 $i\cdot p^{\alpha}$ 的贡献，则 $dp[0]=-1$。</p>
<p>转移时枚举最后一个环长 $j\cdot p^{\alpha}$，为了避免重复，假设当前编号为 $1$ 到 $i\cdot p^{\alpha}$，强制 $1$ 在 $j\cdot p^{\alpha}$ 这个环上。系数就是选出这些编号 $\times$ 环排列个数。</p>
<script type="math/tex; mode=display">
dp[i]= \sum_{j=1}^i -dp[i-j] \binom{i\cdot p^{\alpha}-1}{j\cdot p^{\alpha}-1}(j\cdot p^{\alpha}-1)!</script><p>别忘了除了强制以外，是可以随便排的。</p>
<script type="math/tex; mode=display">
res= \sum_{i=1}^n dp[i] \binom n{i\cdot p^{\alpha}}(n-i\cdot p^{\alpha})!</script><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">7510</span>;</span><br><span class="line"><span class="keyword">int</span> n,C[maxn][maxn],dp[maxn],tmp;</span><br><span class="line">ll mod,ans,jc[maxn];</span><br><span class="line"><span class="keyword">int</span> prime[maxn],tot,b[maxn],mi[maxn][<span class="number">50</span>],t;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=(ll)res*x%(mod+<span class="number">1</span>);</span><br><span class="line">        x=(ll)x*x%(mod+<span class="number">1</span>); y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>]=mod<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n/s;i++) &#123;</span><br><span class="line">        dp[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) &#123;</span><br><span class="line">            update(dp[i],mod-(ll)dp[i-j]*C[i*s<span class="number">-1</span>][j*s<span class="number">-1</span>]%mod*jc[j*s<span class="number">-1</span>]%mod);</span><br><span class="line">        &#125;</span><br><span class="line">        update(res,(ll)dp[i]*C[n][i*s]%mod*jc[n-i*s]%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"exercise.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"exercise.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(mod);</span><br><span class="line">    mod--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">            C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    jc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            prime[++tot]=i;</span><br><span class="line">            tmp=i; b[tot]=<span class="number">1</span>;</span><br><span class="line">            mi[tot][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            mi[tot][<span class="number">1</span>]=i;</span><br><span class="line">            <span class="keyword">while</span> (tmp&lt;=n/i) tmp*=i,b[tot]++,mi[tot][b[tot]]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) &#123;</span><br><span class="line">            tmp=prime[j]*i;</span><br><span class="line">            <span class="keyword">if</span> (tmp&gt;n) <span class="keyword">break</span>;</span><br><span class="line">            vis[tmp]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b[i];j++) &#123;</span><br><span class="line">        ans*=ksm(prime[i],solve(mi[i][j]));</span><br><span class="line">        ans%=mod+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  0. Enough array size? Enough array size? Enough array size? Interger overflow?</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. Think TWICE, Code ONCE!</span></span><br><span class="line"><span class="comment">  Are there any counterexamples to your algo?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  2. Be careful about the BOUNDARIES!</span></span><br><span class="line"><span class="comment">  N=1? P=1? Something about 0?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  3. Do not make STUPID MISTAKES!</span></span><br><span class="line"><span class="comment">  Time complexity? Memory usage? Precision error?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>USACO</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>组合计数</tag>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title>USACO 2020 Open Platinum T1 Sprinklers 2 - Return of the Alfalfa</title>
    <url>/2020/04/06/USACO%202020%20Open%20Platinum%20T1/</url>
    <content><![CDATA[<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=1044" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=1044</a></p>
<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>FJ 有一块 $N \times N$ 的田地，可以种 sweet corn 和 alfalfa。在一个格子装 sweet corn sprinkler 可以使左下的格子都长出 sweet corn，装 alfalfa sprinkler 可以使右上的格子都长出 alfalfa。如果一个格子同时被两种覆盖到，则长不出任何东西；否则可以顺利长出相应的作物，允许多次覆盖。已知某些格子无法装 sprinkler，不过仍然可以长作物。FJ 希望每个格子都能长出作物来，求初始装 sprinkler 的方案数，对 $10^9+7$ 取模。</p>
<p>范围：$1 \le N \le 2000$，给出能否装 sprinkler 的 01 矩阵。</p>
<a id="more"></a>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>最终种出的作物一定分居轮廓线两侧，左下 sweet corn，右上 alfalfa，且转角处必须安装相应的 sprinkler。我们只关心每一行最后一个 sweet corn 在哪里，因此可设 $dp[i][j]$ 表示考虑前 $i$ 行且第 $i$ 行前 $j$ 格长 sweet corn 的方案数，即轮廓线转角。记得特判 $i=1,n$ 和 $j=0,n$，如果第 $1$ 或 $n$ 行都不让装 sprinkler 答案为 $0$。</p>
<p>转移时枚举上一行，需要乘上相应的 $2$ 的幂次，因为除了强制装 sprinkler 的格子以外，其余要么不让装，要么可装可不装。写完 $\mathcal O(n^3)$ 版本先交上去检查正确性，然后用前缀和优化就是 $\mathcal O(n^2)$ 了。</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,mi[<span class="number">2010</span>],cnt[<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">char</span> d[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2010</span>][<span class="number">2010</span>],sum[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line"><span class="keyword">int</span> iv,ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x+=y; <span class="keyword">if</span> (x&gt;=mod) x-=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"sprinklers2.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"sprinklers2.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,d[i]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span> (d[i][j]==<span class="string">'.'</span>) cnt[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    iv=mod-mod/<span class="number">2</span>;</span><br><span class="line">    mi[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) mi[i]=mi[i<span class="number">-1</span>]*<span class="number">2</span>%mod;</span><br><span class="line">    <span class="keyword">if</span> (cnt[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span> (d[<span class="number">1</span>][j]==<span class="string">'.'</span>) dp[<span class="number">1</span>][j]=mi[cnt[<span class="number">1</span>]<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>]=mi[cnt[<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j) sum[<span class="number">1</span>][j]=sum[<span class="number">1</span>][j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span> (j&lt;n&amp;&amp;d[<span class="number">1</span>][j+<span class="number">1</span>]==<span class="string">'.'</span>)</span><br><span class="line">            update(sum[<span class="number">1</span>][j],dp[<span class="number">1</span>][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++) &#123;</span><br><span class="line">            dp[i][j]=(ll)dp[i<span class="number">-1</span>][j]*mi[cnt[i]]%mod;</span><br><span class="line">            <span class="keyword">if</span> (j&amp;&amp;d[i][j]==<span class="string">'.'</span>) &#123;</span><br><span class="line">                update(dp[i][j],(ll)sum[i<span class="number">-1</span>][j<span class="number">-1</span>]*iv%mod*mi[cnt[i]<span class="number">-1</span>]%mod);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j) sum[i][j]=sum[i][j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span> (j&lt;n&amp;&amp;d[i][j+<span class="number">1</span>]==<span class="string">'.'</span>)</span><br><span class="line">                update(sum[i][j],dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        <span class="keyword">if</span> (d[n][j+<span class="number">1</span>]==<span class="string">'.'</span>)</span><br><span class="line">            update(ans,(ll)dp[n][j]*iv%mod);</span><br><span class="line">    update(ans,dp[n][n]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  0. Enough array size? Enough array size? Enough array size? Interger overflow?</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. Think TWICE, Code ONCE!</span></span><br><span class="line"><span class="comment">  Are there any counterexamples to your algo?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  2. Be careful about the BOUNDARIES!</span></span><br><span class="line"><span class="comment">  N=1? P=1? Something about 0?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  3. Do not make STUPID MISTAKES!</span></span><br><span class="line"><span class="comment">  Time complexity? Memory usage? Precision error?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>USACO</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>USACO 2020 Open Platinum T3 Circus</title>
    <url>/2020/04/06/USACO%202020%20Open%20Platinum%20T3/</url>
    <content><![CDATA[<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=1046" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=1046</a></p>
<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>一棵 $n$ 个节点的树上有 $K$ 头奶牛，它们可以任意移动，但不能碰到其他奶牛。如果从一个状态经过有限次移动能到达另一个状态，则称它们属于同一个等价类（可达）。奶牛是编号的，对 $K=1,2, \ldots n$ 输出等价类个数，对 $10^9+7$ 取模。</p>
<a id="more"></a>
<p>范围：$1 \le n \le 10^5$。</p>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>首先证明，如果不考虑奶牛编号的问题，所有状态均互相可达。将 dfs 序定义为递归完子树退出时的序号，考虑 dfs 序前 $K$ 小的节点 $u_1,u_2, \ldots ,u_K$。设奶牛所在的点按到 $u_1$ 的距离从小到大依次为 $v_1,v_2, \ldots ,v_K$，我们想办法把 $v_1$ 挪到 $u_1$，这样就能归纳了（$u_1$ 一定是叶子，去掉后还是树）。显然 $v_1$ 到 $u_1$ 的路径上不会有其他奶牛，因而得证。</p>
<p>这样一来，我们只要钦定 $K$ 个点，计算 $K!$ 种编号的等价类个数就好了。而两个状态互相可达的过程，可以分解成每次交换两个点。如果某两个点可以顺利交换位置，就在一张想象的新图中合并起来。设新图中连通块大小为 $s_1,s_2, \ldots s_m$，那么等价类个数就是 $\frac {K!}{\prod_{i=1}^m s_i!}$，相比较原问题已经有很大的进步。</p>
<p>另一个观察是，可用于交换两点的中转站度数 $\ge 3$，所以我们取一个这样的节点作为根。若不存在，说明是条链，压根没法交换，直接输出 $K!$ 就好了。此外，$K=n-1$ 或 $n$ 时答案总是 $K!$，因为也没法换（样例 / 写暴力主要就说明了这一点…）</p>
<p>下面考虑 $K\le n-2$ 的情况，最开始钦定的 $K$ 个点为深度前 $K$ 大的。这样的好处是它们聚集在了若干个底下的子树里，如果 $K$ 从小到大看，它们会慢慢往上长，从而方便我们维护答案。</p>
<p>新图中，需要合并哪些点？事实上，父亲-儿子，儿子-儿子，子树根-子树根，这$3$种便足够了。跨层的交换，可以用这些中间步骤代替。我们剩下要解决的，是这些合并操作在哪些 $K$ 时成立。</p>
<p>儿子-儿子：同一个父亲的$2$个儿子，在它们都被钦定后即可合并。原因在于根节点、父亲度数$\ge 3$，$K \le n-2$。</p>
<p>父亲-儿子：记 $dis(u)$ 表示 $u$ 子树外所有度数 $\ge 3$ 的点到 $u$ 的最短距离（经过边），用 $2$ 遍 dfs + 前后缀 mn 可解决（具体见代码）那么如果 $K+dis(父亲)\le n-2$ 且父亲被钦定，即可合并。原因在于至少要空出这 $dis(父亲)$ 个节点，之前也证明了只要其余节点不计编号、没那么多，一定可以顺利让出来。</p>
<p>子树根-子树根：当 $K&lt;n-2$ 时，任何两个子树根都可跑到根节点处交换；当 $K=n-2$ 时，只空出了根节点+它的一个儿子，分$2$种情况：（方框为钦定的节点）</p>
<p><img src="\graph\3.png" alt="image" style="zoom:50%;" /></p>
<p>我们会发现，此时只有深度相同的子树根之间能互相交换，这样只要对 $K=n-2$ 最后重新做一遍特判即可。可以对子树根单独开一两个节点用来搞定连通性，当然不开也能做。</p>
<p>一般的合并操作，只在 $K$ 处于一个区间时有效，用线段树+可撤销并查集就能维护答案了，时间复杂度 $\mathcal O(n\log ^2n)​$。这个“黑科技”真是既好用又好写！</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p><del>官方题解一个log但我没看懂</del></p>
<p>看起来很长是因为套了很多东西；只跑了不到 600ms 呢</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=(<span class="number">1e9</span>);</span><br><span class="line"><span class="keyword">int</span> n,rt,head[maxn],nxt[maxn*<span class="number">2</span>],to[maxn*<span class="number">2</span>],tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; tot++; nxt[tot]=head[x]; head[x]=tot; to[tot]=y; &#125;</span><br><span class="line"><span class="keyword">int</span> iv[maxn],jc[maxn],ivjc[maxn],ans[maxn],deg[maxn],rk[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn],sz[maxn],d[maxn],dep[maxn],bg[maxn],ed[maxn];</span><br><span class="line"><span class="keyword">int</span> mn[maxn],dis[maxn],sum,f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x]==dep[y]) <span class="keyword">return</span> x&lt;y;</span><br><span class="line">    <span class="keyword">return</span> dep[x]&gt;dep[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span> <span class="keyword">int</span> x,y; &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; g[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node2</span> &#123;</span> <span class="keyword">int</span> x,y,l,r; &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node2&gt; edge;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,Node A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L&gt;R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class="line">        g[root].push_back(A);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (L&lt;=mid) add(L,R,l,mid,root*<span class="number">2</span>,A);</span><br><span class="line">    <span class="keyword">if</span> (mid&lt;R) add(L,R,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> x,y,szy,fax,s; &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x); y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (x==y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (sz[x]&gt;sz[y]) swap(x,y);</span><br><span class="line">    st.push_back((node)&#123;x,y,sz[y],fa[x],sum&#125;);</span><br><span class="line">    sum=(ll)sum*jc[sz[y]]%mod*jc[sz[x]]%mod;</span><br><span class="line">    sz[y]+=sz[x]; fa[x]=y;</span><br><span class="line">    sum=(ll)sum*ivjc[sz[y]]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">roll</span><span class="params">(node A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=A.x,y=A.y;</span><br><span class="line">    fa[x]=A.fax,sz[y]=A.szy;</span><br><span class="line">    sum=A.s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=st.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[root].<span class="built_in">size</span>();i++) merge(g[root][i].x,g[root][i].y);</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">        ans[l]=(ll)sum*jc[l]%mod;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        solve(l,mid,root*<span class="number">2</span>);</span><br><span class="line">        solve(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (st.<span class="built_in">size</span>()&gt;tmp) &#123;</span><br><span class="line">        roll(st.back()),st.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    bg[u]=++tot; dep[u]=dep[p]+<span class="number">1</span>;</span><br><span class="line">    f[u]=p;</span><br><span class="line">    mn[u]=dis[u]=INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">        v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (v==p) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        mn[u]=<span class="built_in">min</span>(mn[u],mn[v]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ed[u]=tot;</span><br><span class="line">    <span class="keyword">if</span> (deg[u]&gt;<span class="number">2</span>) mn[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; N[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=dis[u]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (deg[u]&gt;<span class="number">2</span>) tmp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">        v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (v==f[u]) <span class="keyword">continue</span>;</span><br><span class="line">        dis[v]=<span class="built_in">min</span>(dis[v],tmp);</span><br><span class="line">        tmp=<span class="built_in">min</span>(tmp,mn[v]+<span class="number">2</span>);</span><br><span class="line">        N[u].push_back(v);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp=dis[u]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (deg[u]&gt;<span class="number">2</span>) tmp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=N[u].<span class="built_in">size</span>()<span class="number">-1</span>,v;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">        v=N[u][i];</span><br><span class="line">        dis[v]=<span class="built_in">min</span>(dis[v],tmp);</span><br><span class="line">        tmp=<span class="built_in">min</span>(tmp,mn[v]+<span class="number">2</span>);</span><br><span class="line">        dfs(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">bool</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,lst;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        x=d[i];</span><br><span class="line">        <span class="keyword">if</span> (rk[x]&gt;n<span class="number">-2</span>) <span class="keyword">continue</span>;</span><br><span class="line">        lst=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=head[x];j;j=nxt[j]) &#123;</span><br><span class="line">            y=to[j];</span><br><span class="line">            <span class="keyword">if</span> (y==f[x]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (lst) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag) add(<span class="built_in">max</span>(rk[lst],rk[y]),n<span class="number">-2</span>,<span class="number">1</span>,n<span class="number">-2</span>,<span class="number">1</span>,(Node)&#123;y,lst&#125;);</span><br><span class="line">                <span class="keyword">else</span> edge.push_back((node2)&#123;y,lst,<span class="built_in">max</span>(rk[lst],rk[y]),n<span class="number">-2</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            lst=y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lst) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!flag) add(rk[x],n<span class="number">-2</span>-dis[x],<span class="number">1</span>,n<span class="number">-2</span>,<span class="number">1</span>,(Node)&#123;lst,x&#125;);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rk[x]&lt;=n<span class="number">-2</span>-dis[x]) edge.push_back((node2)&#123;lst,x,rk[x],n<span class="number">-2</span>-dis[x]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            add(rk[x],<span class="built_in">min</span>(n<span class="number">-2</span>,rk[f[x]]<span class="number">-1</span>),<span class="number">1</span>,n<span class="number">-2</span>,<span class="number">1</span>,(Node)&#123;n+<span class="number">1</span>,x&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rk[f[x]]&gt;n<span class="number">-2</span>) &#123;</span><br><span class="line">            edge.push_back((node2)&#123;n+dep[x]<span class="number">-1</span>,x,rk[x],n<span class="number">-2</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"circus.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"circus.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="keyword">int</span> x,y;</span><br><span class="line">    jc[<span class="number">0</span>]=jc[<span class="number">1</span>]=iv[<span class="number">0</span>]=iv[<span class="number">1</span>]=ivjc[<span class="number">0</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) jc[i]=(ll)jc[i<span class="number">-1</span>]*i%mod,iv[i]=(ll)(mod-mod/i)*iv[mod%i]%mod,ivjc[i]=(ll)ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y);</span><br><span class="line">        add(x,y); add(y,x);</span><br><span class="line">        deg[x]++; deg[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span> (deg[i]&gt;<span class="number">2</span>) &#123; rt=i; <span class="keyword">break</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (!rt) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,jc[i]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(rt,<span class="number">0</span>);</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    dfs(rt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i]=i;</span><br><span class="line">    sort(d+<span class="number">1</span>,d+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) rk[d[i]]=i;</span><br><span class="line">    build(<span class="number">0</span>);</span><br><span class="line">    sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i,sz[i]=<span class="number">1</span>;</span><br><span class="line">    fa[n+<span class="number">1</span>]=n+<span class="number">1</span>;</span><br><span class="line">    solve(<span class="number">1</span>,n<span class="number">-2</span>,<span class="number">1</span>);</span><br><span class="line">    sum=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i,sz[i]=<span class="number">1</span>;</span><br><span class="line">    fa[n+<span class="number">1</span>]=n+<span class="number">1</span>; fa[n+<span class="number">2</span>]=n+<span class="number">2</span>;</span><br><span class="line">    build(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edge.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        x=edge[i].x,y=edge[i].y;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].l&lt;=n<span class="number">-2</span>&amp;&amp;n<span class="number">-2</span>&lt;=edge[i].r) &#123;</span><br><span class="line">            merge(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[n<span class="number">-2</span>]=(ll)sum*jc[n<span class="number">-2</span>]%mod;</span><br><span class="line">    ans[n<span class="number">-1</span>]=jc[n<span class="number">-1</span>];</span><br><span class="line">    ans[n]=jc[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  0. Enough array size? Enough array size? Enough array size? Interger overflow?</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. Think TWICE, Code ONCE!</span></span><br><span class="line"><span class="comment">  Are there any counterexamples to your algo?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  2. Be careful about the BOUNDARIES!</span></span><br><span class="line"><span class="comment">  N=1? P=1? Something about 0?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  3. Do not make STUPID MISTAKES!</span></span><br><span class="line"><span class="comment">  Time complexity? Memory usage? Precision error?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>USACO</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 AIME I 解题思路（11~15）</title>
    <url>/2020/04/05/2020%20AIME%20I%20%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF%EF%BC%8811~15%EF%BC%89/</url>
    <content><![CDATA[<p><a href="https://mp.weixin.qq.com/s/G_jsncAalP-vwNob1jbjJA" target="_blank" rel="noopener">微信公众号链接 - 2020 AIME I 解题思路（11~15）</a></p>
<p><a href="/downloads/2020 AIME I 解题思路 - 无忧公主的数学时间.pdf">pdf 下载链接 - 2020 AIME I 解题思路（1~15)</a></p>
<a id="more"></a>
<iframe  
 height=850 
 width=90% 
 src="/downloads/2020 AIME I 解题思路 - 无忧公主的数学时间.pdf"  
 frameborder=0  
 allowfullscreen>
 </iframe>



]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1332G No Monotone Triples</title>
    <url>/2020/04/04/CF1332G%20No%20Monotone%20Triples/</url>
    <content><![CDATA[<p>给定 $\{a_n\}$，$q$ 次询问区间 $[l,r]$，求其中最长的子序列（可不连续）满足最长递增、递减（相等也算）子序列均 $\le 2$，若该子序列最长 $\le 2$ 则输出 $0$，否则输出长度+例子，$n,q\le 2\cdot 10^5$。</p>
<a id="more"></a>
<p>由 Erdos-Szekeres 定理，任何长度为 $mn+1$ 的序列中存在长度为 $m+1$ 的递增子序列，或长度为 $n+1$ 的递减子序列。也就是说，题目中的 $[l,r]$ 内子序列最长为 $4$。</p>
<p>而长度为 $3$ 的非常好找，只要对每个 $a_i$ 找到左/右第一个比自己严格大/小的位置，用大小严格比较的单调栈做。这样会构成可能的答案区间，对所有 $l$ 取后面对应最小的 $r$ 即可，不用区间排序+线段树之类的了。</p>
<p>下面考虑长度为 $4$ 的情况，假设其中最左、最右的数位于 $L,R$。</p>
<p>观察定理本身的取等条件，这 $4$ 个数会长成什么样子？必须是中间两数一个 max，一个 min，左右两数夹在中间，且不碰到 max、min，但左右可以相等。如果具体讨论大小关系，套单调栈+主席树+线段树+上面二分，大约是 $\mathcal O(n\log ^2n)$ 和一堆常数，比较困难。</p>
<p>在刚才构思的实现中，我们会发现，对 $L$ 来说 $R$ 是“好”的当且仅当 $R$ 不是 $[L,R]$ 中的 max 或 min。而且选出其中最小的 $R$ 以后，可以用 ST 表找到 $[L,R]$ 中的 max 和 min 作为中间两数，构成答案。而满足 $R$ 是 $[L,R]$ 中 max 或 min 的 $R$，一定是在（从右往左扫）当前两个单调栈内的（大小非严格，允许相同）。</p>
<p>在沿用单调栈的基础上，用 set 维护不出现在任何单调栈内的所有数。为了避免栈顶连续一段都相等，我们二分找到第一个不等的位置，找到这 $2$ 个位置后面 set 中最小的 $R$ 就可以了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">2e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=(<span class="number">1e9</span>);</span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn],tot,cnt[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans3[maxn],ans4[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> l,mid,r,z; &#125; d[maxn],e[maxn];</span><br><span class="line"><span class="keyword">int</span> s1[maxn],t1,s2[maxn],t2;</span><br><span class="line"><span class="keyword">int</span> L1[maxn],R1[maxn],L2[maxn],R2[maxn];</span><br><span class="line"><span class="keyword">int</span> mn[maxn][<span class="number">20</span>],mx[maxn][<span class="number">20</span>],lg[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,node A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d[x].r&gt;A.r) d[x]=A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i].r=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (t1&amp;&amp;a[s1[t1]]&gt;=a[i]) t1--;</span><br><span class="line">        <span class="keyword">while</span> (t2&amp;&amp;a[s2[t2]]&lt;=a[i]) t2--;</span><br><span class="line">        L1[i]=s1[t1],L2[i]=s2[t2];</span><br><span class="line">        s1[++t1]=i; s2[++t2]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    t1=t2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (t1&amp;&amp;a[s1[t1]]&gt;=a[i]) t1--;</span><br><span class="line">        <span class="keyword">while</span> (t2&amp;&amp;a[s2[t2]]&lt;=a[i]) t2--;</span><br><span class="line">        R1[i]=s1[t1],R2[i]=s2[t2];</span><br><span class="line">        s1[++t1]=i; s2[++t2]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L1[i]&amp;&amp;R1[i]) &#123;</span><br><span class="line">            update(L1[i],(node)&#123;L1[i],i,R1[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (L2[i]&amp;&amp;R2[i]) &#123;</span><br><span class="line">            update(L2[i],(node)&#123;L2[i],i,R2[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        update(i,d[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update2</span><span class="params">(<span class="keyword">int</span> x,node A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e[x].z&gt;A.z) e[x]=A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,l,r,p1,p2,mid,L,R;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) mn[i][<span class="number">0</span>]=mx[i][<span class="number">0</span>]=i,e[i].z=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">19</span>;j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++) &#123;</span><br><span class="line">            x=mn[i][j<span class="number">-1</span>],y=mn[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span> (a[x]&lt;a[y]) mn[i][j]=x;</span><br><span class="line">            <span class="keyword">else</span> mn[i][j]=y;</span><br><span class="line">            x=mx[i][j<span class="number">-1</span>],y=mx[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span> (a[x]&gt;a[y]) mx[i][j]=x;</span><br><span class="line">            <span class="keyword">else</span> mx[i][j]=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    t1=t2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n,j;i&gt;=<span class="number">1</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (t1&amp;&amp;a[s1[t1]]&gt;a[i]) &#123;</span><br><span class="line">            cnt[s1[t1]]--;</span><br><span class="line">            <span class="keyword">if</span> (!cnt[s1[t1]]) s.insert(s1[t1]);</span><br><span class="line">            t1--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (t2&amp;&amp;a[s2[t2]]&lt;a[i]) &#123;</span><br><span class="line">            cnt[s2[t2]]--;</span><br><span class="line">            <span class="keyword">if</span> (!cnt[s2[t2]]) s.insert(s2[t2]);</span><br><span class="line">            t2--;</span><br><span class="line">        &#125;</span><br><span class="line">        l=<span class="number">1</span>,r=t1,p1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">            mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[s1[mid]]&lt;a[i]) p1=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        l=<span class="number">1</span>,r=t2,p2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">            mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[s2[mid]]&gt;a[i]) p2=mid,l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p1&amp;&amp;p2) &#123;</span><br><span class="line">            L=<span class="built_in">max</span>(s1[p1],s2[p2]);</span><br><span class="line">            it=s.upper_bound(L);</span><br><span class="line">            <span class="keyword">if</span> (it!=s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                R=*it;</span><br><span class="line">                L=i;</span><br><span class="line">                j=lg[R-L+<span class="number">1</span>];</span><br><span class="line">                x=mn[L][j],y=mn[R-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (a[x]&lt;a[y]) p1=x; <span class="keyword">else</span> p1=y;</span><br><span class="line">                x=mx[L][j],y=mx[R-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (a[x]&gt;a[y]) p2=x; <span class="keyword">else</span> p2=y;</span><br><span class="line">                update2(i,(node)&#123;i,<span class="built_in">min</span>(p1,p2),<span class="built_in">max</span>(p1,p2),R&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s1[++t1]=i; s2[++t2]=i;</span><br><span class="line">        cnt[i]+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        update2(i,e[i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) lg[i]=lg[i/<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line">    solve1();</span><br><span class="line">    solve2();</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(l); <span class="built_in">read</span>(r);</span><br><span class="line">        <span class="keyword">if</span> (e[l].z&lt;=r) <span class="built_in">printf</span>(<span class="string">"4\n%d %d %d %d\n"</span>,e[l].l,e[l].mid,e[l].r,e[l].z);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (d[l].r&lt;=r) <span class="built_in">printf</span>(<span class="string">"3\n%d %d %d\n"</span>,d[l].l,d[l].mid,d[l].r);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  0. Enough array size? Enough array size? Enough array size? Interger overflow?</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  1. Think TWICE, Code ONCE!</span></span><br><span class="line"><span class="comment">  Are there any counterexamples to your algo?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  2. Be careful about the BOUNDARIES!</span></span><br><span class="line"><span class="comment">  N=1? P=1? Something about 0?</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">  3. Do not make STUPID MISTAKES!</span></span><br><span class="line"><span class="comment">  Time complexity? Memory usage? Precision error?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title>《A+B Problem》命题报告 - 论文学习</title>
    <url>/2020/04/04/%E3%80%8AA+B%20Problem%E3%80%8B%E5%91%BD%E9%A2%98%E6%8A%A5%E5%91%8A-%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9a15f3818cce05490353b8d37a7626dd82c5a8b9dab0344b38243856ac04c8ce"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>组合计数</tag>
        <tag>容斥</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>CTS 2019 珍珠</title>
    <url>/2019/05/22/CTS%202019%20%E7%8F%8D%E7%8F%A0/</url>
    <content><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/3120" target="_blank" rel="noopener">https://loj.ac/problem/3120</a></p>
<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>有 $n$ 个在 $[1,D]$ 范围内的随机变量，求使得相同变量能够配成至少 $m$ 对的方案数（$1\le D\le 10^5，1\le m\le n\le 10^9$）</p>
<a id="more"></a>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>根据 ECNU 游族杯 2019 的抽乌龟那题，可以轻松获得 50+ 的部分分，并联想到权值出现次数为奇数的个数 $\le n-2m$</p>
<p>根据出现次数考虑生成函数，由 $\sum\frac {x^k}{k!}$ 联想到一些前置技能：</p>
<script type="math/tex; mode=display">
\begin{aligned}
1+x+\frac {x^2} {2!}+\frac {x^3}{3!}+...&=e^x\\
1-x+\frac {x^2} {2!}-\frac {x^3}{3!}+...&=e^{-x}\\
1+\frac {x^2} {2!}+\frac {x^4} {4!}+\frac {x^6} {6!}+...&=\frac {e^x+e^{-x}} 2\\
x+\frac {x^3} {3!}+\frac {x^5} {5!}+\frac {x^7} {7!}+...&=\frac {e^x-e^{-x}} 2
\end{aligned}</script><p>于是出现偶数次的生成函数为 $\frac {e^x+e^{-x}} 2$，出现奇数次的生成函数为 $\frac {e^x-e^{-x}} 2$。我们所求的答案如下，其中 $[x^n]$ 表示求 $x^n$ 的系数，$y$ 表示出现奇数次的个数。显然，只有当 $x$ 刚好被选择了 $n$ 个且 $y$ 不超过 $n-2m$ 个时，需要统计如答案，接着便可以进行一系列的化简：</p>
<script type="math/tex; mode=display">
n!\sum_{k=0}^{n-2m}(\frac {e^x+e^{-x}} 2+y\frac {e^x-e^{-x}} 2)^D[x^n][y^k]\\
\begin{aligned}
&=n!\frac 1 {2^D}\sum_{k=0}^{n-2m}(e^x(1+y)+e^{-x}(1-y))^D[x^n][y^k]\\
\end{aligned}</script><p>使用两次二项式定理，将 D 次方展开、交换求和顺序即可直接消去 $[x^n]$</p>
<script type="math/tex; mode=display">
\begin{aligned}
&=n!\frac 1 {2^D}\sum_{k=0}^{n-2m}\sum_{i=0}^D(e^x(1+y))^i(e^{-x}(1-y))^{D-i}[x^n][y^k]\\
&=n!\frac 1 {2^D}\sum_{k=0}^{n-2m}\sum_{i=0}^D\binom Die^{(2i-D)x}(1+y)^i(1-y)^{D-i}[x^n][y^k]\\
&=\frac 1 {2^D}\sum_{i=0}^D\binom Di(2i-D)^n\sum_{k=0}^{n-2m}(1+y)^i(1-y)^{D-i}[y^k]\\
\end{aligned}</script><p>当 $i$ 确定时，我们只需考虑 $S=\sum_{k=0}^{n-2m}(1+y)^i(1-y)^{D-i}[y^k]$ 的求法。当 $i=D$ 时暴力枚举 $k$ 即可，当 $i≠D$ 时可以将 $[y^k]$ 换个形式：</p>
<script type="math/tex; mode=display">
S=(1+y)^i(1-y)^{D-i}(1+y+y^2+...)[y^{n-2m}]</script><p>后面的 $1+y+y^2+…=\frac 1{1-y}$ 即为补足指数的部分，这样的好处在于多出可以抵消掉的 $1-y$ 与指数统一的 $y^{n-2m}\implies S=(1+y)^i(1-y)^{D-i-1}[y^{n-2m}]$</p>
<p>$(1+y)^i$ 取指数 $j$，$(1-y)^{D-i-1}$ 取指数 $n-2m-j$，因此 $S=\sum_{j=0}^k\binom ij\binom{d-i}{k-j}$，其中便于书写设 $d=D=1,k=n-2m$</p>
<script type="math/tex; mode=display">
\sum_{j=0}^k\binom ij\binom{d-i}{k-j}=\sum_{j=0}^k\frac{i!}{j!(i-j)!}\cdot\frac{(d-i)!}{(k-j)!(d-k-i+j)}</script><p>此时如果将 $j$ 和 $i-j$ 看成指数，那么已经是卷积形式了——对应指数为 $i$ 的系数，而且不需要对于每个 $i$ 单独计算，直接跑一遍 NTT 即可</p>
<p>最后别忘了 $i=D$ 需单独处理，以及前面剩下的系数 $\frac 1 {2^D}\binom Di(2i-D)^n$</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>终于推导完啦，现在只要把公式都敲进去就好了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">5e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,D,N,d,k;</span><br><span class="line">ll jc[maxn],iv[maxn],ivjc[maxn];</span><br><span class="line">ll a[maxn],b[maxn],fa[maxn],fb[maxn];</span><br><span class="line">ll rev[maxn],ans,tmp;</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;<span class="number">0</span>) x+=mod;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y/=<span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jc[x]*ivjc[y]%mod*ivjc[x-y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    N=<span class="number">1</span>; <span class="keyword">int</span> lg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (N&lt;n) N*=<span class="number">2</span>,lg++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>,ii=i;j&lt;=lg;j++,ii/=<span class="number">2</span>)</span><br><span class="line">            rev[i]=rev[i]*<span class="number">2</span>+(ii%<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(ll *a,ll *out,<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ll tmp[maxn];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) tmp[rev[i]]=a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">1</span>;<span class="built_in">step</span>&lt;N;<span class="built_in">step</span>*=<span class="number">2</span>) &#123;</span><br><span class="line">        ll wn=ksm(<span class="number">3</span>,(mod<span class="number">-1</span>)/(<span class="built_in">step</span>*<span class="number">2</span>));</span><br><span class="line">        <span class="keyword">if</span> (flag==<span class="number">-1</span>) wn=ksm(wn,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i+=<span class="built_in">step</span>*<span class="number">2</span>) &#123;</span><br><span class="line">            ll w=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=i;k&lt;i+<span class="built_in">step</span>;k++) &#123;</span><br><span class="line">                ll u=tmp[k],v=tmp[k+<span class="built_in">step</span>]*w%mod;</span><br><span class="line">                tmp[k]=(u+v)%mod; tmp[k+<span class="built_in">step</span>]=(u-v+mod)%mod;</span><br><span class="line">                w=w*wn%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) out[i]=tmp[i];</span><br><span class="line">    <span class="keyword">if</span> (flag==<span class="number">-1</span>) &#123;</span><br><span class="line">        ll t=ksm(N,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">            out[i]=out[i]*t%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    jc[<span class="number">0</span>]=iv[<span class="number">0</span>]=ivjc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    jc[<span class="number">1</span>]=iv[<span class="number">1</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn/<span class="number">5</span>;i++) &#123;</span><br><span class="line">        jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(D); <span class="built_in">read</span>(n); <span class="built_in">read</span>(m); d=D<span class="number">-1</span>; k=<span class="built_in">min</span>(D,n<span class="number">-2</span>*m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=k;j++) &#123;</span><br><span class="line">        a[j]=ivjc[j]*ivjc[k-j]%mod;</span><br><span class="line">        <span class="keyword">if</span> ((k-j)&amp;<span class="number">1</span>) a[j]=mod-a[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=d-k;j++) b[j]=ivjc[j]*ivjc[d-k-j]%mod;</span><br><span class="line">    init(d*<span class="number">2</span>);</span><br><span class="line">    fft(a,fa,<span class="number">1</span>); fft(b,fb,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) fa[i]=fa[i]*fb[i]%mod;</span><br><span class="line">    fft(fa,a,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=d;i++) a[i]=a[i]*jc[i]%mod*jc[d-i]%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=d;i++)</span><br><span class="line">        ans=(ans+a[i]*C(D,i)%mod*ksm(<span class="number">2</span>*i-D,n)%mod)%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;i++) tmp=(tmp+C(D,i))%mod;</span><br><span class="line">    ans=(ans+tmp*ksm(D,n)%mod)%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans*ksm(ksm(<span class="number">2</span>,mod<span class="number">-2</span>),D)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTS</category>
      </categories>
      <tags>
        <tag>组合计数</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title>CTS 2019 氪金手游</title>
    <url>/2019/05/20/CTS%202019%20%E6%B0%AA%E9%87%91%E6%89%8B%E6%B8%B8/</url>
    <content><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/3124" target="_blank" rel="noopener">https://loj.ac/problem/3124</a></p>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>最麻烦的地方在于 $w_i$ 不能直接赋为期望值，因此需要分开保留权值为 1、2、3 的概率</p>
<a id="more"></a>
<p>我们只关心第一次出现某张卡牌的先后关系，所以可以直接将序列看成排列；我们只关心权值之和，具体内部调整只需体现在概率上</p>
<p>在这棵有向树上进行树形 DP，表示子树内权值和确定（最终要用在分母上）且满足一切指向关系的对应概率</p>
<p>转移和背包有些类似，直接暴力枚举权值之和即可，注意指向关系需要分别讨论</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,mx[<span class="number">1010</span>],head[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> tot,nxt[<span class="number">2010</span>],to[<span class="number">2010</span>];</span><br><span class="line">ll w[<span class="number">1010</span>][<span class="number">4</span>],tmp,ans;</span><br><span class="line">ll dp[<span class="number">3010</span>][<span class="number">3010</span>],DP[<span class="number">3010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    tot++; nxt[tot]=head[a];</span><br><span class="line">    head[a]=tot; to[tot]=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    mx[u]=<span class="number">3</span>;</span><br><span class="line">    dp[u][<span class="number">1</span>]=w[u][<span class="number">1</span>];</span><br><span class="line">    dp[u][<span class="number">2</span>]=w[u][<span class="number">2</span>]*<span class="number">2</span>%mod;</span><br><span class="line">    dp[u][<span class="number">3</span>]=w[u][<span class="number">3</span>]*<span class="number">3</span>%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">        v=to[i]; <span class="keyword">if</span> (v==p) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        <span class="keyword">if</span> (i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mx[u];j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=mx[v];k++)</span><br><span class="line">                DP[j+k]=(DP[j+k]+dp[u][j]*dp[v][k]%mod)%mod;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mx[u];j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=mx[v];k++)</span><br><span class="line">                DP[j]=(DP[j]+dp[u][j]*dp[v][k]%mod)%mod,</span><br><span class="line">                DP[j+k]=(DP[j+k]-dp[u][j]*dp[v][k]%mod+mod)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        mx[u]+=mx[v];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mx[u];j++) dp[u][j]=DP[j],DP[j]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mx[u];i++) dp[u][i]=dp[u][i]*ksm(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a); <span class="built_in">read</span>(b); <span class="built_in">read</span>(c);</span><br><span class="line">        tmp=ksm(a+b+c,mod<span class="number">-2</span>);</span><br><span class="line">        w[i][<span class="number">1</span>]=a*tmp%mod;</span><br><span class="line">        w[i][<span class="number">2</span>]=b*tmp%mod;</span><br><span class="line">        w[i][<span class="number">3</span>]=c*tmp%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a); <span class="built_in">read</span>(b);</span><br><span class="line">        add(a,b); add(b,a);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mx[<span class="number">1</span>];i++)</span><br><span class="line">        ans=(ans+dp[<span class="number">1</span>][i])%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTS</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>概率期望</tag>
      </tags>
  </entry>
  <entry>
    <title>CTS 2019 随机立方体</title>
    <url>/2019/05/20/CTS%202019%20%E9%9A%8F%E6%9C%BA%E7%AB%8B%E6%96%B9%E4%BD%93/</url>
    <content><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/3119" target="_blank" rel="noopener">https://loj.ac/problem/3119</a></p>
<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>在一个 $n\times m\times l$ 立方体的每个格子上，随机不重复地填上 $1$ 到 $n\times m\times l$（排列）</p>
<p>定义一个格子是极大的，当且仅当它比所有至少有一维坐标相同的格子，数值都要大</p>
<p>求恰好有 $k$ 个极大格子的概率，答案取模。</p>
<a id="more"></a>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>首先将恰好有 $k$ 个极大的转化成至少有 $i$ 个极大的并容斥（自行意会）</p>
<p>以 $k=2$ 为例，假设当前两个极大格所填数为 $a_1$ 和 $a_2$，与 $a_1$ 至少一维相同的格子记为 $S_1$，与 $a_2$ 至少一维相同的格子记为 $S_2$</p>
<p>不妨 $a_1&gt;a_2$，我们要使得 $a_1$ 是 $S_1\cup S_2$ 中的最大值，$a_2$ 是 $S_2$ 中的最大值，注意到两个事件独立，则概率（分别为 “ 集合大小分之一 ”）可以连乘</p>
<p>推广到 $a_1&gt;a_2&gt;…&gt;a_i$ 也是完全一样的道理，因此可以直接预处理出概率的前缀积 $|S_1\cup S_2\cup …\cup S_i|=n\times m\times l-(n-i)(m-i)(l-i)$</p>
<p>最后在统计至少有 $i$ 个极大格子的概率时，还需乘上 $\binom ik$ 表示选出真正的 $k$ 个极大格，以及从 $n$ 或 $m$ 或 $l$ 中选出 $i$ 行摆放的方案数</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5000010</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">ll n,m,l,k,ans,N,tmp;</span><br><span class="line">ll a[maxn],b[maxn];</span><br><span class="line">ll jc[maxn],iv[maxn],ivjc[maxn];</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll x,ll y)</span> </span>&#123; x%=mod;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) res=res*x%mod;</span><br><span class="line">        x=x*x%mod; y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jc[x]*ivjc[y]%mod*ivjc[x-y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">A</span><span class="params">(ll x,ll y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jc[x]*ivjc[x-y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    jc[<span class="number">0</span>]=iv[<span class="number">0</span>]=ivjc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    jc[<span class="number">1</span>]=iv[<span class="number">1</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++) &#123;</span><br><span class="line">        jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(n); <span class="built_in">read</span>(m); <span class="built_in">read</span>(l); <span class="built_in">read</span>(k);</span><br><span class="line">        N=<span class="built_in">min</span>(n,<span class="built_in">min</span>(m,l)); ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) a[i]=(n*m%mod*l%mod-(n-i)*(m-i)%mod*(l-i)%mod+mod)%mod;</span><br><span class="line">        b[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) b[i]=b[i<span class="number">-1</span>]*a[i]%mod;</span><br><span class="line">        b[N]=ksm(b[N],mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=N<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--) b[i]=b[i+<span class="number">1</span>]*a[i+<span class="number">1</span>]%mod;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=k;i&lt;=N;i++) &#123;</span><br><span class="line">            tmp=C(i,k)*b[i]%mod*A(n,i)%mod*A(m,i)%mod*A(l,i)%mod;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==k%<span class="number">2</span>) ans+=tmp; <span class="keyword">else</span> ans-=tmp;</span><br><span class="line">            <span class="keyword">if</span> (ans&gt;=mod) ans-=mod; <span class="keyword">if</span> (ans&lt;<span class="number">0</span>) ans+=mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTS</category>
      </categories>
      <tags>
        <tag>组合计数</tag>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title>APIO 2012 派遣</title>
    <url>/2019/05/06/APIO%202012%20%E6%B4%BE%E9%81%A3/</url>
    <content><![CDATA[<p>题目来源：<a href="http://121.42.139.219/problem.php?cid=1708&amp;pid=0" target="_blank" rel="noopener">http://121.42.139.219/problem.php?cid=1708&amp;pid=0</a></p>
<p>链接：<a href="https://www.luogu.com.cn/problem/P1552" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P1552</a></p>
<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>给定一棵有点权 $(c_i,l_i)$ 的树，对于每棵子树计算在总 $c_i$ 不超过 $m$ 的前提下，能选出的点数最大值，求它 $\times$ 根的 $l_i$ 的最大值</p>
<p>$1\leq n\leq 10^6，1\leq c_i\leq m\leq 10^9，1\leq l_i\leq 10^9$</p>
<a id="more"></a>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>从暴力的角度来说，我们可以借用 SHOI 2019 春节十二响中，合并儿子子树上堆的方法从而进行优化——并获得 40 ~ 80 不等的分数</p>
<p>具体来说，用大根堆维护每个子树内前若干小的点，使得其点权和不超过 $m$（且个数达到最多）“ 转移 ” 的时候挨个儿拿出来合并入自己</p>
<p>接下来的事情就相当于手写的启发式堆（可并堆）了，也就是在 “ 堆森林 ” 里操作——包括合并和弹根</p>
<p>对于堆中的每个元素记录左右儿子 ls、rs 以及对应节点的 $c_i$，对于树上每个点记录其在可并堆中的 root、堆大小 sz 以及点权和sum</p>
<p>弹根即合并左右儿子并重设根，下面考虑合并两个堆（设根为 $x$ 和 $y$）的实现方法，首先需要保证将小的并入大的（大根堆）</p>
<p>递归将 $y$ 并入 $rs[x]$，再交换 $x$ 的左右儿子，使得复杂度尽量均摊——想清楚了就并不复杂</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,rt,nxt[maxn*<span class="number">2</span>],tot,head[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn],c[maxn],l[maxn],root[maxn];</span><br><span class="line"><span class="keyword">int</span> to[maxn*<span class="number">2</span>],sz[maxn],val[maxn];</span><br><span class="line">ll sum[maxn],ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    tot++; nxt[tot]=head[x];</span><br><span class="line">    head[x]=tot; to[tot]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ls[maxn],rs[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x||!y) <span class="keyword">return</span> x+y;</span><br><span class="line">    <span class="keyword">if</span> (val[x]&lt;val[y]) swap(x,y);</span><br><span class="line">    rs[x]=merge(rs[x],y);</span><br><span class="line">    swap(ls[x],rs[x]);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; <span class="keyword">return</span> x=merge(ls[x],rs[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> val[x]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    sz[u]=<span class="number">1</span>; root[u]=++tot; val[tot]=sum[u]=c[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v,a;i;i=nxt[i]) &#123;</span><br><span class="line">        v=to[i]; <span class="keyword">if</span> (v==p) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        sum[u]+=sum[v]; sz[u]+=sz[v];</span><br><span class="line">        root[u]=merge(root[u],root[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (sum[u]&gt;m) &#123;</span><br><span class="line">        sum[u]-=top(root[u]); sz[u]--;</span><br><span class="line">        pop(root[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,(ll)l[u]*sz[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"dispatching.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"dispatching.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(fa[i]); <span class="built_in">read</span>(c[i]); <span class="built_in">read</span>(l[i]);</span><br><span class="line">        <span class="keyword">if</span> (fa[i]) add(i,fa[i]),add(fa[i],i); <span class="keyword">else</span> rt=i;</span><br><span class="line">    &#125; tot=<span class="number">0</span>;</span><br><span class="line">    dfs(rt,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>APIO</category>
      </categories>
      <tags>
        <tag>可并堆</tag>
      </tags>
  </entry>
  <entry>
    <title>HNOI 2019 D1T3 多边形</title>
    <url>/2019/05/01/HNOI%202019%20D1T3%20%E5%A4%9A%E8%BE%B9%E5%BD%A2/</url>
    <content><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/3056" target="_blank" rel="noopener">https://loj.ac/problem/3056</a></p>
<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>给定一个正 $n$ 边形的三角剖分，对顶点 $1\leq a&lt;b&lt;c&lt;d\leq n$ 定义旋转操作 $(a,c)$：当 $(a,b),(b,c),(c,d),(d,a),(a,c)$ 间都存在连边，删去 $(a,c)$ 并连接 $(b,d)$ 且此时仍为三角剖分（没有形内相交）</p>
<a id="more"></a>
<p>可以证明若要对 $(a,c)$ 进行旋转，必然存在唯一的 $(b,d)$ 满足条件。如样例解释所示，操作是有限的：</p>
<p><img src="\graph\5.png" alt="img"></p>
<p>当 $W=0$ 时求最少旋转多少次，当 $W=1$ 时还需求出最少旋转次数的方案数。此外有 $m$ 次询问，每次先旋转 $(x,y)$ 后输出答案，询问之间互相独立——输出共 $m+1$ 行，包括不进行事先旋转的询问（$1\leq n,m\leq 10^5$）</p>
<h6 id="思路与暴力"><a href="#思路与暴力" class="headerlink" title="思路与暴力"></a>思路与暴力</h6><p>$*$ 假设正 $n$ 边形上相邻点之间的也算连边，即除三角剖分给出的边外默认有 $(i,i+1)$ 和 $(1,n)$</p>
<p>题图画得很棒，不难发现最后状态是所有点都连向了 $n$，每次旋转相当于把 $(a,c)$ 连边两侧三角形构成四边形的对角线进行了交换（感性理解）</p>
<p>于是<strong>最少旋转次数为初始时不与 $n$ 连边的点数</strong>，最优方案下每次必然转一个点连到 $n$，一旦连向 $n$ 就不动了</p>
<p>如何求出方案数呢？根据刚才的结论可知，$n$ 的所有连边将多边形划分成了若干个独立的区间</p>
<p>具体来说，考虑区间 DP 的思想，假设当前分治到 $[l,r]$ 且 $l$ 和 $r$ 均与 $n$ 有连边，同时 $(l,r)$ 也有连边！</p>
<p>现在有且仅有一个可旋转的点 $k$ 满足 $(l,k),(k,r)$ 有连边，进一步观察可知 <strong>$k$ 是 $l$ 的邻居中 $r$ 的前一个</strong></p>
<p>用 set 维护邻居就能方便地处理旋转（加边删边）和找前驱后继了，对于每次询问都先旋转后递归求解</p>
<p>如何合并区间呢？这个问题出现在合并 $(l,mid),(mid,r)$ 以及 $n$ 初始的邻居之间构成的区间时</p>
<p>区间操作序列的长度设为 $x$、$y$ 且它们相对独立，那么合并后的方案数为 $\binom {x+y} x$ 再乘上各自本身的方案数</p>
<h6 id="代码-1"><a href="#代码-1" class="headerlink" title="代码 1"></a>代码 1</h6><p>想清楚了就不难写，稳稳的 65 分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> W,n,m;</span><br><span class="line">ll ans,iv[maxn],ivjc[maxn],jc[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; g[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it,pre,nxt,f;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    g[x].insert(y);</span><br><span class="line">    g[y].insert(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    g[x].erase(y);</span><br><span class="line">    g[y].erase(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> ll s1,s2; &#125; A;</span><br><span class="line"><span class="function">node <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r-l&lt;=<span class="number">1</span>) <span class="keyword">return</span> (node)&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    f=g[l].lower_bound(r);</span><br><span class="line">    <span class="keyword">if</span> (f==g[l].<span class="built_in">begin</span>()) f=g[l].<span class="built_in">end</span>(); f--;</span><br><span class="line">    <span class="keyword">int</span> mid=*f;</span><br><span class="line">    add(n,mid); del(l,r);</span><br><span class="line">    node a=dfs(l,mid),b=dfs(mid,r);</span><br><span class="line">    add(l,r); del(n,mid);</span><br><span class="line">    A.s1=a.s1+b.s1+<span class="number">1</span>;</span><br><span class="line">    A.s2=a.s2*b.s2%mod*jc[a.s1+b.s1]%mod*ivjc[a.s1]%mod*ivjc[b.s1]%mod;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ans=n-g[n].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!W) &#123; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld "</span>,ans); ans=<span class="number">1</span>; ll tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (it=g[n].<span class="built_in">begin</span>();it!=g[n].<span class="built_in">end</span>();it++) &#123;</span><br><span class="line">        it++; nxt=it; it--;</span><br><span class="line">        <span class="keyword">if</span> (nxt==g[n].<span class="built_in">end</span>()) <span class="keyword">break</span>;</span><br><span class="line">        A=dfs(*it,*nxt);</span><br><span class="line">        ans=ans*A.s2%mod;</span><br><span class="line">        tmp+=A.s1;</span><br><span class="line">        ans=ans*ivjc[A.s1]%mod;</span><br><span class="line">    &#125; ans=ans*jc[tmp]%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"polygon.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"polygon.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(W); <span class="built_in">read</span>(n); <span class="keyword">int</span> x,y,a,b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-3</span>;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y); add(x,y);</span><br><span class="line">    &#125; add(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) add(i,i+<span class="number">1</span>);</span><br><span class="line">    iv[<span class="number">0</span>]=iv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    ivjc[<span class="number">0</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    jc[<span class="number">0</span>]=jc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">        jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i) &#123;</span><br><span class="line">            <span class="built_in">read</span>(x); <span class="built_in">read</span>(y);</span><br><span class="line">            it=g[x].lower_bound(y);</span><br><span class="line">            <span class="keyword">if</span> (it==g[x].<span class="built_in">begin</span>()) pre=g[x].<span class="built_in">end</span>(),pre--;</span><br><span class="line">            <span class="keyword">else</span> it--,pre=it,it++;</span><br><span class="line">            <span class="keyword">if</span> (it==g[x].<span class="built_in">end</span>()) nxt=g[x].<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">else</span> it++,nxt=it,it--;</span><br><span class="line">            a=*pre,b=*nxt;</span><br><span class="line">            add(a,b); del(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        solve();</span><br><span class="line">        <span class="keyword">if</span> (i) add(x,y),del(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="走向正解"><a href="#走向正解" class="headerlink" title="走向正解"></a>走向正解</h6><p>分治的过程看起来很高效，问题在于每次询问都要重新遍历这棵 $(l,r)\rightarrow(l,mid),(mid,r)$ 的决策树</p>
<p>确定第一次操作会对初始决策树产生多大的影响呢？注意到有两种完全不同的情况：</p>
<ol>
<li>旋转后仍没有点连到 $n$，最少操作数不变</li>
</ol>
<p>假设事先进行的操作为 $(l,k)$ 并转至了 $(t,r)$，那么首先影响到的是决策树上的父亲 $(l,r)$，原本下一步要转到 $n$ 的 $k$ 变为了 $t$</p>
<p><img src="\graph\HNOI 2019 D1T3 多边形 1.png" alt="img"></p>
<p>决策树上的变化如下，结合上图非常好理解，事实证明 $(l,r),(t,k),(k,r)$ 的子树都可以沿用以前的！</p>
<p><img src="\graph\HNOI 2019 D1T3 多边形 3.png" alt="img"></p>
<p>因为方案数是由乘积得到，所以只需在原来的基础上除以这部分的组合数再乘上新的（每次合并都产生组合数）</p>
<p>先通过 map 在决策树上找到 $(l,k)$ 的位置，进而找到附近的其他节点——这一过程其实与二叉树上 rotate 类似，右儿子的情况与上图左儿子对称</p>
<ol>
<li>旋转后有点连到 $n$，最少操作数减一</li>
</ol>
<p>假设事先进行的操作为 $(l,r)$ 并转至了 $(k,n)$，而此时 $(l,r)$ 在决策树（森林）上为若干个根之一，可以用是否存在父亲来判这一情况</p>
<p><img src="\graph\HNOI 2019 D1T3 多边形 2.png" alt="img"></p>
<p>决策树如上图所示，操作后两棵子树被 split 成为单独的树，同样除以子树相互合并、整体合并入森林的组合数再乘上分别合并入森林的</p>
<h6 id="代码-2"><a href="#代码-2" class="headerlink" title="代码 2"></a>代码 2</h6><p>实现上不需要实际的旋转（加边删边），因此 vector 排序后在邻居中二分与上述 set 效果一样（常数小）</p>
<p>先在初始三角剖分下建出决策树，然后每次一波计算即可 ~</p>
<p>P.S. 两种方法的代码长度几乎一样</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">3e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> W,n,m,tot,ch[maxn][<span class="number">2</span>],S;</span><br><span class="line"><span class="keyword">int</span> sz[maxn],fa[maxn],rt[maxn];</span><br><span class="line">ll ans,res,iv[maxn],ivjc[maxn],jc[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; M;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jc[x+y]*ivjc[x]%mod*ivjc[y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ivC</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ivjc[x+y]*jc[x]%mod*jc[y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    g[x].push_back(y);</span><br><span class="line">    g[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r-l&lt;=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    root=++tot; M[make_pair(l,r)]=tot;</span><br><span class="line">    it=lower_bound(g[l].<span class="built_in">begin</span>(),g[l].<span class="built_in">end</span>(),r);</span><br><span class="line">    <span class="keyword">if</span> (it==g[l].<span class="built_in">begin</span>()) it=g[l].<span class="built_in">end</span>(); it--;</span><br><span class="line">    <span class="keyword">int</span> mid=*it;</span><br><span class="line">    dfs(l,mid,ch[root][<span class="number">0</span>]);</span><br><span class="line">    dfs(mid,r,ch[root][<span class="number">1</span>]);</span><br><span class="line">    fa[ch[root][<span class="number">0</span>]]=fa[ch[root][<span class="number">1</span>]]=root;</span><br><span class="line">    sz[root]=sz[ch[root][<span class="number">0</span>]]+sz[ch[root][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">    ans=ans*C(sz[ch[root][<span class="number">0</span>]],sz[ch[root][<span class="number">1</span>]])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"polygon.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"polygon.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(W); <span class="built_in">read</span>(n); <span class="keyword">int</span> x,y,root,f,op;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-3</span>;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y); add(x,y);</span><br><span class="line">    &#125; add(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) add(i,i+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sort(g[i].<span class="built_in">begin</span>(),g[i].<span class="built_in">end</span>());</span><br><span class="line">    iv[<span class="number">0</span>]=iv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    ivjc[<span class="number">0</span>]=ivjc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    jc[<span class="number">0</span>]=jc[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        iv[i]=(mod-mod/i)*iv[mod%i]%mod;</span><br><span class="line">        ivjc[i]=ivjc[i<span class="number">-1</span>]*iv[i]%mod;</span><br><span class="line">        jc[i]=jc[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    &#125; ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[n].<span class="built_in">size</span>()<span class="number">-1</span>;i++)</span><br><span class="line">        dfs(g[n][i],g[n][i+<span class="number">1</span>],rt[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[n].<span class="built_in">size</span>()<span class="number">-1</span>;i++)</span><br><span class="line">        ans=ans*C(S,sz[rt[i]])%mod,S+=sz[rt[i]];</span><br><span class="line">    <span class="keyword">if</span> (!W) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,S);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>,S,ans);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y);</span><br><span class="line">        root=M[make_pair(x,y)];</span><br><span class="line">        res=S-(fa[root]?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (!W) &#123; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>,res);</span><br><span class="line">        <span class="keyword">if</span> (fa[root]) &#123; <span class="comment">// rotate root</span></span><br><span class="line">            f=fa[root]; op=(ch[f][<span class="number">1</span>]==root);</span><br><span class="line">            res=ans*ivC(sz[ch[root][<span class="number">0</span>]],sz[ch[root][<span class="number">1</span>]])%mod;</span><br><span class="line">            res=res*ivC(sz[root],sz[ch[f][op^<span class="number">1</span>]])%mod;</span><br><span class="line">            res=res*C(sz[ch[root][op^<span class="number">1</span>]],sz[ch[f][op^<span class="number">1</span>]])%mod;</span><br><span class="line">            res=res*C(sz[ch[root][op]],sz[f]-sz[root]+sz[ch[root][op^<span class="number">1</span>]])%mod;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// split root's 2 sons</span></span><br><span class="line">            res=ans*ivC(S-sz[root],sz[root])%mod;</span><br><span class="line">            res=res*ivC(sz[ch[root][<span class="number">0</span>]],sz[ch[root][<span class="number">1</span>]])%mod;</span><br><span class="line">            res=res*C(S-sz[root],sz[ch[root][<span class="number">0</span>]])%mod;</span><br><span class="line">            res=res*C(S-sz[root]+sz[ch[root][<span class="number">0</span>]],sz[ch[root][<span class="number">1</span>]])%mod;</span><br><span class="line">        &#125; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>组合计数</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>HNOI 2019 D2T1 鱼</title>
    <url>/2019/04/30/HNOI%202019%20D1T1%20%E9%B1%BC/</url>
    <content><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/3054" target="_blank" rel="noopener">https://loj.ac/problem/3054</a></p>
<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>在给定的 $n$ 个点中求 6 元组 $(A,B,C,D,E,F)$ 的个数：$AB=AC,BD=CD,DE=DF$</p>
<a id="more"></a>
<p>当然鱼身体和尾巴必须是凸的：$\angle BAD,\angle BDA,\angle CAD,\angle CDA&lt;90°$，$90°&lt;\angle ADE,\angle ADF\leq 180°$</p>
<p>6 元组内部调换顺序后视为不同，$n\leq 1000$</p>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>从暴力的角度来说，我们可以先确定 $A$ 和 $D$，然后分别计算 $(B,C)$、$(E,F)$ 的个数并相乘</p>
<ol>
<li><p>$(B,C)$</p>
<p> AD 过 BC 中垂线且中点在 AD 上，预处理出所有 BC 的中垂线，以 $($ 直线方程 $,$ 中点坐标 $)$ 的 pair 记录</p>
<p> AD 的直线方程是确定的，因此 $($ 直线方程 $,A)$ 和 $($ 直线方程 $,D)$ 之间的 BC 都使中点在 AD 上</p>
<p> 将 pair 排序后二分即可；由于坐标均为整数，<strong>直线方程使用 $ax+by+c=0$ 并化到最简以求一致</strong></p>
</li>
<li><p>$(E,F)$</p>
<p> E 和 F 在过 D 作 AD 垂线、与 A 相对的另一侧；DE = DF 可以通过 map 维护相同长度的个数解决</p>
<p> 考虑对于 D 将 A 犄角排序并<strong>复制成两遍</strong>，那么 EF 所处半平面相当于每次顺时针单调旋转</p>
<p> 假设当前线段长度的个数为 $s$，那么<strong>加入后 $(E,F)$ 个数增加 $s$，删除后 $(E,F)$ 个数减少 $s-1​</strong>$</p>
</li>
</ol>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>对于 $($ 直线方程 $,$ 中点坐标 $)$ 的处理，在实现上为避免 double 还有不少细节</p>
<p>BC 和 EF 分别可交换顺序，$ans$ 开 long long 并需 × 4</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PIE=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> P90=PIE*<span class="number">0.5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> P360=PIE*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=(<span class="number">1e-10</span>);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ABS</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x)&lt;eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,lst,tot,cnt; ll ans,c1,c2;</span><br><span class="line"><span class="keyword">double</span> tmp,dij,dis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ll x,y; <span class="keyword">double</span> angle;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; angle=<span class="built_in">atan2</span>(y,x); &#125;</span><br><span class="line">    node <span class="keyword">operator</span> + (node t) &#123; <span class="keyword">return</span> (node)&#123;x+t.x,y+t.y&#125;; &#125;</span><br><span class="line">    node <span class="keyword">operator</span> - (node t) &#123; <span class="keyword">return</span> (node)&#123;x-t.x,y-t.y&#125;; &#125;</span><br><span class="line">    <span class="keyword">double</span> <span class="keyword">operator</span> * (node t) &#123; <span class="keyword">return</span> x*t.x+y*t.y; &#125;</span><br><span class="line">    node <span class="keyword">operator</span> ^ (<span class="keyword">double</span> t) &#123; <span class="keyword">return</span> (node)&#123;x*t,y*t&#125;; &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a,node b) &#123; <span class="keyword">return</span> a.x==b.x?a.y&lt;b.y:a.x&lt;b.x; &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (node a,node b) &#123; <span class="keyword">return</span> a.x==b.x&amp;&amp;a.y==b.y; &#125;</span><br><span class="line">&#125; d[maxn],A,B,N[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span> &#123;</span></span><br><span class="line">    ll a,b,c,x,y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="built_in">line</span> t1,<span class="built_in">line</span> t2) &#123;</span><br><span class="line">        <span class="keyword">return</span> t1.a==t2.a&amp;&amp;t1.b==t2.b&amp;&amp;t1.c==t2.c&amp;&amp;t1.x==t2.x&amp;&amp;t1.y==t2.y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="built_in">line</span> t1,<span class="built_in">line</span> t2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t1.a!=t2.a) <span class="keyword">return</span> t1.a&lt;t2.a;</span><br><span class="line">        <span class="keyword">if</span> (t1.b!=t2.b) <span class="keyword">return</span> t1.b&lt;t2.b;</span><br><span class="line">        <span class="keyword">if</span> (t1.c!=t2.c) <span class="keyword">return</span> t1.c&lt;t2.c;</span><br><span class="line">        <span class="keyword">if</span> (t1.x!=t2.x) <span class="keyword">return</span> t1.x&lt;t2.x;</span><br><span class="line">        <span class="keyword">return</span> t1.y&lt;t2.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; M[maxn*maxn],nw;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span> </span>&#123; <span class="keyword">return</span> a.angle&lt;b.angle; &#125;</span><br><span class="line"><span class="function">ll <span class="title">len</span><span class="params">(node a)</span> </span>&#123; <span class="keyword">return</span> a.x*a.x+a.y*a.y; &#125;</span><br><span class="line"><span class="built_in">map</span>&lt;ll,<span class="keyword">int</span>&gt; T;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;=n;a++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> b=<span class="number">1</span>;b&lt;=n;b++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a==b) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c=<span class="number">1</span>;c&lt;=n;c++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a==c||b==c) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> D=<span class="number">1</span>;D&lt;=n;D++)</span><br><span class="line">            <span class="keyword">if</span> (a!=D&amp;&amp;b!=D&amp;&amp;c!=D)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> e=<span class="number">1</span>;e&lt;=n;e++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> f=<span class="number">1</span>;f&lt;=n;f++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a==e||b==e||c==e||D==e||e==f) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (a==f||b==f||c==f||D==f) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (len(d[f]-d[D])!=len(d[e]-d[D])) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (len(d[b]-d[a])!=len(d[c]-d[a])) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (len(d[b]-d[D])!=len(d[c]-d[D])) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> ((d[b]-d[a])*(d[D]-d[a])&gt;<span class="number">0</span>&amp;&amp;(d[b]-d[D])*(d[a]-d[D])&gt;<span class="number">0</span></span><br><span class="line">                    &amp;&amp;(d[a]-d[D])*(d[e]-d[D])&lt;<span class="number">0</span>&amp;&amp;(d[a]-d[D])*(d[f]-d[D])&lt;<span class="number">0</span>) ans++;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (delta==<span class="number">1</span>) c2+=T[x],T[x]++;</span><br><span class="line">    <span class="keyword">else</span> T[x]--,c2-=T[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a||!b) <span class="keyword">return</span> a+b;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(ll &amp;a,ll &amp;b,ll &amp;c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a&lt;<span class="number">0</span>||(a==<span class="number">0</span>&amp;&amp;b&lt;<span class="number">0</span>)) a=-a,b=-b,c=-c;</span><br><span class="line">    ll d=gcd(<span class="built_in">abs</span>(a),gcd(<span class="built_in">abs</span>(b),<span class="built_in">abs</span>(c)));</span><br><span class="line">    a/=d; b/=d; c/=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll a,b,c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">        A=d[j]-d[i]; B=d[i]+d[j];</span><br><span class="line">        a=<span class="number">2</span>*A.x; b=<span class="number">2</span>*A.y;</span><br><span class="line">        c=A.x*B.x+A.y*B.y;</span><br><span class="line">        solve(a,b,c);</span><br><span class="line">        M[++cnt]=(<span class="built_in">line</span>)&#123;a,b,c,B.x,B.y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(M+<span class="number">1</span>,M+cnt+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        c1=c2=tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span> (j!=i) N[++tot]=d[j]-d[i],N[tot].init();</span><br><span class="line">        sort(N+<span class="number">1</span>,N+tot+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) N[tot+j]=N[j],N[tot+j].angle=N[j].angle+P360;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>; T.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) &#123;</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">double</span> L=N[j].angle+P90,R=L+PIE;</span><br><span class="line">            <span class="keyword">while</span> (r&lt;tot*<span class="number">2</span>&amp;&amp;ABS(R-N[r+<span class="number">1</span>].angle)&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                r++; update(len(N[r]),<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;=tot*<span class="number">2</span>&amp;&amp;ABS(N[l].angle-L)&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">                update(len(N[l]),<span class="number">-1</span>); l++;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; &#123;</span><br><span class="line">            A=d[i]+N[j];</span><br><span class="line">            a=N[j].y,b=-N[j].x;</span><br><span class="line">            c=a*d[i].x+b*d[i].y;</span><br><span class="line">            solve(a,b,c);</span><br><span class="line">            <span class="built_in">line</span> L=(<span class="built_in">line</span>)&#123;a,b,c,d[i].x*<span class="number">2</span>,d[i].y*<span class="number">2</span>&#125;;</span><br><span class="line">            <span class="built_in">line</span> R=(<span class="built_in">line</span>)&#123;a,b,c,A.x*<span class="number">2</span>,A.y*<span class="number">2</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span> (R&lt;L) swap(L,R);</span><br><span class="line">            <span class="keyword">if</span> (L==R) <span class="keyword">continue</span>;</span><br><span class="line">            c1=lower_bound(M+<span class="number">1</span>,M+cnt+<span class="number">1</span>,R)-upper_bound(M+<span class="number">1</span>,M+cnt+<span class="number">1</span>,L);</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=c1*c2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans*<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"fish.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"fish.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(d[i].x);</span><br><span class="line">        <span class="built_in">read</span>(d[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">10</span>) solve1();</span><br><span class="line">    <span class="keyword">else</span> solve2();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>HNOI 2019 D2T1 校园旅行</title>
    <url>/2019/04/30/HNOI%202019%20D2T1%20%E6%A0%A1%E5%9B%AD%E6%97%85%E8%A1%8C/</url>
    <content><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/3057" target="_blank" rel="noopener">https://loj.ac/problem/3057</a></p>
<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>在一张点权为 01 的无向图上，$q$ 次询问从 $x$ 到 $y$ 是否存在一条点权构成回文串的路径（允许有环）$n\leq 5000，m\leq 5\cdot 10^5，q\leq 10^5$</p>
<a id="more"></a>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>记 $dp[i][j]$ 表示从 $i$ 到 $j$ 是否存在回文路径，那么可以由 $dp[i][i]$ 和 $dp[x][y]$ $(x,y$ 之间有连边 $)$ 出发，BFS 到所有可行的状态</p>
<p>转移时枚举 $i$ 和 $j$ 的每对邻居，必须满足点权相同——如此暴力即可获得 30 分的好成绩，可以先写好用于对拍</p>
<p>往后的难点主要在于 $m$ 太大 $\implies$ 邻居太多而无法枚举，不过单看 BFS + DP 还是可以接受的</p>
<p>考虑<strong>构造等价的图</strong>，也就是删去一些边后对任何询问都没有影响</p>
<p>当点权在 01 交替出现时，相当于是在 01 二分图上来回跳。假设只连点权不同的无向边，那么构成的连通块中满足 $a[i]=a[j]$ 的 $(i,j)$ 之间存在回文路径；$a[i]≠a[j]$ 的 $(i,j)$ 本身就不存在。因此<strong>在点权不同的 01 无向边中，对于每个连通块选择生成树上的边</strong>即可达到相同的效果，原本连通的同色点仍然可行，原本不连通的同色点依然不行，异色点显然不行。</p>
<p>当点权出现连续的 0 或 1 时，假设只连点权相同的无向边：如果仍然构成二分图，那么与上述情况一样；如果不构成二分图，那么必然存在奇环，也导致了可以从 $i$ 经过奇环走到 $j$ 使其路径长度改变了奇偶性（为了保持回文性质不变，我们只需使得如果原来存在长度为奇数的路径，化简后也必须存在，偶数亦然）在生成树的基础之上，我们只需要添加一个自环，即可达到与奇环一样的效果</p>
<p>总而言之，对于两种无向边我们分别拎出来建图，再对每个连通块取其生成树上的边，如果连通块不是二分图添加一个自环</p>
<p>走 01 交替相当于是前一种边，走连续的 0 或 1 是后一种边，这样就完美地等效替代了回文串！边数顺利地降至 $O(n)$，接着用暴力即可</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>方便起见，我将 DFS 黑白染色判二分图 + 找生成树构造新图的两张图，写到了同一个 struct 下，尽管可能会被卡</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">6e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,Q,tot,L,R,x,y;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5010</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">5010</span>][<span class="number">5010</span>],a[<span class="number">5010</span>];</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">5010</span>],to[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> nxt[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> x,y; &#125; A,q[<span class="number">5000</span>*<span class="number">5000</span>+<span class="number">5</span>],e[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[x][y]) <span class="keyword">return</span>;</span><br><span class="line">    q[++R]=(node)&#123;x,y&#125;; dp[x][y]=dp[y][x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    tot++; nxt[tot]=head[x];</span><br><span class="line">    to[tot]=y; head[x]=tot;</span><br><span class="line">    <span class="keyword">if</span> (a[x]==a[y]&amp;&amp;x&lt;=y) insert(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) insert(i,i); L=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (L&lt;=R) &#123;</span><br><span class="line">        A=q[L]; L++;</span><br><span class="line">        x=A.x,y=A.y;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=nxt[i])</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=head[y];j;j=nxt[j])</span><br><span class="line">            <span class="keyword">if</span> (a[to[i]]==a[to[j]])</span><br><span class="line">                insert(to[i],to[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (Q--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (!dp[x][y]) <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> Head[<span class="number">5010</span>],Tot,Nxt[maxn*<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> To[maxn*<span class="number">2</span>],vis[<span class="number">5010</span>],b[<span class="number">5010</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; Tot=<span class="number">0</span>; <span class="built_in">memset</span>(Head,<span class="number">0</span>,<span class="keyword">sizeof</span>(Head)); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        Tot++; Nxt[Tot]=Head[x];</span><br><span class="line">        Head[x]=Tot; To[Tot]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (b[u]!=<span class="number">-1</span>) flag=(b[u]==p);</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">return</span> flag;</span><br><span class="line">        b[u]=p; vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=Head[u],v;i;i=Nxt[i]) &#123;</span><br><span class="line">            v=To[i];</span><br><span class="line">            <span class="keyword">if</span> (!vis[v]) add(u,v),add(v,u);</span><br><span class="line">            <span class="keyword">if</span> (!dfs(v,p^<span class="number">1</span>)) flag=<span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">memset</span>(b,<span class="number">-1</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dfs(i,<span class="number">0</span>)) add(i,i);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; G;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(e[i].x),<span class="built_in">read</span>(e[i].y);</span><br><span class="line">    G.init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span> (a[e[i].x]!=a[e[i].y]) &#123;</span><br><span class="line">            G.Add(e[i].x,e[i].y);</span><br><span class="line">            G.Add(e[i].y,e[i].x);</span><br><span class="line">        &#125; G.solve();</span><br><span class="line">    G.init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span> (a[e[i].x]==a[e[i].y]) &#123;</span><br><span class="line">            G.Add(e[i].x,e[i].y);</span><br><span class="line">            G.Add(e[i].y,e[i].x);</span><br><span class="line">        &#125; G.solve();</span><br><span class="line">    solve1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"tour.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"tour.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m); <span class="built_in">read</span>(Q);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">5000</span>&amp;&amp;m&lt;=<span class="number">10000</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            <span class="built_in">read</span>(x); <span class="built_in">read</span>(y);</span><br><span class="line">            add(x,y); add(y,x);</span><br><span class="line">        &#125; solve1();</span><br><span class="line">    &#125; <span class="keyword">else</span> solve2();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>图论</tag>
        <tag>连通性</tag>
      </tags>
  </entry>
  <entry>
    <title>USACO 2019 Open Platinum T1 Tree Boxes</title>
    <url>/2019/04/18/USACO%202019%20Open%20Platinum%20T1%20Tree%20Boxes/</url>
    <content><![CDATA[<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=948" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=948</a></p>
<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>给出一棵树，你需要先确定 $n$ 个点的坐标（范围 $[1,n]$），接着有 $q$ 次询问点对，要求返回（不超过）两个平面上的长方形，不重叠地覆盖到路径上所有点（$1\leq n,q\leq 10^5$）。</p>
<a id="more"></a>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>这是一道交互题，下面讨论一种个人认为不复杂的构造坐标的方案，当然一定时间的手工尝试是不可避免的</p>
<p>将 1 号点设为根并放在右上角 $(n,n)$，假设 2 是 1 的儿子，那么把 2 放在下面那行上</p>
<p>但 2 的左边需要留地方给 2 的子树，具体来说可以发现，左边需要留的距离（横坐标）是 2 的子树大小</p>
<p>于是 2 的坐标确定了，递归处理子树假设没有矛盾，接着来看下一个儿子 3</p>
<p>3 一定在 2 的子树下面，左边从 2 右边算起仍留出自己子树大小的距离</p>
<p>这样一来，如果设每个点在前序遍历中是第 $a_i$ 个，后序遍历中是第 $b_i$ 个，那么其坐标为 $(n-a_i+1,b_i)$</p>
<p>于是对于任何询问，$y$ 到 LCA 能用一个长方形覆盖，$x$ 到 LCA 下面的儿子也能用一个不重叠的长方形覆盖</p>
<p>当 $x$、$y$ 本身就是祖先关系时，就只需要一个长方形了——愉快地解决啦 ~</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>在构造的过程中，需要非常小心地确保，任何一条祖孙链都能用（唯一的）一个长方形来覆盖</p>
<p>也就是说，任何一个点的儿子都不能在自己右上方 $\implies$ 都在左下方进行类似的构造</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"grader.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; ch=getchar(); <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n,tot,head[maxn],nxt[maxn*<span class="number">2</span>],to[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addRoad</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x++; y++;</span><br><span class="line">    tot++; nxt[tot]=head[x];</span><br><span class="line">    head[x]=tot; to[tot]=y;</span><br><span class="line">    swap(x,y);</span><br><span class="line">    tot++; nxt[tot]=head[x];</span><br><span class="line">    head[x]=tot; to[tot]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn],c1,c2;</span><br><span class="line"><span class="keyword">int</span> fa[maxn][<span class="number">21</span>],dep[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    a[u]=++c1; dep[u]=dep[p]+<span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>]=p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=head[u],v;i;i=nxt[i]) &#123;</span><br><span class="line">        v=to[i]; <span class="keyword">if</span> (v==p) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">    &#125; b[u]=++c2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildFarms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n=getN();</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        fa[j][i]=fa[fa[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        a[i]=n-a[i]+<span class="number">1</span>;</span><br><span class="line">        setFarmLocation(i<span class="number">-1</span>,a[i],b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyFJ</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x++; y++;</span><br><span class="line">    <span class="keyword">if</span> (dep[x]&gt;dep[y]) swap(x,y);</span><br><span class="line">    <span class="keyword">int</span> X=x,Y=y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (dep[fa[y][i]]&gt;=dep[x]) y=fa[y][i];</span><br><span class="line">    <span class="keyword">if</span> (x==y) &#123;</span><br><span class="line">        addBox(a[Y],b[Y],a[X],b[X]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (fa[x][i]!=fa[y][i])</span><br><span class="line">            x=fa[x][i],y=fa[y][i];</span><br><span class="line">    addBox(a[X],b[X],a[x],b[x]);</span><br><span class="line">    x=fa[x][<span class="number">0</span>];</span><br><span class="line">    addBox(a[Y],b[Y],a[x],b[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>交互</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>USACO 2019 Open Platinum T2 Compound Escape</title>
    <url>/2019/04/18/USACO%202019%20Open%20Platinum%20T2%20Compound%20Escape/</url>
    <content><![CDATA[<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=949" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=949</a></p>
<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>对于一张带边权的 $n\times m$ 网格图，求对偶图的最小生成树个数（将方格看成点）</p>
<p>$1\leq n \leq 30000，1\leq m \leq 6$</p>
<a id="more"></a>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>看到生成树想到连通性，看到行数不多想到插头 DP，唯一的问题是一点也不好写啊！</p>
<p>状态：轮廓线连通（染色）情况 + 目前处理到第 $i$ 列</p>
<ol>
<li><p>首先，我们需要预处理出每个状态可以转移至的邻居，显然每行都是一样的</p>
<p>一开始只考虑横向边，$2^m$ 即可枚举出所有不连横向边的位置，继而推出连通块位置（预处理第一行 dp 值类似）</p>
<p>用 queue 来维护枚举状态的过程，状态转移的下一步可选共 4 种，分别用 0~3 来表示：$i$ 与 $i-1$、上一行 $i$ 的连边情况</p>
<p>单独处理一下 $i=1$ 即可，下面再来解释一些相关函数的作用，注意最后必须 recolor（用 vector 方便很多）</p>
<p>insert：发现一个新状态，加入 map 和 queue</p>
<p>count：计算所在连通块大小，即如果上一行 $i$ 自成一块，$i$ 必须与它连边</p>
<p>Empty：$i$ 自成一块，直接设 $i$ 颜色为 $m$，通过 recolor 按顺序重新标颜色</p>
<p>connectL 和 connect2：与两格连边，合并连通块即可</p>
</li>
<li><p>用 dfs 进行滚动数组 dp，逐个扫描到底时记录答案（dfs 不是必须的）</p>
<p>利用预处理出的邻居进行转移，额外统计边权之和（不取模）</p>
<p>dp 记录最小边权和 + 方案数，需要单独处理更新</p>
</li>
</ol>
<p>P.S. 原来轮廓线 DP 并没有那么困难……</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>据说轮廓线状态数就是卡特兰数，总之对于 $m=6$ 是肯定可以接受的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dbug(x) cout&lt;&lt;#x&lt;&lt;<span class="meta-string">"="</span>&lt;&lt;x&lt;&lt;endl</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=(<span class="number">1e9</span>)+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,tot,tmp;</span><br><span class="line">ll dp[<span class="number">2</span>][<span class="number">1010</span>],ans,DP[<span class="number">2</span>][<span class="number">1010</span>],delta;</span><br><span class="line">ll heng[<span class="number">30010</span>][<span class="number">7</span>],shu[<span class="number">30010</span>][<span class="number">7</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; M;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; N[<span class="number">1010</span>][<span class="number">7</span>];</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">recolor</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa[<span class="number">7</span>],cnt=<span class="number">0</span>; <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span>(fa));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!a[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!fa[a[i]]) fa[a[i]]=++cnt;</span><br><span class="line">        a[i]=fa[a[i]];</span><br><span class="line">    &#125; <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (M[a]) <span class="keyword">return</span>;</span><br><span class="line">    M[a]=++tot; q.push(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,<span class="keyword">int</span> tmp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.<span class="built_in">size</span>();i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i]==tmp) cnt++;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Empty</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    a[pos]=m; <span class="keyword">return</span> recolor(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">connectL</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    a[pos]=a[pos<span class="number">-1</span>]; <span class="keyword">return</span> recolor(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">connect2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[pos]==a[pos<span class="number">-1</span>]) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">int</span> tmp=a[pos];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.<span class="built_in">size</span>();i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i]==tmp) a[i]=a[pos<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> recolor(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;m);i++)</span><br><span class="line">        <span class="keyword">if</span> (i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            a.<span class="built_in">clear</span>(); a.push_back(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">                <span class="keyword">if</span> (i&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>)))</span><br><span class="line">                    a.push_back(a.back()+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> a.push_back(a.back());</span><br><span class="line">            insert(a);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        a=q.front(); q.pop(); tmp=M[a];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</span><br><span class="line">            N[tmp][i].push_back(make_pair(tmp,<span class="number">2</span>));</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count(a,a[i])&gt;<span class="number">1</span>) &#123;</span><br><span class="line">                    b=Empty(a,i);</span><br><span class="line">                    insert(b); N[tmp][i].push_back(make_pair(M[b],<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                b=connect2(a,i);</span><br><span class="line">                insert(b); N[tmp][i].push_back(make_pair(M[b],<span class="number">3</span>));</span><br><span class="line">                <span class="keyword">if</span> (count(a,a[i])&gt;<span class="number">1</span>) &#123;</span><br><span class="line">                    b=Empty(a,i);</span><br><span class="line">                    insert(b); N[tmp][i].push_back(make_pair(M[b],<span class="number">0</span>));</span><br><span class="line">                    b=connectL(a,i);</span><br><span class="line">                    insert(b); N[tmp][i].push_back(make_pair(M[b],<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> s,ll cost,ll cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[t][s]==<span class="number">-1</span>) &#123;</span><br><span class="line">        dp[t][s]=cost; DP[t][s]=cnt;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[t][s]&gt;cost)</span><br><span class="line">            dp[t][s]=cost,DP[t][s]=cnt;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dp[t][s]==cost)</span><br><span class="line">            DP[t][s]=(DP[t][s]+cnt)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ToN</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> s,ll cost,ll cnt)</span> </span>&#123;</span><br><span class="line">    pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N[s][y].<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        tmp=N[s][y][i];</span><br><span class="line">        delta=cost;</span><br><span class="line">        <span class="keyword">if</span> (tmp.second&gt;=<span class="number">2</span>) delta+=shu[x][y];</span><br><span class="line">        <span class="keyword">if</span> (tmp.second&amp;<span class="number">1</span>) delta+=heng[x][y];</span><br><span class="line">        update(t,tmp.first,delta,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t1,<span class="keyword">int</span> t2,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x==n+<span class="number">1</span>) &#123; ans=DP[t1][<span class="number">1</span>]; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (y==m+<span class="number">1</span>) &#123; dfs(t1,t2,x+<span class="number">1</span>,<span class="number">1</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp[t2],<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp[t2]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">        <span class="keyword">if</span> (dp[t1][i]!=<span class="number">-1</span>) ToN(t2,x,y,i,dp[t1][i],DP[t1][i]);</span><br><span class="line">    dfs(t2,t1,x,y+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"escape.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"escape.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=m;j++) <span class="built_in">read</span>(heng[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=n;j++) <span class="built_in">read</span>(shu[j][i]);</span><br><span class="line">    init(); <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;m);i++)</span><br><span class="line">        <span class="keyword">if</span> (i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            a.<span class="built_in">clear</span>(); a.push_back(<span class="number">0</span>); delta=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">                <span class="keyword">if</span> (i&amp;(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))) a.push_back(a.back()+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> a.push_back(a.back()),delta+=heng[<span class="number">1</span>][j];</span><br><span class="line">            update(<span class="number">0</span>,M[a],delta,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    dfs(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>插头DP</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>USACO 2019 Open Platinum T3 Valleys</title>
    <url>/2019/04/18/USACO%202019%20Open%20Platinum%20T3%20Valleys/</url>
    <content><![CDATA[<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=950" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=950</a></p>
<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>有一张 $n\times n$ 的网格，每个位置有个高度，你需要统计所有满足下面条件的连通块（valley）大小之和：周围有相邻边的所有格子必须都比内部所有格子高，并且如果删去连通块不会破坏网格的连通性，允许斜线连通（$1\leq n\leq 750$）。</p>
<a id="more"></a>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>将所有位置从低到高依次加入，容易发现 valley 必然是某时刻的一整个连通块，否则 valley 附近的会比 valley 中最高的低</p>
<p>于是在加入任何位置时，判断一下所在连通块是否合法即可</p>
<p>接下来就要处理是否构成环（holey）的问题了，我们想知道的是将平面分成多少块……</p>
<p>欧拉定理：V-E+F=2，其中 V 和 E 表示点数和边数，都可以通过并查集一并轻松解决</p>
<p>F 唯一的问题在于相邻的 2×2 实际不构成环（再大一圈就是环了）</p>
<p>于是统计一下自己与周围构成 2×2 的个数，即可一并放入并查集维护，最后再与四周邻居合并连通块</p>
<p>通过欧拉定理计算出 F 再减去 2×2，若剩下超过 1 个则表明 holey 啦</p>
<p>复杂度 $O(n^2\log n)$，做法相当巧妙</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>题面不好懂，代码很好写</p>
<p>数组不清空，爆零两行泪</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; ch=getchar(); <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">800</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn][maxn],vis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> N,fa[maxn*maxn],num[maxn][maxn],VS[maxn*maxn];</span><br><span class="line"><span class="keyword">int</span> e[maxn*maxn],v[maxn*maxn],u[<span class="number">4</span>],f[maxn*maxn];</span><br><span class="line"><span class="keyword">int</span> fx[<span class="number">5</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125; d[maxn*maxn];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.z&lt;b.z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"valleys.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"valleys.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="keyword">int</span> x,y,tmp,s1,s2,F;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i][j]); num[i][j]=++N;</span><br><span class="line">        d[N]=(node)&#123;i,j,a[i][j]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(d+<span class="number">1</span>,d+(N+<span class="number">1</span>),cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) fa[i]=i,e[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) &#123;</span><br><span class="line">        x=d[i].x; y=d[i].y; vis[x][y]=<span class="number">1</span>; s1=s2=F=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (vis[x<span class="number">-1</span>][y<span class="number">-1</span>]&amp;&amp;vis[x][y<span class="number">-1</span>]&amp;&amp;vis[x<span class="number">-1</span>][y]&amp;&amp;vis[x][y]) F++;</span><br><span class="line">        <span class="keyword">if</span> (vis[x<span class="number">-1</span>][y]&amp;&amp;vis[x<span class="number">-1</span>][y+<span class="number">1</span>]&amp;&amp;vis[x][y]&amp;&amp;vis[x][y+<span class="number">1</span>]) F++;</span><br><span class="line">        <span class="keyword">if</span> (vis[x][y<span class="number">-1</span>]&amp;&amp;vis[x][y]&amp;&amp;vis[x+<span class="number">1</span>][y<span class="number">-1</span>]&amp;&amp;vis[x+<span class="number">1</span>][y]) F++;</span><br><span class="line">        <span class="keyword">if</span> (vis[x][y]&amp;&amp;vis[x][y+<span class="number">1</span>]&amp;&amp;vis[x+<span class="number">1</span>][y]&amp;&amp;vis[x+<span class="number">1</span>][y+<span class="number">1</span>]) F++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">5</span>;k++) &#123;</span><br><span class="line">            u[k]=<span class="built_in">find</span>(num[x+fx[k][<span class="number">0</span>]][y+fx[k][<span class="number">1</span>]]);</span><br><span class="line">            <span class="keyword">if</span> (!VS[u[k]]&amp;&amp;vis[x+fx[k][<span class="number">0</span>]][y+fx[k][<span class="number">1</span>]]) &#123;</span><br><span class="line">                tmp=u[k],s1+=e[u[k]],s2+=v[u[k]],F+=f[u[k]];</span><br><span class="line">            &#125; <span class="keyword">else</span> u[k]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (vis[x+fx[k][<span class="number">0</span>]][y+fx[k][<span class="number">1</span>]]&amp;&amp;k) s2++;</span><br><span class="line">            VS[u[k]]=<span class="number">1</span>;</span><br><span class="line">        &#125; e[tmp]=s1; v[tmp]=s2; f[tmp]=F;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">5</span>;k++)</span><br><span class="line">            <span class="keyword">if</span> (u[k]) fa[u[k]]=tmp,VS[u[k]]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span>-s1+s2-F==<span class="number">1</span>) ans+=s1;</span><br><span class="line">    &#125; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>并查集</tag>
        <tag>平面图欧拉定理</tag>
      </tags>
  </entry>
  <entry>
    <title>BZOJ 3790 神奇项链</title>
    <url>/2019/02/28/BZOJ%203790%20%E7%A5%9E%E5%A5%87%E9%A1%B9%E9%93%BE%EF%BC%88manacher%EF%BC%89/</url>
    <content><![CDATA[<p>题目来源：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3790" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=3790</a></p>
<a id="more"></a>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>相当于求最少用多少可重叠回文串覆盖原串，当然回文串越长越优，因此跑 manacher 求出 $n$ 个可选回文区间</p>
<p>问题又变成了求最少用多少可重叠区间覆盖全部，直接扫一遍贪心解决！</p>
<blockquote>
<p>将所有区间按左端点排序，假设当前可覆盖范围为 $[1,r]$</p>
<p>那么后面必然要接一个左端点在 $[1,r]$ 内、右端点取最大值的区间</p>
<p>因此单调往后贪心即可</p>
</blockquote>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>根据题目要求，答案需要再减一哦</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,len[maxn],ans,r;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; d[maxn];</span><br><span class="line"><span class="keyword">char</span> t[maxn],s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>,t+<span class="number">1</span>)!=EOF) &#123;</span><br><span class="line">        m=<span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(len,<span class="number">0</span>,<span class="keyword">sizeof</span>(len));</span><br><span class="line">        s[<span class="number">0</span>]=<span class="string">'*'</span>; n=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) s[++n]=<span class="string">'#'</span>,s[++n]=t[i];</span><br><span class="line">        s[++n]=<span class="string">'#'</span>;</span><br><span class="line">        <span class="keyword">int</span> mx=<span class="number">0</span>,pos=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mx&gt;i) len[i]=<span class="built_in">min</span>(mx-i,len[<span class="number">2</span>*pos-i]);</span><br><span class="line">            <span class="keyword">else</span> len[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (s[i-len[i]]==s[i+len[i]])</span><br><span class="line">                len[i]++;</span><br><span class="line">            <span class="keyword">if</span> (len[i]+i&gt;mx)</span><br><span class="line">                mx=len[i]+i,pos=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            d[i]=make_pair(i-len[i]+<span class="number">1</span>,i+len[i]<span class="number">-1</span>);</span><br><span class="line">        sort(d+<span class="number">1</span>,d+n+<span class="number">1</span>);</span><br><span class="line">        ans=<span class="number">0</span>; r=d[<span class="number">1</span>].second; pos=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (r&lt;n) &#123;</span><br><span class="line">            mx=r;</span><br><span class="line">            <span class="keyword">while</span> (pos&lt;=n&amp;&amp;d[pos].first&lt;=r) &#123;</span><br><span class="line">                mx=<span class="built_in">max</span>(mx,d[pos].second); pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans++; r=mx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>manacher</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>BZOJ 4462 编程作业</title>
    <url>/2019/02/20/BZOJ%204462%20%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%9A%EF%BC%88KMP%EF%BC%89/</url>
    <content><![CDATA[<p>题目来源：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4462" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4462</a></p>
<a id="more"></a>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>大写字母做直接匹配，小写字母转化为到前一个相同字母的距离，如果不存在则默认前一个相同字母位置为 0</p>
<p>为了避免 “ 模板串中不存在前一个相同字母，母串中存在却仍在模板串范围内而判通过 ” 的情况（例如 abab 和 abcb）</p>
<p>需要在小写字母匹配时判断一下长度问题！</p>
<p>剩下的直接跑 KMP 就可以了，不需要再特判啦</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m,nxt[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">30</span>],ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eq</span><span class="params">(<span class="keyword">int</span> j,<span class="keyword">int</span> k,<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> j==k||(j&gt;len&amp;&amp;k&gt;len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    nxt[<span class="number">0</span>]=<span class="number">0</span>,nxt[<span class="number">1</span>]=<span class="number">0</span>; <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++) &#123; </span><br><span class="line">        <span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;!eq(b[i],b[j+<span class="number">1</span>],j)) j=nxt[j];</span><br><span class="line">        <span class="keyword">if</span> (eq(b[i],b[j+<span class="number">1</span>],j)) j++;</span><br><span class="line">        nxt[i]=j;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;!eq(a[i],b[j+<span class="number">1</span>],j)) j=nxt[j];</span><br><span class="line">        <span class="keyword">if</span> (eq(a[i],b[j+<span class="number">1</span>],j)) j++;</span><br><span class="line">        <span class="keyword">if</span> (j==m) ans++,j=nxt[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        n=<span class="built_in">strlen</span>(s+<span class="number">1</span>); <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">memset</span>(pos,<span class="number">0</span>,<span class="keyword">sizeof</span>(pos));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'a'</span>&lt;=s[i]&amp;&amp;s[i]&lt;=<span class="string">'z'</span>) &#123;</span><br><span class="line">                a[i]=i-pos[s[i]-<span class="string">'a'</span>+<span class="number">1</span>];</span><br><span class="line">                pos[s[i]-<span class="string">'a'</span>+<span class="number">1</span>]=i;</span><br><span class="line">            &#125; <span class="keyword">else</span> a[i]=-(s[i]-<span class="string">'A'</span>+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        m=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(pos,<span class="number">0</span>,<span class="keyword">sizeof</span>(pos));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'a'</span>&lt;=s[i]&amp;&amp;s[i]&lt;=<span class="string">'z'</span>) &#123;</span><br><span class="line">                b[i]=i-pos[s[i]-<span class="string">'a'</span>+<span class="number">1</span>];</span><br><span class="line">                pos[s[i]-<span class="string">'a'</span>+<span class="number">1</span>]=i;</span><br><span class="line">            &#125; <span class="keyword">else</span> b[i]=-(s[i]-<span class="string">'A'</span>+<span class="number">1</span>);</span><br><span class="line">        kmp();</span><br><span class="line">        ans=<span class="number">0</span>; solve(); <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>BZOJ 2957 楼房重建</title>
    <url>/2019/02/16/BZOJ%202957%20%E6%A5%BC%E6%88%BF%E9%87%8D%E5%BB%BA/</url>
    <content><![CDATA[<p>题目来源：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2957" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=2957</a></p>
<h5 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h5><p>我们可以稍微转化一下问题，过 $(0,0)$ 和 $(i,Hi)$ 的直线斜率必须大于所有前面的斜率时，才可以看见第 $i$ 条线段。<br><a id="more"></a><br>于是相当于求有多少个数大于前面所有的数，这里用线段树维护区间的答案和斜率 max 值。</p>
<p>pushup 时 mx 不难，ans 更新为 ls 的 ans 加上 rs 拼接在 ls 后的答案，因为 <strong>ls 的 max 会对 rs 产生影响</strong>。</p>
<p>考虑递归（find）查询前面已有最大值 delta 时区间内的答案，l=r 时显然。如果 delta 比 ls 的 max 大，那么 ls 将没有可看见的，直接 find rs；如果 delta 比 ls 的 max 大，那么 find ls 找其中可看见的，而对于 rs 来说 ls 已经挡住了 delta，因此直接加上 rs 的贡献。</p>
<p>Q：为什么这里不用 $ans[rs]$ 而用 $ans[root]-ans[ls]$？</p>
<p>A：因为 $ans[rs]$ 是独立的一段区间，没有考虑前面 $ls$ 最大值的影响。$ans[root]$ 是完整的一段区间，减去前面 ls 的贡献即为 rs 受到影响后的答案。</p>
<p>虽然说每个节点每次都要调用 find，但是实际上 find 每次只会往 ls 和 rs 之一走，因此复杂度不会超过两个 log。</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">4e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans[maxn];</span><br><span class="line"><span class="keyword">double</span> mx[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">double</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> delta&lt;mx[root];</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (mx[root*<span class="number">2</span>]&lt;delta) <span class="keyword">return</span> <span class="built_in">find</span>(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(l,mid,root*<span class="number">2</span>,delta)+ans[root]-ans[root*<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">double</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123; mx[root]=delta; ans[root]=<span class="number">1</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid) modify(x,l,mid,root*<span class="number">2</span>,delta);</span><br><span class="line">    <span class="keyword">else</span> modify(x,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">    mx[root]=<span class="built_in">max</span>(mx[root*<span class="number">2</span>],mx[root*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">    ans[root]=ans[root*<span class="number">2</span>]+<span class="built_in">find</span>(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,mx[root*<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(x); <span class="built_in">read</span>(y);</span><br><span class="line">        modify(x,<span class="number">1</span>,n,<span class="number">1</span>,y*<span class="number">1.0</span>/x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>拓展版本：<a href="http://uoj.ac/contest/51/problem/515" target="_blank" rel="noopener">http://uoj.ac/contest/51/problem/515</a></p>
<p>求前缀/区间内在单调栈中的元素个数，带修改。其实也差不多，贴个代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>; ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=(<span class="number">1e9</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e6</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,a[maxn];</span><br><span class="line"><span class="keyword">int</span> mx[maxn*<span class="number">4</span>],tr[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mx[root]&gt;delta) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (delta&lt;mx[root*<span class="number">2</span>]) <span class="keyword">return</span> tr[root]+<span class="built_in">find</span>(l,mid,root*<span class="number">2</span>,delta);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">        mx[root]=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    build(l,mid,root*<span class="number">2</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    mx[root]=<span class="built_in">max</span>(mx[root*<span class="number">2</span>],mx[root*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">    tr[root]=<span class="built_in">find</span>(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,mx[root*<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123;</span><br><span class="line">        mx[root]=a[l]; <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid) add(x,l,mid,root*<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> add(x,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    mx[root]=<span class="built_in">max</span>(mx[root*<span class="number">2</span>],mx[root*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">    tr[root]=<span class="built_in">find</span>(mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,mx[root*<span class="number">2</span>]);	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">int</span> &amp;delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L&gt;R) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="built_in">find</span>(l,r,root,delta);</span><br><span class="line">        delta=<span class="built_in">max</span>(delta,mx[root]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>,res;</span><br><span class="line">    <span class="keyword">if</span> (R&lt;=mid) <span class="keyword">return</span> query(L,R,l,mid,root*<span class="number">2</span>,delta);</span><br><span class="line">    <span class="keyword">if</span> (mid&lt;L) <span class="keyword">return</span> query(L,R,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">    res=query(L,R,l,mid,root*<span class="number">2</span>,delta);</span><br><span class="line">    res+=query(L,R,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]),a[i]=INF-a[i]+<span class="number">1</span>;</span><br><span class="line">    reverse(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> op,x,y;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="built_in">read</span>(op); <span class="built_in">read</span>(x); x=n-x+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (op==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">read</span>(a[x]);</span><br><span class="line">            a[x]=INF-a[x]+<span class="number">1</span>;</span><br><span class="line">            add(x,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(<span class="number">1</span>,x,<span class="number">1</span>,n,<span class="number">1</span>,y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>USACO 2019 Jan Platinum T1 Redistricting</title>
    <url>/2019/02/12/USACO%202019%20Jan%20Platinum%20T1%20Redistricting/</url>
    <content><![CDATA[<p>日期：2019-02-12</p>
<p>题目来源：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=900&amp;lang=en" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=900&amp;lang=en</a></p>
<p>链接：<a href="http://usaco.org/index.php?page=viewproblem2&amp;cpid=900&amp;lang=en" target="_blank" rel="noopener">http://usaco.org/index.php?page=viewproblem2&amp;cpid=900&amp;lang=en</a></p>
<h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>将 HG 序列（$1\leq n\leq 3\cdot 10^5$）划分成长度不超过 $k$ 的区间，如果至少一半是 ‘G’ 则贡献为 1，求最小贡献和。</p>
<a id="more"></a>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先我们转化一下问题：将 G 看成 1、H 看成 -1（类似括号序列）并求前缀和 $a$，那么当 $a_j\leq a_i$ 时 $[j+1,i]$ 贡献为 1。</p>
<p>不难想到 DP，设 $dp[i]$ 表示序列中前 $i$ 项划分区间的最小贡献，答案即为 $dp[n]$，初值 $dp[0]=0$。</p>
<p>转移比较简单，$dp[i]=min\{dp[j]+[a_j\leq a_i]\}（i-k\leq j&lt;i）$，这样暴力可以获得 50% 的分数，下面考虑优化。</p>
<p>分开处理 $a_j\leq a_i$ 和 $a_j&gt;a_i$，将 $a$ 放在线段树的下标中（负数进行平移处理，$max-min$ 不会超过 $n$），对于每个 $a_i$ 维护 $dp[i]$ 的最小值。</p>
<p>$dp[i]$ 分别从 $[1,a_i]$ 和 $[a_i+1,n]$ 中查询答案，前者贡献 $+1$，这样就完成了转移。</p>
<p>但此时还需要处理一下 $j$ 的范围问题，注意到转移区间的长度确定为 $k$，那么每次转移后删除 $i-k$、加入 $i$ 即可。</p>
<p>线段树上取 $min$ 操作，如果直接删除显然不可行。对于每个 $a_i$ 再维护一个放 $dp[i]$ 的 multiset​，加入和删除后更新线段树值时直接赋值。</p>
<p>至此，所有限制条件都已实现！算法时间复杂度 $O(n \log n)$ 略带常数。</p>
<p>P.S. $dp[i]$ 有重复要用 multiset；删除时直接 erase 即会删去所有值，使用 erase(find) 就只会删去一个了（里面是 iterator）</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123; (t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar(); &#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">3e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=(<span class="number">1e9</span>);</span><br><span class="line"><span class="keyword">int</span> n,k,a[maxn],dp[maxn],mn,mx,N;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; t[maxn];</span><br><span class="line"><span class="keyword">int</span> tr[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) &#123; tr[root]=delta; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid) modify(x,l,mid,root*<span class="number">2</span>,delta);</span><br><span class="line">    <span class="keyword">else</span> modify(x,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>,delta);</span><br><span class="line">    tr[root]=<span class="built_in">min</span>(tr[root*<span class="number">2</span>],tr[root*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    t[i].insert(delta);</span><br><span class="line">    modify(i,<span class="number">1</span>,N,<span class="number">1</span>,*(t[i].<span class="built_in">begin</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    t[i].erase(t[i].<span class="built_in">find</span>(delta));</span><br><span class="line">    <span class="keyword">if</span> (t[i].<span class="built_in">size</span>()) modify(i,<span class="number">1</span>,N,<span class="number">1</span>,*(t[i].<span class="built_in">begin</span>()));</span><br><span class="line">    <span class="keyword">else</span> modify(i,<span class="number">1</span>,N,<span class="number">1</span>,INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> tr[root];</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>,res=INF;</span><br><span class="line">    <span class="keyword">if</span> (L&lt;=mid) res=<span class="built_in">min</span>(res,query(L,R,l,mid,root*<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">if</span> (mid&lt;R) res=<span class="built_in">min</span>(res,query(L,R,mid+<span class="number">1</span>,r,root*<span class="number">2</span>+<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"redistricting.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"redistricting.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(tr,<span class="number">0x7f7f7f7f</span>,<span class="keyword">sizeof</span>(tr));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i]==<span class="string">'H'</span>) a[i]=a[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> a[i]=a[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        mn=<span class="built_in">min</span>(mn,a[i]);</span><br><span class="line">        mx=<span class="built_in">max</span>(mx,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    mn=<span class="built_in">abs</span>(mn)+<span class="number">1</span>; N=mx+mn;</span><br><span class="line">    add(mn,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        dp[i]=query(<span class="number">1</span>,a[i]+mn,<span class="number">1</span>,N,<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">        dp[i]=<span class="built_in">min</span>(dp[i],query(a[i]+mn+<span class="number">1</span>,N,<span class="number">1</span>,N,<span class="number">1</span>));</span><br><span class="line">        add(a[i]+mn,dp[i]);</span><br><span class="line">        <span class="keyword">if</span> (i-k&gt;=<span class="number">0</span>) del(a[i-k]+mn,dp[i-k]);</span><br><span class="line">    &#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>DP</tag>
        <tag>线段树</tag>
        <tag>multiset</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder Yahoo Programming Contest 2019 - D Ears</title>
    <url>/2019/02/10/AtCoder%20Yahoo%20Programming%20Contest%202019%20-%20D%20Ears/</url>
    <content><![CDATA[<p>题目来源：<a href="https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_d" target="_blank" rel="noopener">https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_d</a></p>
<a id="more"></a>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>归纳一下找规律的结论：不可以存在 全奇- 全偶 - 全奇 这样的形式，也就是说</p>
<p><strong>可行的 $a_1…a_n$ 必然可以分成 5 段（允许段不存在）：全 0 - 全偶 - 全奇 - 全偶 - 全 0</strong></p>
<p>之后的事情就好办多了，设 $dp[i][j]$ 表示使 $a_1…a_i$ 合法的最小操作数，且目前 $a_i$ 在第 $j$ 段里（将这 5 段标记为 0~4）</p>
<p>转移时 $dp[i-1][k] \rightarrow dp[i][j] ( k \leq j)$，再加上 $a_i$ 变成第 $j$ 段所需的操作数即可</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF=(<span class="number">9e18</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">2e5</span>)+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[maxn];</span><br><span class="line">ll dp[maxn][<span class="number">5</span>],ans=INF;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">op</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (j==<span class="number">1</span>||j==<span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i]==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> a[i]&amp;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j==<span class="number">2</span>) <span class="keyword">return</span> a[i]&amp;<span class="number">1</span>^<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">4</span>;j++) &#123;</span><br><span class="line">        dp[i][j]=INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=j;k++)</span><br><span class="line">            dp[i][j]=<span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][k]);</span><br><span class="line">        dp[i][j]+=op(i,j);</span><br><span class="line">        <span class="keyword">if</span> (i==n) ans=<span class="built_in">min</span>(ans,dp[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>Parity</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder Yahoo Programming Contest 2019 - E Odd Subrectangles</title>
    <url>/2019/02/10/AtCoder%20Yahoo%20Programming%20Contest%202019%20-%20E%20Odd%20Subrectangles/</url>
    <content><![CDATA[<p>题目来源：<a href="https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_e" target="_blank" rel="noopener">https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_e</a></p>
<a id="more"></a>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>将每行看作一个 m 位 01 二进制数，固定行集合 A 后选 B，那么 A 中元素的异或和上的每一位，即代表了这一列中与 A 交叉位置 1 的个数（的奇偶性）。也就是说，B 相当于选出 A 异或和中的若干位，如果这些位上异或和是 1（即有奇数个 1），则 A 和 B 构成的 “ 矩阵 ” 合法。A 异或和为 0（每一位都是 0）时显然不存在这样的 B，而 <strong>A 异或和不为 0 时恰有一半的 B 合法</strong>。</p>
<p>为什么呢？此时 A 的异或和中必然存在 1，不妨假设是第 0 位。那么对于第 1~m-1 位的任意一种选法 C，要使第 0 位与 C 的异或和为 1，第 0 位选 / 不选就已经由 C 确定了。B = 第 0 位选 / 不选 + C，这样一来，C 有 $2^{m-1}$ 种选法，B 自然也有 $2^{m-1}$ 种选法了（正好是一半哦）。于是，问题转化为求 A 异或和不为 0 的方案数 $S$，答案即为 $2^{m-1}\cdot S$，当然反过来求异或和为 0 更容易些。</p>
<p>下面考虑每一行上对应二进制数的线性基（套路？）。如果只选择线性基中的行集合 A，异或和不可能是 0，否则线性基去掉 A 后依然合法且更优（与线性基定义矛盾）。于是先选择线性基外的行集合 D，那么（根据定义）线性基中有且仅有一个集合 E 异或和相同（D ^ E = 0），换句话说每个 D 都唯一对应了一个 A。因此，$S=2^n-2^{n-cnt}$ 其中 $cnt$ 表示线性基大小，大功告成！</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">    t=<span class="number">0</span>; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">'0'</span>&gt;ch||ch&gt;<span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; ch=getchar(); &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;(t*=<span class="number">10</span>)+=ch-<span class="string">'0'</span>;ch=getchar();&#125; <span class="keyword">while</span> (<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>); t*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">310</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,cnt;</span><br><span class="line">ll mi[maxn],ans;</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; a,p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n); <span class="built_in">read</span>(m); mi[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">max</span>(n,m);i++) mi[i]=mi[i<span class="number">-1</span>]*<span class="number">2</span>%mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) <span class="built_in">read</span>(x),a.<span class="built_in">set</span>(j,x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=m<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (p[j].none()) &#123; p[j]=a; cnt++; <span class="keyword">break</span>; &#125;</span><br><span class="line">            a^=p[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=(mi[n]-mi[n-cnt]+mod)*mi[m<span class="number">-1</span>]%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>组合计数</tag>
        <tag>线性基</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder Yahoo Programming Contest 2019 - F Pass</title>
    <url>/2019/02/10/AtCoder%20Yahoo%20Programming%20Contest%202019%20-%20F%20Pass/</url>
    <content><![CDATA[<p>题目来源：<a href="https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_f" target="_blank" rel="noopener">https://atcoder.jp/contests/yahoo-procon2019-qual/tasks/yahoo_procon2019_qual_f</a></p>
<a id="more"></a>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>首先将题目中的 “ 故事 ” 转化成限制条件：所得序列中第 $i$ 个球必然来自于第 $j$ $(j\leq i)$ 个人（不可能是第 $i$ 个人之后的球）</p>
<p>也就是说，序列的后 $n$ 个球没有特殊限制，在给定蓝色球数 $j$ 后乘上 $n\choose j$ 即可。重点在前 $n$ 个球，由于我们只关心序列中的颜色而非具体的人，那么限制的不过是前 $i$ 个球的<strong>蓝色球数</strong>不能超过前 $i$ 个人的前缀和 $s[i]$。</p>
<p>设 $dp[i][j]$ 表示前 $i$ 个球中蓝色球数为 $j$ 的序列个数，注意这里的 $j$ 有一定限制：$0\leq j\leq s[i]$，$2\cdot i-s[i]\geq i-j$（别忘了红色球），不满足条件时 $dp[i][j]=0$ 可以轻松防止访问。转移非常简单： $dp[i][j]=dp[i-1][j-1]+dp[i-1][j]$，最后统计答案就好啦！</p>
<p>P.S. 输入字符串中的 012 就是蓝色球的个数，于是前缀和处理起来很方便</p>
<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2010</span>;</span><br><span class="line"><span class="keyword">int</span> n,s[maxn];</span><br><span class="line">ll dp[maxn][maxn*<span class="number">2</span>],ans,C[maxn][maxn*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> S[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,S+<span class="number">1</span>); n=<span class="built_in">strlen</span>(S+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=C[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">            C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]=s[i<span class="number">-1</span>]+S[i]-<span class="string">'0'</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=s[i];j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span>*i-s[i]&lt;i-j) <span class="keyword">continue</span>;</span><br><span class="line">        dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">        <span class="keyword">if</span> (j) dp[i][j]=(dp[i][j]+dp[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">        <span class="keyword">if</span> (i==n) ans=(ans+dp[i][j]*C[n][s[n]-j])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>AtCoder</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>组合计数</tag>
      </tags>
  </entry>
  <entry>
    <title>WC 2019 - I 君的商店 85pts</title>
    <url>/2019/02/10/WC%202019%20-%20I%20%E5%90%9B%E7%9A%84%E5%95%86%E5%BA%97/</url>
    <content><![CDATA[<p>题目来源：<a href="https://loj.ac/problem/2985" target="_blank" rel="noopener">https://loj.ac/problem/2985</a></p>
<a id="more"></a>
<h5 id="子任务-3"><a href="#子任务-3" class="headerlink" title="子任务 3"></a>子任务 3</h5><p>保证 $ans$ 有序，首先通过询问 $\{0\}$ 和 $\{n-1\}$ 判断序列是 0…01…1 还是 1…10…0，不妨假设为前者。</p>
<p>接着二分 01 断点位置，通过奇偶性 K 确定二分的集合，每次比较 $\{mid-1,mid\}$ 和 $\{n-1\}$。由于 K 一定合法，则 $mid-1$ 与 $mid$ 必然相同，比较结果即表明 $mid$ 是 0 还是 1。如果二分不到答案，说明 $ans$ 全为 1，同理解决 1…10…0 的情况。</p>
<h5 id="子任务-1-2-4-5"><a href="#子任务-1-2-4-5" class="headerlink" title="子任务 1,2,4,5"></a>子任务 1,2,4,5</h5><p>用扫一遍找 max 的方法 $O(2n)$ 询问出 1 的位置 $a$（一定存在），然后通过维护 $queue$ 的方式每次找两个还未确定 $ans$ 的位置 $x$ 和 $y$，并询问 $\{a\}$ 和 $\{x,y\}$。如果 $a\leq x+y$，则 $x$ 和 $y$ 不可能全 0 $\Rightarrow$ 有 1；如果 $a\geq x+y$，则 $x$ 和 $y$ 不可能全 1 $\Rightarrow$ 有 0。再询问 $\{x\}$ 和 $\{y\}$ 就能确定其中一个了，总共花费 $O(7n)$ 即可确定所有值啦。（最后剩下的那个用 <strong>K</strong> 算一下）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"shop.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e6</span>);</span><br><span class="line"><span class="keyword">int</span> S[<span class="number">10</span>],T[<span class="number">10</span>],cnt,tot;</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_price</span><span class="params">(<span class="keyword">int</span> task_id, <span class="keyword">int</span> n, <span class="keyword">int</span> K, <span class="keyword">int</span> ans[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) &#123; ans[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (task_id==<span class="number">3</span>) &#123;</span><br><span class="line">        S[<span class="number">0</span>]=<span class="number">0</span>; T[<span class="number">0</span>]=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> l,r,mid,res=<span class="number">-1</span>; tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>;i++)</span><br><span class="line">                <span class="keyword">if</span> (((n-i<span class="number">-1</span>)&amp;<span class="number">1</span>)==K) d[++tot]=i;</span><br><span class="line">            l=<span class="number">1</span>,r=tot;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">                mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">                S[<span class="number">0</span>]=d[mid]<span class="number">-1</span>; S[<span class="number">1</span>]=d[mid]; T[<span class="number">0</span>]=n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span> (query(S,<span class="number">2</span>,T,<span class="number">1</span>)) res=d[mid],l=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res==<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((n&amp;<span class="number">1</span>)!=K) res=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=res;i++) ans[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=res+<span class="number">1</span>;i&lt;n;i++) ans[i]=<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>;i++)</span><br><span class="line">                <span class="keyword">if</span> ((i&amp;<span class="number">1</span>)==K) d[++tot]=i;</span><br><span class="line">            l=<span class="number">1</span>,r=tot;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">                mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">                S[<span class="number">0</span>]=d[mid]; S[<span class="number">1</span>]=d[mid]+<span class="number">1</span>; T[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (query(S,<span class="number">2</span>,T,<span class="number">1</span>)) res=d[mid],r=mid<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res==<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((n&amp;<span class="number">1</span>)!=K) res=n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> res=n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res;i++) ans[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=res;i&lt;n;i++) ans[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S[<span class="number">0</span>]=<span class="number">0</span>; T[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> a=query(S,<span class="number">1</span>,T,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) &#123;</span><br><span class="line">        S[<span class="number">0</span>]=a; T[<span class="number">0</span>]=i;</span><br><span class="line">        <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) a=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) ans[i]=<span class="number">-1</span>;</span><br><span class="line">    ans[a]=<span class="number">1</span>; cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span> (i!=a) q.push(i);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()&gt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front(); q.pop();</span><br><span class="line">        <span class="keyword">int</span> y=q.front(); q.pop();</span><br><span class="line">        S[<span class="number">0</span>]=a; T[<span class="number">0</span>]=x; T[<span class="number">1</span>]=y;</span><br><span class="line">        <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">2</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">            S[<span class="number">0</span>]=x; T[<span class="number">0</span>]=y;</span><br><span class="line">            <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">                ans[y]=<span class="number">0</span>; q.push(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; ans[x]=<span class="number">0</span>; q.push(y); &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            S[<span class="number">0</span>]=x; T[<span class="number">0</span>]=y;</span><br><span class="line">            <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">                ans[x]=<span class="number">1</span>; cnt++; q.push(y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; ans[y]=<span class="number">1</span>; cnt++; q.push(x); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) a=q.front(),q.pop();</span><br><span class="line">    ans[a]=(K-cnt&amp;<span class="number">1</span>+<span class="number">4</span>)%<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>附 AC 代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"shop.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1e6</span>);</span><br><span class="line"><span class="keyword">int</span> S[<span class="number">10</span>],T[<span class="number">10</span>],cnt,tot;</span><br><span class="line"><span class="keyword">int</span> d[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_price</span><span class="params">(<span class="keyword">int</span> task_id, <span class="keyword">int</span> n, <span class="keyword">int</span> K, <span class="keyword">int</span> ans[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) &#123; ans[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (task_id==<span class="number">3</span>) &#123;</span><br><span class="line">        S[<span class="number">0</span>]=<span class="number">0</span>; T[<span class="number">0</span>]=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> l,r,mid,res=<span class="number">-1</span>; tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>;i++)</span><br><span class="line">                <span class="keyword">if</span> (((n-i<span class="number">-1</span>)&amp;<span class="number">1</span>)==K) d[++tot]=i;</span><br><span class="line">            l=<span class="number">1</span>,r=tot;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">                mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">                S[<span class="number">0</span>]=d[mid]<span class="number">-1</span>; S[<span class="number">1</span>]=d[mid]; T[<span class="number">0</span>]=n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span> (query(S,<span class="number">2</span>,T,<span class="number">1</span>)) res=d[mid],l=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res==<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((n&amp;<span class="number">1</span>)!=K) res=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=res;i++) ans[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=res+<span class="number">1</span>;i&lt;n;i++) ans[i]=<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-2</span>;i++)</span><br><span class="line">                <span class="keyword">if</span> ((i&amp;<span class="number">1</span>)==K) d[++tot]=i;</span><br><span class="line">            l=<span class="number">1</span>,r=tot;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;=r) &#123;</span><br><span class="line">                mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">                S[<span class="number">0</span>]=d[mid]; S[<span class="number">1</span>]=d[mid]+<span class="number">1</span>; T[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (query(S,<span class="number">2</span>,T,<span class="number">1</span>)) res=d[mid],r=mid<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (res==<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((n&amp;<span class="number">1</span>)!=K) res=n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> res=n;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res;i++) ans[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=res;i&lt;n;i++) ans[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (task_id&lt;<span class="number">6</span>) &#123;</span><br><span class="line">        S[<span class="number">0</span>]=<span class="number">0</span>; T[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> a=query(S,<span class="number">1</span>,T,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) &#123;</span><br><span class="line">            S[<span class="number">0</span>]=a; T[<span class="number">0</span>]=i;</span><br><span class="line">            <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) a=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) ans[i]=<span class="number">-1</span>;</span><br><span class="line">        ans[a]=<span class="number">1</span>; cnt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">if</span> (i!=a) q.push(i);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front(); q.pop();</span><br><span class="line">            <span class="keyword">int</span> y=q.front(); q.pop();</span><br><span class="line">            S[<span class="number">0</span>]=a; T[<span class="number">0</span>]=x; T[<span class="number">1</span>]=y;</span><br><span class="line">            <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">2</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">                S[<span class="number">0</span>]=x; T[<span class="number">0</span>]=y;</span><br><span class="line">                <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">                    ans[y]=<span class="number">0</span>; q.push(x);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; ans[x]=<span class="number">0</span>; q.push(y); &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                S[<span class="number">0</span>]=x; T[<span class="number">0</span>]=y;</span><br><span class="line">                <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">                    ans[x]=<span class="number">1</span>; cnt++; q.push(y);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; ans[y]=<span class="number">1</span>; cnt++; q.push(x); &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) a=q.front(),q.pop();</span><br><span class="line">        ans[a]=(K-cnt&amp;<span class="number">1</span>+<span class="number">4</span>)%<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) ans[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>,x=<span class="number">2</span>,y=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=n+<span class="number">1</span>;i++) &#123;</span><br><span class="line">        S[<span class="number">0</span>]=x<span class="number">-1</span>,T[<span class="number">0</span>]=y<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) swap(x,y);</span><br><span class="line">        S[<span class="number">0</span>]=a<span class="number">-1</span>,T[<span class="number">0</span>]=x<span class="number">-1</span>,T[<span class="number">1</span>]=y<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!query(S,<span class="number">1</span>,T,<span class="number">2</span>)) ans[y]=<span class="number">0</span>,y=i;</span><br><span class="line">        <span class="keyword">else</span> d[++tot]=a,a=x,x=i;</span><br><span class="line">    &#125;</span><br><span class="line">    d[++tot]=a;</span><br><span class="line">    x=<span class="built_in">min</span>(x,y);</span><br><span class="line">    S[<span class="number">0</span>]=a<span class="number">-1</span>,T[<span class="number">0</span>]=x<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) d[++tot]=x,x=<span class="number">0</span>;</span><br><span class="line">    reverse(d+<span class="number">1</span>,d+tot+<span class="number">1</span>);</span><br><span class="line">    ans[d[<span class="number">1</span>]<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">2</span>,r=tot,mid;</span><br><span class="line">    <span class="keyword">while</span> (l&lt;r) &#123;</span><br><span class="line">        mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        S[<span class="number">0</span>]=d[mid]<span class="number">-1</span>; S[<span class="number">1</span>]=d[mid+<span class="number">1</span>]<span class="number">-1</span>; T[<span class="number">0</span>]=d[<span class="number">1</span>]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!query(T,<span class="number">1</span>,S,<span class="number">2</span>)) r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((l&amp;<span class="number">1</span>)!=K) l--;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mn,mx,delta=<span class="number">0</span>;</span><br><span class="line">        S[<span class="number">0</span>]=x<span class="number">-1</span>,T[<span class="number">0</span>]=d[l]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (query(S,<span class="number">1</span>,T,<span class="number">1</span>)) mn=x,mx=d[l];</span><br><span class="line">        <span class="keyword">else</span> mn=d[l],mx=x;</span><br><span class="line">        S[<span class="number">0</span>]=d[<span class="number">1</span>]<span class="number">-1</span>,T[<span class="number">0</span>]=x<span class="number">-1</span>,T[<span class="number">1</span>]=d[l]<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!query(S,<span class="number">1</span>,T,<span class="number">2</span>)) ans[mn<span class="number">-1</span>]=<span class="number">0</span>,d[l]=mx;</span><br><span class="line">        <span class="keyword">else</span> ans[mx<span class="number">-1</span>]=<span class="number">1</span>,d[l]=mn,delta=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (((l+delta)&amp;<span class="number">1</span>)!=K) l--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++) ans[d[i]<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=l+<span class="number">1</span>;i&lt;=tot;i++) ans[d[i]<span class="number">-1</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WC</category>
      </categories>
      <tags>
        <tag>Parity</tag>
        <tag>交互</tag>
        <tag>构造</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>1029 每日一题（烧脑数论）</title>
    <url>/2019/01/14/1029%20%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E7%83%A7%E8%84%91%E6%95%B0%E8%AE%BA%EF%BC%89/</url>
    <content><![CDATA[<h6 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h6><p>证明：对于 $\forall n \in Z_+$，满足所有的 $n \choose m$ 中 mod 3 = 1 的个数大于 mod 3 = 2 的个数</p>
<a id="more"></a>
<p>链接：<a href="https://mp.weixin.qq.com/s/Cee6u7XlbuDekZrTIun5Nw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Cee6u7XlbuDekZrTIun5Nw</a></p>
<h6 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h6><p>由 Lucas 定理可知，将 $n$ 和 $m$ 分别写成三进制下的 $n_i$和 $m_i$，有 $\binom n m\equiv\prod \binom {n_i} {m_i}$ mod 3</p>
<p>观察 $\binom 0 0 \binom 0 1…\binom 2 2$，若要使 $\binom n m$ mod 3 ≠ 0，则 $m_i\leq n_i$</p>
<p>除了 $\binom 2 1\equiv -1$ 以外均为 1 ，因此 $\binom 2 1$ 个数的奇偶性决定了乘积是 $1$ 还是 $-1$</p>
<p>$n_i=0$ 时 $m_i=0$，而 $n_i=1$ 时 $m_i=0$ 或 $1$（根据乘法原理）均不影响结果</p>
<p>∴ 只需考虑 $n_i=2$ 的个数，不妨设为 $N$</p>
<p><strong>那么原问题等价于：</strong>有 $N$ 个球，每个球有 $\frac 13$ 的概率是白色的，有 $\frac 23$ 的概率是黑色的，即证一共有偶数个白球的概率大于奇数个白球的概率。也就是说，白球对应 $\binom 21$，黑球对应 $\binom 2 0$ 和 $\binom 2 2$</p>
<p>设 $dp[i][0]$ 表示前 $i$ 个球中有偶数个白球的概率，$dp[i][1]$ 表示前 $i$ 个球中有奇数个白球的概率，即证 $dp[i][0]&gt;dp[i][1]$</p>
<p>递推（转移）比较显然：设 $a=dp[i-1][0]$，$b=dp[i-1][1]$，那么 $dp[i][0]=\frac23a+\frac13b$，$dp[i][1]=\frac13a+\frac23b$</p>
<p>对 $i$ 数归：$i=1$ 时，$dp[i][0]=\frac23$，$dp[i][1]=\frac13$，$dp[i][0]&gt;dp[i][1]$ 成立</p>
<p>假设 $i-1$ 时已经满足 $a&gt;b$ 了，那么 $dp[i][0]=\frac13(2a+b)$，$dp[i][1]=\frac13(a+2b)$</p>
<p>$dp[i][0]-dp[i][1]=\frac13(a-b)&gt;0$，所以 $dp[i][0]&gt;dp[i][1]$</p>
<p><strong>至此，原问题即得证！</strong></p>
<p><strong>此外，我还有一些进一步的感想，如有错误希望能指出：</strong></p>
<p>注意到 $a+b=1$ 且 $i-1\rightarrow i$ 时 $a-b\rightarrow \frac13(a-b)$</p>
<p>这样一来，我们可以归纳出 $dp[i][0]$ 和 $dp[i][1]$ 的通项！</p>
<p>（此处省略若干字）设 $t=3^i$，那么 $dp[i][0]=\frac{(t-1)/2}{t}$，$dp[i][1]=\frac {(t+1)/2}{t}$</p>
<p>也就是说，当 $N$ 变大时，杨辉三角形第 $n$ 行里 mod 3 = 1 和 2 个数的比值，是在变大的</p>
<p>但是由于 $n_i$ 中 0 和 1 的存在，其个数在这一行里的比值是不确定的</p>
<p>实际上，当 $n_i$ 都是 2 即 $n=t-1$ 时，可以（找规律）发现这一行是 1 2 1 2 … 2 1 这个形式的，也验证了上述结论的正确性</p>
<p>感觉组合数 mod 3 还有可以继续深入的地方，但对更大的质数取模就会困难许多了</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>数论函数笔记</title>
    <url>/2019/01/05/%E6%95%B0%E8%AE%BA%E5%87%BD%E6%95%B0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="1d4ef741ab6a203fb7971ba07c9e0d567c96f65efc9e81d30f07f969c3476afb"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>Miller Rabin 与 Pollard Rho——大整数分解质因数</title>
    <url>/2018/08/30/Miller%20Rabin%20%E4%B8%8E%20Pollard%20Rho/</url>
    <content><![CDATA[<blockquote>
<p>分解质因数本身并不困难，直接枚举的 $O(\sqrt{n})$ 做法在大部分情况中也都适用，今天我想介绍一种更高效但 “ 玄学 ” 的做法——Pollard Rho，这时 Miller Rabin 也会派上用场呢。</p>
</blockquote>
<a id="more"></a>
<p>update：推荐写得比较清楚的 <a href="https://blog.csdn.net/qq_39972971/article/details/82346390" target="_blank" rel="noopener">https://blog.csdn.net/qq_39972971/article/details/82346390</a></p>
<h5 id="生日悖论"><a href="#生日悖论" class="headerlink" title="生日悖论"></a>生日悖论</h5><p>Miller Rabin 和 Pollard Rho 本质上都是随机算法，你有没有想过随机出任何一个质因数呢？你可能会说，当 $N=p1*p2$ 的时候，很难随机到呀！但是，随机选 23 个人，他们中有两人生日相同的概率是超过 50% 的——这里，生日悖论是个很好的例子。它的证明很好理解，假设第 1 个人已经选好了，那么第 2 个人生日与他不相同的概率为 $1-\frac 1 {365}$，第 3 个人与他们都不相同的概率为 $1-\frac 2 {365}$……以此类推。这样相乘起来，即可得出的结论是（这里就不给出严谨过程了，因为并不是重点…）：如果一年有 $N$ 天，那么只要 $n\geq\sqrt{N}$，随机选 $n$ 个人中有生日相同的概率超过 50%。</p>
<p>于是拓展到原来的问题，我们知道当 $n=\sqrt{N}$ 时，概率会达到 50%。直接随机 $\sqrt{N}$ 个数的代价是不可取的，但如果两两作差就有意思了，因为理论上来说只需要随机 $N^{1/4}$ 个数。此时的问题在于概率还不够大，并仍然需要枚举他们的差、再做除法，以找到一个质因数。进一步思考，取 $gcd(|a-b|,N)$ 时是非常优秀的，原因在于虽然 $p1$ 和 $p2$ 很难找，但 $p1$ 和 $p2$ 的倍数比比皆是，所以满足$1&lt;gcd&lt;N$ 时便找到一个因数啦。</p>
<h5 id="实现方法及细节"><a href="#实现方法及细节" class="headerlink" title="实现方法及细节"></a>实现方法及细节</h5><p>等一下，我们还是要存储 $N^{1/4}$ 个数吗？Pollard 告诉我们，只需要判断两个数哦。具体来说，我们先随机出 $x_1$，然后构造出一个很好的伪随机函数 $f(x)=(x^2+c)$ mod $N$ 来生成出下一项，也就是 $x_{n+1}=f(x_n)$。你会发现这样能通过大部分的数据，但也有可能陷入死循环，而永远找不到 $1&lt;gcd&lt;N$ 的情况（这时便找不到因数，需要换个 $c$ 再做一遍）。</p>
<p>$*$ 并不是所有伪随机函数都适用</p>
<p>用 $vis$ 记录是显然存不下的，于是 Floyd 发明了一个判环的方法。假设 $a$ 和 $b$ 同时从起点出发开始跑 $f(x)$，$b$ 比 $a$ 要快一倍，如果有环则很快会追上。按照这样的思路，从代码实现角度来说，$b$ 可以记录上一个 $2^k$ 的 $x$ 值，与 $a$ 进行比较、作差取 $gcd$，出现环时也能迅速判断到。</p>
<p>剩下需要做的就是维护好递归，每次先顺利找到一个因数 $p$，再分别对 $p$ 和 $N/p$ 进行类似的分解操作。当 $p$ 是质数时，就不需要继续了——这至关重要，否则很难判断。于是  Miller Rabin 就登场啦，我想细致地讲一遍实现方法。首先假设 $p-1=2^k \times t$ 且 $t$ 是奇数（把 2 都除掉），那么快速幂求得 $a^t$mod $p$ 后就可以自乘依次获得 $a^{2t}$、$a^{4t}$……$a^{2^k \times t}$ 也就是 $a^{p-1}$。在这个过程当中，如果出现前 1 项不是 ±1 而后一项是 1，或者 $a^{p-1}$ mod $p$ 不是 1，则 $p$ 不是质数。这里的 $a$ 我取的是 2~23 的质数，当然 $p$ 要先判下是不是 $a$ 的倍数。</p>
<p>$*$ 如果 $p$ 是质数，那么 $a^2\equiv 1$ 等价于 $a\equiv ±1$。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>总的来说，这个做法在 $N$ 的因数很多且都不大时尤其高效，但因为是随机的所以看起来比较 “ 玄学 ”，下面我想严谨证明一下期望复杂度。假设 $p1\leq p2$ 且 $y_i=x_i$ mod $p1$，根据生日悖论，$x_i$ 进入循环的期望步数是 $\sqrt{N}$ 而 $y_i$ 是 $\sqrt{p1}$。所以在 $y_i$ 进入循环后，$x_i$ 很可能还没有，此时 $x_i-x_j=(k1\cdot p1+y_i)-(k2\cdot p1+y_j)=(k_i-k_j)\cdot p1$ 因为 $y_i=y_j$。此时已经通过 $x_i-x_j$ 的 $gcd$ 已经找出了 $p1$ 这个因数，又因为 $p1\leq\sqrt{N}$，所以 $y_i$ 进入循环的期望步数是 $O(N^{1/4})$——如果复杂度不计常数的话。</p>
<p>其实最初 Pollard 在 1975 年发表了这个算法，之后再在 1980 年由 Richard Brent 提出了改进。关于 Pollard Rho 算法这个名字，其实非常有意思：进入一个 Floyd 循环的过程，是不是长的很像 $ρ$ 呢？</p>
<p>$*$ 我们不能直接将两个 $N$ 级别的 long long 相乘（带取模的），尽管结果是 long long。可以把 $a\cdot b$ 看成 $b$ 个 $a$ 相加，再用类似快速幂的方法计算，当然快速幂也需要注意这个乘法问题。对了，这样算出来的质因数是无序的哦，需要最后排序去重。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">ll d[<span class="number">100</span>];</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (a&lt;<span class="number">0</span>) <span class="keyword">return</span> gcd(-a,b);</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        ll t=a%b;</span><br><span class="line">        a=b; b=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">cheng</span><span class="params">(ll a,ll b,ll mod)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (a%=mod;b;b&gt;&gt;=<span class="number">1</span>,a=(a+a)%mod)</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>) res+=a,res%=mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll a,ll b,ll mod)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (a%=mod;b;b&gt;&gt;=<span class="number">1</span>,a=cheng(a,a,mod))</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>) res=cheng(res,a,mod);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">9</span>]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MillerRabin</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll w=n<span class="number">-1</span>; <span class="keyword">int</span> lg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (w%<span class="number">2</span>==<span class="number">0</span>) w&gt;&gt;=<span class="number">1</span>,lg++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n==prime[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        ll x=ksm(prime[i],w,n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;lg;j++) &#123;</span><br><span class="line">            ll y=cheng(x,x,n);</span><br><span class="line">            <span class="keyword">if</span> (x!=<span class="number">1</span>&amp;&amp;x!=n<span class="number">-1</span>&amp;&amp;y==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            x=y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x!=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">PollardRho</span><span class="params">(ll n,ll c)</span> </span>&#123;</span><br><span class="line">    ll x=rand()%(n<span class="number">-1</span>)+<span class="number">1</span>,y=x,tmp,i=<span class="number">1</span>,k=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        x=cheng(x,x,n)+c; x%=n;</span><br><span class="line">        tmp=gcd(y-x,n);</span><br><span class="line">        <span class="keyword">if</span> (tmp&gt;<span class="number">1</span>&amp;&amp;tmp&lt;n) <span class="keyword">return</span> tmp;</span><br><span class="line">        <span class="keyword">if</span> (x==y) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span> (i==k) y=x,k&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (MillerRabin(n)) &#123; d[++cnt]=n; <span class="keyword">return</span>; &#125;</span><br><span class="line">    ll tmp=n;</span><br><span class="line">    <span class="keyword">while</span> (tmp==n) tmp=PollardRho(tmp,rand()%(n<span class="number">-1</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">find</span>(tmp);</span><br><span class="line">    <span class="built_in">find</span>(n/tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
</search>
